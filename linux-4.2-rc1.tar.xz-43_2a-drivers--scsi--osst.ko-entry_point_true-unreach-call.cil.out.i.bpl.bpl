var $M.1: [ref]i32;

var $M.2: [ref]i32;

var $M.3: [ref]ref;

var $M.4: [ref]i8;

var $M.5: [ref]i8;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.8: [ref]i32;

var $M.9: [ref]i32;

var $M.10: [ref]i32;

var $M.11: [ref]i32;

var $M.12: ref;

var $M.13: i32;

var $M.14: i32;

var $M.15: i32;

var $M.16: i32;

var $M.17: ref;

var $M.18: [ref]ref;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: [ref]ref;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: [ref]i8;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.41: i32;

var $M.42: [ref]i8;

var $M.43: ref;

var $M.44: ref;

var $M.45: ref;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: ref;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.65: [ref]i8;

var $M.94: [ref]i8;

var $M.95: [ref]i8;

var $M.96: [ref]i8;

var $M.97: [ref]i8;

var $M.98: [ref]i8;

var $M.99: [ref]i8;

var $M.100: [ref]i8;

var $M.101: [ref]i8;

var $M.102: [ref]i8;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $M.106: [ref]i8;

var $M.107: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 491234);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const dev_attr_ADR_rev: ref;

axiom dev_attr_ADR_rev == $sub.ref(0, 2100);

const .str: ref;

axiom .str == $sub.ref(0, 3132);

const osst_fops: ref;

axiom osst_fops == $sub.ref(0, 4380);

const max_sg_segs: ref;

axiom max_sg_segs == $sub.ref(0, 5408);

const write_threshold_kbs: ref;

axiom write_threshold_kbs == $sub.ref(0, 6436);

const max_dev: ref;

axiom max_dev == $sub.ref(0, 7464);

const cvsid: ref;

axiom cvsid == $sub.ref(0, 8496);

const driver_attr_version: ref;

axiom driver_attr_version == $sub.ref(0, 9568);

const osst_buffer_size: ref;

axiom osst_buffer_size == $sub.ref(0, 10596);

const modes_defined: ref;

axiom modes_defined == $sub.ref(0, 11624);

const osst_int_mutex: ref;

axiom osst_int_mutex == $sub.ref(0, 12808);

const osst_sysfs_class: ref;

axiom osst_sysfs_class == $sub.ref(0, 13840);

const osst_write_threshold: ref;

axiom osst_write_threshold == $sub.ref(0, 14868);

const osst_template: ref;

axiom osst_template == $sub.ref(0, 16052);

const osst_max_sg_segs: ref;

axiom osst_max_sg_segs == $sub.ref(0, 17080);

const osst_nr_dev: ref;

axiom osst_nr_dev == $sub.ref(0, 18108);

const osst_max_dev: ref;

axiom osst_max_dev == $sub.ref(0, 19136);

const os_scsi_tapes: ref;

axiom os_scsi_tapes == $sub.ref(0, 20168);

const os_scsi_tapes_lock: ref;

axiom os_scsi_tapes_lock == $sub.ref(0, 21264);

const osst_version: ref;

axiom osst_version == $sub.ref(0, 22296);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 23324);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24352);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 25380);

const osst_template_group0: ref;

axiom osst_template_group0 == $sub.ref(0, 26412);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 27440);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 28468);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 29496);

const osst_fops_group2: ref;

axiom osst_fops_group2 == $sub.ref(0, 30528);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 31556);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 32584);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 33612);

const osst_fops_group1: ref;

axiom osst_fops_group1 == $sub.ref(0, 34644);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 35672);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 36700);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 37728);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 38756);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 39784);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 40812);

const dev_attr_file_count: ref;

axiom dev_attr_file_count == $sub.ref(0, 41884);

const dev_attr_EOD_frame: ref;

axiom dev_attr_EOD_frame == $sub.ref(0, 42956);

const dev_attr_BOT_frame: ref;

axiom dev_attr_BOT_frame == $sub.ref(0, 44028);

const dev_attr_capacity: ref;

axiom dev_attr_capacity == $sub.ref(0, 45100);

const dev_attr_media_version: ref;

axiom dev_attr_media_version == $sub.ref(0, 46172);

const {:count 7} .str.6: ref;

axiom .str.6 == $sub.ref(0, 47203);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 48241);

const {:count 7} .str.7: ref;

axiom .str.7 == $sub.ref(0, 49272);

const {:count 9} .str.2: ref;

axiom .str.2 == $sub.ref(0, 50305);

const {:count 4} .str.8: ref;

axiom .str.8 == $sub.ref(0, 51333);

const {:count 10} .str.3: ref;

axiom .str.3 == $sub.ref(0, 52367);

const {:count 10} .str.4: ref;

axiom .str.4 == $sub.ref(0, 53401);

const {:count 11} .str.5: ref;

axiom .str.5 == $sub.ref(0, 54436);

const {:count 7} .str.10: ref;

axiom .str.10 == $sub.ref(0, 55467);

const {:count 19} .str.31: ref;

axiom .str.31 == $sub.ref(0, 56510);

const {:count 5} .str.28: ref;

axiom .str.28 == $sub.ref(0, 57539);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 28} .str.35: ref;

axiom .str.35 == $sub.ref(0, 58591);

const {:count 47} .str.11: ref;

axiom .str.11 == $sub.ref(0, 59662);

const {:count 61} .str.12: ref;

axiom .str.12 == $sub.ref(0, 60747);

const {:count 44} .str.13: ref;

axiom .str.13 == $sub.ref(0, 61815);

const {:count 28} .str.14: ref;

axiom .str.14 == $sub.ref(0, 62867);

const {:count 66} .str.15: ref;

axiom .str.15 == $sub.ref(0, 63957);

const {:count 66} .str.16: ref;

axiom .str.16 == $sub.ref(0, 65047);

const {:count 7} .str.17: ref;

axiom .str.17 == $sub.ref(0, 66078);

const {:count 4} .str.18: ref;

axiom .str.18 == $sub.ref(0, 67106);

const {:count 4} .str.19: ref;

axiom .str.19 == $sub.ref(0, 68134);

const {:count 12} .str.20: ref;

axiom .str.20 == $sub.ref(0, 69170);

const {:count 5} .str.21: ref;

axiom .str.21 == $sub.ref(0, 70199);

const {:count 2} .str.22: ref;

axiom .str.22 == $sub.ref(0, 71225);

const {:count 2} .str.23: ref;

axiom .str.23 == $sub.ref(0, 72251);

const {:count 44} .str.24: ref;

axiom .str.24 == $sub.ref(0, 73319);

const {:count 3} .str.33: ref;

axiom .str.33 == $sub.ref(0, 74346);

const {:count 47} .str.34: ref;

axiom .str.34 == $sub.ref(0, 75417);

const {:count 43} .str.32: ref;

axiom .str.32 == $sub.ref(0, 76484);

const {:count 9} .str.25: ref;

axiom .str.25 == $sub.ref(0, 77517);

const {:count 4} .str.26: ref;

axiom .str.26 == $sub.ref(0, 78545);

const .str.27: ref;

axiom .str.27 == $sub.ref(0, 79570);

const {:count 4} .str.29: ref;

axiom .str.29 == $sub.ref(0, 80598);

const {:count 4} .str.30: ref;

axiom .str.30 == $sub.ref(0, 81626);

const {:count 25} .str.112: ref;

axiom .str.112 == $sub.ref(0, 82675);

const {:count 15} .str.113: ref;

axiom .str.113 == $sub.ref(0, 83714);

const {:count 8} .str.161: ref;

axiom .str.161 == $sub.ref(0, 84746);

const {:count 4} .str.9: ref;

axiom .str.9 == $sub.ref(0, 85774);

const {:count 52} .str.164: ref;

axiom .str.164 == $sub.ref(0, 86850);

const {:count 7} .str.106: ref;

axiom .str.106 == $sub.ref(0, 87881);

const {:count 23} .str.107: ref;

axiom .str.107 == $sub.ref(0, 88928);

const {:count 21} .str.108: ref;

axiom .str.108 == $sub.ref(0, 89973);

const {:count 22} .str.109: ref;

axiom .str.109 == $sub.ref(0, 91019);

const {:count 19} .str.110: ref;

axiom .str.110 == $sub.ref(0, 92062);

const {:count 2} .str.111: ref;

axiom .str.111 == $sub.ref(0, 93088);

const {:count 34} .str.45: ref;

axiom .str.45 == $sub.ref(0, 94146);

const {:count 37} .str.46: ref;

axiom .str.46 == $sub.ref(0, 95207);

const {:count 36} .str.50: ref;

axiom .str.50 == $sub.ref(0, 96267);

const {:count 35} .str.51: ref;

axiom .str.51 == $sub.ref(0, 97326);

const scsi_command_size_tbl: ref;

axiom scsi_command_size_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 33} .str.53: ref;

axiom .str.53 == $sub.ref(0, 98383);

const {:count 51} .str.54: ref;

axiom .str.54 == $sub.ref(0, 99458);

const {:count 60} .str.55: ref;

axiom .str.55 == $sub.ref(0, 100542);

const {:count 55} .str.56: ref;

axiom .str.56 == $sub.ref(0, 101621);

const {:count 9} .str.52: ref;

axiom .str.52 == $sub.ref(0, 102654);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 43} .str.79: ref;

axiom .str.79 == $sub.ref(0, 103721);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 69} .str.57: ref;

axiom .str.57 == $sub.ref(0, 104814);

const {:count 2} .str.59: ref;

axiom .str.59 == $sub.ref(0, 105840);

const {:count 2} .str.60: ref;

axiom .str.60 == $sub.ref(0, 106866);

const {:count 14} .str.61: ref;

axiom .str.61 == $sub.ref(0, 107904);

const {:count 6} .str.62: ref;

axiom .str.62 == $sub.ref(0, 108934);

const {:count 2} .str.63: ref;

axiom .str.63 == $sub.ref(0, 109960);

const {:count 34} .str.58: ref;

axiom .str.58 == $sub.ref(0, 111018);

const {:count 47} .str.64: ref;

axiom .str.64 == $sub.ref(0, 112089);

const {:count 47} .str.65: ref;

axiom .str.65 == $sub.ref(0, 113160);

const {:count 37} .str.66: ref;

axiom .str.66 == $sub.ref(0, 114221);

const {:count 26} .str.71: ref;

axiom .str.71 == $sub.ref(0, 115271);

const {:count 51} .str.70: ref;

axiom .str.70 == $sub.ref(0, 116346);

const {:count 55} .str.72: ref;

axiom .str.72 == $sub.ref(0, 117425);

const {:count 43} .str.73: ref;

axiom .str.73 == $sub.ref(0, 118492);

const {:count 48} .str.67: ref;

axiom .str.67 == $sub.ref(0, 119564);

const {:count 7} .str.75: ref;

axiom .str.75 == $sub.ref(0, 120595);

const {:count 5} .str.76: ref;

axiom .str.76 == $sub.ref(0, 121624);

const {:count 42} .str.74: ref;

axiom .str.74 == $sub.ref(0, 122690);

const {:count 5} .str.49: ref;

axiom .str.49 == $sub.ref(0, 123719);

const {:count 55} .str.78: ref;

axiom .str.78 == $sub.ref(0, 124798);

const {:count 57} .str.77: ref;

axiom .str.77 == $sub.ref(0, 125879);

const {:count 41} .str.68: ref;

axiom .str.68 == $sub.ref(0, 126944);

const {:count 40} .str.69: ref;

axiom .str.69 == $sub.ref(0, 128008);

const {:count 8} .str.81: ref;

axiom .str.81 == $sub.ref(0, 129040);

const {:count 9} .str.82: ref;

axiom .str.82 == $sub.ref(0, 130073);

const {:count 42} .str.80: ref;

axiom .str.80 == $sub.ref(0, 131139);

const {:count 62} .str.91: ref;

axiom .str.91 == $sub.ref(0, 132225);

const {:count 49} .str.83: ref;

axiom .str.83 == $sub.ref(0, 133298);

const {:count 61} .str.84: ref;

axiom .str.84 == $sub.ref(0, 134383);

const {:count 57} .str.85: ref;

axiom .str.85 == $sub.ref(0, 135464);

const {:count 24} .str.87: ref;

axiom .str.87 == $sub.ref(0, 136512);

const {:count 5} .str.88: ref;

axiom .str.88 == $sub.ref(0, 137541);

const {:count 40} .str.89: ref;

axiom .str.89 == $sub.ref(0, 138605);

const {:count 82} .str.90: ref;

axiom .str.90 == $sub.ref(0, 139711);

const {:count 54} .str.47: ref;

axiom .str.47 == $sub.ref(0, 140789);

const {:count 62} .str.48: ref;

axiom .str.48 == $sub.ref(0, 141875);

const {:count 59} .str.44: ref;

axiom .str.44 == $sub.ref(0, 142958);

const {:count 34} .str.86: ref;

axiom .str.86 == $sub.ref(0, 144016);

const {:count 40} .str.92: ref;

axiom .str.92 == $sub.ref(0, 145080);

const {:count 8} .str.93: ref;

axiom .str.93 == $sub.ref(0, 146112);

const {:count 28} .str.94: ref;

axiom .str.94 == $sub.ref(0, 147164);

const {:count 7} .str.96: ref;

axiom .str.96 == $sub.ref(0, 148195);

const {:count 36} .str.97: ref;

axiom .str.97 == $sub.ref(0, 149255);

const {:count 36} .str.95: ref;

axiom .str.95 == $sub.ref(0, 150315);

const {:count 30} .str.41: ref;

axiom .str.41 == $sub.ref(0, 151369);

const {:count 40} .str.42: ref;

axiom .str.42 == $sub.ref(0, 152433);

const {:count 43} .str.43: ref;

axiom .str.43 == $sub.ref(0, 153500);

const {:count 57} .str.98: ref;

axiom .str.98 == $sub.ref(0, 154581);

const {:count 60} .str.114: ref;

axiom .str.114 == $sub.ref(0, 155665);

const {:count 43} .str.115: ref;

axiom .str.115 == $sub.ref(0, 156732);

const {:count 30} .str.116: ref;

axiom .str.116 == $sub.ref(0, 157786);

const {:count 44} .str.117: ref;

axiom .str.117 == $sub.ref(0, 158854);

const {:count 53} .str.128: ref;

axiom .str.128 == $sub.ref(0, 159931);

const {:count 31} .str.129: ref;

axiom .str.129 == $sub.ref(0, 160986);

const {:count 31} .str.130: ref;

axiom .str.130 == $sub.ref(0, 162041);

const {:count 8} .str.131: ref;

axiom .str.131 == $sub.ref(0, 163073);

const {:count 4} .str.132: ref;

axiom .str.132 == $sub.ref(0, 164101);

const {:count 52} .str.133: ref;

axiom .str.133 == $sub.ref(0, 165177);

const {:count 38} .str.134: ref;

axiom .str.134 == $sub.ref(0, 166239);

const {:count 48} .str.135: ref;

axiom .str.135 == $sub.ref(0, 167311);

const {:count 54} .str.121: ref;

axiom .str.121 == $sub.ref(0, 168389);

const {:count 59} .str.122: ref;

axiom .str.122 == $sub.ref(0, 169472);

const {:count 44} .str.123: ref;

axiom .str.123 == $sub.ref(0, 170540);

const {:count 47} .str.124: ref;

axiom .str.124 == $sub.ref(0, 171611);

const {:count 39} .str.125: ref;

axiom .str.125 == $sub.ref(0, 172674);

const {:count 36} .str.126: ref;

axiom .str.126 == $sub.ref(0, 173734);

const {:count 38} .str.127: ref;

axiom .str.127 == $sub.ref(0, 174796);

const {:count 45} .str.118: ref;

axiom .str.118 == $sub.ref(0, 175865);

const {:count 52} .str.119: ref;

axiom .str.119 == $sub.ref(0, 176941);

const {:count 49} .str.120: ref;

axiom .str.120 == $sub.ref(0, 178014);

const {:count 46} .str.136: ref;

axiom .str.136 == $sub.ref(0, 179084);

const {:count 33} .str.99: ref;

axiom .str.99 == $sub.ref(0, 180141);

const {:count 36} .str.154: ref;

axiom .str.154 == $sub.ref(0, 181201);

const {:count 5} .str.156: ref;

axiom .str.156 == $sub.ref(0, 182230);

const {:count 43} .str.155: ref;

axiom .str.155 == $sub.ref(0, 183297);

const {:count 54} .str.157: ref;

axiom .str.157 == $sub.ref(0, 184375);

const {:count 54} .str.158: ref;

axiom .str.158 == $sub.ref(0, 185453);

const {:count 40} .str.159: ref;

axiom .str.159 == $sub.ref(0, 186517);

const {:count 51} .str.137: ref;

axiom .str.137 == $sub.ref(0, 187592);

const {:count 41} .str.138: ref;

axiom .str.138 == $sub.ref(0, 188657);

const {:count 37} .str.139: ref;

axiom .str.139 == $sub.ref(0, 189718);

const {:count 48} .str.140: ref;

axiom .str.140 == $sub.ref(0, 190790);

const {:count 44} .str.141: ref;

axiom .str.141 == $sub.ref(0, 191858);

const {:count 40} .str.142: ref;

axiom .str.142 == $sub.ref(0, 192922);

const {:count 42} .str.143: ref;

axiom .str.143 == $sub.ref(0, 193988);

const {:count 34} .str.144: ref;

axiom .str.144 == $sub.ref(0, 195046);

const {:count 34} .str.145: ref;

axiom .str.145 == $sub.ref(0, 196104);

const {:count 39} .str.146: ref;

axiom .str.146 == $sub.ref(0, 197167);

const {:count 39} .str.147: ref;

axiom .str.147 == $sub.ref(0, 198230);

const {:count 38} .str.148: ref;

axiom .str.148 == $sub.ref(0, 199292);

const {:count 38} .str.149: ref;

axiom .str.149 == $sub.ref(0, 200354);

const {:count 77} .str.150: ref;

axiom .str.150 == $sub.ref(0, 201455);

const {:count 68} .str.151: ref;

axiom .str.151 == $sub.ref(0, 202547);

const {:count 76} .str.152: ref;

axiom .str.152 == $sub.ref(0, 203647);

const {:count 20} .str.153: ref;

axiom .str.153 == $sub.ref(0, 204691);

const {:count 66} .str.36: ref;

axiom .str.36 == $sub.ref(0, 205781);

const {:count 57} .str.37: ref;

axiom .str.37 == $sub.ref(0, 206862);

const {:count 59} .str.38: ref;

axiom .str.38 == $sub.ref(0, 207945);

const {:count 63} .str.39: ref;

axiom .str.39 == $sub.ref(0, 209032);

const {:count 46} .str.40: ref;

axiom .str.40 == $sub.ref(0, 210102);

const {:count 45} .str.100: ref;

axiom .str.100 == $sub.ref(0, 211171);

const {:count 48} .str.101: ref;

axiom .str.101 == $sub.ref(0, 212243);

const {:count 65} .str.102: ref;

axiom .str.102 == $sub.ref(0, 213332);

const {:count 75} .str.103: ref;

axiom .str.103 == $sub.ref(0, 214431);

const {:count 40} .str.104: ref;

axiom .str.104 == $sub.ref(0, 215495);

const {:count 43} .str.105: ref;

axiom .str.105 == $sub.ref(0, 216562);

const {:count 68} .str.162: ref;

axiom .str.162 == $sub.ref(0, 217654);

const {:count 58} .str.163: ref;

axiom .str.163 == $sub.ref(0, 218736);

const {:count 14} .str.165: ref;

axiom .str.165 == $sub.ref(0, 219774);

const {:count 42} .str.166: ref;

axiom .str.166 == $sub.ref(0, 220840);

const {:count 21} .str.160: ref;

axiom .str.160 == $sub.ref(0, 221885);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 222917);

const {:count 3} .str.1.348: ref;

axiom .str.1.348 == $sub.ref(0, 223944);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 224982);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 226010);

const osst_adr_rev_show: ref;

axiom osst_adr_rev_show == $sub.ref(0, 227042);

procedure osst_adr_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_adr_rev_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.3, $p13);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 32768)), $mul.ref(8, 1));
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.4, $p15);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.3, $p18);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.5, $p20);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $i23 := snprintf.ref.i64.ref.i32.i32($p2, 4096, .str.6, $i17, $i22);
    call {:si_unique_call 2} {:cexpr "tmp___0"} boogie_si_record_i32($i23);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    call {:si_unique_call 3} {:cexpr "l"} boogie_si_record_i64($i24);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb8;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 228074);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 229106);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 230138);

procedure snprintf.ref.i64.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.i32.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32, p.4: i32) returns ($r: i32);



const osst_linux_media_version_show: ref;

axiom osst_linux_media_version_show == $sub.ref(0, 231170);

procedure osst_linux_media_version_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_linux_media_version_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.7, $p13);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i15 := snprintf.ref.i64.ref.i32($p2, 4096, .str.7, $i14);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 7} {:cexpr "l"} boogie_si_record_i64($i16);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;
}



const osst_capacity_show: ref;

axiom osst_capacity_show == $sub.ref(0, 232202);

procedure osst_capacity_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_capacity_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.8, $p13);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i15 := snprintf.ref.i64.ref.i32($p2, 4096, .str.8, $i14);
    call {:si_unique_call 10} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 11} {:cexpr "l"} boogie_si_record_i64($i16);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;
}



const osst_first_data_ppos_show: ref;

axiom osst_first_data_ppos_show == $sub.ref(0, 233234);

procedure osst_first_data_ppos_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_first_data_ppos_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.9, $p13);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i15 := snprintf.ref.i64.ref.i32($p2, 4096, .str.8, $i14);
    call {:si_unique_call 14} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 15} {:cexpr "l"} boogie_si_record_i64($i16);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;
}



const osst_eod_frame_ppos_show: ref;

axiom osst_eod_frame_ppos_show == $sub.ref(0, 234266);

procedure osst_eod_frame_ppos_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_eod_frame_ppos_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.10, $p13);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $i15 := snprintf.ref.i64.ref.i32($p2, 4096, .str.8, $i14);
    call {:si_unique_call 18} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 19} {:cexpr "l"} boogie_si_record_i64($i16);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;
}



const osst_filemark_cnt_show: ref;

axiom osst_filemark_cnt_show == $sub.ref(0, 235298);

procedure osst_filemark_cnt_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_filemark_cnt_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} $p3 := dev_get_drvdata($p0);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.1, $p7);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.2, $p10);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.11, $p13);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i15 := snprintf.ref.i64.ref.i32($p2, 4096, .str.8, $i14);
    call {:si_unique_call 22} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    call {:si_unique_call 23} {:cexpr "l"} boogie_si_record_i64($i16);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb8;
}



const osst_probe: ref;

axiom osst_probe == $sub.ref(0, 236330);

procedure osst_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $M.6, $M.14, $M.18, $M.19, $M.20, $M.21, $CurrAddr, assertsPassed;



implementation osst_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i31: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i43: i32;
  var $i44: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i46: i32;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $i57: i32;
  var $i50: i32;
  var $i45: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i16;
  var $i79: i16;
  var $i80: i8;
  var $i81: i32;
  var $p82: ref;
  var $i83: i64;
  var $i84: i1;
  var $p86: ref;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i16;
  var $i108: i16;
  var $i109: i16;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $i154: i1;
  var $i155: i32;
  var $i143: i32;
  var $i138: i32;
  var $i156: i8;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p184: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i193: i32;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i1;
  var $p199: ref;
  var $p200: ref;
  var $i202: i32;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i198: i32;
  var $p211: ref;
  var $i28: i32;
  var $i9: i32;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 472), 3496));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(232, 1));
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.6, $p5);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i7 := $sext.i8.i32($i6);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 1);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i10 := osst_supports($p4);
    call {:si_unique_call 27} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p12 := alloc_disk(1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} _raw_write_lock(os_scsi_tapes_lock);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p16 := $M.12;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i38 := $M.14;
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i39 := $M.13;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i40 := $sge.i32($i38, $i39);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i43 := $M.13;
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32(0, $i43);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i45 := 0;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i58 := $M.13;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i59 := $sge.i32($i45, $i58);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p60 := kmalloc(800, 32);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(0, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 3832)), $mul.ref(818, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.6, $p67);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    call {:si_unique_call 43} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i70 := $M.15;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i70, $i69);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i69;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(0, 1));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.6, $p74);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 3832)), $mul.ref(856, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.6, $p76);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i78 := $lshr.i16($i77, 2);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i79 := $and.i16($i78, 1);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i16.i8($i79);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} $p82 := new_tape_buffer(1, $i81, $i73);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i83, 0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p87 := $M.12;
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i88 := $sext.i32.i64($i45);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p87, $mul.ref($i88, 8));
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p89, $p60);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p90, $p82);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p91, $p4);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(0, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p12, $mul.ref(0, 1752)), $mul.ref(1680, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p94, $p60);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p12, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} vslice_dummy_var_160 := sprintf.ref.ref.i32($p96, .str.17, $i45);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p98, osst_template);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(792, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p99, $p12);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(620, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p100, 0);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, 1048575);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p102, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(624, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 1);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(0, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.6, $p104);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 3832)), $mul.ref(856, 1));
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.6, $p106);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i108 := $lshr.i16($i107, 2);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i109 := $and.i16($i108, 1);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i16.i8($i109);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(294, 1));
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p111, $i110);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p112, 0);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p113, 0);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p114, 1);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p115, 0);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(292, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p116, 0);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(293, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p117, 0);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(295, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p118, 0);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $i119 := $M.16;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(300, 1));
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p120, $i119);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(296, 1));
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p121, $sub.i8(0, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p122, 0);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p123, 0);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p124, 0);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(636, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p125, 512);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(640, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p126, 32768);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p127, 50000);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(308, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p128, 450000);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(264, 1));
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.6, $p129);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i131 := osst_parse_firmware_rev($p130);
    call {:si_unique_call 51} {:cexpr "tmp___2"} boogie_si_record_i32($i131);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(664, 1));
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p132, $i131);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p133, 1);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(256, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.6, $p134);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i136 := strncmp($p135, .str.18, 3);
    call {:si_unique_call 53} {:cexpr "tmp___3"} boogie_si_record_i32($i136);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i137 == 1);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(256, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.6, $p139);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i141 := strncmp($p140, .str.19, 3);
    call {:si_unique_call 55} {:cexpr "tmp___4"} boogie_si_record_i32($i141);
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i142 == 1);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(664, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.6, $p144);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i146 := $sgt.i32($i145, 10600);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i146} true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i146 == 1);
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i155 := 0;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i143 := $i155;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i138 := $i143;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i138);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(669, 1));
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p157, $i156);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p158, 0);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p159, 0);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p160, 0);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p161, $0.ref);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p164, 0);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(1, 1));
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p165, 0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(5, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p166, 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(2, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p167, 1);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(3, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p168, 1);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p169, 1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(6, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p170, 0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(12, 1));
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p171, 512);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p163, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p172, $sub.i16(0, 1));
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p239);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(0, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p242, 0);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(1, 1));
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p243, 0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(5, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p244, 0);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(2, 1));
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p245, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(3, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p246, 1);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(4, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p247, 1);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(6, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p248, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(12, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p249, 512);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p240, $mul.ref(1, 56)), $mul.ref(8, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p250, $sub.i16(0, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p252 := $bitcast.ref.ref($p251);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p254, 0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(1, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p255, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(5, 1));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p256, 0);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(2, 1));
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p257, 1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(3, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p258, 1);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(4, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p259, 1);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(6, 1));
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p260, 0);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(12, 1));
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p261, 512);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p252, $mul.ref(2, 56)), $mul.ref(8, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p262, $sub.i16(0, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p264 := $bitcast.ref.ref($p263);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(0, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p266, 0);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(1, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p267, 0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(5, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p268, 0);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(2, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p269, 1);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(3, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p270, 1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(4, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p271, 1);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(6, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p272, 0);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(12, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p273, 512);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p264, $mul.ref(3, 56)), $mul.ref(8, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p274, $sub.i16(0, 1));
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p173);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p175, 0);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p176, 0);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p177, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p178, 0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p179, $sub.i32(0, 1));
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p174, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p180, $sub.i32(0, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p215, 0);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p216, 0);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p217, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p218, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p219, $sub.i32(0, 1));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p213, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p220, $sub.i32(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p224, 0);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p225, 0);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p226, 0);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p227, 0);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p228, $sub.i32(0, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p222, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p229, $sub.i32(0, 1));
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p233, 0);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p234, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p235, 0);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p236, 0);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p237, $sub.i32(0, 1));
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p231, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p238, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p181, 0);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p184, 1);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(312, 1)), $mul.ref(2, 56)), $mul.ref(0, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p187, 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(621, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p188, 0);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(623, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p189, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(622, 1));
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p190, 0);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} __mutex_init($p191, .str.20, $p1);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i192 := $M.14;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i193 := $add.i32($i192, 1);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.14 := $i193;
    call {:si_unique_call 57} {:cexpr "osst_nr_dev"} boogie_si_record_i32($i193);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p194 := tape_name($p61);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i195 := $or.i32($i45, 216006656);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i196 := osst_sysfs_add($i195, $p0, $p61, $p194);
    call {:si_unique_call 61} {:cexpr "err"} boogie_si_record_i32($i196);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i197 := $ne.i32($i196, 0);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $p199 := tape_name($p61);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p2);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} vslice_dummy_var_161 := snprintf.ref.i64.ref.ref.ref($p200, 8, .str.21, .str.22, $p199);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i202 := $add.i32($i45, 128);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i203 := $or.i32($i202, 216006656);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p2);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i205 := osst_sysfs_add($i203, $p0, $p61, $p204);
    call {:si_unique_call 66} {:cexpr "err"} boogie_si_record_i32($i205);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i206 := $ne.i32($i205, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $p207 := tape_name($p61);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(256, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.6, $p208);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} sdev_prefix_printk.ref.ref.ref.ref.ref.ref(.str.23, $p4, $0.ref, .str.24, $p209, $p207);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb77:
    assume $i206 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i210 := $or.i32($i45, 216006656);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} osst_sysfs_destroy($i210);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i198 := $i205;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p82);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} kfree($p211);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i28 := $i198;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} put_disk($p12);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i9 := $i28;
    goto $bb3;

  $bb73:
    assume $i197 == 1;
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i198 := $i196;
    goto $bb75;

  $bb57:
    assume $i146 == 1;
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p61, $mul.ref(0, 800)), $mul.ref(664, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.6, $p147);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i149 := $sle.i32($i148, 10704);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb59;

  $bb60:
    assume $i149 == 1;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(0, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.6, $p150);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 3832)), $mul.ref(808, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.6, $p152);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i154 := $ne.i32($i153, 7);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i154 == 1);
    goto $bb59;

  $bb62:
    assume $i154 == 1;
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i155 := 1;
    goto $bb64;

  $bb54:
    assume $i142 == 1;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i143 := 1;
    goto $bb56;

  $bb51:
    assume $i137 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i138 := 1;
    goto $bb53;

  $bb48:
    assume $i84 == 1;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} vslice_dummy_var_159 := printk.ref(.str.16);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p61);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} kfree($p86);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb15;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i71 == 1;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i72 := $M.15;
    call {:si_unique_call 44} {:cexpr "i"} boogie_si_record_i32($i72);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i73 := $i72;
    goto $bb47;

  $bb42:
    assume $i63 == 1;
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_158 := printk.ref(.str.15);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb15;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i59 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} panic.ref(.str.14);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb29:
    assume $i44 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb32;

  $bb32:
    call $i47, $i48, $i49, $i46, $p51, $i52, $p53, $p54, $i55, $i56, $i57, $i50 := osst_probe_loop_$bb32($i47, $i48, $i49, $i46, $p51, $i52, $p53, $p54, $i55, $i56, $i57, $i50);
    goto $bb32_last;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p51 := $M.12;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i46);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p51, $mul.ref($i52, 8));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $i57 := $i46;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i45 := $i57;
    goto $bb31;

  $bb36:
    assume $i56 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, 1);
    call {:si_unique_call 38} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i48 := $M.13;
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i47, $i48);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i50 := $i47;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $i45 := $i50;
    goto $bb31;

  $bb34:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i47;
    goto $bb34_dummy;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i41 := $M.13;
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_157 := printk.ref.i32(.str.13, $i41);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb15;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $i19 := $M.13;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i21 := $mul.i64($i20, 8);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $p22 := kmalloc($i21, 32);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.12 := $p22;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p24 := $M.12;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i29 := $M.13;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32(0, $i29);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb20;

  $bb20:
    call $p32, $i33, $p34, $i35, $i36, $i37, $i31 := osst_probe_loop_$bb20($p32, $i33, $p34, $i35, $i36, $i37, $i31);
    goto $bb20_last;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p32 := $M.12;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p32, $mul.ref($i33, 8));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p34, $0.ref);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i31, 1);
    call {:si_unique_call 35} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i36 := $M.13;
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i35, $i36);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i37 == 1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb22:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i31 := $i35;
    goto $bb22_dummy;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_156 := printk.ref(.str.12);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb15;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_155 := printk.ref(.str.11);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 19);
    goto $bb3;

  $bb34_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  $bb22_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;
}



const osst_remove: ref;

axiom osst_remove == $sub.ref(0, 237362);

procedure osst_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.14;



implementation osst_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 472), 3496));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 472), 3496)), $mul.ref(232, 1));
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 1);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i7 := $M.14;
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i7, 0);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} _raw_write_lock(os_scsi_tapes_lock);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i9 := $M.13;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32(0, $i9);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    call $p12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $i20, $i21, $i22, $i23, $p24, $i49, $i50, $i51, $i11 := osst_remove_loop_$bb11($p2, $p12, $i13, $p14, $p15, $i16, $i17, $p18, $p19, $i20, $i21, $i22, $i23, $p24, $i49, $i50, $i51, $i11);
    goto $bb11_last;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p12 := $M.12;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i11);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 8));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i11, 1);
    call {:si_unique_call 80} {:cexpr "i"} boogie_si_record_i32($i49);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i50 := $M.13;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i49, $i50);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb22:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i49;
    goto $bb22_dummy;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p2);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i20, $i21);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i23, $p24 := $i11, $p15;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb16:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i23, 216006656);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} osst_sysfs_destroy($i25);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i23, 128);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 216006656);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} osst_sysfs_destroy($i27);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p28, $0.ref);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(792, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} put_disk($p30);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p31 := $M.12;
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i23);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 8));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, $0.ref);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i34 := $M.14;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i34, 1);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $M.14 := $i35;
    call {:si_unique_call 74} {:cexpr "osst_nr_dev"} boogie_si_record_i32($i35);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.6, $p36);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} vfree($p38);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p40);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p24);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} kfree($p48);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb18:
    assume $i42 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} normalize_buffer($p44);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p24, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} kfree($p47);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb22_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;
}



const _raw_write_lock: ref;

axiom _raw_write_lock == $sub.ref(0, 238394);

procedure _raw_write_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    return;
}



const osst_sysfs_destroy: ref;

axiom osst_sysfs_destroy == $sub.ref(0, 239426);

procedure osst_sysfs_destroy($i0: i32);
  free requires assertsPassed;



implementation osst_sysfs_destroy($i0: i32)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} {:cexpr "osst_sysfs_destroy:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p1 := $M.17;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} device_destroy($p1, $i0);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    return;
}



const put_disk: ref;

axiom put_disk == $sub.ref(0, 240458);

procedure put_disk($p0: ref);
  free requires assertsPassed;



implementation put_disk($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    return;
}



const _raw_write_unlock: ref;

axiom _raw_write_unlock == $sub.ref(0, 241490);

procedure _raw_write_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_write_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 242522);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    return;
}



const normalize_buffer: ref;

axiom normalize_buffer == $sub.ref(0, 243554);

procedure normalize_buffer($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation normalize_buffer($p0: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i13: i32;
  var $i14: i32;
  var $i19: i32;
  var $i12: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $i36: i32;
  var $i37: i1;
  var $i5: i32;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.6, $p1);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(132, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p38, 0);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p39, 0);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p9, $i10, $i11, $i15, $i16, $i17, $i18, $i13, $i14, $i19, $i12, $p20, $p21, $i22, $p23, $p24, $p25, $i26, $i27, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i5 := normalize_buffer_loop_$bb4($p0, $p1, $i6, $p9, $i10, $i11, $i15, $i16, $i17, $i18, $i13, $i14, $i19, $i12, $p20, $p21, $i22, $p23, $p24, $p25, $i26, $i27, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i5);
    goto $bb4_last;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i6, 40)), $mul.ref(20, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i11 := $ult.i32(4096, $i10);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i5);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 40));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p24 := sg_page($p23);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} __free_pages($p24, $i12);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i5);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i27, 40)), $mul.ref(20, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i26, $i31);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i32);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i5, 1);
    call {:si_unique_call 88} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.6, $p1);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i34);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i34;
    goto $bb14_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i13, $i14 := 4096, 0;
    goto $bb9;

  $bb9:
    call $i15, $i16, $i17, $i18, $i13, $i14, $i19 := normalize_buffer_loop_$bb9($p9, $i15, $i16, $i17, $i18, $i13, $i14, $i19);
    goto $bb9_last;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i13, 2);
    call {:si_unique_call 84} {:cexpr "b_size"} boogie_si_record_i32($i15);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i14, 1);
    call {:si_unique_call 85} {:cexpr "order"} boogie_si_record_i32($i16);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p9);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i18 := $ult.i32($i15, $i17);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $i19 := $i16;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb8;

  $bb11:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i13, $i14 := $i15, $i16;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  $bb14_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 244586);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} free_($p0);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 245618);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 90} $free($p0);
    return;
}



const sg_page: ref;

axiom sg_page == $sub.ref(0, 246650);

procedure sg_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_page($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.6, $p1);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 2271560481);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 92} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.6, $p8);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $i12 := $and.i64($i11, 1);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i64($i13);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.6, $p15);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 4));
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p18 := $i2p.i64.ref($i17);
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i14 == 1;
    call {:si_unique_call 96} devirtbounce(0, .str.35, 124, 12);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 93} devirtbounce(0, .str.35, 123, 12);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_page_loop_$bb3();
    goto $bb3_last;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 247682);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 248714);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 99} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 249746);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    return;
}



const osst_supports: ref;

axiom osst_supports == $sub.ref(0, 250778);

procedure osst_supports($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $CurrAddr;



implementation osst_supports($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p55: ref;
  var $i83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p1 := $alloc($mul.ref(192, $zext.i32.i64(1)));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p3, .str.25);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p5, .str.26);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p7, .str.27);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p9, .str.28);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p11, .str.25);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p13, .str.18);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p15, .str.27);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p17, .str.28);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1));
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p19, .str.25);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p21, .str.29);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p23, .str.27);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1));
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p25, .str.28);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p27, .str.25);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p29, .str.19);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p31, .str.27);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p33, .str.28);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p35, .str.25);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p37, .str.30);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p39, .str.27);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1));
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p41, .str.28);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.18 := $store.ref($M.18, $p43, $0.ref);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p45, $0.ref);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1));
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p47, $0.ref);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1));
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p49, $0.ref);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p1);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.18, $p51);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $r := $i83;
    return;

  $bb1:
    assume $i54 == 1;
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $p55 := $p1;
    goto $bb4;

  $bb4:
    call $p56, $p57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $i73, $p74, $p75, $i76, $p77, $p78, $p79, $p80, $i81, $i82, $p84, $p85, $p86, $i87, $i88, $p55 := osst_supports_loop_$bb4($p0, $p56, $p57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p65, $p66, $i67, $p68, $p69, $p70, $p71, $i72, $i73, $p74, $p75, $i76, $p77, $p78, $p79, $p80, $i81, $i82, $p84, $p85, $p86, $i87, $i88, $p55);
    goto $bb4_last;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.18, $p56);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i58 := strlen($p57);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64($i58);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.18, $p59);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(248, 1));
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i63 := strncmp($p60, $p62, $i58);
    call {:si_unique_call 105} {:cexpr "tmp___0"} boogie_si_record_i32($i63);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p55, $mul.ref(1, 32));
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p55, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.18, $p85);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i88 == 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $p55 := $p84;
    goto $bb16_dummy;

  $bb6:
    assume $i64 == 1;
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.19, $p65);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} $i67 := strlen($p66);
    call {:si_unique_call 107} {:cexpr "tmp___1"} boogie_si_record_i64($i67);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.19, $p68);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(256, 1));
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.6, $p70);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i72 := strncmp($p69, $p71, $i67);
    call {:si_unique_call 109} {:cexpr "tmp___2"} boogie_si_record_i32($i72);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i73 == 1;
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.20, $p74);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i76 := strlen($p75);
    call {:si_unique_call 111} {:cexpr "tmp___3"} boogie_si_record_i64($i76);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.20, $p77);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 3496)), $mul.ref(264, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.6, $p79);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} $i81 := strncmp($p78, $p80, $i76);
    call {:si_unique_call 113} {:cexpr "tmp___4"} boogie_si_record_i32($i81);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb10:
    assume $i82 == 1;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i83 := 1;
    goto $bb12;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;
}



const alloc_disk: ref;

axiom alloc_disk == $sub.ref(0, 251810);

procedure alloc_disk($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_disk($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} {:cexpr "alloc_disk:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p1 := external_alloc();
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 252842);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 1} true;
    call {:si_unique_call 116} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 117} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 1} true;
    call {:si_unique_call 118} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 119} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 1} true;
    call {:si_unique_call 120} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 121} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i64.i32.i32($p0: ref, p.1: ref, p.2: i64, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 122} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 123} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 1} true;
    call {:si_unique_call 126} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 127} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 1} true;
    call {:si_unique_call 128} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 129} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 1} true;
    call {:si_unique_call 130} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 131} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref($p0: ref, p.1: ref, p.2: i32, p.3: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.ref.ref($p0: ref, p.1: ref, p.2: ref, p.3: ref, p.4: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 253874);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 141} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 142} ldv_check_alloc_flags($i1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $p2 := ldv_undef_ptr();
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const panic: ref;

axiom panic == $sub.ref(0, 254906);

procedure panic.ref($p0: ref);
  free requires assertsPassed;



implementation panic.ref($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    return;
}



const new_tape_buffer: ref;

axiom new_tape_buffer == $sub.ref(0, 255938);

procedure new_tape_buffer($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation new_tape_buffer($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i16;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $p24: ref;
  var $p25: ref;
  var $p17: ref;
  var vslice_dummy_var_162: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} {:cexpr "new_tape_buffer:arg:from_initialization"} boogie_si_record_i32($i0);
    call {:si_unique_call 145} {:cexpr "new_tape_buffer:arg:need_dma"} boogie_si_record_i32($i1);
    call {:si_unique_call 146} {:cexpr "new_tape_buffer:arg:max_sg"} boogie_si_record_i32($i2);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 208;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i5 := $M.15;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 40);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 176);
    call {:si_unique_call 147} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $p12 := kmalloc($i11, $i4);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(132, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p18, 0);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p19, 0);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i2);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p21, $i20);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 1);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(1, 1));
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, $i23);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} vslice_dummy_var_162 := printk.ref(.str.32);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb6;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i4 := 32;
    goto $bb3;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 256970);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const osst_parse_firmware_rev: ref;

axiom osst_parse_firmware_rev == $sub.ref(0, 258002);

procedure osst_parse_firmware_rev($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation osst_parse_firmware_rev($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.6, $p1);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 46);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i23 := $sext.i8.i32($i22);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i24 := $mul.i32($i23, 10000);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $sub.i32(0, 480000));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p0, $mul.ref(1, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i29 := $mul.i32($i28, 1000);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, $sub.i32(0, 48000));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i25, $i30);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i33);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, 100);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $sub.i32(0, 4800));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i31, $i36);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, $sub.i32(0, 100));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i41 := $sext.i8.i32($i40);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $sub.i32(0, 64));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i38, $i42);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i21 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i6, 10000);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $sub.i32(0, 480000));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p0, $mul.ref(2, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.6, $p9);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i11 := $sext.i8.i32($i10);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 1000);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $sub.i32(0, 48000));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, $i13);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p0, $mul.ref(3, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i17 := $sext.i8.i32($i16);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i18 := $mul.i32($i17, 100);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, $sub.i32(0, 4800));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i14, $i19);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb3;
}



const strncmp: ref;

axiom strncmp == $sub.ref(0, 259034);

procedure strncmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 260066);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    return;
}



const tape_name: ref;

axiom tape_name == $sub.ref(0, 261098);

procedure tape_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tape_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(792, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1752)), $mul.ref(12, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const osst_sysfs_add: ref;

axiom osst_sysfs_add == $sub.ref(0, 262130);

procedure osst_sysfs_add($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation osst_sysfs_add($i0: i32, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i18: i32;
  var $i15: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} {:cexpr "osst_sysfs_add:arg:dev"} boogie_si_record_i32($i0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p4 := $M.17;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $p6 := device_create.ref.ref.i32.ref.ref.ref($p4, $p1, $i0, $p5, .str.33, $p3);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} $i8 := IS_ERR($p7);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 153} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $i16 := device_create_file($p6, dev_attr_ADR_rev);
    call {:si_unique_call 158} {:cexpr "err"} boogie_si_record_i32($i16);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i19 := device_create_file($p6, dev_attr_media_version);
    call {:si_unique_call 161} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i21 := device_create_file($p6, dev_attr_capacity);
    call {:si_unique_call 163} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i23 := device_create_file($p6, dev_attr_BOT_frame);
    call {:si_unique_call 165} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $i25 := device_create_file($p6, dev_attr_EOD_frame);
    call {:si_unique_call 167} {:cexpr "err"} boogie_si_record_i32($i25);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i27 := device_create_file($p6, dev_attr_file_count);
    call {:si_unique_call 169} {:cexpr "err"} boogie_si_record_i32($i27);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb21:
    assume $i28 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} osst_sysfs_destroy($i0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb3;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i18 := $i25;
    goto $bb7;

  $bb15:
    assume $i24 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i18 := $i23;
    goto $bb7;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb7;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i18 := $i19;
    goto $bb7;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i18 := $i16;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} vslice_dummy_var_163 := printk.ref.ref(.str.34, $p3);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p6);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $i13 := PTR_ERR($p12);
    call {:si_unique_call 156} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const sdev_prefix_printk: ref;

axiom sdev_prefix_printk == $sub.ref(0, 263162);

procedure sdev_prefix_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref);
  free requires assertsPassed;



implementation sdev_prefix_printk.ref.ref.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, $p3: ref, p.4: ref, p.5: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    return;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 264194);

procedure device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.ref($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $p5 := external_alloc();
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 265226);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $i1 := ldv_is_err($p0);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 173} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 266258);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 175} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 267290);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 176} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 177} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 268322);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 269354);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 270386);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 178} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 179} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 271418);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 272450);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 273482);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} __VERIFIER_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const strlen: ref;

axiom strlen == $sub.ref(0, 274514);

procedure strlen($p0: ref) returns ($r: i64);



const osst_version_show: ref;

axiom osst_version_show == $sub.ref(0, 275546);

procedure osst_version_show($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation osst_version_show($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p2 := $M.23;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i3 := snprintf.ref.i64.ref.ref($p1, 4096, .str.9, $p2);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 276578);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 187} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 188} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 1} true;
    call {:si_unique_call 189} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 190} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const osst_read: ref;

axiom osst_read == $sub.ref(0, 277610);

procedure osst_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i64;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i76: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i32;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $p146: ref;
  var $i147: i64;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $i164: i32;
  var $i165: i64;
  var $i167: i64;
  var $i166: i64;
  var $p168: ref;
  var $i169: i32;
  var $i170: i64;
  var $i171: i64;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $i175: i64;
  var $i176: i1;
  var $i177: i64;
  var $p178: ref;
  var $i179: i32;
  var $i180: i1;
  var $p181: ref;
  var $i182: i32;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i183: i32;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $i190: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $i196: i64;
  var $i197: i64;
  var $i198: i1;
  var $i199: i64;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $i204: i64;
  var $i205: i64;
  var $i206: i32;
  var $i207: i32;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $i213: i64;
  var $i214: i64;
  var $i215: i32;
  var $i216: i32;
  var $p217: ref;
  var $i218: i64;
  var $i219: i64;
  var $p220: ref;
  var $i221: i64;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $i234: i32;
  var $i235: i64;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $i127: i32;
  var $p128: ref;
  var $i129: i64;
  var $i240: i1;
  var $i241: i64;
  var $i239: i64;
  var $i126: i64;
  var $i140: i64;
  var $i242: i1;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i32;
  var $p249: ref;
  var $i250: i32;
  var $i251: i1;
  var $i252: i32;
  var $i253: i8;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i32;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i8;
  var $i281: i32;
  var $i282: i1;
  var $p283: ref;
  var $p284: ref;
  var $i285: i8;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $i18: i64;
  var $p289: ref;
  var $i290: i64;
  var $i291: i1;
  var $p292: ref;
  var $p293: ref;
  var $i13: i64;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 193} {:cexpr "osst_read:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $0.ref);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p9 := tape_name($p8);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} $i11 := mutex_lock_interruptible_nested($p10, 0);
    call {:si_unique_call 196} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i16 := scsi_block_when_processing_errors($p15);
    call {:si_unique_call 198} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(0, 1));
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(0, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.6, $p58);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 2);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $i69 := $urem.i64($i2, $i68);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.6, $p85);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p4);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i105 := copy_from_user($p104, $p1, 1);
    call {:si_unique_call 206} {:cexpr "tmp___4"} boogie_si_record_i64($i105);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i106 == 1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p4);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i108 := copy_to_user($p1, $p107, 1);
    call {:si_unique_call 208} {:cexpr "tmp___5"} boogie_si_record_i64($i108);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i109 == 1);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p4);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i111 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p1, $mul.ref($i111, 1));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i113 := copy_from_user($p110, $p112, 1);
    call {:si_unique_call 210} {:cexpr "tmp___6"} boogie_si_record_i64($i113);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i114 == 1);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i115 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p1, $mul.ref($i115, 1));
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p4);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $i118 := copy_to_user($p116, $p117, 1);
    call {:si_unique_call 212} {:cexpr "tmp___7"} boogie_si_record_i64($i118);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.6, $p120);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i122 := $sext.i32.i64($i121);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i123 := $sub.i64($i2, $i122);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i124 := $add.i64($i123, 1);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i125 := $ult.i64(0, $i124);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i126 := 0;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i140 := $i126;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i242 := $eq.i64($i140, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i242 == 1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.6, $p284);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 2);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i18 := $i140;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.24, $p5);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p289);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $i291 := $ne.i64($i290, 0);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} mutex_unlock($p293);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb125:
    assume $i291 == 1;
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.24, $p5);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} osst_release_request($p292);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i287 == 1;
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p288, 0);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb101:
    assume $i242 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.6, $p243);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i246 == 1);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.6, $p263);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i32($i264);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 5);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i266 == 1);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.6, $p279);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 6);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i282 == 1;
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p283, 7);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb109:
    assume $i266 == 1;
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p267, 6);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.6, $p268);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i270 := $sgt.i32($i269, 0);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p278, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb111:
    assume $i270 == 1;
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.6, $p271);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i273 := $sge.i32($i272, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb113;

  $bb114:
    assume $i273 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.6, $p274);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i276 := $add.i32($i275, 1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p277, $i276);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb103:
    assume $i246 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i248 := $load.i32($M.6, $p247);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.6, $p249);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i251 := $uge.i32($i248, $i250);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i252 := (if $i251 == 1 then 6 else 2);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i253 := $trunc.i32.i8($i252);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p254, $i253);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p255, 0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i257 := $load.i32($M.6, $p256);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i258 := $sge.i32($i257, 0);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb105:
    assume $i258 == 1;
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.6, $p259);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i261 := $add.i32($i260, 1);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(12, 1));
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p262, $i261);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb63:
    assume $i125 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i127, $p128, $i129 := 0, $p1, 0;
    goto $bb66;

  $bb66:
    call $p130, $p131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p141, $i142, $i143, $i144, $i145, $i148, $p149, $p150, $p151, $i152, $i153, $p154, $p155, $p156, $i157, $i158, $i159, $i160, $p161, $p162, $p163, $i164, $i165, $i167, $i166, $p168, $i169, $i170, $i171, $p172, $i173, $i174, $i175, $i176, $i177, $p192, $p193, $i194, $i195, $i196, $i197, $i198, $p200, $i201, $p202, $i203, $i204, $i205, $i206, $i207, $p208, $p209, $i210, $p211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $p224, $p225, $p226, $i227, $i228, $p229, $p230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $i127, $p128, $i129, $i240, $i241, $i239 := osst_read_loop_$bb66($i2, $p3, $p4, $p5, $p8, $p53, $i56, $p120, $p130, $p131, $p132, $i133, $i134, $p135, $i136, $i137, $i138, $i139, $p141, $i142, $i143, $i144, $i145, $i148, $p149, $p150, $p151, $i152, $i153, $p154, $p155, $p156, $i157, $i158, $i159, $i160, $p161, $p162, $p163, $i164, $i165, $i167, $i166, $p168, $i169, $i170, $i171, $p172, $i173, $i174, $i175, $i176, $i177, $p192, $p193, $i194, $i195, $i196, $i197, $i198, $p200, $i201, $p202, $i203, $i204, $i205, $i206, $i207, $p208, $p209, $i210, $p211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $p220, $i221, $i222, $p223, $p224, $p225, $p226, $i227, $i228, $p229, $p230, $i231, $i232, $p233, $i234, $i235, $i236, $i237, $i238, $i127, $p128, $i129, $i240, $i241, $i239);
    goto $bb66_last;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i127, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i241 := $i129;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i126 := $i241;
    goto $bb65;

  $bb98:
    assume $i240 == 1;
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.6, $p130);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.6, $p132);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i134 := $eq.i32($i133, 0);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i127;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.6, $p149);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.6, $p151);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i153 := $sgt.i32($i152, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    $i222, $p223 := $i129, $p128;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.6, $p224);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.6, $p226);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i228 := $eq.i32($i227, 0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.6, $p120);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i235 := $sext.i32.i64($i234);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i236 := $sub.i64($i2, $i235);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i237 := $add.i64($i236, 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i238 := $ult.i64($i222, $i237);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i239 := $i222;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i126 := $i239;
    goto $bb65;

  $bb96:
    assume $i238 == 1;
    assume {:verifier.code 0} true;
    $i127, $p128, $i129 := $i148, $p223, $i222;
    goto $bb96_dummy;

  $bb93:
    assume $i228 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p229, 0);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i231 := $load.i32($M.6, $p230);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i231, 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p233, $i232);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb78:
    assume $i153 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.6, $p154);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.6, $p156);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i159 := $sub.i64($i2, $i129);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $i160 := $ult.i64($i158, $i159);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i160 == 1);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i167 := $sub.i64($i2, $i129);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i166 := $i167;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $i170 := $sext.i32.i64($i169);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i171 := $udiv.i64($i166, $i170);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.6, $p172);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i173);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i175 := $mul.i64($i171, $i174);
    call {:si_unique_call 216} {:cexpr "transfer"} boogie_si_record_i64($i175);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i176 := $eq.i64($i175, 0);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i177 := $i129;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.6, $p192);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i64.i32($i175);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $i195 := from_buffer($p193, $p128, $i194);
    call {:si_unique_call 219} {:cexpr "tmp___8"} boogie_si_record_i32($i195);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, $i196);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.6, $p4);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i197, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.6, $p200);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.6, $p202);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i204 := $sext.i32.i64($i203);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i205 := $sdiv.i64($i175, $i204);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i64.i32($i205);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i207 := $add.i32($i201, $i206);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p208, $i207);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.6, $p209);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.6, $p211);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i213 := $sext.i32.i64($i212);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i214 := $sdiv.i64($i175, $i213);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i64.i32($i214);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i216 := $add.i32($i210, $i215);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p217, $i216);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i218 := $load.i64($M.6, $p3);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i219 := $add.i64($i218, $i175);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i219);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($p128, $mul.ref($i175, 1));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i221 := $add.i64($i129, $i175);
    call {:si_unique_call 221} {:cexpr "total"} boogie_si_record_i64($i221);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i222, $p223 := $i221, $p220;
    goto $bb92;

  $bb89:
    assume $i198 == 1;
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i199 := $load.i64($M.6, $p4);
    call {:si_unique_call 220} {:cexpr "retval"} boogie_si_record_i64($i199);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i18 := $i199;
    goto $bb7;

  $bb83:
    assume $i176 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.6, $p178);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i180 := $sle.i32($i179, 1023);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i180 == 1);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.6, $p184);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i186 := $sdiv.i32($i185, 1024);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i183 := $i186;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.6, $p187);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i189 := $sle.i32($i188, 1023);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i190 := (if $i189 == 1 then 98 else 107);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_165 := printk.ref.ref.i64.i32.i32(.str.103, $p9, $i2, $i183, $i190);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i140 := $i177;
    goto $bb72;

  $bb85:
    assume $i180 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.6, $p181);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i183 := $i182;
    goto $bb87;

  $bb80:
    assume $i160 == 1;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.6, $p161);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.6, $p163);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i165 := $sext.i32.i64($i164);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i166 := $i165;
    goto $bb82;

  $bb68:
    assume $i134 == 1;
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.6, $p135);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 1);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i139 := $i129;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.6, $p141);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i143 := osst_get_logical_frame($p8, $p5, $i142, 0);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 214} {:cexpr "special"} boogie_si_record_i32($i143);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i145 := $i143;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i148 := $i143;
    goto $bb77;

  $bb74:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p146, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i147 := $sext.i32.i64($i145);
    call {:si_unique_call 215} {:cexpr "retval"} boogie_si_record_i64($i147);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i18 := $i147;
    goto $bb7;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i138 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i140 := $i139;
    goto $bb72;

  $bb57:
    assume $i119 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb55:
    assume $i114 == 1;
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb53:
    assume $i109 == 1;
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb51:
    assume $i106 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb42:
    assume $i89 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.6, $p90);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i93 := $ugt.i32($i92, 4);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb44;

  $bb45:
    assume $i93 == 1;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.6, $p94);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i97 := $ule.i32($i96, 6);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb47:
    assume $i97 == 1;
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.6, $p98);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, $i102);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb36:
    assume $i70 == 1;
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.6, $p71);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i73 := $sle.i32($i72, 1023);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i73 == 1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.6, $p77);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i79 := $sdiv.i32($i78, 1024);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i76 := $i79;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.6, $p80);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i82 := $sle.i32($i81, 1023);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i83 := (if $i82 == 1 then 98 else 107);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} vslice_dummy_var_164 := printk.ref.ref.i64.i32.i32(.str.102, $p9, $i2, $i76, $i83);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb38:
    assume $i73 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.6, $p74);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb40;

  $bb30:
    assume $i61 == 1;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i62 := osst_flush_buffer($p8, $p5, 0);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 202} {:cexpr "tmp___3"} boogie_si_record_i32($i62);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i63 := $sext.i32.i64($i62);
    call {:si_unique_call 203} {:cexpr "retval"} boogie_si_record_i64($i63);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p53, $mul.ref($i56, 16)), $mul.ref(0, 1));
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i64 == 1;
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i18 := $i63;
    goto $bb7;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.6, $p45);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb23;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} $i49 := do_door_lock($p8, 1);
    call {:si_unique_call 200} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i50 == 1;
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 2);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 6);
    goto $bb7;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 5);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb7;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 123);
    goto $bb13;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 6);
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 512);
    goto $bb3;

  $bb96_dummy:
    assume false;
    return;

  $bb66_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;
}



const osst_write: ref;

axiom osst_write == $sub.ref(0, 278642);

procedure osst_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i60: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i64;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i16;
  var $i126: i32;
  var $i127: i32;
  var $i128: i16;
  var $p129: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i8;
  var $i135: i32;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i64;
  var $p172: ref;
  var $p173: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $p182: ref;
  var $i183: i16;
  var $i184: i32;
  var $p187: ref;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i8;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $p223: ref;
  var $i224: i64;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $p228: ref;
  var $i229: i8;
  var $i230: i32;
  var $i231: i1;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $i236: i32;
  var $p237: ref;
  var $i238: i32;
  var $i239: i32;
  var $i232: i32;
  var $p240: ref;
  var $i241: i8;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $i249: i32;
  var $i250: i64;
  var $i251: i64;
  var $i252: i64;
  var $i253: i1;
  var $p259: ref;
  var $p260: ref;
  var $p261: ref;
  var $i262: i32;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i64;
  var $i272: i1;
  var $i273: i64;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i32;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $i281: i64;
  var $p282: ref;
  var $i283: i32;
  var $i284: i64;
  var $i285: i64;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $p290: ref;
  var $i291: i32;
  var $i292: i64;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i32;
  var $i299: i64;
  var $i300: i1;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $i304: i64;
  var $i305: i64;
  var $p306: ref;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $i310: i32;
  var $i311: i64;
  var $p312: ref;
  var $i313: i32;
  var $i314: i64;
  var $i315: i64;
  var $i316: i32;
  var $i317: i32;
  var $p318: ref;
  var $p319: ref;
  var $p322: ref;
  var $p323: ref;
  var $i320: i64;
  var $i321: i64;
  var $i326: i64;
  var $i324: i64;
  var $i325: i64;
  var $i327: i1;
  var $i328: i64;
  var $i329: i64;
  var $p330: ref;
  var $i331: i64;
  var $i332: i1;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $i338: i1;
  var $i339: i64;
  var $i340: i64;
  var $i341: i64;
  var $i342: i64;
  var $p343: ref;
  var $i344: i64;
  var $p345: ref;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $p352: ref;
  var $p353: ref;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i32;
  var $i360: i64;
  var $i361: i64;
  var $i362: i1;
  var $p257: ref;
  var $i258: i64;
  var $i363: i64;
  var $i364: i32;
  var $p365: ref;
  var $i254: i64;
  var $i255: i32;
  var $p256: ref;
  var $i366: i1;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $i370: i32;
  var $i371: i32;
  var $i372: i64;
  var $i373: i64;
  var $i374: i1;
  var $i375: i64;
  var $p376: ref;
  var $i377: i32;
  var $i378: i64;
  var $i379: i64;
  var $p380: ref;
  var $i381: i32;
  var $i382: i32;
  var $i383: i32;
  var $p384: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i32;
  var $i390: i32;
  var $i391: i32;
  var $p392: ref;
  var $i393: i64;
  var $i394: i64;
  var $i395: i1;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $i404: i32;
  var $i405: i64;
  var $p406: ref;
  var $i407: i8;
  var $i408: i32;
  var $i409: i1;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i32;
  var $p414: ref;
  var $i415: i32;
  var $i416: i1;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $i420: i32;
  var $p421: ref;
  var $i422: i32;
  var $i423: i32;
  var $p424: ref;
  var $i425: i32;
  var $i426: i32;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $i433: i32;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i440: i8;
  var $p441: ref;
  var $i442: i32;
  var $i443: i64;
  var $i444: i64;
  var $i445: i1;
  var $p446: ref;
  var $i447: i8;
  var $i448: i32;
  var $i449: i1;
  var $i450: i32;
  var $i451: i32;
  var $i452: i8;
  var $p453: ref;
  var $i454: i1;
  var $p455: ref;
  var $i18: i64;
  var $p456: ref;
  var $i457: i64;
  var $i458: i1;
  var $p459: ref;
  var $p460: ref;
  var $i13: i64;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 226} {:cexpr "osst_write:arg:count"} boogie_si_record_i64($i2);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $0.ref);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $p9 := tape_name($p8);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i11 := mutex_lock_interruptible_nested($p10, 0);
    call {:si_unique_call 229} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $i16 := scsi_block_when_processing_errors($p15);
    call {:si_unique_call 231} {:cexpr "tmp___1"} boogie_si_record_i32($i16);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i31);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(0, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i2, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.6, $p43);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.6, $p69);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.6, $p71);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i72, 300);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i74 := $uge.i32($i70, $i73);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.6, $p78);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i93 := $sext.i32.i64($i92);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.6, $p95);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 1);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.6, $p103);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 2);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.6, $p188);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 0);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.6, $p191);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.6, $p193);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.6, $p212);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 3);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i215 == 1);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.6, $p216);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 4);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p4);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i221 := copy_from_user($p220, $p1, 1);
    call {:si_unique_call 249} {:cexpr "tmp___7"} boogie_si_record_i64($i221);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i222 := $ne.i64($i221, 0);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i222 == 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p4);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i224 := $add.i64($i2, $sub.i64(0, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p1, $mul.ref($i224, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i226 := copy_from_user($p223, $p225, 1);
    call {:si_unique_call 251} {:cexpr "tmp___8"} boogie_si_record_i64($i226);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(3, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.6, $p228);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i231 == 1);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p234 := $load.ref($M.6, $p233);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p234, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.6, $p235);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i238 := $load.i32($M.6, $p237);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i239 := $mul.i32($i236, $i238);
    call {:si_unique_call 252} {:cexpr "write_threshold"} boogie_si_record_i32($i239);
    assume {:verifier.code 0} true;
    $i232 := $i239;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(2, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.6, $p240);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 0);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    $i245 := $i232;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "osst_write:arg:total"} boogie_si_record_i64($i2);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.6, $p246);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p247, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i249 := $load.i32($M.6, $p248);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i250 := $sext.i32.i64($i249);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i251 := $add.i64($i250, $i2);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i252 := $sext.i32.i64($i245);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i253 := $ugt.i64($i251, $i252);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i254, $i255, $p256 := $i2, 0, $p1;
    assume {:branchcond $i253} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    $i366 := $ne.i64($i254, 0);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i255, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p29, $mul.ref($i32, 56)), $mul.ref(2, 1));
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $i407 := $load.i8($M.6, $p406);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i408 := $zext.i8.i32($i407);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i409 := $ne.i32($i408, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i409} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i409 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(2, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i447 := $load.i8($M.6, $p446);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i448 := $sext.i8.i32($i447);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i449 := $eq.i64($i2, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i450 := $zext.i1.i32($i449);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i451 := $and.i32($i448, $i450);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i452 := $trunc.i32.i8($i451);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(2, 1));
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p453, $i452);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $i454 := $sgt.i64($i2, 0);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    call {:si_unique_call 275} {:cexpr "osst_write:arg:retval"} boogie_si_record_i64($i2);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.24, $p5);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p456);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i458 := $ne.i64($i457, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} mutex_unlock($p460);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i13 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb188:
    assume $i458 == 1;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p459 := $load.ref($M.24, $p5);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} osst_release_request($p459);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i454 == 1;
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p455, 0);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb176:
    assume $i409 == 1;
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p411 := $load.ref($M.6, $p410);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p411, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i413 := $load.i32($M.6, $p412);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(300, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i415 := $load.i32($M.6, $p414);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i416 := $sge.i32($i413, $i415);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i416} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i416 == 1);
    goto $bb178;

  $bb179:
    assume $i416 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.6, $p417);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p418, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i420 := $load.i32($M.6, $p419);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.6, $p421);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $i423 := $sdiv.i32($i420, $i422);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.6, $p424);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i426 := $mul.i32($i423, $i425);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.6, $p427);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p428, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p429, $i426);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.6, $p430);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p431, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.6, $p432);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.6, $p434);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p435, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i437 := $load.i32($M.6, $p436);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i438 := $ne.i32($i433, $i437);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i439 := $zext.i1.i32($i438);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i8($i439);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p441, $i440);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i442 := osst_write_frame($p8, $p5, 0);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 274} {:cexpr "tmp___12"} boogie_si_record_i32($i442);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i443 := $sext.i32.i64($i442);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, $i443);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i444 := $load.i64($M.6, $p4);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i445 := $slt.i64($i444, 0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $0.ref);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb181:
    assume $i445 == 1;
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb170:
    assume $i395 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p397 := $load.ref($M.6, $p396);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p397, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.6, $p398);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i400 := $ne.i32($i399, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i400 == 1);
    goto $bb172;

  $bb173:
    assume $i400 == 1;
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.6, $p401);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i404 := $load.i32($M.6, $p403);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i405 := $sext.i32.i64($i404);
    call {:si_unique_call 272} {:cexpr "retval"} boogie_si_record_i64($i405);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i18 := $i405;
    goto $bb7;

  $bb161:
    assume $i366 == 1;
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p367, 1);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p369 := $load.ref($M.6, $p368);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i370 := $trunc.i64.i32($i254);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $i371 := append_to_buffer($p256, $p369, $i370);
    call {:si_unique_call 269} {:cexpr "tmp___11"} boogie_si_record_i32($i371);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i372 := $sext.i32.i64($i371);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, $i372);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i373 := $load.i64($M.6, $p4);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i374 := $ne.i64($i373, 0);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.6, $p376);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i378 := $sext.i32.i64($i377);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i379 := $udiv.i64($i254, $i378);
    call {:si_unique_call 271} {:cexpr "blks"} boogie_si_record_i64($i379);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i381 := $load.i32($M.6, $p380);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i382 := $trunc.i64.i32($i379);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i383 := $add.i32($i381, $i382);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p384, $i383);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i386 := $load.i32($M.6, $p385);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i387 := $sge.i32($i386, 0);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i393 := $load.i64($M.6, $p3);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $i394 := $add.i64($i393, $i254);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i394);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb166:
    assume $i387 == 1;
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.6, $p388);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i390 := $trunc.i64.i32($i379);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i391 := $add.i32($i389, $i390);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p392, $i391);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb163:
    assume $i374 == 1;
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i375 := $load.i64($M.6, $p4);
    call {:si_unique_call 270} {:cexpr "retval"} boogie_si_record_i64($i375);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i18 := $i375;
    goto $bb7;

  $bb126:
    assume $i253 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p257, $i258 := $p1, $i2;
    goto $bb129;

  $bb129:
    call $p259, $p260, $p261, $i262, $p263, $i264, $i265, $p266, $p267, $p268, $i269, $i270, $i271, $i272, $i273, $p274, $p275, $i276, $i277, $i278, $i279, $i280, $p282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $p295, $p296, $p297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $p309, $i310, $i311, $p312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $p322, $p323, $i320, $i321, $i326, $i324, $i325, $i327, $i328, $i329, $i341, $i342, $p343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $i351, $p352, $p353, $p354, $p355, $p356, $p357, $p358, $i359, $i360, $i361, $i362, $p257, $i258, $i363, $i364, $p365 := osst_write_loop_$bb129($p3, $p4, $p5, $p8, $p90, $i93, $p246, $i252, $p259, $p260, $p261, $i262, $p263, $i264, $i265, $p266, $p267, $p268, $i269, $i270, $i271, $i272, $i273, $p274, $p275, $i276, $i277, $i278, $i279, $i280, $p282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $p290, $i291, $i292, $i293, $i294, $p295, $p296, $p297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $p306, $i307, $i308, $p309, $i310, $i311, $p312, $i313, $i314, $i315, $i316, $i317, $p318, $p319, $p322, $p323, $i320, $i321, $i326, $i324, $i325, $i327, $i328, $i329, $i341, $i342, $p343, $i344, $p345, $i346, $i347, $p348, $i349, $i350, $i351, $p352, $p353, $p354, $p355, $p356, $p357, $p358, $i359, $i360, $i361, $i362, $p257, $i258, $i363, $i364, $p365);
    goto $bb129_last;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.6, $p259);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p260, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.6, $p261);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.6, $p263);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i265 := $mul.i32($i262, $i264);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.6, $p266);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p267, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.6, $p268);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i270 := $sub.i32($i265, $i269);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i270);
    call {:si_unique_call 255} {:cexpr "do_count"} boogie_si_record_i64($i271);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i272 := $ugt.i64($i271, $i258);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i273 := $i271;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.6, $p274);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i64.i32($i273);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i277 := append_to_buffer($p257, $p275, $i276);
    call {:si_unique_call 257} {:cexpr "tmp___9"} boogie_si_record_i32($i277);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i277);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, $i278);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i279 := $load.i64($M.6, $p4);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.6, $p282);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i284 := $sext.i32.i64($i283);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i285 := $sdiv.i64($i273, $i284);
    call {:si_unique_call 259} {:cexpr "blks"} boogie_si_record_i64($i285);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.6, $p286);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i64.i32($i285);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i289 := $add.i32($i287, $i288);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p290, $i289);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i291 := osst_write_frame($p8, $p5, 1);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 261} {:cexpr "tmp___10"} boogie_si_record_i32($i291);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i291);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p4, $i292);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i293 := $load.i64($M.6, $p4);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i294 := $eq.i64($i293, $sub.i64(0, 28));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i294 == 1);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i326 := $load.i64($M.6, $p4);
    call {:si_unique_call 263} {:cexpr "retval"} boogie_si_record_i64($i326);
    assume {:verifier.code 0} true;
    $i324, $i325 := $i326, $i258;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $i327 := $slt.i64($i324, 0);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i328, $i329 := $i324, $i325;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i341 := $load.i64($M.6, $p3);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i342 := $add.i64($i341, $i273);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i342);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($p257, $mul.ref($i273, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $i344 := $sub.i64($i325, $i273);
    call {:si_unique_call 267} {:cexpr "count"} boogie_si_record_i64($i344);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.6, $p345);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i347 := $sge.i32($i346, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $p354 := $load.ref($M.6, $p353);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p354, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p355, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p356, 0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p357 := $load.ref($M.6, $p246);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p357, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i359 := $load.i32($M.6, $p358);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i360 := $sext.i32.i64($i359);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i361 := $add.i64($i360, $i344);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i362 := $ugt.i64($i361, $i252);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i363, $i364, $p365 := $i344, 1, $p343;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i254, $i255, $p256 := $i363, $i364, $p365;
    goto $bb128;

  $bb158:
    assume $i362 == 1;
    assume {:verifier.code 0} true;
    $p257, $i258 := $p343, $i344;
    goto $bb158_dummy;

  $bb155:
    assume $i347 == 1;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i349 := $load.i32($M.6, $p348);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i350 := $trunc.i64.i32($i285);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i349, $i350);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p352, $i351);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb146:
    assume $i327 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.24, $p5);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.6, $p334);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p335, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p336, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p337, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i338 := $ugt.i64($i2, $i329);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i340 := $i328;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i18 := $i340;
    goto $bb7;

  $bb151:
    assume $i338 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i339 := $sub.i64($i2, $i329);
    call {:si_unique_call 266} {:cexpr "retval"} boogie_si_record_i64($i339);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i340 := $i339;
    goto $bb153;

  $bb148:
    assume $i332 == 1;
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.24, $p5);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} osst_release_request($p333);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $0.ref);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb137:
    assume $i294 == 1;
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.6, $p295);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p296, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.6, $p297);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i298);
    call {:si_unique_call 262} {:cexpr "transfer"} boogie_si_record_i64($i299);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i300 := $sle.i64($i299, $i273);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i300 == 1);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p322, 4);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p323, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    $i320, $i321 := $sub.i64(0, 5), $i258;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i324, $i325 := $i320, $i321;
    goto $bb145;

  $bb139:
    assume $i300 == 1;
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i301 := $load.i64($M.6, $p3);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i302 := $sub.i64($i273, $i299);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i303 := $add.i64($i301, $i302);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p3, $i303);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i304 := $sub.i64($i299, $i273);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i305 := $add.i64($i304, $i258);
    call {:si_unique_call 264} {:cexpr "count"} boogie_si_record_i64($i305);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.6, $p306);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i308 := $sge.i32($i307, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p319, 3);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i320, $i321 := $sub.i64(0, 28), $i305;
    goto $bb144;

  $bb141:
    assume $i308 == 1;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i310 := $load.i32($M.6, $p309);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i311 := $sub.i64($i273, $i299);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i313 := $load.i32($M.6, $p312);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i314 := $sext.i32.i64($i313);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i315 := $sdiv.i64($i311, $i314);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i64.i32($i315);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i317 := $add.i32($i310, $i316);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p318, $i317);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb143;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i280 == 1;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i281 := $load.i64($M.6, $p4);
    call {:si_unique_call 258} {:cexpr "retval"} boogie_si_record_i64($i281);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i18 := $i281;
    goto $bb7;

  $bb131:
    assume $i272 == 1;
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i273 := $i258;
    goto $bb133;

  $bb123:
    assume $i243 == 1;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i244 := $sub.i32($i232, 1);
    call {:si_unique_call 253} {:cexpr "write_threshold"} boogie_si_record_i32($i244);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i245 := $i244;
    goto $bb125;

  $bb120:
    assume $i231 == 1;
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i232 := 1;
    goto $bb122;

  $bb116:
    assume $i227 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb114:
    assume $i222 == 1;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 14);
    goto $bb7;

  $bb110:
    assume $i219 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb108:
    assume $i215 == 1;
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 28);
    goto $bb7;

  $bb96:
    assume $i195 == 1;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p196 := $load.ref($M.24, $p5);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i197, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} osst_write_behind_check($p8);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p201 := $load.ref($M.6, $p200);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p201, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.6, $p202);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb101:
    assume $i204 == 1;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.6, $p205);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.6, $p207);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 2147483647);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i209 == 1);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p211, 4);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb103:
    assume $i209 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p210, 3);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i198 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} vslice_dummy_var_171 := printk.ref.ref.i32(.str.40, $p9, 3522);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb93:
    assume $i190 == 1;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb54:
    assume $i106 == 1;
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.6, $p107);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 0);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i109 == 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.6, $p110);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.6, $p112);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i111, $i113);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i114 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.6, $p118);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.6, $p133);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i136 == 1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.6, $p139);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i141 := $slt.i32($i140, 0);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i141 == 1);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.6, $p142);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.6, $p154);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.6, $p156);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i155, $i157);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i159 := $sgt.i32($i158, 0);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    assume {:branchcond $i159} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p187, 0);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb86:
    assume $i159 == 1;
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.6, $p160);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.6, $p162);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i164 := $slt.i32($i161, $i163);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i164 == 1);
    goto $bb88;

  $bb89:
    assume $i164 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.6, $p165);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p167, $i166);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i169, $sub.i32(0, 1));
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i170);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.6, $p172);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($add.ref($p173, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i171, 4));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.6, $p176);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i178 := __fswab32($i177);
    call {:si_unique_call 243} {:cexpr "tmp___6"} boogie_si_record_i32($i178);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p179, $i178);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.6, $p180);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $i183 := $load.i16($M.6, $p182);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i183);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} vslice_dummy_var_169 := printk.ref.ref.i32.i32(.str.38, $p9, $i181, $i184);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} vslice_dummy_var_170 := printk.ref.ref(.str.39, $p9);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb78:
    assume $i144 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.6, $p145);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.6, $p147);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i146, $i148);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i149 == 1);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb80:
    assume $i149 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.6, $p150);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p152, $i151);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p153, 0);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb76:
    assume $i141 == 1;
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb70:
    assume $i136 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i137 := osst_verify_position($p8, $p5);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 241} {:cexpr "tmp___5"} boogie_si_record_i32($i137);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i138 == 1);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb72:
    assume $i138 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i120 == 1;
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.6, $p121);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb66;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i125 := $load.i16($M.6, $p124);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i127 := $add.i32($i126, 1);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p129, $i128);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} vslice_dummy_var_168 := osst_reset_header($p8, $p5);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p131, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(12, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p132, 0);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb59:
    assume $i114 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.6, $p115);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i116, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb61;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb57;

  $bb48:
    assume $i98 == 1;
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} $i99 := osst_flush_buffer($p8, $p5, 0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 237} {:cexpr "tmp___3"} boogie_si_record_i32($i99);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i100 := $sext.i32.i64($i99);
    call {:si_unique_call 238} {:cexpr "retval"} boogie_si_record_i64($i100);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p90, $mul.ref($i93, 16)), $mul.ref(0, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p102, 0);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i18 := $i100;
    goto $bb7;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i81 == 1;
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.6, $p82);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 0);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb41;

  $bb42:
    assume $i85 == 1;
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i86 := do_door_lock($p8, 1);
    call {:si_unique_call 235} {:cexpr "tmp___2"} boogie_si_record_i32($i86);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i87 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p88, 2);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb36:
    assume $i74 == 1;
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.6, $p75);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} vslice_dummy_var_167 := printk.ref.ref.i32(.str.37, $p9, $i76);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 28);
    goto $bb7;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i53 := $urem.i64($i2, $i52);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb29;

  $bb30:
    assume $i54 == 1;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i57 := $sle.i32($i56, 1023);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i57 == 1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.6, $p61);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i63 := $sdiv.i32($i62, 1024);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i60 := $i63;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i66 := $sle.i32($i65, 1023);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i67 := (if $i66 == 1 then 98 else 107);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} vslice_dummy_var_166 := printk.ref.ref.i64.i32.i32(.str.36, $p9, $i2, $i60, $i67);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 22);
    goto $bb7;

  $bb32:
    assume $i57 == 1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i60 := $i59;
    goto $bb34;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 13);
    goto $bb7;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 5);
    goto $bb7;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb7;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 6);
    goto $bb7;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 5);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i18 := $i27;
    goto $bb7;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i27 := $sub.i64(0, 123);
    goto $bb13;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i18 := $sub.i64(0, 6);
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i13 := $sub.i64(0, 512);
    goto $bb3;

  $bb158_dummy:
    assume false;
    return;

  $bb129_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;
}



const osst_ioctl: ref;

axiom osst_ioctl == $sub.ref(0, 279674);

procedure osst_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $i53: i1;
  var $i54: i8;
  var $i55: i1;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $i84: i16;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $i88: i16;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $i107: i16;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p130: ref;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $i129: i1;
  var $i135: i32;
  var $p137: ref;
  var $i138: i16;
  var $i139: i32;
  var $i140: i1;
  var $p142: ref;
  var $i143: i16;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i16;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i1;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i16;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $i141: i1;
  var $i182: i32;
  var $i136: i32;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $i186: i16;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i16;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i16;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $i202: i16;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i16;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $p215: ref;
  var $i216: i16;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i16;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i16;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i232: i16;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i16;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $i240: i16;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i16;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $i248: i16;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i8;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $i260: i32;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i1;
  var $p268: ref;
  var $i269: i16;
  var $i270: i32;
  var $i271: i1;
  var $p273: ref;
  var $i274: i16;
  var $i275: i32;
  var $i276: i1;
  var $i272: i1;
  var $i267: i1;
  var $i277: i32;
  var $p278: ref;
  var $i279: i16;
  var $i280: i32;
  var $i281: i1;
  var $p283: ref;
  var $i284: i16;
  var $i285: i32;
  var $i286: i1;
  var $i282: i1;
  var $i287: i32;
  var $i288: i32;
  var $i289: i1;
  var $i290: i32;
  var $p291: ref;
  var $i292: i32;
  var $p293: ref;
  var $i294: i16;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $i298: i8;
  var $i299: i32;
  var $i300: i1;
  var $p302: ref;
  var $i303: i16;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $i307: i32;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i32;
  var $i312: i64;
  var $i313: i32;
  var $p314: ref;
  var $i315: i16;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $i321: i32;
  var $i322: i1;
  var $p324: ref;
  var $i325: i32;
  var $p326: ref;
  var $i323: i32;
  var $p327: ref;
  var $i328: i16;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i8;
  var $i333: i32;
  var $i334: i1;
  var $i335: i32;
  var $i336: i1;
  var $p339: ref;
  var $p342: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i16;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i356: i8;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $p363: ref;
  var $i364: i32;
  var $i365: i32;
  var $i362: i32;
  var $p366: ref;
  var $i367: i8;
  var $i368: i32;
  var $i369: i1;
  var $p372: ref;
  var $p373: ref;
  var $i374: i16;
  var $i375: i32;
  var $i376: i1;
  var $p377: ref;
  var $i378: i16;
  var $i379: i32;
  var $i380: i1;
  var $p381: ref;
  var $i382: i16;
  var $i383: i32;
  var $i384: i1;
  var $i385: i32;
  var $i386: i32;
  var $i387: i1;
  var $p389: ref;
  var $i390: i16;
  var $i391: i32;
  var $i392: i1;
  var $p394: ref;
  var $i395: i16;
  var $i396: i32;
  var $p397: ref;
  var $i398: i32;
  var $i399: i64;
  var $i400: i32;
  var $i393: i32;
  var $p401: ref;
  var $i402: i8;
  var $i403: i32;
  var $i404: i1;
  var $i405: i32;
  var $i406: i1;
  var $i407: i1;
  var $i408: i1;
  var $i409: i32;
  var $i410: i32;
  var $i411: i1;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i415: i64;
  var $p416: ref;
  var $p417: ref;
  var $i418: i32;
  var $i419: i32;
  var $p420: ref;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i32;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $i428: i32;
  var $p429: ref;
  var $p430: ref;
  var $i431: i32;
  var $p432: ref;
  var $p433: ref;
  var $i434: i32;
  var $i435: i1;
  var $p436: ref;
  var $i437: i8;
  var $i438: i32;
  var $i439: i1;
  var $p440: ref;
  var $i441: i32;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i32;
  var $p446: ref;
  var $i447: i32;
  var $i448: i32;
  var $i449: i32;
  var $p450: ref;
  var $p451: ref;
  var $i452: i8;
  var $i453: i32;
  var $i454: i1;
  var $p455: ref;
  var $i456: i32;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $i460: i32;
  var $p461: ref;
  var $i462: i32;
  var $i463: i32;
  var $i464: i32;
  var $p465: ref;
  var $i466: i32;
  var $i467: i32;
  var $i468: i32;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i8;
  var $i473: i32;
  var $i474: i1;
  var $p475: ref;
  var $i476: i64;
  var $i477: i64;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i1;
  var $p482: ref;
  var $i483: i32;
  var $i484: i1;
  var $p485: ref;
  var $i486: i64;
  var $i487: i64;
  var $p488: ref;
  var $p489: ref;
  var $i490: i64;
  var $i491: i64;
  var $p492: ref;
  var $p493: ref;
  var $i494: i32;
  var $i495: i64;
  var $p496: ref;
  var $p497: ref;
  var $i498: i8;
  var $i499: i32;
  var $i500: i1;
  var $p501: ref;
  var $i502: i8;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $i506: i64;
  var $i507: i64;
  var $p508: ref;
  var $p509: ref;
  var $i510: i8;
  var $i511: i32;
  var $i512: i1;
  var $p513: ref;
  var $i514: i64;
  var $i515: i64;
  var $p516: ref;
  var $p517: ref;
  var $i518: i8;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i522: i64;
  var $i523: i64;
  var $p524: ref;
  var $p525: ref;
  var $i526: i8;
  var $i527: i32;
  var $i528: i1;
  var $p529: ref;
  var $i530: i64;
  var $i531: i64;
  var $p532: ref;
  var $p533: ref;
  var $i534: i8;
  var $i535: i32;
  var $i536: i1;
  var $p537: ref;
  var $i538: i64;
  var $i539: i64;
  var $p540: ref;
  var $p541: ref;
  var $i542: i8;
  var $i543: i32;
  var $i544: i1;
  var $p545: ref;
  var $i546: i64;
  var $i547: i64;
  var $p548: ref;
  var $p549: ref;
  var $i550: i8;
  var $i551: i32;
  var $i552: i1;
  var $p553: ref;
  var $i554: i64;
  var $i555: i64;
  var $p556: ref;
  var $p557: ref;
  var $i558: i8;
  var $i559: i32;
  var $i560: i1;
  var $p561: ref;
  var $i562: i64;
  var $i563: i64;
  var $p564: ref;
  var $p565: ref;
  var $i566: i8;
  var $i567: i32;
  var $i568: i1;
  var $p569: ref;
  var $i570: i8;
  var $i571: i32;
  var $i572: i1;
  var $p573: ref;
  var $i574: i32;
  var $i575: i1;
  var $p576: ref;
  var $i577: i8;
  var $i578: i32;
  var $i579: i1;
  var $p580: ref;
  var $i581: i64;
  var $i582: i64;
  var $p583: ref;
  var $p584: ref;
  var $i585: i64;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $i589: i1;
  var $i590: i1;
  var $i591: i32;
  var $i592: i32;
  var $i593: i1;
  var $p594: ref;
  var $i595: i8;
  var $i596: i32;
  var $i597: i1;
  var $i598: i32;
  var $i600: i32;
  var $i599: i32;
  var $i601: i1;
  var $i602: i64;
  var $p603: ref;
  var $p604: ref;
  var $i605: i64;
  var $i606: i32;
  var $i607: i1;
  var $i608: i32;
  var $p609: ref;
  var $i610: i64;
  var $i611: i1;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $i616: i32;
  var $i617: i64;
  var $i36: i32;
  var $p618: ref;
  var $i619: i64;
  var $i620: i1;
  var $p621: ref;
  var $p622: ref;
  var $i623: i64;
  var $i15: i64;
  var $p626: ref;
  var $p629: ref;
  var $p632: ref;
  var $p635: ref;
  var $p638: ref;
  var $p641: ref;
  var $p644: ref;
  var $p647: ref;
  var $p650: ref;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p5 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 282} {:cexpr "osst_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 283} {:cexpr "osst_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $0.ref);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.6, $p7);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p10 := tape_name($p9);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p11 := $i2p.i64.ref($i2);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} mutex_lock_nested(osst_int_mutex, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i13 := mutex_lock_interruptible_nested($p12, 0);
    call {:si_unique_call 287} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 2048);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $i34 := scsi_ioctl_block_when_processing_errors($p29, $i1, $i33);
    call {:si_unique_call 290} {:cexpr "retval"} boogie_si_record_i32($i34);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i37 := $lshr.i32($i1, 8);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 255);
    call {:si_unique_call 291} {:cexpr "cmd_type"} boogie_si_record_i32($i38);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i1, 255);
    call {:si_unique_call 292} {:cexpr "cmd_nr"} boogie_si_record_i32($i39);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i38, 109);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p17, $mul.ref($i20, 56)), $mul.ref(0, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i402 := $load.i8($M.6, $p401);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i403 := $zext.i8.i32($i402);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 0);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i404} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} $i405 := osst_flush_buffer($p9, $p3, 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 322} {:cexpr "i"} boogie_si_record_i32($i405);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i406 := $slt.i32($i405, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i407 := $eq.i32($i38, 109);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $i589 := $eq.i32($i38, 109);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i589} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i589 == 1);
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p609 := $load.ref($M.24, $p3);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i610 := $p2i.ref.i64($p609);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i611 := $ne.i64($i610, 0);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} mutex_unlock($p613);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p615 := $load.ref($M.6, $p614);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} $i616 := scsi_ioctl($p615, $i1, $p11);
    call {:si_unique_call 336} {:cexpr "retval"} boogie_si_record_i32($i616);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} mutex_unlock(osst_int_mutex);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i617 := $sext.i32.i64($i616);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i15 := $i617;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb292:
    assume $i611 == 1;
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.24, $p3);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} osst_release_request($p612);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb274:
    assume $i589 == 1;
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i590 := $eq.i32($i39, 3);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i590} true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i590 == 1);
    goto $bb276;

  $bb277:
    assume $i590 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i591 := $lshr.i32($i1, 16);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i592 := $and.i32($i591, 16383);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i593 := $ne.i32($i592, 8);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i593} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.6, $p594);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i596 := $zext.i8.i32($i595);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i597 := $ne.i32($i596, 0);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i597 == 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $i600 := osst_get_sector($p9, $p3);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 329} {:cexpr "blk"} boogie_si_record_i32($i600);
    assume {:verifier.code 0} true;
    $i599 := $i600;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i601 := $slt.i32($i599, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i601 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i602 := $sext.i32.i64($i599);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p603, $i602);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p604 := $bitcast.ref.ref($p6);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i605 := copy_to_user($p11, $p604, 8);
    call {:si_unique_call 331} {:cexpr "tmp___7"} boogie_si_record_i64($i605);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i606 := $trunc.i64.i32($i605);
    call {:si_unique_call 332} {:cexpr "i"} boogie_si_record_i32($i606);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i607 := $ne.i32($i606, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i607} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    $i608 := $i34;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i36 := $i608;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.24, $p3);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i619 := $p2i.ref.i64($p618);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i620 := $ne.i64($i619, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    assume {:branchcond $i620} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i620 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(24, 1));
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} mutex_unlock($p622);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} mutex_unlock(osst_int_mutex);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i623 := $sext.i32.i64($i36);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i15 := $i623;
    goto $bb3;

  $bb295:
    assume $i620 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p621 := $load.ref($M.24, $p3);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} osst_release_request($p621);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb288:
    assume $i607 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i608 := $sub.i32(0, 14);
    goto $bb290;

  $bb285:
    assume $i601 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i36 := $i599;
    goto $bb7;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb282:
    assume $i597 == 1;
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i598 := osst_get_frame_position($p9, $p3);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 327} {:cexpr "blk"} boogie_si_record_i32($i598);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i599 := $i598;
    goto $bb284;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb279:
    assume $i593 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb7;

  $bb206:
    assume $i407 == 1;
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i39, 2);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i408 == 1);
    goto $bb208;

  $bb209:
    assume $i408 == 1;
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i409 := $lshr.i32($i1, 16);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i410 := $and.i32($i409, 16383);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i411 := $ne.i32($i410, 48);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p412, 97);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.6, $p413);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i414);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p416, $i415);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i418 := $load.i32($M.6, $p417);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i419 := $and.i32($i418, 16777215);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.6, $p420);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i423 := $shl.i32($i422, 24);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i424 := $or.i32($i419, $i423);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i425 := $zext.i32.i64($i424);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p426, $i425);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i428 := $load.i32($M.6, $p427);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p429, $i428);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i431 := $load.i32($M.6, $p430);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p432, $i431);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.6, $p433);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i435 := $ne.i32($i434, 0);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p470, 0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(619, 1));
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i472 := $load.i8($M.6, $p471);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i473 := $zext.i8.i32($i472);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i474 := $ne.i32($i473, 0);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i474} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i474 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i480 := $load.i32($M.6, $p479);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i481 := $eq.i32($i480, 0);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i481} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i494 := $load.i32($M.6, $p493);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i495 := $sext.i32.i64($i494);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p496, $i495);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(1, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i498 := $load.i8($M.6, $p497);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i499 := $zext.i8.i32($i498);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 3);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i500} true;
    goto $bb232, $bb234;

  $bb234:
    assume !($i500 == 1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(1, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i502 := $load.i8($M.6, $p501);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i503 := $zext.i8.i32($i502);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 4);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i504 == 1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(1, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i510 := $load.i8($M.6, $p509);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i511 := $zext.i8.i32($i510);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i512 := $ugt.i32($i511, 2);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i512} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i512 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i518 := $load.i8($M.6, $p517);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $i519 := $zext.i8.i32($i518);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i520} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i520 == 1);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $i526 := $load.i8($M.6, $p525);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $i527 := $zext.i8.i32($i526);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i527, 2);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i528} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i528 == 1);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i534 := $load.i8($M.6, $p533);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i535 := $zext.i8.i32($i534);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i536 := $eq.i32($i535, 3);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i536} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i536 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i542 := $load.i8($M.6, $p541);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i543 := $zext.i8.i32($i542);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i544 := $eq.i32($i543, 0);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i544} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.6, $p549);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i551 := $zext.i8.i32($i550);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i552 := $eq.i32($i551, 2);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    assume {:branchcond $i552} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(2, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i558 := $load.i8($M.6, $p557);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i559 := $zext.i8.i32($i558);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i560 := $ne.i32($i559, 0);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p17, $mul.ref($i20, 56)), $mul.ref(2, 1));
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i566 := $load.i8($M.6, $p565);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i567 := $zext.i8.i32($i566);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i568 := $ne.i32($i567, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i568} true;
    goto $bb259, $bb261;

  $bb261:
    assume !($i568 == 1);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p17, $mul.ref($i20, 56)), $mul.ref(3, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i570 := $load.i8($M.6, $p569);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i571 := $zext.i8.i32($i570);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i572 := $ne.i32($i571, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb262, $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume !($i572 == 1);
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(624, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i577 := $load.i8($M.6, $p576);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i578 := $zext.i8.i32($i577);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i579 := $ne.i32($i578, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i579 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p584 := $bitcast.ref.ref($p5);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i585 := copy_to_user($p11, $p584, 48);
    call {:si_unique_call 324} {:cexpr "tmp___6"} boogie_si_record_i64($i585);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i586 := $trunc.i64.i32($i585);
    call {:si_unique_call 325} {:cexpr "i"} boogie_si_record_i32($i586);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i587 := $ne.i32($i586, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i587} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p588, 0);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb7;

  $bb270:
    assume $i587 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 14);
    goto $bb7;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i579 == 1;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i581 := $load.i64($M.6, $p580);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $i582 := $or.i64($i581, 65536);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p583, $i582);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb262:
    assume $i572 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i574 := $load.i32($M.6, $p573);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i575 := $ne.i32($i574, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i575} true;
    goto $bb265, $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    assume !($i575 == 1);
    goto $bb264;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i575 == 1;
    goto $bb260;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb260;

  $bb256:
    assume $i560 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i562 := $load.i64($M.6, $p561);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i563 := $or.i64($i562, 268435456);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p564, $i563);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb253:
    assume $i552 == 1;
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i554 := $load.i64($M.6, $p553);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i555 := $or.i64($i554, 262144);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p556, $i555);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb250:
    assume $i544 == 1;
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i546 := $load.i64($M.6, $p545);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $i547 := $or.i64($i546, 16777216);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p548, $i547);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb247:
    assume $i536 == 1;
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i538 := $load.i64($M.6, $p537);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i539 := $or.i64($i538, 8388608);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p540 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p540, $i539);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb244:
    assume $i528 == 1;
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $i530 := $load.i64($M.6, $p529);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $i531 := $or.i64($i530, 4194304);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p532, $i531);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb241:
    assume $i520 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i522 := $load.i64($M.6, $p521);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i523 := $or.i64($i522, 2097152);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p524, $i523);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb238:
    assume $i512 == 1;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i514 := $load.i64($M.6, $p513);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i515 := $or.i64($i514, 134217728);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p516, $i515);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i506 := $load.i64($M.6, $p505);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i507 := $or.i64($i506, 536870912);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p508, $i507);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i500 == 1;
    goto $bb233;

  $bb226:
    assume $i481 == 1;
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i483 := $load.i32($M.6, $p482);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i483, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i484} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i484 == 1);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i490 := $load.i64($M.6, $p489);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i491 := $or.i64($i490, 2147483648);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p492, $i491);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb228:
    assume $i484 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i486 := $load.i64($M.6, $p485);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i487 := $or.i64($i486, 1073741824);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p488, $i487);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb223:
    assume $i474 == 1;
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i476 := $load.i64($M.6, $p475);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i477 := $or.i64($i476, 67108864);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p478, $i477);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb214:
    assume $i435 == 1;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.6, $p436);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i439 := $eq.i32($i438, 2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i439} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i439 == 1);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i452 := $load.i8($M.6, $p451);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i453 := $zext.i8.i32($i452);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i454 := $eq.i32($i453, 1);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb219:
    assume $i454 == 1;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.6, $p455);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.6, $p457);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p458, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i460 := $load.i32($M.6, $p459);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.6, $p461);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i463 := $add.i32($i460, $i462);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i464 := $add.i32($i463, $sub.i32(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.6, $p465);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i467 := $sdiv.i32($i464, $i466);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i468 := $sub.i32($i456, $i467);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p469, $i468);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb216:
    assume $i439 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i441 := $load.i32($M.6, $p440);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.6, $p442);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p443, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.6, $p444);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i447 := $load.i32($M.6, $p446);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i448 := $sdiv.i32($i445, $i447);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i449 := $add.i32($i441, $i448);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p450, $i449);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb211:
    assume $i411 == 1;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb7;

  $bb203:
    assume $i406 == 1;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i36 := $i405;
    goto $bb7;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb200:
    assume $i404 == 1;
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 6);
    goto $bb7;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i39, 1);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb11;

  $bb12:
    assume $i41 == 1;
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i1, 16);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 16383);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 8);
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p4);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i46 := copy_from_user($p45, $p11, 8);
    call {:si_unique_call 294} {:cexpr "tmp___1"} boogie_si_record_i64($i46);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    call {:si_unique_call 295} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.6, $p49);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $i51 := $sext.i16.i32($i50);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 24);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p17, $mul.ref($i20, 56)), $mul.ref(0, 1));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.6, $p59);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.6, $p71);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i74 == 1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i186 := $load.i16($M.6, $p185);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i187 := $sext.i16.i32($i186);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 6);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} reset_state($p9);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.6, $p209);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 3496)), $mul.ref(328, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p212 := $bitcast.ref.ref($p211);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i213 := $load.i64($M.6, $p212);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i214 := $and.i64($i213, $sub.i64(0, 8193));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p212, $i214);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.6, $p215);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i217 := $sext.i16.i32($i216);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 32);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i292 := 0;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i294 := $load.i16($M.6, $p293);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i295 := $sext.i16.i32($i294);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 7);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i303 := $load.i16($M.6, $p302);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i304 := $sext.i16.i32($i303);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 24);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i315 := $load.i16($M.6, $p314);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i316 := $sext.i16.i32($i315);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 33);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i328 := $load.i16($M.6, $p327);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i329 := $sext.i16.i32($i328);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 34);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i352 := $load.i16($M.6, $p351);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i353 := $sext.i16.i32($i352);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 22);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i374 := $load.i16($M.6, $p373);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i375 := $sext.i16.i32($i374);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i376 := $eq.i32($i375, 28);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i376} true;
    goto $bb187, $bb189;

  $bb189:
    assume !($i376 == 1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i378 := $load.i16($M.6, $p377);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i379 := $sext.i16.i32($i378);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i380 := $eq.i32($i379, 29);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i380 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i292, 0);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i390 := $load.i16($M.6, $p389);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i391 := $sext.i16.i32($i390);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 32);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i392 == 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i395 := $load.i16($M.6, $p394);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i396 := $sext.i16.i32($i395);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.6, $p397);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i399 := $sext.i32.i64($i398);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i400 := osst_int_ioctl($p9, $p3, $i396, $i399);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 320} {:cexpr "retval"} boogie_si_record_i32($i400);
    assume {:verifier.code 0} true;
    $i393 := $i400;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i36 := $i393;
    goto $bb7;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb196:
    assume $i392 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i393 := $sub.i32(0, 22);
    goto $bb198;

  $bb193:
    assume $i387 == 1;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} vslice_dummy_var_174 := cross_eof($p9, $p3, 0);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i380 == 1;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $i382 := $load.i16($M.6, $p381);
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i383 := $sext.i16.i32($i382);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 28);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i385 := $zext.i1.i32($i384);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i386 := do_door_lock($p9, $i385);
    call {:si_unique_call 317} {:cexpr "retval"} boogie_si_record_i32($i386);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i36 := $i386;
    goto $bb7;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i376 == 1;
    goto $bb188;

  $bb178:
    assume $i354 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.6, $p355);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i358 := $ne.i32($i357, 0);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i358 == 1);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.6, $p363);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i365 := osst_seek_sector($p9, $p3, $i364);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 315} {:cexpr "i"} boogie_si_record_i32($i365);
    assume {:verifier.code 0} true;
    $i362 := $i365;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.6, $p366);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i32($i367);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i369} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i36 := $i362;
    goto $bb7;

  $bb183:
    assume $i369 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p372, 0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    goto $bb185;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb180:
    assume $i358 == 1;
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i360 := $load.i32($M.6, $p359);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i361 := osst_set_frame_position($p9, $p3, $i360, 0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 313} {:cexpr "i"} boogie_si_record_i32($i361);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i362 := $i361;
    goto $bb182;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i330 == 1;
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.6, $p331);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i334} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i335 := osst_int_ioctl($p9, $p3, 6, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 311} {:cexpr "i"} boogie_si_record_i32($i335);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i336 := $slt.i32($i335, 0);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p339, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p342, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p345, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p626, 0);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p629, 0);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p632, 0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p635, 0);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p638, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p641, 0);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p644, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p647, 0);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p650, 0);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p346, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p347, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p348, 1);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p349, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(8, 1));
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p350, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb7;

  $bb170:
    assume $i336 == 1;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i36 := $i335;
    goto $bb7;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb167:
    assume $i334 == 1;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb7;

  $bb159:
    assume $i317 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.6, $p318);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i321 := $load.i32($M.6, $p320);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i322 := $sge.i32($i319, $i321);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i322 == 1);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i325 := $load.i32($M.6, $p324);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p326, $i325);
    assume {:verifier.code 0} true;
    $i323 := 0;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i36 := $i323;
    goto $bb7;

  $bb161:
    assume $i322 == 1;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i323 := $sub.i32(0, 22);
    goto $bb163;

  $bb153:
    assume $i305 == 1;
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.6, $p306);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i308 := $and.i32($i307, $sub.i32(0, 268435456));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb155;

  $bb156:
    assume $i309 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.6, $p310);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i312 := $sext.i32.i64($i311);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i313 := osst_set_options($p9, $i312);
    call {:si_unique_call 309} {:cexpr "retval"} boogie_si_record_i32($i313);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i36 := $i313;
    goto $bb7;

  $bb147:
    assume $i296 == 1;
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i298 := $load.i8($M.6, $p297);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i298);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i300 == 1);
    goto $bb149;

  $bb150:
    assume $i300 == 1;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} vslice_dummy_var_173 := do_door_lock($p9, 0);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb107:
    assume $i218 == 1;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $i220 := $load.i16($M.6, $p219);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i221 := $sext.i16.i32($i220);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 28);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i222 == 1);
    goto $bb109;

  $bb110:
    assume $i222 == 1;
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.6, $p223);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i225 := $sext.i16.i32($i224);
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i226 := $ne.i32($i225, 8);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i226 == 1);
    goto $bb109;

  $bb112:
    assume $i226 == 1;
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    $i228 := $load.i16($M.6, $p227);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i229 := $sext.i16.i32($i228);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i230 := $ne.i32($i229, 20);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb109;

  $bb114:
    assume $i230 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.6, $p231);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i233 := $sext.i16.i32($i232);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $i234 := $ne.i32($i233, 21);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    assume {:branchcond $i234} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i234 == 1);
    goto $bb109;

  $bb116:
    assume $i234 == 1;
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i236 := $load.i16($M.6, $p235);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i237 := $sext.i16.i32($i236);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i238 := $ne.i32($i237, 24);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb109;

  $bb118:
    assume $i238 == 1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i240 := $load.i16($M.6, $p239);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i241 := $sext.i16.i32($i240);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 34);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i242} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i242 == 1);
    goto $bb109;

  $bb120:
    assume $i242 == 1;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i244 := $load.i16($M.6, $p243);
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i245 := $sext.i16.i32($i244);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 33);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb109;

  $bb122:
    assume $i246 == 1;
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i248 := $load.i16($M.6, $p247);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i249 := $sext.i16.i32($i248);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 5);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb109;

  $bb124:
    assume $i250 == 1;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.6, $p251);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i253 := $sext.i16.i32($i252);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i254 := $ne.i32($i253, 27);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i254} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb109;

  $bb126:
    assume $i254 == 1;
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i256 := $load.i8($M.6, $p255);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i257 := $zext.i8.i32($i256);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i258 := $ugt.i32($i257, 1);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb128, $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i290 := 0;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p291, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i292 := $i290;
    goto $bb146;

  $bb128:
    assume $i258 == 1;
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i260 := $load.i32($M.6, $p259);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.6, $p261);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i263 := $uge.i32($i260, $i262);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb130;

  $bb131:
    assume $i263 == 1;
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i265 := $load.i32($M.6, $p264);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i266 := $ne.i32($i265, 2);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i267 := 0;
    assume {:branchcond $i266} true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i277 := $zext.i1.i32($i267);
    call {:si_unique_call 304} {:cexpr "auto_weof"} boogie_si_record_i32($i277);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i279 := $load.i16($M.6, $p278);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i280 := $sext.i16.i32($i279);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 6);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i282 := 0;
    assume {:branchcond $i281} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i287 := $zext.i1.i32($i282);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $i288 := osst_write_trailer($p9, $p3, $i287);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 306} {:cexpr "i"} boogie_si_record_i32($i288);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i289 := $slt.i32($i288, 0);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i290 := $i277;
    goto $bb145;

  $bb142:
    assume $i289 == 1;
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i36 := $i288;
    goto $bb7;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb139:
    assume $i281 == 1;
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i284 := $load.i16($M.6, $p283);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i285 := $sext.i16.i32($i284);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i286 := $ne.i32($i285, 7);
    assume {:verifier.code 0} true;
    $i282 := $i286;
    goto $bb141;

  $bb133:
    assume $i266 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i269 := $load.i16($M.6, $p268);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i270 := $sext.i16.i32($i269);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 6);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i272 := 0;
    assume {:branchcond $i271} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i267 := $i272;
    goto $bb135;

  $bb136:
    assume $i271 == 1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i274 := $load.i16($M.6, $p273);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i275 := $sext.i16.i32($i274);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 7);
    assume {:verifier.code 0} true;
    $i272 := $i276;
    goto $bb138;

  $bb93:
    assume $i188 == 1;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i190 := $load.i16($M.6, $p189);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i191 := $sext.i16.i32($i190);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 7);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb95;

  $bb96:
    assume $i192 == 1;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.6, $p193);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i195 := $sext.i16.i32($i194);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i196 := $ne.i32($i195, 9);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb95;

  $bb98:
    assume $i196 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i198 := $load.i16($M.6, $p197);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i199 := $sext.i16.i32($i198);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 13);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb100, $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    assume !($i200 == 1);
    goto $bb95;

  $bb100:
    assume $i200 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i202 := $load.i16($M.6, $p201);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i203 := $sext.i16.i32($i202);
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 22);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb95;

  $bb102:
    assume $i204 == 1;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.6, $p205);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i207 := $sext.i16.i32($i206);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 12);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb95;

  $bb104:
    assume $i208 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 5);
    goto $bb7;

  $bb37:
    assume $i74 == 1;
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(1, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.6, $p75);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 1);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.6, $p121);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i123 := $sext.i16.i32($i122);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 22);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i124 == 1);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i138 := $load.i16($M.6, $p137);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i139 := $sext.i16.i32($i138);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 6);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume true;
    goto $bb68, $bb70;

  $bb70:
    assume !($i140 == 1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.6, $p142);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i144 := $sext.i16.i32($i143);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 7);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i145} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i145 == 1);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i147 := $load.i16($M.6, $p146);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i148 := $sext.i16.i32($i147);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 9);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i149} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i149 == 1);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.6, $p150);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i152 := $sext.i16.i32($i151);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 12);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i153 == 1);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.6, $p154);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i156 := $sext.i16.i32($i155);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 28);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i157} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i157 == 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.6, $p158);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i160 := $sext.i16.i32($i159);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 30);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i161 == 1);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.6, $p162);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $i164 := $sext.i16.i32($i163);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i165} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i165 == 1);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.6, $p166);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i168 := $sext.i16.i32($i167);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 11);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i169 == 1);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.6, $p170);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i172 := $sext.i16.i32($i171);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 2);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i173} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i173 == 1);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i175 := $load.i16($M.6, $p174);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i176 := $sext.i16.i32($i175);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 10);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i141 := 1;
    assume {:branchcond $i177} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i177 == 1);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.6, $p178);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i180 := $sext.i16.i32($i179);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i181 := $eq.i32($i180, 32);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i141 := $i181;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i182 := $zext.i1.i32($i141);
    call {:si_unique_call 302} {:cexpr "i"} boogie_si_record_i32($i182);
    assume {:verifier.code 0} true;
    $i136 := $i182;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} $i183 := osst_flush_buffer($p9, $p3, $i136);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 301} {:cexpr "i"} boogie_si_record_i32($i183);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i183, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i184 == 1;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $i36 := $i183;
    goto $bb7;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i177 == 1;
    goto $bb69;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb69;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb69;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i165 == 1;
    goto $bb69;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb69;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb69;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb69;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb69;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb69;

  $bb62:
    assume $i124 == 1;
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.6, $p125);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i129 := 1;
    assume true;
    goto $bb64, $bb66;

  $bb66:
    assume !($i128 == 1);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.6, $p130);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.6, $p132);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i131, $i133);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i129 := $i134;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $i135 := $zext.i1.i32($i129);
    call {:si_unique_call 299} {:cexpr "i"} boogie_si_record_i32($i135);
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i136 := $i135;
    goto $bb67;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb65;

  $bb39:
    assume $i78 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.6, $p79);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i81 := $sext.i16.i32($i80);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb43;

  $bb43:
    assume !($i82 == 1);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i84 := $load.i16($M.6, $p83);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i85 := $sext.i16.i32($i84);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 11);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i86 == 1);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i88 := $load.i16($M.6, $p87);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i89 := $sext.i16.i32($i88);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 12);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i90 == 1);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i103 := $load.i16($M.6, $p102);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i104 := $sext.i16.i32($i103);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 2);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb52, $bb54;

  $bb54:
    assume !($i105 == 1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i107 := $load.i16($M.6, $p106);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i108 := $sext.i16.i32($i107);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 10);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.6, $p110);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i111, 1);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p113, $i112);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.6, $p114);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i116 := $sge.i32($i115, 0);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb57:
    assume $i116 == 1;
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.6, $p117);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p120, $i119);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb53;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, $sub.i32(0, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, $i93);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.6, $p95);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i97 := $sge.i32($i96, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb48:
    assume $i97 == 1;
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.6, $p98);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p23, $mul.ref($i26, 16)), $mul.ref(12, 1));
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, $i100);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb42;

  $bb29:
    assume $i62 == 1;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.6, $p63);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i65 := $sext.i16.i32($i64);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 24);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb31;

  $bb32:
    assume $i66 == 1;
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p67);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, $sub.i32(0, 268435456));
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb31;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 6);
    goto $bb7;

  $bb20:
    assume $i52 == 1;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i53 := capable(21);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i8($i53);
    call {:si_unique_call 297} {:cexpr "tmp___2"} boogie_si_record_i8($i54);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} vslice_dummy_var_172 := printk.ref.ref(.str.136, $p10);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb7;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i56 := 0;
    goto $bb24;

  $bb17:
    assume $i48 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 14);
    goto $bb7;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 22);
    goto $bb7;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i36 := $i34;
    goto $bb7;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} mutex_unlock(osst_int_mutex);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i15 := $sub.i64(0, 512);
    goto $bb3;
}



const osst_compat_ioctl: ref;

axiom osst_compat_ioctl == $sub.ref(0, 280706);

procedure osst_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation osst_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} {:cexpr "osst_compat_ioctl:arg:cmd_in"} boogie_si_record_i32($i1);
    call {:si_unique_call 342} {:cexpr "osst_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 515);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 3496)), $mul.ref(0, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3832)), $mul.ref(504, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 336)), $mul.ref(48, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $p22 := $i2p.i64.ref($i2);
    call {:si_unique_call 343} $i23 := devirtbounce.1($p21, $p7, $i1, $p22);
    call {:si_unique_call 344} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb3;
}



const os_scsi_tape_open: ref;

axiom os_scsi_tape_open == $sub.ref(0, 281738);

procedure os_scsi_tape_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.25, $M.26, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation os_scsi_tape_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} mutex_lock_nested(osst_int_mutex, 0);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i2 := __os_scsi_tape_open($p0, $p1);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 347} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} mutex_unlock(osst_int_mutex);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;
}



const os_scsi_tape_flush: ref;

axiom os_scsi_tape_flush == $sub.ref(0, 282770);

procedure os_scsi_tape_flush($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.6, $CurrAddr, $M.26, $M.25, $M.39, $M.38, assertsPassed;



implementation os_scsi_tape_flush($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i41: i32;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i81: i32;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i107: i32;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $i106: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $i121: i32;
  var $i99: i32;
  var $i122: i32;
  var $p123: ref;
  var $i56: i32;
  var $p57: ref;
  var $i39: i32;
  var $p40: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i1;
  var $i136: i1;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i1;
  var $p171: ref;
  var $i172: i32;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i22: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.6, $p3);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p13, $mul.ref($i16, 16));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p2, $0.ref);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p18 := tape_name($p5);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(120, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $i20 := atomic_long_read($p19);
    call {:si_unique_call 352} {:cexpr "tmp___0"} boogie_si_record_i64($i20);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i21 := $sgt.i64($i20, 1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i26 == 1);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.6, $p42);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, 1);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(627, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.6, $p58);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i122, $p123 := $i41, $p17;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i56, $p57 := $i122, $p123;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i56, $p57;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(627, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.6, $p124);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i138 := $i39;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.24, $p2);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.6, $p143);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb73, $bb75;

  $bb75:
    assume !($i145 == 1);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.6, $p146);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p177, 0);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(656, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p178, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i22 := $i138;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} vslice_dummy_var_175 := printk.ref.ref(.str.106, $p18);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.6, $p150);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.6, $p156);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i158 := $ne.i32($i157, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.6, $p162);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(656, 1));
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i170 := $ne.i32($i169, 0);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} vslice_dummy_var_180 := printk.ref(.str.111);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p175, 0);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p176, 0);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb87:
    assume $i170 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(656, 1));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.6, $p171);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} vslice_dummy_var_179 := printk.ref.i32(.str.110, $i172);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i164 == 1;
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.6, $p165);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} vslice_dummy_var_178 := printk.ref.i32(.str.109, $i166);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i158 == 1;
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.6, $p159);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} vslice_dummy_var_177 := printk.ref.i32(.str.108, $i160);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb78:
    assume $i152 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.6, $p153);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_176 := printk.ref.i32(.str.107, $i154);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb74;

  $bb70:
    assume $i141 == 1;
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.24, $p2);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} osst_release_request($p142);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb61:
    assume $i127 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i130 := osst_position_tape_and_confirm($p5, $p2, $i129);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 364} {:cexpr "result2"} boogie_si_record_i32($i130);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p131, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p132, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p133, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p40, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p134, 0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i39, 0);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i137 := $i39;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i138 := $i137;
    goto $bb69;

  $bb63:
    assume $i135 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i130, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i136 == 1);
    goto $bb65;

  $bb66:
    assume $i136 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i137 := $i130;
    goto $bb68;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i61 == 1;
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p63, $mul.ref($i66, 16));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p7, $mul.ref($i10, 56)), $mul.ref(1, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.6, $p68);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i71 == 1);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(0, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.6, $p72);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 1);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i75 == 1);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.6, $p100);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i103 == 1);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i107 := $i41;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.6, $p108);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i121 := $i107;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i99 := $i121;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i122, $p123 := $i99, $p67;
    goto $bb60;

  $bb53:
    assume $i111 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i106 := $i107;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.6, $p112);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i114 := $sge.i32($i113, 0);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(8, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p119, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p120, 2);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i121 := $i106;
    goto $bb58;

  $bb55:
    assume $i114 == 1;
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.6, $p115);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, 1);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p118, $i117);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb47:
    assume $i103 == 1;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i104 := cross_eof($p5, $p2, 1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 362} {:cexpr "result"} boogie_si_record_i32($i104);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i105 == 1);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $i107 := $i104;
    goto $bb52;

  $bb49:
    assume $i105 == 1;
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $i106 := $i104;
    goto $bb51;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.6, $p76);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i79 == 1);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.6, $p82);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i84, 1);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i98 := $i41;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i81 := $i98;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i99 := $i81;
    goto $bb46;

  $bb37:
    assume $i85 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i86 := cross_eof($p5, $p2, 0);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 360} {:cexpr "result"} boogie_si_record_i32($i86);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i87 == 1);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p97, 0);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i98 := $i86;
    goto $bb45;

  $bb39:
    assume $i87 == 1;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i90 := $sge.i32($i89, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(8, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p95, 0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(1, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p96, 2);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i90 == 1;
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p63, $mul.ref($i66, 16)), $mul.ref(12, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, $i93);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    goto $bb43;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i79 == 1;
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i80 := osst_flush_buffer($p5, $p2, 0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    call {:si_unique_call 358} {:cexpr "result"} boogie_si_record_i32($i80);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb36;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb30;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb23;

  $bb24:
    assume $i49 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(627, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i55 := osst_write_trailer($p5, $p2, $i54);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 356} {:cexpr "result"} boogie_si_record_i32($i55);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i56, $p57 := $i55, $p17;
    goto $bb26;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb10;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} $i36 := osst_flush_write_buffer($p5, $p2);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 354} {:cexpr "result"} boogie_si_record_i32($i36);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i41 := $i36;
    goto $bb20;

  $bb13:
    assume $i37 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i36, $sub.i32(0, 28));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i39, $p40 := $i36, $p17;
    goto $bb18;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb3;
}



const os_scsi_tape_close: ref;

axiom os_scsi_tape_close == $sub.ref(0, 283802);

procedure os_scsi_tape_close($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation os_scsi_tape_close($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.6, $p5);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} normalize_buffer($p16);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} _raw_write_lock(os_scsi_tapes_lock);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(620, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} scsi_device_put($p19);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 0);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} vslice_dummy_var_181 := do_door_lock($p4, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const do_door_lock: ref;

axiom do_door_lock == $sub.ref(0, 284834);

procedure do_door_lock($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation do_door_lock($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} {:cexpr "do_door_lock:arg:do_lock"} boogie_si_record_i32($i1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i7 := scsi_set_medium_removal($p3, $i6);
    call {:si_unique_call 379} {:cexpr "retval"} boogie_si_record_i32($i7);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 3);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i1, 0);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, $i11);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const scsi_device_put: ref;

axiom scsi_device_put == $sub.ref(0, 285866);

procedure scsi_device_put($p0: ref);
  free requires assertsPassed;



implementation scsi_device_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    return;
}



const scsi_set_medium_removal: ref;

axiom scsi_set_medium_removal == $sub.ref(0, 286898);

procedure scsi_set_medium_removal($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_set_medium_removal($p0: ref, $i1: i8) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 380} {:cexpr "scsi_set_medium_removal:arg:arg1"} boogie_si_record_i8($i1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 1} true;
    call {:si_unique_call 381} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 382} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_long_read: ref;

axiom atomic_long_read == $sub.ref(0, 287930);

procedure atomic_long_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic_long_read($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i1 := atomic64_read($p0);
    call {:si_unique_call 384} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const osst_flush_write_buffer: ref;

axiom osst_flush_write_buffer == $sub.ref(0, 288962);

procedure osst_flush_write_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_flush_write_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i147: i32;
  var $i148: i1;
  var $i150: i32;
  var $i146: i32;
  var $p151: ref;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i152: i32;
  var $i161: i32;
  var $i27: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.24, $p1);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p4 := tape_name($p0);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p5);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i161 := 0;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i27 := $i161;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $i34);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p37, $mul.ref($i40, 16)), $mul.ref(0, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p42, 2);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    call {:si_unique_call 388} {:cexpr "offset"} boogie_si_record_i32($i46);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $i46);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, $sub.i32(0, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i53 := $sdiv.i32($i50, $i52);
    call {:si_unique_call 389} {:cexpr "blks"} boogie_si_record_i32($i53);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i54 := $sle.i32($i46, 32767);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(669, 1));
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.6, $p58);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i68 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.6;
    call {:si_unique_call 395} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p69, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_1;
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p70, 10);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p71, 1);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, 1);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p73);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i74, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i74, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i74, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} osst_init_aux($p0, 0, 0, 0, 0, 0);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.24, $p1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p2);
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.6, $p114);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p116 := osst_do_scsi($p112, $p0, $p113, 33280, 1, $i115, 0, 1);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p116);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.6, $p121);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i123 == 1);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.6, $p153);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $i155 := $add.i32($i154, 1);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p156, $i155);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p157, 0);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.6, $p158);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p159, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p160, 0);
    assume {:verifier.code 0} true;
    $i152 := $i68;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i161 := $i152;
    goto $bb59;

  $bb45:
    assume $i123 == 1;
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.6, $p125);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 112);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 112);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i147 := osst_write_error_recovery($p0, $p1, 1);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 407} {:cexpr "tmp___5"} boogie_si_record_i32($i147);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i150 := $i68;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i146 := $i150;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p37, $mul.ref($i40, 16)), $mul.ref(8, 1));
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p151, $sub.i32(0, 1));
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i152 := $i146;
    goto $bb58;

  $bb55:
    assume $i148 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vslice_dummy_var_183 := printk.ref.ref(.str.41, $p4);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i150 := $sub.i32(0, 5);
    goto $bb57;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i129 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.6, $p131);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i32($i132);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 64);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb49;

  $bb50:
    assume $i135 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p116, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.6, $p137);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i139, 15);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 0);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i141 == 1);
    goto $bb49;

  $bb52:
    assume $i141 == 1;
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.6, $p143);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p145, 0);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32(0, 28);
    goto $bb54;

  $bb42:
    assume $i118 == 1;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 16);
    goto $bb10;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i77 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} osst_init_aux($p0, 8, 0, 0, 0, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i74, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb32;

  $bb33:
    assume $i78 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p100);
    call {:si_unique_call 397} {:cexpr "tmp___3"} boogie_si_record_i32($i101);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, 1);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p105, $i104);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    call {:si_unique_call 398} {:cexpr "tmp___4"} boogie_si_record_i32($i107);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.6, $p108);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p111, $i110);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} osst_init_aux($p0, 2, $i107, $i101, 0, 1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb26:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i74, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i79 == 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, $p92);
    call {:si_unique_call 400} {:cexpr "tmp___2"} boogie_si_record_i32($i93);
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.6, $p94);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i96 := $add.i32($i95, 1);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p97, $i96);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.6, $p98);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} osst_init_aux($p0, 1, $i93, $i99, 0, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb35:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i74, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb32;

  $bb37:
    assume $i80 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.6, $p81);
    call {:si_unique_call 402} {:cexpr "tmp___1"} boogie_si_record_i32($i82);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.6, $p83);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p86, $i85);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.6, $p87);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i89 := $sub.i32($i88, $i53);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.6, $p90);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} osst_init_aux($p0, 128, $i82, $i89, $i91, $i53);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb19:
    assume $i61 == 1;
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $i64 := osst_wait_frame($p0, $p1, $i63, $sub.i32(0, 50), 120);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 392} {:cexpr "tmp___0"} boogie_si_record_i32($i64);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb24;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i66 := osst_recover_wait_frame($p0, $p1, 1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    call {:si_unique_call 394} {:cexpr "result"} boogie_si_record_i32($i66);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb23;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i54 == 1;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} vslice_dummy_var_182 := osst_zero_buffer_tail($p56);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p3);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} osst_write_behind_check($p0);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i21 == 1;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2147483647);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 5);
    goto $bb10;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(0, 28);
    goto $bb10;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $0.ref);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const osst_write_trailer: ref;

axiom osst_write_trailer == $sub.ref(0, 289994);

procedure osst_write_trailer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_trailer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p27: ref;
  var $i14: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} {:cexpr "osst_write_trailer:arg:leave_at_EOT"} boogie_si_record_i32($i2);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 2);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i25 := osst_write_eod($p0, $p1);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    call {:si_unique_call 415} {:cexpr "result"} boogie_si_record_i32($i25);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} vslice_dummy_var_184 := osst_write_header($p0, $p1, $i2);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 2);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i14 := $i25;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i12 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 411} {:cexpr "result"} boogie_si_record_i32($i12);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i15 := osst_write_filemark($p0, $p1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    call {:si_unique_call 413} {:cexpr "result"} boogie_si_record_i32($i15);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p24, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, 1);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, $i22);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i16 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb5;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb5;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const osst_flush_buffer: ref;

axiom osst_flush_buffer == $sub.ref(0, 291026);

procedure osst_flush_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_flush_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i91: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "osst_flush_buffer:arg:seek_next"} boogie_si_record_i32($i2);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.6, $p3);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.6, $p8);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(0, 1));
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i21 == 1);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.6, $p22);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i2, 0);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i67 == 1);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(1, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.6, $p92);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i7 := $i91;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb38:
    assume $i95 == 1;
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.6, $p96);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i98 := $sge.i32($i97, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(8, 1));
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p103, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(1, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p104, 0);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i98 == 1;
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, $p99);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 1);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p102, $i101);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb20:
    assume $i67 == 1;
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(1, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.6, $p68);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i90 := $i83;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb37;

  $bb31:
    assume $i84 == 1;
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i85 := $sgt.i32($i66, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb33;

  $bb34:
    assume $i85 == 1;
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.6, $p86);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i87, $i66);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i89 := osst_seek_logical_blk($p0, $p1, $i88);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 424} {:cexpr "result"} boogie_si_record_i32($i89);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i90 := $i89;
    goto $bb36;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i72 := cross_eof($p0, $p1, 0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    call {:si_unique_call 422} {:cexpr "result"} boogie_si_record_i32($i72);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i73 == 1);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.6, $p75);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i77 := $sge.i32($i76, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(8, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p82, 0);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i83 := $i72;
    goto $bb30;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.6, $p78);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 1);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(12, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, $i80);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i73 == 1;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p13, $mul.ref($i16, 16)), $mul.ref(1, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i38, $i42);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i46 := $sdiv.i32($i43, $i45);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.6, $p49);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i50, $i52);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i53, $sub.i32(0, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i57 := $sdiv.i32($i54, $i56);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32($i46, $i57);
    call {:si_unique_call 420} {:cexpr "backspace"} boogie_si_record_i32($i58);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p61, 0);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, 0);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $i66 := $i58;
    goto $bb19;

  $bb14:
    assume $i30 == 1;
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, 0);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i27 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 419} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i7 := $i27;
    goto $bb3;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;
}



const cross_eof: ref;

axiom cross_eof == $sub.ref(0, 292058);

procedure cross_eof($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation cross_eof($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i6: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "cross_eof:arg:forward"} boogie_si_record_i32($i2);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p3 := tape_name($p0);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i2, 0);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i10 := osst_seek_logical_blk($p0, $p1, $i9);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 430} {:cexpr "result"} boogie_si_record_i32($i10);
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 0);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i2, 0);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p13 := (if $i12 == 1 then .str.81 else .str.82);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vslice_dummy_var_185 := printk.ref.ref.ref(.str.80, $p3, $p13);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i5 := osst_space_over_filemarks_forward_slow($p0, $p1, 1, 1);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 428} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb3;

  SeqInstr_133:
    assume !assertsPassed;
    return;
}



const osst_position_tape_and_confirm: ref;

axiom osst_position_tape_and_confirm == $sub.ref(0, 293090);

procedure osst_position_tape_and_confirm($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.6, $M.26, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_position_tape_and_confirm($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i6: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "osst_position_tape_and_confirm:arg:frame"} boogie_si_record_i32($i2);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vslice_dummy_var_186 := osst_wait_ready($p0, $p1, 900, 0);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $i4 := osst_set_frame_position($p0, $p1, $i2, 0);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 435} {:cexpr "retval"} boogie_si_record_i32($i4);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_187 := osst_wait_ready($p0, $p1, 900, 1);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i8 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 438} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  SeqInstr_139:
    assume !assertsPassed;
    return;
}



const osst_release_request: ref;

axiom osst_release_request == $sub.ref(0, 294122);

procedure osst_release_request($p0: ref);
  free requires assertsPassed;



implementation osst_release_request($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} kfree($p1);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    return;
}



const osst_wait_ready: ref;

axiom osst_wait_ready == $sub.ref(0, 295154);

procedure osst_wait_ready($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.6, $M.26, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_wait_ready($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p25: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i1;
  var $p32: ref;
  var $p82: ref;
  var $p76: ref;
  var $p70: ref;
  var $p44: ref;
  var $p37: ref;
  var $p24: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i18: i32;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 441} {:cexpr "osst_wait_ready:arg:timeout"} boogie_si_record_i32($i2);
    call {:si_unique_call 442} {:cexpr "osst_wait_ready:arg:initial_delay"} boogie_si_record_i32($i3);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.6, jiffies);
    call {:si_unique_call 443} {:cexpr "startwait"} boogie_si_record_i64($i5);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i3, 0);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p4);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.25;
    call {:si_unique_call 447} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p9, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.25 := cmdloc_dummy_var_3;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p10, 0);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p1);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p15 := osst_do_scsi($p11, $p0, $p12, 0, 3, $i14, 0, 1);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p15);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p24 := $p15;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p24);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.6, $p83);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i88 := osst_write_error_recovery($p0, $p1, 0);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    call {:si_unique_call 453} {:cexpr "tmp___0"} boogie_si_record_i32($i88);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i89 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p25 := $p15;
    goto $bb11;

  $bb11:
    call $p26, $p27, $p28, $p29, $i30, $p31, $p33, $p34, $i35, $i36, $p25, $i38, $i39, $i40, $i41, $i42, $i43, $p46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $p56, $i57, $i58, $i59, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $i69, $p72, $i73, $i74, $i75, $p78, $i79, $i80, $i81, $p32, $p82, $p76, $p70, $p44, $p37, cmdloc_dummy_var_4, cmdloc_dummy_var_5 := osst_wait_ready_loop_$bb11($p0, $i2, $p4, $i5, $p19, $p26, $p27, $p28, $p29, $i30, $p31, $p33, $p34, $i35, $i36, $p25, $i38, $i39, $i40, $i41, $i42, $i43, $p46, $i47, $i48, $i49, $p51, $i52, $i53, $i54, $p56, $i57, $i58, $i59, $p61, $i62, $i63, $i64, $p66, $i67, $i68, $i69, $p72, $i73, $i74, $i75, $p78, $i79, $i80, $i81, $p32, $p82, $p76, $p70, $p44, $p37, cmdloc_dummy_var_4, cmdloc_dummy_var_5);
    goto $bb11_last;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.6, jiffies);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i2, 250);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, $i5);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i42 := $sub.i64($i38, $i41);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i43 := $slt.i64($i42, 0);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $p44 := $p25;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p24 := $p44;
    goto $bb10;

  $bb15:
    assume $i43 == 1;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 2);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.6, $p66);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 6);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $p70 := $p25;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p24 := $p70;
    goto $bb10;

  $bb27:
    assume $i69 == 1;
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.6, $p72);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 40);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $p76 := $p25;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p24 := $p76;
    goto $bb10;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.6, $p78);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 0);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p32, $p82 := $p25, $p25;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $p24 := $p82;
    goto $bb10;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i81 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} msleep(100);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p4);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.25;
    call {:si_unique_call 450} cmdloc_dummy_var_5 := $memset.i8(cmdloc_dummy_var_4, $p26, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.25 := cmdloc_dummy_var_5;
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p27, 0);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $p31 := osst_do_scsi($p32, $p0, $p28, 0, 3, $i30, 0, 1);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p19);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p37 := $p31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p24 := $p37;
    goto $bb10;

  $bb13:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $p25 := $p31;
    goto $bb13_dummy;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 4);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb19;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.6, $p56);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p32 := $p25;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i59 == 1);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.6, $p61);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 8);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p32 := $p25;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb19;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb23;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 16);
    goto $bb6;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i3);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $i8 := jiffies_to_msecs($i7);
    call {:si_unique_call 445} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} msleep($i8);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;
}



const osst_set_frame_position: ref;

axiom osst_set_frame_position == $sub.ref(0, 296186);

procedure osst_set_frame_position($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_set_frame_position($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i8;
  var $p40: ref;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $i47: i8;
  var $p48: ref;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i66: i1;
  var $i68: i1;
  var $i69: i32;
  var $i67: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i13: i32;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 455} {:cexpr "osst_set_frame_position:arg:ppos"} boogie_si_record_i32($i2);
    call {:si_unique_call 456} {:cexpr "osst_set_frame_position:arg:skip"} boogie_si_record_i32($i3);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 3000);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i3, 0);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $p8 := tape_name($p0);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.6, $p9);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i2, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i20 == 1);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i2, $i22);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i30, $i31, $i32 := $i2, 0, $i7;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i33, $i34 := $i31, $i32;
    goto $bb20;

  $bb20:
    call $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $p48, $i49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $i66, $i68, $i69, $i67, cmdloc_dummy_var_6, cmdloc_dummy_var_7, vslice_dummy_var_189 := osst_set_frame_position_loop_$bb20($p0, $p1, $i3, $p4, $i30, $i33, $i34, $p35, $p36, $p37, $i38, $i39, $p40, $i41, $i42, $p43, $i44, $i45, $p46, $i47, $p48, $i49, $p50, $p51, $p52, $p53, $i54, $p55, $i56, $i57, $p58, $p59, $p60, $i61, $i62, $i63, $i64, $i66, $i68, $i69, $i67, cmdloc_dummy_var_6, cmdloc_dummy_var_7, vslice_dummy_var_189);
    goto $bb20_last;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p4);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.26;
    call {:si_unique_call 459} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p35, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.26 := cmdloc_dummy_var_7;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p36, 43);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p37, 1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i38 := $ashr.i32($i34, 24);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p40, $i39);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i34, 16);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p43, $i42);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i44 := $ashr.i32($i34, 8);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p46, $i45);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i34);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p48, $i47);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i3, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(308, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $p55 := osst_do_scsi($p51, $p0, $p52, 0, 3, $i54, 0, 1);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p55);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.6, $p60);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $i33;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i34, $i30);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i34, $i30);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i67 := $i63;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i70 := $i67;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p71, $i30);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p72, $i30);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(1, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, 0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(2, 1));
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i18, 16)), $mul.ref(0, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p76, 0);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i13 := $i70;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb33:
    assume $i66 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i30, 0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i69 := $i63;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb37;

  $bb35:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i33, $i34 := $i63, $i30;
    goto $bb35_dummy;

  $bb30:
    assume $i64 == 1;
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_189 := osst_wait_ready($p0, $p1, 300, 1);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i62 == 1;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $i63 := $sub.i32(0, 5);
    goto $bb29;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb9;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i49 == 1;
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p50, $sub.i8(0, 128));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_188 := printk.ref.ref.i32(.str.79, $p8, $i2);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i25 := $sge.i32($i2, 0);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i25 == 1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i30, $i31, $i32 := $i29, $sub.i32(0, 22), $i29;
    goto $bb19;

  $bb16:
    assume $i25 == 1;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i27, 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb18;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb12;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $i2;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb35_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;
}



const osst_get_frame_position: ref;

axiom osst_get_frame_position == $sub.ref(0, 297218);

procedure osst_get_frame_position($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation osst_get_frame_position($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i8;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i18: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p5 := tape_name($p0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    call {:si_unique_call 466} {:cexpr "oldsize"} boogie_si_record_i32($i13);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.6;
    call {:si_unique_call 467} cmdloc_dummy_var_9 := $memset.i8(cmdloc_dummy_var_8, $p19, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_9;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 52);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p24, $p3);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p27, 24);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p1);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $p32 := osst_do_scsi($p28, $p0, $p29, 20, 2, $i31, 0, 1);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p32);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, $sub.i32(0, 22));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i53, $sub.i32(0, 5));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.6, $p82);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(4, 1));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.6, $p86);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i89 := $shl.i32($i88, 24);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.6, $p90);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.6, $p92);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(5, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.6, $p94);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i97 := $shl.i32($i96, 16);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i89, $i97);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.6, $p99);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.6, $p101);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p102, $mul.ref(6, 1));
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.6, $p103);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i106 := $shl.i32($i105, 8);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $i107 := $add.i32($i98, $i106);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.6, $p110);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($p111, $mul.ref(7, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.6, $p112);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i107, $i114);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p116, $i115);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p117);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(8, 1));
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.6, $p121);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i122);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i124 := $shl.i32($i123, 24);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.6, $p125);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.6, $p127);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($p128, $mul.ref(9, 1));
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.6, $p129);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i130);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i132 := $shl.i32($i131, 16);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i124, $i132);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.6, $p134);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.6, $p136);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p137, $mul.ref(10, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.6, $p138);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i141 := $shl.i32($i140, 8);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i133, $i141);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.6, $p143);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p144, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.6, $p145);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(11, 1));
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.6, $p147);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i142, $i149);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p151, $i150);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.6, $p152);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.6, $p154);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p155, $mul.ref(15, 1));
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.6, $p156);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p159, $i158);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.6, $p160);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 0);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.6, $p171);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p172, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p173, $p9);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.6, $p174);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p176, $i13);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i53, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i177 == 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i180 := $i53;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i18 := $i180;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb26:
    assume $i177 == 1;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.6, $p178);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i180 := $i179;
    goto $bb28;

  $bb20:
    assume $i162 == 1;
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i164 := $load.i32($M.6, $p163);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.6, $p165);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i164, $i166);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i167 == 1);
    goto $bb22;

  $bb23:
    assume $i167 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p170, $i169);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p4);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p32, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.6;
    cmdloc_dummy_var_11 := $M.6;
    call {:si_unique_call 471} cmdloc_dummy_var_12 := $memcpy.i8(cmdloc_dummy_var_10, cmdloc_dummy_var_11, $p57, $p59, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_12;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p2);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_13 := $M.6;
    call {:si_unique_call 472} cmdloc_dummy_var_14 := $memset.i8(cmdloc_dummy_var_13, $p60, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_14;
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p61, 52);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p63);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p65, $p3);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p68, 24);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.6, $p70);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p72 := osst_do_scsi($p32, $p0, $p69, 20, 2, $i71, 0, 1);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.6, $p73);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.6, $p75);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i77 == 1);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} vslice_dummy_var_191 := printk.ref.ref(.str.46, $p5);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i77 == 1;
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p72, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p4);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.6;
    cmdloc_dummy_var_16 := $M.6;
    call {:si_unique_call 474} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p79, $p80, 16, $zext.i32.i64(8), 0 == 1);
    $M.6 := cmdloc_dummy_var_17;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} vslice_dummy_var_190 := printk.ref.ref(.str.45, $p5);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i45 == 1;
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 15);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 3);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i52 := (if $i51 == 1 then $sub.i32(0, 5) else $sub.i32(0, 22));
    call {:si_unique_call 469} {:cexpr "result"} boogie_si_record_i32($i52);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb10;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, $p9);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, $i13);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 5);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 298250);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const osst_do_scsi: ref;

axiom osst_do_scsi == $sub.ref(0, 299282);

procedure osst_do_scsi($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation osst_do_scsi($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i32, $i6: i32, $i7: i32) returns ($r: ref)
{
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i16;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p83: ref;
  var $i84: i16;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i64;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p26: ref;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} {:cexpr "osst_do_scsi:arg:bytes"} boogie_si_record_i32($i3);
    call {:si_unique_call 477} {:cexpr "osst_do_scsi:arg:direction"} boogie_si_record_i32($i4);
    call {:si_unique_call 478} {:cexpr "osst_do_scsi:arg:timeout"} boogie_si_record_i32($i5);
    call {:si_unique_call 479} {:cexpr "osst_do_scsi:arg:retries"} boogie_si_record_i32($i6);
    call {:si_unique_call 480} {:cexpr "osst_do_scsi:arg:do_wait"} boogie_si_record_i32($i7);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $p44 := $p0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i7, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(184, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} init_completion($p49);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p44, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p50, $p49);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p52, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i57 := $ugt.i32($i3, $i56);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i57 == 1);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    call {:si_unique_call 493} {:cexpr "use_sg"} boogie_si_record_i16($i64);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i66 == 1);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.6, $p85);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.6, $p87);
    assume {:verifier.code 0} true;
    $p83, $i84 := $p88, $i64;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p44, $mul.ref(0, 144)), $mul.ref(0, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.6;
    cmdloc_dummy_var_19 := $M.6;
    call {:si_unique_call 495} cmdloc_dummy_var_20 := $memcpy.i8(cmdloc_dummy_var_18, cmdloc_dummy_var_19, $p90, $p2, 16, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_20;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.6, $p91);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p92, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, 0);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.6, $p95);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p97, 0);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.6, $p2);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i99, 5);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 7);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i101);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref(scsi_command_size_tbl, $mul.ref(0, 8)), $mul.ref($i102, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.6, $p103);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i84);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i107 := osst_execute($p44, $p2, $i105, $i4, $p83, $i3, $i106, $i5, $i6);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    call {:si_unique_call 497} {:cexpr "tmp___5"} boogie_si_record_i32($i107);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i108 == 1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i7, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p26 := $p44;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $r := $p26;
    return;

  $bb35:
    assume $i112 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} wait_for_completion($p49);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p44, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p113, $0.ref);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i114 := osst_chk_result($p1, $p44);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.6, $p115);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p116, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p117, $i114);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.6, $p109);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p110, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p111, $sub.i32(0, 16));
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i66 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.6, $p71);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.6, $p73);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i64);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i75, $i76);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i64;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p83, $i84 := $p69, $i82;
    goto $bb31;

  $bb28:
    assume $i77 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.6, $p80);
    call {:si_unique_call 494} {:cexpr "use_sg"} boogie_si_record_i16($i81);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb30;

  $bb23:
    assume $i57 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.6, $p60);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb25;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p48, $p44);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $p29 := osst_allocate_request();
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p29, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, $p1);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p44 := $p29;
    goto $bb19;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} $p32 := tape_name($p1);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_193 := printk.ref.ref(.str.51, $p32);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p34 := get_current();
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i35 := signal_pending($p34);
    call {:si_unique_call 491} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p42, $sub.i32(0, 16));
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb9;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.6, $p37);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $sub.i32(0, 4));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    goto $bb17;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p15 := tape_name($p1);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} vslice_dummy_var_192 := printk.ref.ref(.str.50, $p15);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p17 := get_current();
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $i18 := signal_pending($p17);
    call {:si_unique_call 485} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.6, $p23);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p25, $sub.i32(0, 16));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p26 := $0.ref;
    goto $bb9;

  $bb6:
    assume $i19 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p22, $sub.i32(0, 4));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 300314);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const get_current: ref;

axiom get_current == $sub.ref(0, 301346);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $p0 := devirtbounce.2(0, current_task);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 302378);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 502} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 504} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const osst_allocate_request: ref;

axiom osst_allocate_request == $sub.ref(0, 303410);

procedure osst_allocate_request() returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation osst_allocate_request() returns ($r: ref)
{
  var $p0: ref;
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $p0 := kmalloc(144, 208);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_178:
    assume !assertsPassed;
    return;
}



const init_completion: ref;

axiom init_completion == $sub.ref(0, 304442);

procedure init_completion($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation init_completion($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(0, 1));
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p2, 0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 96)), $mul.ref(8, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} __init_waitqueue_head($p3, .str.52, $p1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    return;
}



const osst_execute: ref;

axiom osst_execute == $sub.ref(0, 305474);

procedure osst_execute($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation osst_execute($p0: ref, $p1: ref, $i2: i32, $i3: i32, $p4: ref, $i5: i32, $i6: i32, $i7: i32, $i8: i32) returns ($r: i32)
{
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i1;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i1;
  var $i25: i8;
  var $i26: i1;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i1;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $i41: i1;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i1;
  var $i42: i32;
  var $p43: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i32;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i64;
  var $i67: i64;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i1;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $i94: i64;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i27: i32;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} {:cexpr "osst_execute:arg:cmd_len"} boogie_si_record_i32($i2);
    call {:si_unique_call 509} {:cexpr "osst_execute:arg:data_direction"} boogie_si_record_i32($i3);
    call {:si_unique_call 510} {:cexpr "osst_execute:arg:bufflen"} boogie_si_record_i32($i5);
    call {:si_unique_call 511} {:cexpr "osst_execute:arg:use_sg"} boogie_si_record_i32($i6);
    call {:si_unique_call 512} {:cexpr "osst_execute:arg:timeout"} boogie_si_record_i32($i7);
    call {:si_unique_call 513} {:cexpr "osst_execute:arg:retries"} boogie_si_record_i32($i8);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i3, 1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 514} {:cexpr "write"} boogie_si_record_i32($i15);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(120, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.6, $p16);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 3496)), $mul.ref(8, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} $p22 := blk_get_request($p21, $i15, 208);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i24 := IS_ERR($p23);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i8($i24);
    call {:si_unique_call 517} {:cexpr "tmp"} boogie_si_record_i8($i25);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i8.i1($i25);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} blk_rq_set_block_pc($p22);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.6, $p28);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i30 := $or.i64($i29, 16777216);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(64, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p31, $i30);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, $0.ref);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i6, 0);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i5, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i2);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(288, 1));
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p87, $i86);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.6, $p88);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_21 := $M.6;
    call {:si_unique_call 528} cmdloc_dummy_var_22 := $memset.i8(cmdloc_dummy_var_21, $p89, 0, 16, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_22;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(280, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.6, $p90);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(288, 1));
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.6, $p92);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i64($i93);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.6;
    cmdloc_dummy_var_24 := $M.6;
    call {:si_unique_call 529} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p91, $p1, $i94, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_25;
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(304, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p97, $p95);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(296, 1));
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p98, 0);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(336, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p99, $i7);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(340, 1));
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p100, $i8);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(352, 1));
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p102, $p0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p103);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} blk_execute_rq_nowait($p104, $0.ref, $p22, 1, osst_end_async);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb23:
    assume $i81 == 1;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.6, $p82);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $i84 := blk_rq_map_kern($p83, $p22, $p4, $i5, 208);
    call {:si_unique_call 532} {:cexpr "err"} boogie_si_record_i32($i84);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i85 == 1;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} blk_put_request($p22);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i27 := 67108864;
    goto $bb3;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p4);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i6);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i36 := $mul.i64($i35, 8);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p37 := kmalloc($i36, 208);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32(0, $i6);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p50 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, 1);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p34, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i52);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} $i54 := __get_order($i53);
    $p55 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p55, $i54);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i56 := $zext.i32.i64($i5);
    $p57 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.6, $p57);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i59 := $zext.i32.i64($i58);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i60 := $shl.i64(4096, $i59);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i61 := $add.i64($i56, $i60);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i62 := $sub.i64($i61, 1);
    $p63 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(8, 1));
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.6, $p63);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i64, 12);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i66 := $zext.i32.i64($i65);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i64($i62, $i66);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    $p69 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(12, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p69, $i68);
    $p70 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(16, 1));
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p70, 0);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(48, 1));
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.6, $p71);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i73 := $zext.i32.i64($i5);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i74 := blk_rq_map_user($p72, $p22, $p13, $0.ref, $i73, 208);
    call {:si_unique_call 526} {:cexpr "err"} boogie_si_record_i32($i74);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p22, $mul.ref(0, 368)), $mul.ref(104, 1));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.6, $p77);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(136, 1));
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p79, $p78);
    $p80 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, $p37);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i75 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p38);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} kfree($p76);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i42, $p43 := 0, $p4;
    goto $bb14;

  $bb14:
    call $p44, $i45, $p46, $i47, $p48, $i49, $i42, $p43 := osst_execute_loop_$bb14($i6, $p38, $p44, $i45, $p46, $i47, $p48, $i49, $i42, $p43);
    goto $bb14_last;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p44 := sg_page($p43);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i42);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p38, $mul.ref($i45, 8));
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p46, $p44);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i42, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p48 := sg_next($p43);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i47, $i6);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb16:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i42, $p43 := $i47, $p48;
    goto $bb16_dummy;

  $bb7:
    assume $i40 == 1;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $i27 := 67108864;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4736;
}



const wait_for_completion: ref;

axiom wait_for_completion == $sub.ref(0, 306506);

procedure wait_for_completion($p0: ref);
  free requires assertsPassed;



implementation wait_for_completion($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    return;
}



const osst_chk_result: ref;

axiom osst_chk_result == $sub.ref(0, 307538);

procedure osst_chk_result($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_chk_result($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i8;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i55: i1;
  var $p58: ref;
  var $i59: i8;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i8;
  var $i69: i32;
  var $i70: i32;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i8: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} $p2 := tape_name($p0);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    call {:si_unique_call 534} {:cexpr "result"} boogie_si_record_i32($i4);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i4, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} osst_analyze_sense($p1, $p11);
    $p12 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.6, $p58);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i59);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 3496)), $mul.ref(328, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.6, $p64);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i66 := $lshr.i64($i65, 13);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i8($i67);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i60, $i69);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i8($i70);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, $i71);
    $p73 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p73);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i21);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb32;

  $bb33:
    assume $i77 == 1;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.6, $p78);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i80 := $add.i32($i79, 1);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p81, $i80);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.6, $p82);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p85, $i84);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p6, $mul.ref(2, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.6, $p86);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 224);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i90 == 1;
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i21);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb11:
    assume $i26 == 1;
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i21);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 1);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i21);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 8);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb10;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i21);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 13);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 26);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.6, $p39);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb10;

  $bb21:
    assume $i42 == 1;
    $p43 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(12, 1));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i45 == 1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i51 := $lshr.i32($i4, 24);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i52 := $ashr.i32($i4, 16);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 255);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} vslice_dummy_var_195 := printk.ref.ref.i32.i32.i32(.str.54, $p2, $i4, $i51, $i53);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32(1, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i55 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_196 := printk.ref.ref(.str.55, $p2);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} vslice_dummy_var_197 := printk.ref.ref(.str.56, $p2);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i45 == 1;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vslice_dummy_var_194 := printk.ref.ref(.str.53, $p2);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} __scsi_print_sense($p48, $p2, $p50, 96);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p16, $mul.ref(0, 176)), $mul.ref(40, 1)), $mul.ref(4, 1)), $mul.ref(1, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.6, $p19);
    call {:si_unique_call 536} {:cexpr "scode"} boogie_si_record_i8($i20);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i21 := $i20;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const osst_analyze_sense: ref;

axiom osst_analyze_sense == $sub.ref(0, 308570);

procedure osst_analyze_sense($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_analyze_sense($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i32;
  var $i47: i8;
  var $p48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 144)), $mul.ref(16, 1));
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $i7 := scsi_normalize_sense($p5, 96, $p6);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 543} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, $i10);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i18 := scsi_get_sense_info_fld($p3, 96, $p17);
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(33, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, $i19);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p3);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 127);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 114);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i23, 115);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i23, 115);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 0);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p39 := scsi_sense_desc_find($p3, 96, 4);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i46 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i8($i46);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, $i47);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p39, $mul.ref(3, 1));
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.6, $p42);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 224);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb20;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb7;

  $bb4:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i23, 113);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 1);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(34, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 1);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p3, $mul.ref(2, 1));
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 224);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, $i35);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i23, 112);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb15;
}



const __scsi_print_sense: ref;

axiom __scsi_print_sense == $sub.ref(0, 309602);

procedure __scsi_print_sense($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation __scsi_print_sense($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} {:cexpr "__scsi_print_sense:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    return;
}



const scsi_normalize_sense: ref;

axiom scsi_normalize_sense == $sub.ref(0, 310634);

procedure scsi_normalize_sense($p0: ref, $i1: i32, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation scsi_normalize_sense($p0: ref, $i1: i32, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 548} {:cexpr "scsi_normalize_sense:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 1} true;
    call {:si_unique_call 549} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 550} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_get_sense_info_fld: ref;

axiom scsi_get_sense_info_fld == $sub.ref(0, 311666);

procedure scsi_get_sense_info_fld($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_get_sense_info_fld($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 551} {:cexpr "scsi_get_sense_info_fld:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 552} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 553} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_sense_desc_find: ref;

axiom scsi_sense_desc_find == $sub.ref(0, 312698);

procedure scsi_sense_desc_find($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation scsi_sense_desc_find($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "scsi_sense_desc_find:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 555} {:cexpr "scsi_sense_desc_find:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p3 := external_alloc();
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const blk_get_request: ref;

axiom blk_get_request == $sub.ref(0, 313730);

procedure blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation blk_get_request($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} {:cexpr "blk_get_request:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 558} {:cexpr "blk_get_request:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p3 := external_alloc();
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const blk_rq_set_block_pc: ref;

axiom blk_rq_set_block_pc == $sub.ref(0, 314762);

procedure blk_rq_set_block_pc($p0: ref);
  free requires assertsPassed;



implementation blk_rq_set_block_pc($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    return;
}



const sg_next: ref;

axiom sg_next == $sub.ref(0, 315794);

procedure sg_next($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation sg_next($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} $p1 := external_alloc();
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __get_order: ref;

axiom __get_order == $sub.ref(0, 316826);

procedure __get_order($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation __get_order($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} {:cexpr "__get_order:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 1);
    call {:si_unique_call 562} {:cexpr "size"} boogie_si_record_i64($i1);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i64($i1, 12);
    call {:si_unique_call 563} {:cexpr "size"} boogie_si_record_i64($i2);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i3 := fls64($i2);
    call {:si_unique_call 565} {:cexpr "order"} boogie_si_record_i32($i3);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const blk_rq_map_user: ref;

axiom blk_rq_map_user == $sub.ref(0, 317858);

procedure blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_user($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64, $i5: i32) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 566} {:cexpr "blk_rq_map_user:arg:arg4"} boogie_si_record_i64($i4);
    call {:si_unique_call 567} {:cexpr "blk_rq_map_user:arg:arg5"} boogie_si_record_i32($i5);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 1} true;
    call {:si_unique_call 568} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 569} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const blk_rq_map_kern: ref;

axiom blk_rq_map_kern == $sub.ref(0, 318890);

procedure blk_rq_map_kern($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation blk_rq_map_kern($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} {:cexpr "blk_rq_map_kern:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 571} {:cexpr "blk_rq_map_kern:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 572} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 573} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const osst_end_async: ref;

axiom osst_end_async == $sub.ref(0, 319922);

procedure osst_end_async($p0: ref, $i1: i32);



const blk_execute_rq_nowait: ref;

axiom blk_execute_rq_nowait == $sub.ref(0, 320954);

procedure blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation blk_execute_rq_nowait($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} {:cexpr "blk_execute_rq_nowait:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    return;
}



const blk_put_request: ref;

axiom blk_put_request == $sub.ref(0, 321986);

procedure blk_put_request($p0: ref);
  free requires assertsPassed;



implementation blk_put_request($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    return;
}



const complete_: ref;

axiom complete_ == $sub.ref(0, 323018);

procedure complete_($p0: ref);



const blk_rq_unmap_user: ref;

axiom blk_rq_unmap_user == $sub.ref(0, 324050);

procedure blk_rq_unmap_user($p0: ref) returns ($r: i32);



const __blk_put_request: ref;

axiom __blk_put_request == $sub.ref(0, 325082);

procedure __blk_put_request($p0: ref, $p1: ref);



const fls64: ref;

axiom fls64 == $sub.ref(0, 326114);

procedure fls64($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation fls64($i0: i64) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "fls64:arg:x"} boogie_si_record_i64($i0);
    call {:si_unique_call 576} $i1 := devirtbounce.3(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 577} {:cexpr "bitpos"} boogie_si_record_i32($i1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 327146);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 328178);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.27, $p2);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 329210);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 583} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 330242);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 585} $i2 := devirtbounce.4(0, $p1, $i0);
    call {:si_unique_call 586} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const jiffies_to_msecs: ref;

axiom jiffies_to_msecs == $sub.ref(0, 331274);

procedure jiffies_to_msecs($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation jiffies_to_msecs($i0: i64) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 587} {:cexpr "jiffies_to_msecs:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 1} true;
    call {:si_unique_call 588} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 589} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 332306);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    return;
}



const osst_write_error_recovery: ref;

axiom osst_write_error_recovery == $sub.ref(0, 333338);

procedure osst_write_error_recovery($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_error_recovery($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i79: i32;
  var $i78: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i1;
  var $p83: ref;
  var $i84: i1;
  var $p85: ref;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i95: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i87: i32;
  var $i103: i1;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i116: i8;
  var $p117: ref;
  var $i30: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} {:cexpr "osst_write_error_recovery:arg:pending"} boogie_si_record_i32($i2);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p10 := tape_name($p0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref($i8, 16)), $mul.ref(0, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.6, $p11);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    call {:si_unique_call 593} {:cexpr "rw_state"} boogie_si_record_i32($i13);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 15);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i19 == 1);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 12);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i35 := $shl.i32($i34, 24);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 16);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i35, $i40);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(5, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.6, $p43);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i46 := $shl.i32($i45, 8);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i41, $i46);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(6, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i47, $i51);
    call {:si_unique_call 594} {:cexpr "frame"} boogie_si_record_i32($i52);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(9, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    call {:si_unique_call 595} {:cexpr "skip"} boogie_si_record_i32($i56);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} vslice_dummy_var_198 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i59, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i59, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i59, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_205 := printk.ref.ref(.str.66, $p10);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.6, $p97);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, $i52);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, $i2);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} vslice_dummy_var_206 := osst_set_frame_position($p0, $p1, $i100, 0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i87 := 0;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_204 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i87, 0);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i103 == 1);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.6, $p112);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, 1);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p115, $i114);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i13);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p5, $mul.ref($i8, 16)), $mul.ref(0, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p117, $i116);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i30 := $i87;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb38:
    assume $i103 == 1;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.6, $p104);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 1);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p107, $i106);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.6, $p108);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p111, $i110);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i63 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vslice_dummy_var_201 := printk.ref.ref(.str.65, $p10);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i95 := osst_read_back_buffer_and_rewrite($p0, $p1, $i52, 1, $i2);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 601} {:cexpr "retval"} boogie_si_record_i32($i95);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i87 := $i95;
    goto $bb35;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vslice_dummy_var_199 := printk.ref.ref(.str.64, $p10);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, $i52);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i91, $i2);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_200 := osst_set_frame_position($p0, $p1, $i92, 0);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $i87 := $sub.i32(0, 5);
    goto $bb35;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i52, $i56);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i69 := $ule.i32($i68, 3000);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i69 == 1);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i70 := $ugt.i32($i52, 2999);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i72 := 3000;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_202 := printk.ref.ref.i32.i32.i32(.str.57, $p10, $i67, $i52, $i72);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(664, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.6, $p74);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i76 := $sgt.i32($i75, 10599);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i76 == 1);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} $i79 := osst_read_back_buffer_and_rewrite($p0, $p1, $i52, $i56, $i2);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 606} {:cexpr "retval"} boogie_si_record_i32($i79);
    assume {:verifier.code 0} true;
    $i78 := $i79;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i78, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p81 := (if $i80 == 1 then .str.59 else .str.60);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i78, 0);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $p83 := (if $i82 == 1 then .str.27 else .str.61);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p85 := (if $i84 == 1 then .str.62 else .str.63);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_203 := printk.ref.ref.ref.ref.ref(.str.58, $p10, $p81, $p83, $p85);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i87 := $i78;
    goto $bb35;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i76 == 1;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $i77 := osst_reposition_and_retry($p0, $p1, $i52, $i56, $i2);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 604} {:cexpr "retval"} boogie_si_record_i32($i77);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb34;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i52, $i56);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i69 == 1;
    goto $bb27;

  $bb11:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i59, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb21:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i59, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb20;

  $bb24:
    assume $i65 == 1;
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 5);
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;
}



const osst_reposition_and_retry: ref;

axiom osst_reposition_and_retry == $sub.ref(0, 334370);

procedure osst_reposition_and_retry($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.38, $CurrAddr, $M.39, assertsPassed;



implementation osst_reposition_and_retry($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i36: i32;
  var $i37: i64;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p73: ref;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i103: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $i102: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i64;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 612} {:cexpr "osst_reposition_and_retry:arg:frame"} boogie_si_record_i32($i2);
    call {:si_unique_call 613} {:cexpr "osst_reposition_and_retry:arg:skip"} boogie_si_record_i32($i3);
    call {:si_unique_call 614} {:cexpr "osst_reposition_and_retry:arg:pending"} boogie_si_record_i32($i4);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p6 := tape_name($p0);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i7 := $udiv.i32(1000, $i3);
    call {:si_unique_call 616} {:cexpr "attempts"} boogie_si_record_i32($i7);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.6, jiffies);
    call {:si_unique_call 617} {:cexpr "startwait"} boogie_si_record_i64($i8);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i7, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_210 := printk.ref.ref(.str.69, $p6);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 5);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $r := $i102;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13, $i14 := 1, $i7, $i2, 0, $i4;
    goto $bb4;

  $bb4:
    call $i10, $i11, $i12, $i13, $i14, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p73, $i74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $p84, $i85, $i86, $i87, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i103, $i15, $i16, $i17, $i18, $i105, $i106, $i107, $i108, cmdloc_dummy_var_26, cmdloc_dummy_var_27, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212 := osst_reposition_and_retry_loop_$bb4($p0, $p1, $i3, $p5, $i8, $i10, $i11, $i12, $i13, $i14, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $p58, $p59, $p60, $p61, $p62, $p63, $p64, $i65, $p66, $p67, $p68, $p69, $i70, $i71, $p73, $i74, $i75, $i76, $i77, $p79, $i80, $i81, $i82, $p84, $i85, $i86, $i87, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i103, $i15, $i16, $i17, $i18, $i105, $i106, $i107, $i108, cmdloc_dummy_var_26, cmdloc_dummy_var_27, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212);
    goto $bb4_last;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i15, $i16, $i17, $i18 := $i10, $i11, $i12, $i13;
    goto $bb5;

  $bb5:
    call $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $p92, $i93, $i94, $i95, $i103, $i15, $i16, $i17, $i18, $i105, $i106, $i107, $i108, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212 := osst_reposition_and_retry_loop_$bb5($p0, $p1, $i3, $i8, $i14, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $p30, $i31, $i32, $i33, $i34, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $p45, $i46, $i47, $i48, $i49, $i50, $p51, $i52, $i53, $i54, $i55, $i56, $i57, $p92, $i93, $i94, $i95, $i103, $i15, $i16, $i17, $i18, $i105, $i106, $i107, $i108, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_212);
    goto $bb5_last;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.6, jiffies);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $i106 := $sub.i64($i105, $i8);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i107 := $sub.i64($i106, 15000);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i108 := $slt.i64($i107, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i108 == 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume $i108 == 1;
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i15, 0);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i39, $i40, $i41, $i42 := $i18, $i17, $i16, $i15;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i43 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 626} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i14, 0);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, $p92);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i95 := $i39;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $i103 := msecs_to_jiffies(100);
    call {:si_unique_call 634} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} vslice_dummy_var_212 := schedule_timeout_interruptible($i103);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i40, $i42;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i41, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i49 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb19:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i15, $i16, $i17, $i18 := $i48, $i41, $i47, $i39;
    goto $bb19_dummy;

  $bb42:
    assume $i94 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.6, $p96);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, $i95);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i102 := 0;
    goto $bb46;

  $bb44:
    assume $i98 == 1;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, $p99);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vslice_dummy_var_211 := printk.ref.ref.i32.i32(.str.68, $p6, $i100, $i95);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i102 := $sub.i32(0, 5);
    goto $bb46;

  $bb22:
    assume $i50 == 1;
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i53 := $sle.i32($i52, 49);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i54, $i55, $i56, $i57 := $i39, $i40, $i41, $i42;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb24;

  $bb25:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p5);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.38;
    call {:si_unique_call 628} cmdloc_dummy_var_27 := $memset.i8(cmdloc_dummy_var_26, $p58, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.38 := cmdloc_dummy_var_27;
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p59, 10);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p60, 1);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p61, 1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p1);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p5);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $p66 := osst_do_scsi($p62, $p0, $p63, 33280, 1, $i65, 0, 1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p66);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.6, $p69);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i89, $i90 := 0, $i57;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i56, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i91 == 1);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb39:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    $i10, $i11, $i12, $i13, $i14 := $i90, $i56, $i55, $i54, $i89;
    goto $bb39_dummy;

  $bb27:
    assume $i71 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.6, $p73);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 15);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 13);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i89, $i90 := $i14, 1;
    goto $bb38;

  $bb29:
    assume $i77 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.6, $p79);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb31;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 2);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb31;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_209 := printk.ref.ref(.str.67, $p6);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i44 == 1;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    call {:si_unique_call 627} {:cexpr "frame"} boogie_si_record_i32($i46);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $i47, $i48 := $i46, 1;
    goto $bb18;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i20 := $ule.i32($i17, 2989);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i28 := $i17;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i28, $i3);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i29, $i31);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, $i14);
    call {:si_unique_call 619} {:cexpr "expected"} boogie_si_record_i32($i33);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i28, $i3);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vslice_dummy_var_207 := osst_set_frame_position($p0, $p1, $i34, 1);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i16, 1);
    call {:si_unique_call 621} {:cexpr "attempts"} boogie_si_record_i32($i36);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $i37 := msecs_to_jiffies(100);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_208 := schedule_timeout_interruptible($i37);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i39, $i40, $i41, $i42 := $i33, $i28, $i36, 0;
    goto $bb15;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i20 == 1;
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i17, $i3);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i21, $i23);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $i14);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i26 := $ugt.i32($i25, 2989);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb11;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32(3000, $i3);
    call {:si_unique_call 618} {:cexpr "frame"} boogie_si_record_i32($i27);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb14;

  $bb19_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  $bb39_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;
}



const osst_read_back_buffer_and_rewrite: ref;

axiom osst_read_back_buffer_and_rewrite == $sub.ref(0, 335402);

procedure osst_read_back_buffer_and_rewrite($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.26, $M.25, $CurrAddr, $M.38, assertsPassed;



implementation osst_read_back_buffer_and_rewrite($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i16;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i64;
  var $i45: i32;
  var $i46: i32;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $i52: i1;
  var $p53: ref;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i61: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i81: i64;
  var $i82: i1;
  var $p80: ref;
  var $p84: ref;
  var $p85: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i1;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p90: ref;
  var $p62: ref;
  var $i92: i32;
  var $i93: i1;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i64;
  var $p108: ref;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i119: i32;
  var $i118: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i120: i32;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $p131: ref;
  var $p134: ref;
  var $p135: ref;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $p140: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $i201: i32;
  var $p202: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i1;
  var $p210: ref;
  var $i211: i8;
  var $i212: i32;
  var $i213: i1;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $i218: i1;
  var $p220: ref;
  var $i221: i8;
  var $i222: i32;
  var $i223: i1;
  var $p208: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $p196: ref;
  var $i233: i64;
  var $i234: i64;
  var $i235: i64;
  var $i236: i1;
  var $p237: ref;
  var $p224: ref;
  var $p195: ref;
  var $p231: ref;
  var $i232: i32;
  var $p238: ref;
  var $i239: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i240: i1;
  var $p242: ref;
  var $i243: i8;
  var $i244: i32;
  var $i245: i32;
  var $i246: i1;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;
  var $p253: ref;
  var $i254: i8;
  var $i255: i32;
  var $i256: i1;
  var $p259: ref;
  var $i260: i8;
  var $i261: i32;
  var $i262: i32;
  var $p264: ref;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i32;
  var $p270: ref;
  var $i271: i8;
  var $i272: i32;
  var $i273: i32;
  var $i274: i32;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i32;
  var $i282: i64;
  var $p283: ref;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p288: ref;
  var $i289: i32;
  var $p94: ref;
  var $i95: i32;
  var $i132: i32;
  var $p133: ref;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $p294: ref;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $i51: i32;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 637} {:cexpr "osst_read_back_buffer_and_rewrite:arg:frame"} boogie_si_record_i32($i2);
    call {:si_unique_call 638} {:cexpr "osst_read_back_buffer_and_rewrite:arg:skip"} boogie_si_record_i32($i3);
    call {:si_unique_call 639} {:cexpr "osst_read_back_buffer_and_rewrite:arg:pending"} boogie_si_record_i32($i4);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.6, $p1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    call {:si_unique_call 640} {:cexpr "nframes"} boogie_si_record_i32($i8);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($add.ref($p12, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.6, $p16);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $i20 := __fswab16($i19);
    call {:si_unique_call 642} {:cexpr "tmp"} boogie_si_record_i16($i20);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    call {:si_unique_call 643} {:cexpr "blks_per_frame"} boogie_si_record_i32($i21);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i28 := __fswab32($i27);
    call {:si_unique_call 645} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i8, $i4);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i28, $i29);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    call {:si_unique_call 646} {:cexpr "frame_seq_number"} boogie_si_record_i32($i31);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.6, $p32);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 512)), $mul.ref(52, 1));
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i38 := __fswab32($i37);
    call {:si_unique_call 648} {:cexpr "tmp___1"} boogie_si_record_i32($i38);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i8, $i4);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(1, $i39);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, $i21);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i38, $i41);
    call {:si_unique_call 649} {:cexpr "logical_blk_num"} boogie_si_record_i32($i42);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p43 := tape_name($p0);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.6, jiffies);
    call {:si_unique_call 651} {:cexpr "startwait"} boogie_si_record_i64($i44);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i8, 1);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i46 := $mul.i32($i45, 32768);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p48 := ldv_vmalloc_24($i47);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i4, 0);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $p53 := (if $i52 == 1 then .str.71 else .str.27);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vslice_dummy_var_213 := printk.ref.ref.i32.ref(.str.70, $p43, $i8, $p53);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $i55 := $mul.i32($i8, 32768);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i55);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p48, $mul.ref($i56, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_214 := osst_copy_from_buffer($p59, $p57);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32(0, $i8);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p62 := $p6;
    assume {:branchcond $i61} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p62);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vslice_dummy_var_217 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 662} {:cexpr "osst_read_back_buffer_and_rewrite:arg:new_frame"} boogie_si_record_i32($i2);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i8, $i4);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i93 := $sgt.i32($i92, 0);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p94, $i95 := $p48, 1;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i93 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i132, $p133 := $i95, $p94;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i132, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i4, 0);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vfree($p48);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i51 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $r := $i51;
    return;

  $bb91:
    assume $i296 == 1;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.6, $p297);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} vslice_dummy_var_226 := osst_copy_to_buffer($p298, $p133);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb88:
    assume $i290 == 1;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.6, $p291);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i293 := $eq.i32($i292, 4);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p294 := (if $i293 == 1 then .str.75 else .str.76);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_225 := printk.ref.ref.ref(.str.74, $p43, $p294);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb19:
    assume $i93 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i96, $i97, $i98, $p99, $p100 := 0, $i2, 1, $p48, $p62;
    goto $bb22;

  $bb22:
    call $i101, $p102, $i103, $i104, $i105, $i106, $i107, $p108, $i112, $i113, $i114, $i115, $i116, $i117, $i119, $i118, $p109, $i110, $i111, $i120, $p124, $i125, $i126, $i128, $i129, $i130, $p131, $p134, $p135, $i136, $i137, $i138, $p139, $p140, $p142, $p143, $p144, $p145, $p149, $i150, $i151, $p152, $p153, $p154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $p166, $p167, $i168, $p169, $p170, $p171, $p172, $i173, $i174, $p179, $i180, $i181, $i182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $p197, $p198, $p199, $p200, $i201, $p202, $p204, $i205, $i206, $i207, $p210, $i211, $i212, $i213, $p215, $i216, $i217, $i218, $p220, $i221, $i222, $i223, $p208, $p225, $p226, $p227, $i228, $i229, $i230, $p196, $i233, $i234, $i235, $i236, $p237, $p224, $p195, $p231, $i232, $p238, $i239, $p175, $p176, $i177, $i178, $i240, $p242, $i243, $i244, $i245, $i246, $p248, $i249, $i250, $i251, $p253, $i254, $i255, $i256, $p259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $i274, $p276, $i277, $i278, $i279, $i280, $i281, $i282, $p283, $p285, $i286, $i287, $i96, $i97, $i98, $p99, $p100, $p288, $i289, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_222, vslice_dummy_var_224 := osst_read_back_buffer_and_rewrite_loop_$bb22($p0, $p1, $i2, $i3, $i4, $p5, $i8, $i21, $i31, $i42, $i44, $p48, $i92, $i101, $p102, $i103, $i104, $i105, $i106, $i107, $p108, $i112, $i113, $i114, $i115, $i116, $i117, $i119, $i118, $p109, $i110, $i111, $i120, $p124, $i125, $i126, $i128, $i129, $i130, $p131, $p134, $p135, $i136, $i137, $i138, $p139, $p140, $p142, $p143, $p144, $p145, $p149, $i150, $i151, $p152, $p153, $p154, $p155, $p156, $i157, $i158, $i159, $i160, $i161, $p162, $p163, $p164, $p165, $p166, $p167, $i168, $p169, $p170, $p171, $p172, $i173, $i174, $p179, $i180, $i181, $i182, $p183, $p184, $p185, $p186, $p187, $i188, $p189, $p190, $p191, $p192, $i193, $i194, $p197, $p198, $p199, $p200, $i201, $p202, $p204, $i205, $i206, $i207, $p210, $i211, $i212, $i213, $p215, $i216, $i217, $i218, $p220, $i221, $i222, $i223, $p208, $p225, $p226, $p227, $i228, $i229, $i230, $p196, $i233, $i234, $i235, $i236, $p237, $p224, $p195, $p231, $i232, $p238, $i239, $p175, $p176, $i177, $i178, $i240, $p242, $i243, $i244, $i245, $i246, $p248, $i249, $i250, $i251, $p253, $i254, $i255, $i256, $p259, $i260, $i261, $i262, $p264, $i265, $i266, $i267, $i268, $p270, $i271, $i272, $i273, $i274, $p276, $i277, $i278, $i279, $i280, $i281, $i282, $p283, $p285, $i286, $i287, $i96, $i97, $i98, $p99, $p100, $p288, $i289, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_222, vslice_dummy_var_224);
    goto $bb22_last;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i98, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    $p134, $p135, $i136, $i137, $i138 := $p100, $p99, $i98, $i97, $i96;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.6, $p139);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_222 := osst_copy_to_buffer($p140, $p135);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.6, $p142);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p143, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.6, $p144);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($add.ref($p145, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.6, $p149);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i151 := __fswab32($i150);
    call {:si_unique_call 673} {:cexpr "tmp___4"} boogie_si_record_i32($i151);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p153 := $load.ref($M.6, $p152);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.6, $p154);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.6, $p156);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i159 := $add.i32($i31, $i138);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i160 := $mul.i32($i138, $i21);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i161 := $add.i32($i160, $i42);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} osst_init_aux($p0, $i158, $i159, $i161, $i151, $i21);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p5);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.39;
    call {:si_unique_call 675} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p162, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := cmdloc_dummy_var_31;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p163, 10);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p164, 1);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p165, 1);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p166 := $bitcast.ref.ref($p5);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i168 := $load.i32($M.6, $p167);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p169 := osst_do_scsi($p134, $p0, $p166, 33280, 1, $i168, 0, 1);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.6, $p170);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p171, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.6, $p172);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i173, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i174 == 1);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($p135, $mul.ref(32768, 1));
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i138, 1);
    call {:si_unique_call 677} {:cexpr "i"} boogie_si_record_i32($i180);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i8, $i4);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, $i180);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    $p238, $i239 := $p169, $i136;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p175, $p176, $i177, $i178 := $p238, $p179, $i239, $i180;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p175);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i240 := $ne.i32($i177, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    $p285, $i286 := $p176, $i178;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i287 := $sgt.i32($i92, $i286);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p288, $i289 := $p285, $i177;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $p94, $i95 := $p288, $i289;
    goto $bb21;

  $bb85:
    assume $i287 == 1;
    assume {:verifier.code 0} true;
    $i96, $i97, $i98, $p99, $p100 := $i286, $i137, $i177, $p285, $p175;
    goto $bb85_dummy;

  $bb74:
    assume $i240 == 1;
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.6, $p242);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i245 := $and.i32($i244, 15);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 13);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i246 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i260 := $load.i8($M.6, $p259);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32($i260);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i262 := $shl.i32($i261, 24);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.6, $p264);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i267 := $shl.i32($i266, 16);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i268 := $or.i32($i262, $i267);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(5, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.6, $p270);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i273 := $shl.i32($i272, 8);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i274 := $or.i32($i268, $i273);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(6, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.6, $p276);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i279 := $or.i32($i274, $i278);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i280 := $sub.i32($i279, $i137);
    call {:si_unique_call 686} {:cexpr "i"} boogie_si_record_i32($i280);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i281 := $mul.i32($i280, 32768);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i282 := $sext.i32.i64($i281);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($p48, $mul.ref($i282, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_224 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p285, $i286 := $p283, $i280;
    goto $bb84;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i246 == 1;
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.6, $p248);
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 0);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb78;

  $bb79:
    assume $i251 == 1;
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i254 := $load.i8($M.6, $p253);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i255 := $zext.i8.i32($i254);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 2);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb78;

  $bb81:
    assume $i256 == 1;
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_223 := printk.ref.ref(.str.67, $p43);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} vfree($p48);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb3;

  $bb46:
    assume $i182 == 1;
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p5);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.39;
    call {:si_unique_call 678} cmdloc_dummy_var_33 := $memset.i8(cmdloc_dummy_var_32, $p183, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := cmdloc_dummy_var_33;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p184, 16);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p185, 1);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p5);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.6, $p187);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p189 := osst_do_scsi($p169, $p0, $p186, 0, 3, $i188, 0, 1);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.6, $p190);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.6, $p192);
    call {:si_unique_call 680} {:cexpr "flag"} boogie_si_record_i32($i193);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p195 := $p189;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p231, $i232 := $p195, $i193;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p238, $i239 := $p231, $i232;
    goto $bb73;

  $bb48:
    assume $i194 == 1;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p196 := $p189;
    goto $bb51;

  $bb51:
    call $p197, $p198, $p199, $p200, $i201, $p202, $p204, $i205, $i206, $i207, $p210, $i211, $i212, $i213, $p215, $i216, $i217, $i218, $p220, $i221, $i222, $i223, $p208, $p196, $i233, $i234, $i235, $i236, $p237, $p224, cmdloc_dummy_var_34, cmdloc_dummy_var_35 := osst_read_back_buffer_and_rewrite_loop_$bb51($p0, $p5, $i44, $i194, $p197, $p198, $p199, $p200, $i201, $p202, $p204, $i205, $i206, $i207, $p210, $i211, $i212, $i213, $p215, $i216, $i217, $i218, $p220, $i221, $i222, $i223, $p208, $p196, $i233, $i234, $i235, $i236, $p237, $p224, cmdloc_dummy_var_34, cmdloc_dummy_var_35);
    goto $bb51_last;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i233 := $load.i64($M.6, jiffies);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i234 := $sub.i64($i233, $i44);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i235 := $sub.i64($i234, 15000);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i236 := $slt.i64($i235, 0);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p237 := $p196;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p195 := $p237;
    goto $bb50;

  $bb70:
    assume $i236 == 1;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p5);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_34 := $M.39;
    call {:si_unique_call 681} cmdloc_dummy_var_35 := $memset.i8(cmdloc_dummy_var_34, $p197, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := cmdloc_dummy_var_35;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p198, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p5);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.6, $p200);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p202 := osst_do_scsi($p196, $p0, $p199, 0, 3, $i201, 0, 1);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.6, $p204);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $p208 := $p202;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p226 := $load.ref($M.6, $p225);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p226, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.6, $p227);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i230 := $i193;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p231, $i232 := $p208, $i230;
    goto $bb69;

  $bb66:
    assume $i229 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i230 := 1;
    goto $bb68;

  $bb53:
    assume $i207 == 1;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.6, $p210);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i32($i211);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 4);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $p208 := $p202;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i213 == 1);
    goto $bb55;

  $bb56:
    assume $i213 == 1;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.6, $p215);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  $bb60:
    assume !($i218 == 1);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.6, $p220);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 8);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p208 := $p202;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb55;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} msleep(100);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p224 := $p202;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p195 := $p224;
    goto $bb50;

  $bb63:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $p196 := $p202;
    goto $bb63_dummy;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb59;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i174 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $p175, $p176, $i177, $i178 := $p169, $p135, 1, $i138;
    goto $bb45;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i101 == 1;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.6, $p102);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 4);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i104 == 1);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i112 := $sle.i32($i97, 2989);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i97, $i3);
    call {:si_unique_call 667} {:cexpr "new_frame"} boogie_si_record_i32($i119);
    assume {:verifier.code 0} true;
    $i118 := $i119;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p109, $i110, $i111 := $p99, $i118, $i96;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i110, $i111);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_218 := osst_set_frame_position($p0, $p1, $i120, 0);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} vslice_dummy_var_219 := osst_wait_ready($p0, $p1, 60, 1);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_220 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p1);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i2, 1000);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $i126 := $ugt.i32($i110, $i125);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i128 := $add.i32($i8, $i4);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i129 := $sle.i32($i128, $i111);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i130, $p131 := $i98, $p109;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p134, $p135, $i136, $i137, $i138 := $p124, $p109, 0, $i110, $i111;
    goto $bb42;

  $bb38:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i132, $p133 := $i130, $p131;
    goto $bb40;

  $bb35:
    assume $i126 == 1;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} vslice_dummy_var_221 := printk.ref.ref(.str.73, $p43);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vfree($p48);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i112 == 1;
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i97, $i3);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i113, $i8);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i115 := $add.i32($i114, $i4);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i116 := $ugt.i32($i115, 2989);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb31;

  $bb32:
    assume $i116 == 1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i117 := $sub.i32(3000, $i96);
    call {:si_unique_call 668} {:cexpr "new_frame"} boogie_si_record_i32($i117);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i118 := $i117;
    goto $bb34;

  $bb26:
    assume $i104 == 1;
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i105 := $add.i32($i96, $i3);
    call {:si_unique_call 663} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i106 := $mul.i32($i3, 32768);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i106);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p99, $mul.ref($i107, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $p109, $i110, $i111 := $p108, $i97, $i105;
    goto $bb28;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i61 == 1;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i63, $p64, $p65 := 0, $p48, $p6;
    goto $bb8;

  $bb8:
    call $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $p74, $p75, $p76, $p77, $i78, $i79, $i81, $i82, $p80, $p84, $p85, $i87, $p88, $i89, $i63, $p64, $p65, $p90, cmdloc_dummy_var_28, cmdloc_dummy_var_29, vslice_dummy_var_216 := osst_read_back_buffer_and_rewrite_loop_$bb8($p0, $p5, $i8, $p66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $p74, $p75, $p76, $p77, $i78, $i79, $i81, $i82, $p80, $p84, $p85, $i87, $p88, $i89, $i63, $p64, $p65, $p90, cmdloc_dummy_var_28, cmdloc_dummy_var_29, vslice_dummy_var_216);
    goto $bb8_last;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p5);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_28 := $M.39;
    call {:si_unique_call 655} cmdloc_dummy_var_29 := $memset.i8(cmdloc_dummy_var_28, $p66, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := cmdloc_dummy_var_29;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p67, 60);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p68, 6);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p69, $sub.i8(0, 128));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p70, 0);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p5);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.6, $p72);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $p74 := osst_do_scsi($p65, $p0, $p71, 33280, 2, $i73, 0, 1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.6, $p77);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $p80 := $p74;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i79 == 1);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p74);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $p80 := $p74;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} vslice_dummy_var_216 := osst_copy_from_buffer($p85, $p64);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i87 := $add.i32($i63, 1);
    call {:si_unique_call 660} {:cexpr "i"} boogie_si_record_i32($i87);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p64, $mul.ref(32768, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i87, $i8);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $p90 := $p74;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p62 := $p90;
    goto $bb7;

  $bb16:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i63, $p64, $p65 := $i87, $p88, $p74;
    goto $bb16_dummy;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} vslice_dummy_var_215 := printk.ref.ref(.str.72, $p43);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vfree($p48);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p1, $p80);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb11;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i50 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb63_dummy:
    assume false;
    return;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  $bb85_dummy:
    assume false;
    return;

  $bb22_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5451;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 336434);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 337466);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i1 := __arch_swab32($i0);
    call {:si_unique_call 694} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_vmalloc_24: ref;

axiom ldv_vmalloc_24 == $sub.ref(0, 338498);

procedure ldv_vmalloc_24($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_24($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "ldv_vmalloc_24:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} ldv_check_alloc_nonatomic();
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} $p1 := ldv_undef_ptr();
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_244:
    assume !assertsPassed;
    return;
}



const osst_copy_from_buffer: ref;

axiom osst_copy_from_buffer == $sub.ref(0, 339530);

procedure osst_copy_from_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_copy_from_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i39: i32;
  var $i40: i32;
  var $i6: i32;
  var $i7: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i32;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.6, $p2);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 32768;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i7, 0);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.6, $p42);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, $sub.i32(0, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, $i6);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} vslice_dummy_var_227 := printk.ref.i32.i32(.str.77, $i7, $i6);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 5);
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb13;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i8, $p9, $i10 := 32768, $p1, 0;
    goto $bb4;

  $bb4:
    call $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i8, $p9, $i10, $i39, $i40, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38 := osst_copy_from_buffer_loop_$bb4($p0, $p2, $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i8, $p9, $i10, $i39, $i40, cmdloc_dummy_var_36, cmdloc_dummy_var_37, cmdloc_dummy_var_38);
    goto $bb4_last;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, $i8);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i22 := $i8;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i10);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 40));
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p27 := sg_page($p26);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p28 := lowmem_page_address($p27);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i22);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.6;
    cmdloc_dummy_var_37 := $M.6;
    call {:si_unique_call 700} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p9, $p28, $i29, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_38;
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i8, $i22);
    call {:si_unique_call 701} {:cexpr "do_count"} boogie_si_record_i32($i30);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i22);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p9, $mul.ref($i31, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i10, 1);
    call {:si_unique_call 702} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.6, $p2);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i30, 0);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i38 := $and.i1($i36, $i37);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i33, $i30;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i39, $i40;
    goto $bb3;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9, $i10 := $i30, $p32, $i33;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i10);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i17, 40)), $mul.ref(20, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;
}



const osst_copy_to_buffer: ref;

axiom osst_copy_to_buffer == $sub.ref(0, 340562);

procedure osst_copy_to_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_copy_to_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i32;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i39: i32;
  var $i40: i32;
  var $i6: i32;
  var $i7: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i32;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.6, $p2);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i6, $i7 := 0, 32768;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i7, 0);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i41 == 1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.6, $p42);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, $sub.i32(0, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, $i6);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i48 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $r := $i48;
    return;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} vslice_dummy_var_228 := printk.ref.i32.i32(.str.78, $i7, $i6);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32(0, 5);
    goto $bb17;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb13;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $i8, $p9, $i10 := 32768, $p1, 0;
    goto $bb4;

  $bb4:
    call $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i8, $p9, $i10, $i39, $i40, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41 := osst_copy_to_buffer_loop_$bb4($p0, $p2, $i11, $p14, $i15, $i16, $i17, $p20, $i21, $i22, $p23, $p24, $i25, $p26, $p27, $p28, $i29, $i30, $i31, $p32, $i33, $i34, $i35, $i36, $i37, $i38, $i8, $p9, $i10, $i39, $i40, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41);
    goto $bb4_last;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i16 := $ult.i32($i15, $i8);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i22 := $i8;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i10);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p24, $mul.ref($i25, 40));
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $p27 := sg_page($p26);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p28 := lowmem_page_address($p27);
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i22);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.6;
    cmdloc_dummy_var_40 := $M.6;
    call {:si_unique_call 706} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p28, $p9, $i29, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_41;
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32($i8, $i22);
    call {:si_unique_call 707} {:cexpr "do_count"} boogie_si_record_i32($i30);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i22);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p9, $mul.ref($i31, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i10, 1);
    call {:si_unique_call 708} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.6, $p2);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i33);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i30, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $i38 := $and.i1($i36, $i37);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i33, $i30;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i6, $i7 := $i39, $i40;
    goto $bb3;

  $bb9:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i8, $p9, $i10 := $i30, $p32, $i33;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i10);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i17, 40)), $mul.ref(20, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;
}



const osst_init_aux: ref;

axiom osst_init_aux == $sub.ref(0, 341594);

procedure osst_init_aux($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_init_aux($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i16;
  var $p60: ref;
  var $i61: i1;
  var $i62: i32;
  var $i63: i8;
  var $p66: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i16;
  var $i75: i32;
  var $i76: i16;
  var $i77: i16;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "osst_init_aux:arg:frame_type"} boogie_si_record_i32($i1);
    call {:si_unique_call 711} {:cexpr "osst_init_aux:arg:frame_seq_number"} boogie_si_record_i32($i2);
    call {:si_unique_call 712} {:cexpr "osst_init_aux:arg:logical_blk_num"} boogie_si_record_i32($i3);
    call {:si_unique_call 713} {:cexpr "osst_init_aux:arg:blk_sz"} boogie_si_record_i32($i4);
    call {:si_unique_call 714} {:cexpr "osst_init_aux:arg:blk_cnt"} boogie_si_record_i32($i5);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p9);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.6;
    call {:si_unique_call 715} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p16, 0, 512, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_43;
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 0);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(4, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.6;
    cmdloc_dummy_var_45 := $M.6;
    call {:si_unique_call 716} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p19, .str.49, 4, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_46;
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(8, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i1);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, $i21);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i1, 128);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.6, $p92);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i94 := __fswab32($i93);
    call {:si_unique_call 736} {:cexpr "tmp___8"} boogie_si_record_i32($i94);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p95, $i94);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(196, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $sub.i32(0, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.6, $p97);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} $i99 := __fswab32($i98);
    call {:si_unique_call 738} {:cexpr "tmp___9"} boogie_si_record_i32($i99);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p100, $i99);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(748, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.6, $p101);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $i103 := __fswab32($i102);
    call {:si_unique_call 740} {:cexpr "tmp___10"} boogie_si_record_i32($i103);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p104, $i103);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    $p46 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 8);
    $p47 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(1, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    $p48 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(2, 1));
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 1);
    $p49 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(3, 1));
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i50 := __fswab32($i4);
    call {:si_unique_call 722} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    $p53 := $add.ref($add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p53, $i50);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i5);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} $i57 := __fswab16($i56);
    call {:si_unique_call 724} {:cexpr "tmp___2"} boogie_si_record_i16($i57);
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p60, $i57);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i1, 2);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i62 := (if $i61 == 1 then 1 else 12);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    $p66 := $add.ref($add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p66, $i63);
    $p69 := $add.ref($add.ref($add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p69, 0);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(12, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p70, 0);
    $p71 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p71, 0);
    $p72 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p72, 1);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i74 := $load.i16($M.6, $p73);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i74);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} $i77 := __fswab16($i76);
    call {:si_unique_call 726} {:cexpr "tmp___3"} boogie_si_record_i16($i77);
    $p78 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p78, $i77);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} $i81 := __fswab32($i80);
    call {:si_unique_call 728} {:cexpr "tmp___4"} boogie_si_record_i32($i81);
    $p82 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p82, $i81);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.6, $p83);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} $i85 := __fswab32($i84);
    call {:si_unique_call 730} {:cexpr "tmp___5"} boogie_si_record_i32($i85);
    $p86 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p86, $i85);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $i87 := __fswab32($i2);
    call {:si_unique_call 732} {:cexpr "tmp___6"} boogie_si_record_i32($i87);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p88, $i87);
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(48, 1));
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} $i90 := __fswab32($i3);
    call {:si_unique_call 734} {:cexpr "tmp___7"} boogie_si_record_i32($i90);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(52, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i90);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb12;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i32 := __fswab32($i31);
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(12, 1));
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i32);
    $p34 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, $sub.i8(0, 1));
    $p35 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 1);
    $p36 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p36, $sub.i16(0, 1));
    $p37 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, 0);
    $p38 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p38, $sub.i32(0, 1224015872));
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(48, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p40, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(52, 1));
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i44 := __fswab32($i43);
    call {:si_unique_call 720} {:cexpr "tmp___0"} boogie_si_record_i32($i44);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p9, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p45, $i44);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb18;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb12;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb21;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 342626);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_check_alloc_nonatomic: ref;

axiom ldv_check_alloc_nonatomic == $sub.ref(0, 343658);

procedure ldv_check_alloc_nonatomic();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_nonatomic()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i0 := $M.22;
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_error();
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_247:
    assume !assertsPassed;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 344690);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 743} $i1 := devirtbounce.5(0, $i0);
    call {:si_unique_call 744} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 345722);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 747} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_timeout_interruptible: ref;

axiom schedule_timeout_interruptible == $sub.ref(0, 346754);

procedure schedule_timeout_interruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_interruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 748} {:cexpr "schedule_timeout_interruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 749} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 750} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 347786);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 751} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 1} true;
    call {:si_unique_call 752} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 753} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const osst_space_over_filemarks_forward_slow: ref;

axiom osst_space_over_filemarks_forward_slow == $sub.ref(0, 348818);

procedure osst_space_over_filemarks_forward_slow($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_space_over_filemarks_forward_slow($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i16;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} {:cexpr "osst_space_over_filemarks_forward_slow:arg:mt_op"} boogie_si_record_i32($i2);
    call {:si_unique_call 755} {:cexpr "osst_space_over_filemarks_forward_slow:arg:mt_count"} boogie_si_record_i32($i3);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i4 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i7 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 759} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    call $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $i38, $p39, $i40, $i41 := osst_space_over_filemarks_forward_slow_loop_$bb8($p0, $p1, $i3, $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $i18, $i19, $p20, $p21, $p22, $p23, $p24, $i25, $i26, $i27, $i38, $p39, $i40, $i41);
    goto $bb8_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i19 := $i9;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.6, $p20);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.6, $p24);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i19, $i3);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p39, 0);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} $i40 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    call {:si_unique_call 762} {:cexpr "tmp___0"} boogie_si_record_i32($i40);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i9 := $i19;
    goto $bb24_dummy;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i38 == 1;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i2, 1);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, $i45);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.6, $p48);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, 0);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.6, $p51);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p53, 0);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.6, $p54);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.6, $p56);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($add.ref($add.ref($p57, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.6, $p61);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $i65 := __fswab16($i64);
    call {:si_unique_call 764} {:cexpr "tmp___1"} boogie_si_record_i16($i65);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i65);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i67, $i68);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p70, $i69);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 1);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i33 := $ugt.i32($i29, $i32);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32($i35, 1);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i36);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i9, 1);
    call {:si_unique_call 760} {:cexpr "cnt"} boogie_si_record_i32($i18);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb13;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb6;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb24_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;
}



const osst_seek_logical_blk: ref;

axiom osst_seek_logical_blk == $sub.ref(0, 349850);

procedure osst_seek_logical_blk($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $CurrAddr, $M.39, $M.38, $M.24, assertsPassed;



implementation osst_seek_logical_blk($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i32: i32;
  var $i37: i1;
  var $i38: i32;
  var $i40: i32;
  var $i39: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i59: i32;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $i74: i16;
  var $i75: i16;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i89: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $i145: i8;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $p180: ref;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i8;
  var $p185: ref;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i32;
  var $i194: i32;
  var $i199: i32;
  var $i190: i32;
  var $p200: ref;
  var $i201: i32;
  var $i186: i32;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $i206: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $p214: ref;
  var $i215: i32;
  var $i216: i32;
  var $i207: i32;
  var $i208: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p244: ref;
  var $i245: i16;
  var $i246: i32;
  var $i247: i16;
  var $i248: i16;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $i257: i1;
  var $p258: ref;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $p263: ref;
  var $i264: i32;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i262: i32;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $p273: ref;
  var $i274: i32;
  var $i275: i1;
  var $i276: i32;
  var $i272: i32;
  var $i277: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i278: i32;
  var $i283: i32;
  var $i284: i32;
  var $i232: i32;
  var $i233: i32;
  var $p285: ref;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i32;
  var $p296: ref;
  var $i297: i32;
  var $i298: i32;
  var $i289: i32;
  var $i290: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i32;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p310: ref;
  var $i311: i32;
  var $i312: i32;
  var $i313: i32;
  var $p316: ref;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p326: ref;
  var $i327: i16;
  var $i328: i32;
  var $i329: i16;
  var $i330: i16;
  var $p331: ref;
  var $i332: i32;
  var $i333: i32;
  var $i334: i32;
  var $i335: i1;
  var $p336: ref;
  var $i337: i8;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i32;
  var $i349: i32;
  var $i344: i32;
  var $p350: ref;
  var $i351: i32;
  var $i352: i32;
  var $i353: i32;
  var $p355: ref;
  var $i356: i32;
  var $i357: i1;
  var $i358: i32;
  var $i354: i32;
  var $i359: i1;
  var $p361: ref;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i360: i32;
  var $i365: i32;
  var $i366: i32;
  var $i314: i32;
  var $i315: i32;
  var $p367: ref;
  var $i368: i32;
  var $i369: i32;
  var $i370: i1;
  var $p373: ref;
  var $i374: i32;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $p378: ref;
  var $i379: i32;
  var $i380: i32;
  var $i371: i32;
  var $i372: i32;
  var $i381: i1;
  var $i382: i32;
  var $i383: i32;
  var $i385: i32;
  var $i386: i1;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $i390: i32;
  var $i391: i1;
  var $p392: ref;
  var $i393: i32;
  var $i394: i32;
  var $i395: i32;
  var $p398: ref;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $p408: ref;
  var $i409: i16;
  var $i410: i32;
  var $i411: i16;
  var $i412: i16;
  var $p413: ref;
  var $i414: i32;
  var $i415: i32;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $i419: i8;
  var $i420: i32;
  var $i421: i1;
  var $p422: ref;
  var $i423: i32;
  var $i424: i32;
  var $i425: i1;
  var $p427: ref;
  var $i428: i32;
  var $i429: i32;
  var $i430: i32;
  var $i431: i32;
  var $i426: i32;
  var $p432: ref;
  var $i433: i32;
  var $i434: i32;
  var $i435: i32;
  var $p437: ref;
  var $i438: i32;
  var $i439: i1;
  var $i440: i32;
  var $i436: i32;
  var $i441: i1;
  var $p443: ref;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i442: i32;
  var $i447: i32;
  var $i448: i32;
  var $i396: i32;
  var $i397: i32;
  var $p449: ref;
  var $i450: i32;
  var $i451: i32;
  var $i452: i1;
  var $p455: ref;
  var $i456: i32;
  var $i457: i32;
  var $i458: i32;
  var $i459: i32;
  var $p460: ref;
  var $i461: i32;
  var $i462: i32;
  var $i453: i32;
  var $i454: i32;
  var $i463: i1;
  var $i464: i32;
  var $i465: i32;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i470: i1;
  var $p471: ref;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $i475: i32;
  var $i476: i32;
  var $i477: i32;
  var $p480: ref;
  var $i481: i32;
  var $i482: i1;
  var $p483: ref;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $p490: ref;
  var $i491: i16;
  var $i492: i32;
  var $i493: i16;
  var $i494: i16;
  var $p495: ref;
  var $i496: i32;
  var $i497: i32;
  var $i498: i32;
  var $i499: i1;
  var $p500: ref;
  var $i501: i8;
  var $i502: i32;
  var $i503: i1;
  var $p504: ref;
  var $i505: i32;
  var $i506: i32;
  var $i507: i1;
  var $p509: ref;
  var $i510: i32;
  var $i511: i32;
  var $i512: i32;
  var $i513: i32;
  var $i508: i32;
  var $p514: ref;
  var $i515: i32;
  var $i516: i32;
  var $i517: i32;
  var $p519: ref;
  var $i520: i32;
  var $i521: i1;
  var $i522: i32;
  var $i518: i32;
  var $i523: i1;
  var $p525: ref;
  var $i526: i32;
  var $i527: i1;
  var $i528: i32;
  var $i524: i32;
  var $i529: i32;
  var $i530: i32;
  var $i478: i32;
  var $i479: i32;
  var $p531: ref;
  var $i532: i32;
  var $i533: i32;
  var $i534: i1;
  var $p537: ref;
  var $i538: i32;
  var $i539: i32;
  var $i540: i32;
  var $i541: i32;
  var $p542: ref;
  var $i543: i32;
  var $i544: i32;
  var $i535: i32;
  var $i536: i32;
  var $i545: i1;
  var $i546: i32;
  var $i547: i32;
  var $i549: i32;
  var $i550: i1;
  var $i551: i32;
  var $i552: i1;
  var $p553: ref;
  var $i554: i32;
  var $i555: i1;
  var $p556: ref;
  var $i557: i32;
  var $i558: i32;
  var $i559: i32;
  var $p562: ref;
  var $i563: i32;
  var $i564: i1;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p572: ref;
  var $i573: i16;
  var $i574: i32;
  var $i575: i16;
  var $i576: i16;
  var $p577: ref;
  var $i578: i32;
  var $i579: i32;
  var $i580: i32;
  var $i581: i1;
  var $p582: ref;
  var $i583: i8;
  var $i584: i32;
  var $i585: i1;
  var $p586: ref;
  var $i587: i32;
  var $i588: i32;
  var $i589: i1;
  var $p591: ref;
  var $i592: i32;
  var $i593: i32;
  var $i594: i32;
  var $i595: i32;
  var $i590: i32;
  var $p596: ref;
  var $i597: i32;
  var $i598: i32;
  var $i599: i32;
  var $p601: ref;
  var $i602: i32;
  var $i603: i1;
  var $i604: i32;
  var $i600: i32;
  var $i605: i1;
  var $p607: ref;
  var $i608: i32;
  var $i609: i1;
  var $i610: i32;
  var $i606: i32;
  var $i611: i32;
  var $i612: i32;
  var $i560: i32;
  var $i561: i32;
  var $p613: ref;
  var $i614: i32;
  var $i615: i32;
  var $i616: i1;
  var $p619: ref;
  var $i620: i32;
  var $i621: i32;
  var $i622: i32;
  var $i623: i32;
  var $p624: ref;
  var $i625: i32;
  var $i626: i32;
  var $i617: i32;
  var $i618: i32;
  var $i627: i1;
  var $i628: i32;
  var $i629: i32;
  var $i631: i32;
  var $i632: i1;
  var $i633: i32;
  var $i634: i1;
  var $p635: ref;
  var $i636: i32;
  var $i637: i1;
  var $p638: ref;
  var $i639: i32;
  var $i640: i32;
  var $i641: i32;
  var $p644: ref;
  var $i645: i32;
  var $i646: i1;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $p654: ref;
  var $i655: i16;
  var $i656: i32;
  var $i657: i16;
  var $i658: i16;
  var $p659: ref;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i1;
  var $p664: ref;
  var $i665: i8;
  var $i666: i32;
  var $i667: i1;
  var $p668: ref;
  var $i669: i32;
  var $i670: i32;
  var $i671: i1;
  var $p673: ref;
  var $i674: i32;
  var $i675: i32;
  var $i676: i32;
  var $i677: i32;
  var $i672: i32;
  var $p678: ref;
  var $i679: i32;
  var $i680: i32;
  var $i681: i32;
  var $p683: ref;
  var $i684: i32;
  var $i685: i1;
  var $i686: i32;
  var $i682: i32;
  var $i687: i1;
  var $p689: ref;
  var $i690: i32;
  var $i691: i1;
  var $i692: i32;
  var $i688: i32;
  var $i693: i32;
  var $i694: i32;
  var $i642: i32;
  var $i643: i32;
  var $p695: ref;
  var $i696: i32;
  var $i697: i32;
  var $i698: i1;
  var $p701: ref;
  var $i702: i32;
  var $i703: i32;
  var $i704: i32;
  var $i705: i32;
  var $p706: ref;
  var $i707: i32;
  var $i708: i32;
  var $i699: i32;
  var $i700: i32;
  var $i709: i1;
  var $i710: i32;
  var $i711: i32;
  var $i713: i32;
  var $i714: i1;
  var $i715: i32;
  var $i716: i1;
  var $p717: ref;
  var $i718: i32;
  var $i719: i1;
  var $p720: ref;
  var $i721: i32;
  var $i722: i32;
  var $i723: i32;
  var $p726: ref;
  var $i727: i32;
  var $i728: i1;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p736: ref;
  var $i737: i16;
  var $i738: i32;
  var $i739: i16;
  var $i740: i16;
  var $p741: ref;
  var $i742: i32;
  var $i743: i32;
  var $i744: i32;
  var $i745: i1;
  var $p746: ref;
  var $i747: i8;
  var $i748: i32;
  var $i749: i1;
  var $p750: ref;
  var $i751: i32;
  var $i752: i32;
  var $i753: i1;
  var $p755: ref;
  var $i756: i32;
  var $i757: i32;
  var $i758: i32;
  var $i759: i32;
  var $i754: i32;
  var $p760: ref;
  var $i761: i32;
  var $i762: i32;
  var $i763: i32;
  var $p765: ref;
  var $i766: i32;
  var $i767: i1;
  var $i768: i32;
  var $i764: i32;
  var $i769: i1;
  var $p771: ref;
  var $i772: i32;
  var $i773: i1;
  var $i774: i32;
  var $i770: i32;
  var $i775: i32;
  var $i776: i32;
  var $i724: i32;
  var $i725: i32;
  var $p777: ref;
  var $i778: i32;
  var $i779: i32;
  var $i780: i1;
  var $p783: ref;
  var $i784: i32;
  var $i785: i32;
  var $i786: i32;
  var $i787: i32;
  var $p788: ref;
  var $i789: i32;
  var $i790: i32;
  var $i781: i32;
  var $i782: i32;
  var $i791: i1;
  var $i792: i32;
  var $i793: i32;
  var $i795: i32;
  var $i796: i1;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $i800: i32;
  var $i801: i1;
  var $p802: ref;
  var $i803: i32;
  var $i804: i1;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p812: ref;
  var $i813: i16;
  var $i814: i32;
  var $i815: i16;
  var $i816: i16;
  var $p817: ref;
  var $i818: i32;
  var $i819: i32;
  var $i820: i32;
  var $i821: i1;
  var $p822: ref;
  var $i823: i8;
  var $i824: i32;
  var $i825: i1;
  var $p826: ref;
  var $i827: i32;
  var $i828: i32;
  var $i829: i1;
  var $p831: ref;
  var $i832: i32;
  var $i833: i32;
  var $i834: i32;
  var $i835: i32;
  var $i830: i32;
  var $p836: ref;
  var $i837: i32;
  var $i838: i32;
  var $i839: i32;
  var $p841: ref;
  var $i842: i32;
  var $i843: i1;
  var $i844: i32;
  var $i840: i32;
  var $i845: i1;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} {:cexpr "osst_seek_logical_blk:arg:logical_blk_num"} boogie_si_record_i32($i2);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p9 := tape_name($p0);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i2, 0);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.6, $p12);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i13, 0);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i35 := $mul.i32($i34, $i11);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i36 := $sdiv.i32($i35, 32768);
    call {:si_unique_call 768} {:cexpr "frame_seq_estimate"} boogie_si_record_i32($i36);
    assume {:verifier.code 0} true;
    $i32 := $i36;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i32, 2979);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i32, 20);
    call {:si_unique_call 773} {:cexpr "ppos_estimate"} boogie_si_record_i32($i40);
    assume {:verifier.code 0} true;
    $i39 := $i40;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $sub.i32(0, 2));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, $i39);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i53, $i54 := $i32, $i39;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 0);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56, $i57 := $i53, $i54;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} vslice_dummy_var_229 := osst_set_frame_position($p0, $p1, $i57, 0);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $i59 := osst_get_logical_frame($p0, $p1, $i56, 1);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 778} {:cexpr "tmp___6"} boogie_si_record_i32($i59);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i60 := $sge.i32($i59, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i187 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    call {:si_unique_call 796} {:cexpr "tmp___7"} boogie_si_record_i32($i187);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i188 := $slt.i32($i187, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i189 := 1;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.6, $p191);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i193 := $ne.i32($i192, $i56);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i194 := 1;
    assume {:branchcond $i193} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i199 := $i194;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i190 := $i199;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.6, $p200);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} vslice_dummy_var_230 := printk.ref.ref.i32.i32.i32(.str.91, $p9, $i11, $i201, $i190);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i186 := $sub.i32(0, 5);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $r := $i186;
    return;

  $bb56:
    assume $i193 == 1;
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.6, $p195);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i197 := $sub.i32($i56, $i196);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i198 := $add.i32($i197, $i57);
    call {:si_unique_call 798} {:cexpr "ppos_estimate"} boogie_si_record_i32($i198);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i112, $i113 := $i56, $i198;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.6, $p203);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i204, $sub.i32(0, 2));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i206 := $slt.i32($i205, $i113);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    $i207, $i208 := $i112, $i113;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i217 := $slt.i32($i207, 0);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    $i218, $i219 := $i207, $i208;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} vslice_dummy_var_231 := osst_set_frame_position($p0, $p1, $i219, 0);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i221 := osst_get_logical_frame($p0, $p1, $i218, 1);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i222 := $sge.i32($i221, 0);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $i223 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i224 := $slt.i32($i223, 0);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $i189 := 2;
    assume {:branchcond $i224} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.6, $p225);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i227 := $ne.i32($i226, $i218);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i194 := 2;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i227 == 1);
    goto $bb58;

  $bb74:
    assume $i227 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.6, $p228);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i230 := $sub.i32($i218, $i229);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i231 := $add.i32($i230, $i219);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i232, $i233 := $i218, $i231;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.6, $p285);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i287 := $add.i32($i286, $sub.i32(0, 2));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i287, $i233);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i288} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289, $i290 := $i232, $i233;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i299 := $slt.i32($i289, 0);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    $i300, $i301 := $i289, $i290;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} vslice_dummy_var_232 := osst_set_frame_position($p0, $p1, $i301, 0);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i303 := osst_get_logical_frame($p0, $p1, $i300, 1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i304 := $sge.i32($i303, 0);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i305 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $i306 := $slt.i32($i305, 0);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i189 := 3;
    assume {:branchcond $i306} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.6, $p307);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i309 := $ne.i32($i308, $i300);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i194 := 3;
    assume {:branchcond $i309} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i309 == 1);
    goto $bb58;

  $bb105:
    assume $i309 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.6, $p310);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $i312 := $sub.i32($i300, $i311);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $i313 := $add.i32($i312, $i301);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i314, $i315 := $i300, $i313;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.6, $p367);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i369 := $add.i32($i368, $sub.i32(0, 2));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i370 := $slt.i32($i369, $i315);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    $i371, $i372 := $i314, $i315;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i381 := $slt.i32($i371, 0);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    $i382, $i383 := $i371, $i372;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} vslice_dummy_var_233 := osst_set_frame_position($p0, $p1, $i383, 0);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i385 := osst_get_logical_frame($p0, $p1, $i382, 1);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i386 := $sge.i32($i385, 0);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i386 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i387 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i388 := $slt.i32($i387, 0);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i189 := 4;
    assume {:branchcond $i388} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i390 := $load.i32($M.6, $p389);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i391 := $ne.i32($i390, $i382);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i194 := 4;
    assume {:branchcond $i391} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i391 == 1);
    goto $bb58;

  $bb136:
    assume $i391 == 1;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i393 := $load.i32($M.6, $p392);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i394 := $sub.i32($i382, $i393);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i395 := $add.i32($i394, $i383);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i396, $i397 := $i382, $i395;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i450 := $load.i32($M.6, $p449);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $i451 := $add.i32($i450, $sub.i32(0, 2));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i452 := $slt.i32($i451, $i397);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i452} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $i453, $i454 := $i396, $i397;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i463 := $slt.i32($i453, 0);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i463} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    $i464, $i465 := $i453, $i454;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} vslice_dummy_var_234 := osst_set_frame_position($p0, $p1, $i465, 0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i467 := osst_get_logical_frame($p0, $p1, $i464, 1);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i468 := $sge.i32($i467, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i468} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i468 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i469 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i470 := $slt.i32($i469, 0);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i189 := 5;
    assume {:branchcond $i470} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $i472 := $load.i32($M.6, $p471);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $i473 := $ne.i32($i472, $i464);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i194 := 5;
    assume {:branchcond $i473} true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb58;

  $bb167:
    assume $i473 == 1;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i475 := $load.i32($M.6, $p474);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $i476 := $sub.i32($i464, $i475);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $i477 := $add.i32($i476, $i465);
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i478, $i479 := $i464, $i477;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i532 := $load.i32($M.6, $p531);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i533 := $add.i32($i532, $sub.i32(0, 2));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i534 := $slt.i32($i533, $i479);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    $i535, $i536 := $i478, $i479;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i545 := $slt.i32($i535, 0);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    $i546, $i547 := $i535, $i536;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vslice_dummy_var_235 := osst_set_frame_position($p0, $p1, $i547, 0);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i549 := osst_get_logical_frame($p0, $p1, $i546, 1);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i550 := $sge.i32($i549, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i550} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $i551 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i552 := $slt.i32($i551, 0);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i189 := 6;
    assume {:branchcond $i552} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i552 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i554 := $load.i32($M.6, $p553);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i555 := $ne.i32($i554, $i546);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i194 := 6;
    assume {:branchcond $i555} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i555 == 1);
    goto $bb58;

  $bb198:
    assume $i555 == 1;
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i557 := $load.i32($M.6, $p556);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i558 := $sub.i32($i546, $i557);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i559 := $add.i32($i558, $i547);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $i560, $i561 := $i546, $i559;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.6, $p613);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i615 := $add.i32($i614, $sub.i32(0, 2));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i616 := $slt.i32($i615, $i561);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    $i617, $i618 := $i560, $i561;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i627 := $slt.i32($i617, 0);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i627 == 1);
    assume {:verifier.code 0} true;
    $i628, $i629 := $i617, $i618;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_236 := osst_set_frame_position($p0, $p1, $i629, 0);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} $i631 := osst_get_logical_frame($p0, $p1, $i628, 1);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i632 := $sge.i32($i631, 0);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i632} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i632 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i633 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i634 := $slt.i32($i633, 0);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i189 := 7;
    assume {:branchcond $i634} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i636 := $load.i32($M.6, $p635);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i637 := $ne.i32($i636, $i628);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i194 := 7;
    assume {:branchcond $i637} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i637 == 1);
    goto $bb58;

  $bb229:
    assume $i637 == 1;
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i639 := $load.i32($M.6, $p638);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i640 := $sub.i32($i628, $i639);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i641 := $add.i32($i640, $i629);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i642, $i643 := $i628, $i641;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i696 := $load.i32($M.6, $p695);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i697 := $add.i32($i696, $sub.i32(0, 2));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i698 := $slt.i32($i697, $i643);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i698 == 1);
    assume {:verifier.code 0} true;
    $i699, $i700 := $i642, $i643;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i709 := $slt.i32($i699, 0);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    $i710, $i711 := $i699, $i700;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vslice_dummy_var_237 := osst_set_frame_position($p0, $p1, $i711, 0);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i713 := osst_get_logical_frame($p0, $p1, $i710, 1);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i714 := $sge.i32($i713, 0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i715 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i716 := $slt.i32($i715, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i189 := 8;
    assume {:branchcond $i716} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i716 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i718 := $load.i32($M.6, $p717);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i719 := $ne.i32($i718, $i710);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i194 := 8;
    assume {:branchcond $i719} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i719 == 1);
    goto $bb58;

  $bb260:
    assume $i719 == 1;
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i721 := $load.i32($M.6, $p720);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i722 := $sub.i32($i710, $i721);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i723 := $add.i32($i722, $i711);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i724, $i725 := $i710, $i723;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i778 := $load.i32($M.6, $p777);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i779 := $add.i32($i778, $sub.i32(0, 2));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $i780 := $slt.i32($i779, $i725);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i780} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i780 == 1);
    assume {:verifier.code 0} true;
    $i781, $i782 := $i724, $i725;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i791 := $slt.i32($i781, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    $i792, $i793 := $i781, $i782;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vslice_dummy_var_238 := osst_set_frame_position($p0, $p1, $i793, 0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} $i795 := osst_get_logical_frame($p0, $p1, $i792, 1);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i796 := $sge.i32($i795, 0);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i796} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i796 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i797 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i798 := $slt.i32($i797, 0);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i189 := 9;
    assume {:branchcond $i798} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i800 := $load.i32($M.6, $p799);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i801 := $ne.i32($i800, $i792);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i194 := 9;
    assume {:branchcond $i801} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i801 == 1);
    goto $bb58;

  $bb291:
    assume $i801 == 1;
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i199 := 10;
    goto $bb60;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i190 := $i189;
    goto $bb54;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb285:
    assume $i796 == 1;
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i803 := $load.i32($M.6, $p802);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i804 := $sgt.i32($i803, $i11);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i804 == 1);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.6, $p805);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.6, $p807);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($add.ref($add.ref($add.ref($p808, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i813 := $load.i16($M.6, $p812);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i814 := $zext.i16.i32($i813);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i815 := $trunc.i32.i16($i814);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} $i816 := __fswab16($i815);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i818 := $load.i32($M.6, $p817);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i819 := $zext.i16.i32($i816);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i820 := $add.i32($i818, $i819);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i821 := $sle.i32($i820, $i11);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb297, $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    assume !($i821 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.6, $p114);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i11, $i115);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.6, $p117);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i119 := $mul.i32($i116, $i118);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.6, $p120);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p122, $i119);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.6, $p123);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p124, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.6, $p125);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.6, $p127);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.6, $p129);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i131 := $sub.i32($i126, $i130);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p132);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p134, $i131);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p135, $i11);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.6, $p136);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.6, $p138);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p139, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.6, $p140);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i142 := __fswab32($i141);
    call {:si_unique_call 782} {:cexpr "tmp___0"} boogie_si_record_i32($i142);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p143, $i142);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.6, $p144);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i147 == 1);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.6, $p153);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.6, $p155);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.6, $p157);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} $i159 := __fswab32($i158);
    call {:si_unique_call 791} {:cexpr "tmp___4"} boogie_si_record_i32($i159);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i160 := $ne.i32($i159, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i160 == 1);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p177, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.6, $p178);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.6, $p180);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i182 := $uge.i32($i179, $i181);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i183 := (if $i182 == 1 then 7 else 0);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i8($i183);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p185, $i184);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i186 := 0;
    goto $bb49;

  $bb43:
    assume $i160 == 1;
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.6, $p161);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i172 := 0;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.6, $p173);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32($i174, $i172);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p176, $i175);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb45:
    assume $i163 == 1;
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.6, $p164);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.6, $p166);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p167, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $i170 := __fswab32($i169);
    call {:si_unique_call 793} {:cexpr "tmp___2"} boogie_si_record_i32($i170);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i171 := $add.i32($i170, 1);
    call {:si_unique_call 794} {:cexpr "tmp___3"} boogie_si_record_i32($i171);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i172 := $i171;
    goto $bb47;

  $bb40:
    assume $i147 == 1;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.6, $p148);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i150 := $add.i32($i149, 1);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p151, $i150);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p152, 0);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb297:
    assume $i821 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $i823 := $load.i8($M.6, $p822);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i824 := $zext.i8.i32($i823);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i825 := $eq.i32($i824, 1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i825} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i825 == 1);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p826 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i827 := $load.i32($M.6, $p826);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i828 := $sub.i32($i11, $i827);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i829 := $slt.i32($i828, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i829} true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i829 == 1);
    assume {:verifier.code 0} true;
    $i830 := $i828;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i837 := $load.i32($M.6, $p836);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i838 := $sdiv.i32(32768, $i837);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i839 := $sdiv.i32($i830, $i838);
    assume {:verifier.code 0} true;
    $i840 := $i839;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i845 := $eq.i32($i840, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i845 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb306:
    assume $i845 == 1;
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb302:
    assume $i829 == 1;
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i832 := $load.i32($M.6, $p831);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i833 := $sdiv.i32(32768, $i832);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $i834 := $sub.i32(1, $i833);
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i835 := $add.i32($i834, $i828);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i830 := $i835;
    goto $bb304;

  $bb300:
    assume $i825 == 1;
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $i842 := $load.i32($M.6, $p841);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i843 := $sgt.i32($i842, $i11);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i844 := (if $i843 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i840 := $i844;
    goto $bb305;

  $bb295:
    assume $i804 == 1;
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb299;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb282:
    assume $i791 == 1;
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i792, $i793 := 0, 10;
    goto $bb284;

  $bb279:
    assume $i780 == 1;
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i784 := $load.i32($M.6, $p783);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i785 := $add.i32($i784, $sub.i32(0, 2));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i786 := $sub.i32($i785, $i725);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i787 := $add.i32($i786, $i724);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i789 := $load.i32($M.6, $p788);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i790 := $add.i32($i789, $sub.i32(0, 2));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i781, $i782 := $i787, $i790;
    goto $bb281;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i716 == 1;
    goto $bb52;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb254:
    assume $i714 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i727 := $load.i32($M.6, $p726);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i728 := $sgt.i32($i727, $i11);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i728 == 1);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.6, $p729);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p730, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p732 := $load.ref($M.6, $p731);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($add.ref($add.ref($add.ref($p732, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i737 := $load.i16($M.6, $p736);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i738 := $zext.i16.i32($i737);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i739 := $trunc.i32.i16($i738);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} $i740 := __fswab16($i739);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i742 := $load.i32($M.6, $p741);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i743 := $zext.i16.i32($i740);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $i744 := $add.i32($i742, $i743);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i745 := $sle.i32($i744, $i11);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i745} true;
    goto $bb266, $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    assume !($i745 == 1);
    goto $bb28;

  $bb266:
    assume $i745 == 1;
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i747 := $load.i8($M.6, $p746);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i748 := $zext.i8.i32($i747);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 1);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i749 == 1);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $p750 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i751 := $load.i32($M.6, $p750);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i752 := $sub.i32($i11, $i751);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i753 := $slt.i32($i752, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i753 == 1);
    assume {:verifier.code 0} true;
    $i754 := $i752;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i761 := $load.i32($M.6, $p760);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i762 := $sdiv.i32(32768, $i761);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i763 := $sdiv.i32($i754, $i762);
    assume {:verifier.code 0} true;
    $i764 := $i763;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i769 := $eq.i32($i764, 0);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i769} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    $i770 := $i764;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i775 := $add.i32($i710, $i770);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $i776 := $add.i32($i711, $i770);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i724, $i725 := $i775, $i776;
    goto $bb263;

  $bb275:
    assume $i769 == 1;
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i772 := $load.i32($M.6, $p771);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i773 := $slt.i32($i772, $i11);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i774 := (if $i773 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i770 := $i774;
    goto $bb277;

  $bb271:
    assume $i753 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i756 := $load.i32($M.6, $p755);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i757 := $sdiv.i32(32768, $i756);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i758 := $sub.i32(1, $i757);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i759 := $add.i32($i758, $i752);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i754 := $i759;
    goto $bb273;

  $bb269:
    assume $i749 == 1;
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i766 := $load.i32($M.6, $p765);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i767 := $sgt.i32($i766, $i11);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i768 := (if $i767 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i764 := $i768;
    goto $bb274;

  $bb264:
    assume $i728 == 1;
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb251:
    assume $i709 == 1;
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i710, $i711 := 0, 10;
    goto $bb253;

  $bb248:
    assume $i698 == 1;
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i702 := $load.i32($M.6, $p701);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i703 := $add.i32($i702, $sub.i32(0, 2));
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i704 := $sub.i32($i703, $i643);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i705 := $add.i32($i704, $i642);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i707 := $load.i32($M.6, $p706);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i708 := $add.i32($i707, $sub.i32(0, 2));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $i699, $i700 := $i705, $i708;
    goto $bb250;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i634 == 1;
    goto $bb52;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb223:
    assume $i632 == 1;
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i645 := $load.i32($M.6, $p644);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i646 := $sgt.i32($i645, $i11);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i646} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i646 == 1);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p648 := $load.ref($M.6, $p647);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p648, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.6, $p649);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($add.ref($add.ref($add.ref($p650, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i655 := $load.i16($M.6, $p654);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i656 := $zext.i16.i32($i655);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i657 := $trunc.i32.i16($i656);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $i658 := __fswab16($i657);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i660 := $load.i32($M.6, $p659);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i661 := $zext.i16.i32($i658);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i662 := $add.i32($i660, $i661);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i663 := $sle.i32($i662, $i11);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i663} true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i663 == 1);
    goto $bb28;

  $bb235:
    assume $i663 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i665 := $load.i8($M.6, $p664);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $i666 := $zext.i8.i32($i665);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i667 := $eq.i32($i666, 1);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i667} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i667 == 1);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i669 := $load.i32($M.6, $p668);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $i670 := $sub.i32($i11, $i669);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i671 := $slt.i32($i670, 0);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i671} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i671 == 1);
    assume {:verifier.code 0} true;
    $i672 := $i670;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $i679 := $load.i32($M.6, $p678);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i680 := $sdiv.i32(32768, $i679);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i681 := $sdiv.i32($i672, $i680);
    assume {:verifier.code 0} true;
    $i682 := $i681;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i687 := $eq.i32($i682, 0);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i687} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    $i688 := $i682;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i693 := $add.i32($i628, $i688);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i694 := $add.i32($i629, $i688);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i642, $i643 := $i693, $i694;
    goto $bb232;

  $bb244:
    assume $i687 == 1;
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i690 := $load.i32($M.6, $p689);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i691 := $slt.i32($i690, $i11);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i692 := (if $i691 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i688 := $i692;
    goto $bb246;

  $bb240:
    assume $i671 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i674 := $load.i32($M.6, $p673);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i675 := $sdiv.i32(32768, $i674);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i676 := $sub.i32(1, $i675);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i677 := $add.i32($i676, $i670);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i672 := $i677;
    goto $bb242;

  $bb238:
    assume $i667 == 1;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i684 := $load.i32($M.6, $p683);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i685 := $sgt.i32($i684, $i11);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i686 := (if $i685 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i682 := $i686;
    goto $bb243;

  $bb233:
    assume $i646 == 1;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb237;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb220:
    assume $i627 == 1;
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i628, $i629 := 0, 10;
    goto $bb222;

  $bb217:
    assume $i616 == 1;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i620 := $load.i32($M.6, $p619);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i621 := $add.i32($i620, $sub.i32(0, 2));
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i622 := $sub.i32($i621, $i561);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i623 := $add.i32($i622, $i560);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i625 := $load.i32($M.6, $p624);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i626 := $add.i32($i625, $sub.i32(0, 2));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $i617, $i618 := $i623, $i626;
    goto $bb219;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i552 == 1;
    goto $bb52;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb192:
    assume $i550 == 1;
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i563 := $load.i32($M.6, $p562);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i564 := $sgt.i32($i563, $i11);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i564 == 1);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.6, $p565);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p566, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.6, $p567);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($add.ref($add.ref($add.ref($p568, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i573 := $load.i16($M.6, $p572);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i574 := $zext.i16.i32($i573);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i575 := $trunc.i32.i16($i574);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i576 := __fswab16($i575);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i578 := $load.i32($M.6, $p577);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i579 := $zext.i16.i32($i576);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i580 := $add.i32($i578, $i579);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i581 := $sle.i32($i580, $i11);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i581 == 1);
    goto $bb28;

  $bb204:
    assume $i581 == 1;
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i583 := $load.i8($M.6, $p582);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i584 := $zext.i8.i32($i583);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i585 := $eq.i32($i584, 1);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i585 == 1);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i587 := $load.i32($M.6, $p586);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i588 := $sub.i32($i11, $i587);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i589 := $slt.i32($i588, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i589} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    $i590 := $i588;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i597 := $load.i32($M.6, $p596);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i598 := $sdiv.i32(32768, $i597);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i599 := $sdiv.i32($i590, $i598);
    assume {:verifier.code 0} true;
    $i600 := $i599;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i600, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    $i606 := $i600;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i611 := $add.i32($i546, $i606);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i612 := $add.i32($i547, $i606);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i560, $i561 := $i611, $i612;
    goto $bb201;

  $bb213:
    assume $i605 == 1;
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i608 := $load.i32($M.6, $p607);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i609 := $slt.i32($i608, $i11);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i610 := (if $i609 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i606 := $i610;
    goto $bb215;

  $bb209:
    assume $i589 == 1;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.6, $p591);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i593 := $sdiv.i32(32768, $i592);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i594 := $sub.i32(1, $i593);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i595 := $add.i32($i594, $i588);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i590 := $i595;
    goto $bb211;

  $bb207:
    assume $i585 == 1;
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i602 := $load.i32($M.6, $p601);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i603 := $sgt.i32($i602, $i11);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i604 := (if $i603 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i600 := $i604;
    goto $bb212;

  $bb202:
    assume $i564 == 1;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    goto $bb206;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i545 == 1;
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i546, $i547 := 0, 10;
    goto $bb191;

  $bb186:
    assume $i534 == 1;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i538 := $load.i32($M.6, $p537);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i539 := $add.i32($i538, $sub.i32(0, 2));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i540 := $sub.i32($i539, $i479);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i541 := $add.i32($i540, $i478);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i543 := $load.i32($M.6, $p542);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i544 := $add.i32($i543, $sub.i32(0, 2));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i535, $i536 := $i541, $i544;
    goto $bb188;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i470 == 1;
    goto $bb52;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i468 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i481 := $load.i32($M.6, $p480);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i482 := $sgt.i32($i481, $i11);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i482} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i482 == 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.6, $p483);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($p484, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p486 := $load.ref($M.6, $p485);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($add.ref($add.ref($p486, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i491 := $load.i16($M.6, $p490);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i492 := $zext.i16.i32($i491);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i493 := $trunc.i32.i16($i492);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i494 := __fswab16($i493);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i496 := $load.i32($M.6, $p495);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i497 := $zext.i16.i32($i494);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i498 := $add.i32($i496, $i497);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i499 := $sle.i32($i498, $i11);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i499} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i499 == 1);
    goto $bb28;

  $bb173:
    assume $i499 == 1;
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.6, $p500);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i502 := $zext.i8.i32($i501);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i502, 1);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i503} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i503 == 1);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i505 := $load.i32($M.6, $p504);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i506 := $sub.i32($i11, $i505);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i507 := $slt.i32($i506, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i507} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    $i508 := $i506;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i515 := $load.i32($M.6, $p514);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i516 := $sdiv.i32(32768, $i515);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i517 := $sdiv.i32($i508, $i516);
    assume {:verifier.code 0} true;
    $i518 := $i517;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i518, 0);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i523} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    $i524 := $i518;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i529 := $add.i32($i464, $i524);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i530 := $add.i32($i465, $i524);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i478, $i479 := $i529, $i530;
    goto $bb170;

  $bb182:
    assume $i523 == 1;
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $i526 := $load.i32($M.6, $p525);
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i527 := $slt.i32($i526, $i11);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i528 := (if $i527 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i524 := $i528;
    goto $bb184;

  $bb178:
    assume $i507 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i510 := $load.i32($M.6, $p509);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i511 := $sdiv.i32(32768, $i510);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i512 := $sub.i32(1, $i511);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i513 := $add.i32($i512, $i506);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i508 := $i513;
    goto $bb180;

  $bb176:
    assume $i503 == 1;
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.6, $p519);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i521 := $sgt.i32($i520, $i11);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i522 := (if $i521 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i518 := $i522;
    goto $bb181;

  $bb171:
    assume $i482 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb175;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb158:
    assume $i463 == 1;
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i464, $i465 := 0, 10;
    goto $bb160;

  $bb155:
    assume $i452 == 1;
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i456 := $load.i32($M.6, $p455);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i457 := $add.i32($i456, $sub.i32(0, 2));
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i458 := $sub.i32($i457, $i397);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i459 := $add.i32($i458, $i396);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.6, $p460);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i462 := $add.i32($i461, $sub.i32(0, 2));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i453, $i454 := $i459, $i462;
    goto $bb157;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i388 == 1;
    goto $bb52;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i386 == 1;
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i399 := $load.i32($M.6, $p398);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i400 := $sgt.i32($i399, $i11);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i400 == 1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $p401 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.6, $p401);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p402, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.6, $p403);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($add.ref($add.ref($add.ref($p404, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i409 := $load.i16($M.6, $p408);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $i410 := $zext.i16.i32($i409);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i411 := $trunc.i32.i16($i410);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i412 := __fswab16($i411);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.6, $p413);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $i415 := $zext.i16.i32($i412);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i416 := $add.i32($i414, $i415);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i417 := $sle.i32($i416, $i11);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i417 == 1);
    goto $bb28;

  $bb142:
    assume $i417 == 1;
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i419 := $load.i8($M.6, $p418);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i420 := $zext.i8.i32($i419);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i421 := $eq.i32($i420, 1);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i421 == 1);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i423 := $load.i32($M.6, $p422);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i424 := $sub.i32($i11, $i423);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i425 := $slt.i32($i424, 0);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    $i426 := $i424;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i433 := $load.i32($M.6, $p432);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i434 := $sdiv.i32(32768, $i433);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i435 := $sdiv.i32($i426, $i434);
    assume {:verifier.code 0} true;
    $i436 := $i435;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i436, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    $i442 := $i436;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $i447 := $add.i32($i382, $i442);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i448 := $add.i32($i383, $i442);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i396, $i397 := $i447, $i448;
    goto $bb139;

  $bb151:
    assume $i441 == 1;
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i444 := $load.i32($M.6, $p443);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i445 := $slt.i32($i444, $i11);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i446 := (if $i445 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i442 := $i446;
    goto $bb153;

  $bb147:
    assume $i425 == 1;
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i428 := $load.i32($M.6, $p427);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i429 := $sdiv.i32(32768, $i428);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i430 := $sub.i32(1, $i429);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i431 := $add.i32($i430, $i424);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i426 := $i431;
    goto $bb149;

  $bb145:
    assume $i421 == 1;
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p437 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i438 := $load.i32($M.6, $p437);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i439 := $sgt.i32($i438, $i11);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i440 := (if $i439 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i436 := $i440;
    goto $bb150;

  $bb140:
    assume $i400 == 1;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb127:
    assume $i381 == 1;
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i382, $i383 := 0, 10;
    goto $bb129;

  $bb124:
    assume $i370 == 1;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.6, $p373);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i375 := $add.i32($i374, $sub.i32(0, 2));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i376 := $sub.i32($i375, $i315);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i377 := $add.i32($i376, $i314);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i379 := $load.i32($M.6, $p378);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i380 := $add.i32($i379, $sub.i32(0, 2));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i371, $i372 := $i377, $i380;
    goto $bb126;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i306 == 1;
    goto $bb52;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i304 == 1;
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.6, $p316);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i318 := $sgt.i32($i317, $i11);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i318} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i318 == 1);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.6, $p319);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p320, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.6, $p321);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($add.ref($add.ref($p322, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i327 := $load.i16($M.6, $p326);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i328 := $zext.i16.i32($i327);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i329 := $trunc.i32.i16($i328);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i330 := __fswab16($i329);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i332 := $load.i32($M.6, $p331);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i333 := $zext.i16.i32($i330);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i334 := $add.i32($i332, $i333);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i335 := $sle.i32($i334, $i11);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i335} true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i335 == 1);
    goto $bb28;

  $bb111:
    assume $i335 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.6, $p336);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i339 := $eq.i32($i338, 1);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i339 == 1);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i341 := $load.i32($M.6, $p340);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $i342 := $sub.i32($i11, $i341);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i343 := $slt.i32($i342, 0);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    $i344 := $i342;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i351 := $load.i32($M.6, $p350);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i352 := $sdiv.i32(32768, $i351);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i353 := $sdiv.i32($i344, $i352);
    assume {:verifier.code 0} true;
    $i354 := $i353;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i354, 0);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    $i360 := $i354;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i365 := $add.i32($i300, $i360);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i366 := $add.i32($i301, $i360);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i314, $i315 := $i365, $i366;
    goto $bb108;

  $bb120:
    assume $i359 == 1;
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.6, $p361);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i363 := $slt.i32($i362, $i11);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i364 := (if $i363 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i360 := $i364;
    goto $bb122;

  $bb116:
    assume $i343 == 1;
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i346 := $load.i32($M.6, $p345);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i347 := $sdiv.i32(32768, $i346);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i348 := $sub.i32(1, $i347);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $i349 := $add.i32($i348, $i342);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i344 := $i349;
    goto $bb118;

  $bb114:
    assume $i339 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.6, $p355);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i357 := $sgt.i32($i356, $i11);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i358 := (if $i357 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i354 := $i358;
    goto $bb119;

  $bb109:
    assume $i318 == 1;
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i299 == 1;
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i300, $i301 := 0, 10;
    goto $bb98;

  $bb93:
    assume $i288 == 1;
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.6, $p291);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i293 := $add.i32($i292, $sub.i32(0, 2));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i294 := $sub.i32($i293, $i233);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i295 := $add.i32($i294, $i232);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i297 := $load.i32($M.6, $p296);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i298 := $add.i32($i297, $sub.i32(0, 2));
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i289, $i290 := $i295, $i298;
    goto $bb95;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb52;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i222 == 1;
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.6, $p234);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i236 := $sgt.i32($i235, $i11);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i236 == 1);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p238 := $load.ref($M.6, $p237);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p238, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.6, $p239);
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($add.ref($add.ref($add.ref($p240, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i245 := $load.i16($M.6, $p244);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i246 := $zext.i16.i32($i245);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i32.i16($i246);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i248 := __fswab16($i247);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.6, $p249);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $i251 := $zext.i16.i32($i248);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i250, $i251);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i253 := $sle.i32($i252, $i11);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i253 == 1);
    goto $bb28;

  $bb80:
    assume $i253 == 1;
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.6, $p254);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i257 := $eq.i32($i256, 1);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i257 == 1);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i259 := $load.i32($M.6, $p258);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i260 := $sub.i32($i11, $i259);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $i261 := $slt.i32($i260, 0);
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    $i262 := $i260;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.6, $p268);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $i270 := $sdiv.i32(32768, $i269);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i271 := $sdiv.i32($i262, $i270);
    assume {:verifier.code 0} true;
    $i272 := $i271;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i272, 0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    $i278 := $i272;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i283 := $add.i32($i218, $i278);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i284 := $add.i32($i219, $i278);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i232, $i233 := $i283, $i284;
    goto $bb77;

  $bb89:
    assume $i277 == 1;
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.6, $p279);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i280, $i11);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i282 := (if $i281 == 1 then 1 else $sub.i32(0, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i278 := $i282;
    goto $bb91;

  $bb85:
    assume $i261 == 1;
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i264 := $load.i32($M.6, $p263);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i265 := $sdiv.i32(32768, $i264);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i266 := $sub.i32(1, $i265);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i267 := $add.i32($i266, $i260);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i262 := $i267;
    goto $bb87;

  $bb83:
    assume $i257 == 1;
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.6, $p273);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $i275 := $sgt.i32($i274, $i11);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $i276 := (if $i275 == 1 then $sub.i32(0, 2) else 1);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i272 := $i276;
    goto $bb88;

  $bb78:
    assume $i236 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    goto $bb82;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb65:
    assume $i217 == 1;
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i218, $i219 := 0, 10;
    goto $bb67;

  $bb62:
    assume $i206 == 1;
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.6, $p209);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i211 := $add.i32($i210, $sub.i32(0, 2));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i212 := $sub.i32($i211, $i113);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i213 := $add.i32($i212, $i112);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.6, $p214);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i216 := $add.i32($i215, $sub.i32(0, 2));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i207, $i208 := $i213, $i216;
    goto $bb64;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i188 == 1;
    goto $bb52;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i60 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.6, $p61);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i63 := $sgt.i32($i62, $i11);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i63 == 1);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.6, $p66);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($add.ref($p67, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.6, $p71);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} $i75 := __fswab16($i74);
    call {:si_unique_call 780} {:cexpr "tmp___5"} boogie_si_record_i16($i75);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.6, $p76);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i75);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i77, $i78);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i79, $i11);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb28;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.6, $p81);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i84 == 1);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.6, $p90);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i11, $i91);
    call {:si_unique_call 784} {:cexpr "move"} boogie_si_record_i32($i92);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i92, 0);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i99 := $i92;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p100);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $i102 := $sdiv.i32(32768, $i101);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i103 := $sdiv.i32($i99, $i102);
    call {:si_unique_call 786} {:cexpr "move"} boogie_si_record_i32($i103);
    assume {:verifier.code 0} true;
    $i89 := $i103;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i89, 0);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i89;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i56, $i109);
    call {:si_unique_call 788} {:cexpr "frame_seq_estimate"} boogie_si_record_i32($i110);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i57, $i109);
    call {:si_unique_call 789} {:cexpr "ppos_estimate"} boogie_si_record_i32($i111);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i112, $i113 := $i110, $i111;
    goto $bb38;

  $bb35:
    assume $i104 == 1;
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.6, $p105);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i106, $i11);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $i108 := (if $i107 == 1 then 1 else $sub.i32(0, 1));
    call {:si_unique_call 787} {:cexpr "move"} boogie_si_record_i32($i108);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb37;

  $bb32:
    assume $i93 == 1;
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.6, $p94);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i96 := $sdiv.i32(32768, $i95);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(1, $i96);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, $i92);
    call {:si_unique_call 785} {:cexpr "move"} boogie_si_record_i32($i98);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i99 := $i98;
    goto $bb34;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i87 := $sgt.i32($i86, $i11);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i88 := (if $i87 == 1 then $sub.i32(0, 2) else 1);
    call {:si_unique_call 783} {:cexpr "move"} boogie_si_record_i32($i88);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb31;

  $bb23:
    assume $i63 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i56, $i57 := 0, 10;
    goto $bb20;

  $bb15:
    assume $i44 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i46, $sub.i32(0, 2));
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i47, $i39);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $i32);
    call {:si_unique_call 774} {:cexpr "frame_seq_estimate"} boogie_si_record_i32($i49);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, $sub.i32(0, 2));
    call {:si_unique_call 775} {:cexpr "ppos_estimate"} boogie_si_record_i32($i52);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i53, $i54 := $i49, $i52;
    goto $bb17;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i32, 10);
    call {:si_unique_call 772} {:cexpr "ppos_estimate"} boogie_si_record_i32($i38);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i39 := $i38;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i11, $i16);
    call {:si_unique_call 767} {:cexpr "move"} boogie_si_record_i32($i17);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i17;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i27 := $sdiv.i32(32768, $i26);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $i28 := $sdiv.i32($i24, $i27);
    call {:si_unique_call 770} {:cexpr "move"} boogie_si_record_i32($i28);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, $i28);
    call {:si_unique_call 771} {:cexpr "frame_seq_estimate"} boogie_si_record_i32($i31);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb9;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i21 := $sdiv.i32(32768, $i20);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(1, $i21);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i17);
    call {:si_unique_call 769} {:cexpr "move"} boogie_si_record_i32($i23);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const osst_get_logical_frame: ref;

axiom osst_get_logical_frame == $sub.ref(0, 350882);

procedure osst_get_logical_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_get_logical_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i1;
  var $i49: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i70: i32;
  var $i71: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i32;
  var $i102: i32;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i19: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "osst_get_logical_frame:arg:frame_seq_number"} boogie_si_record_i32($i2);
    call {:si_unique_call 832} {:cexpr "osst_get_logical_frame:arg:quiet"} boogie_si_record_i32($i3);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p10 := tape_name($p0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, $sub.i32(0, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i20, $i21, $i22 := 1, 0, 0;
    goto $bb8;

  $bb8:
    call $i20, $i21, $i22, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $p53, $i54, $i55, $p56, $i57, $i58, $i62, $i63, $p64, $i65, $i66, $i70, $i71, $i67, $i68, $i69, $i59, $i60, $i61, $i50, $i51, $i52, $i76, $i77, $i78, $i79, $i80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i96, $i97, $i98, $p99, $i100, $i101, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $i102, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $p124, $i73, $i74, $i75, $i125, $i126, vslice_dummy_var_241, vslice_dummy_var_243, vslice_dummy_var_244 := osst_get_logical_frame_loop_$bb8($p0, $p1, $i2, $i3, $i20, $i21, $i22, $i35, $i36, $p37, $i38, $i39, $i40, $i41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $p53, $i54, $i55, $p56, $i57, $i58, $i62, $i63, $p64, $i65, $i66, $i70, $i71, $i67, $i68, $i69, $i59, $i60, $i61, $i50, $i51, $i52, $i76, $i77, $i78, $i79, $i80, $p81, $p82, $p83, $p84, $p85, $i86, $i87, $p88, $i89, $i90, $i91, $i92, $i96, $i97, $i98, $p99, $i100, $i101, $i103, $i104, $i105, $i106, $p107, $i108, $i109, $i110, $i111, $i112, $i102, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i122, $i123, $p124, $i73, $i74, $i75, $i125, $i126, vslice_dummy_var_241, vslice_dummy_var_243, vslice_dummy_var_244);
    goto $bb8_last;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i35 := osst_initiate_read($p0, $p1);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 837} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i76 := osst_verify_frame($p0, $i2, $i3);
    call {:si_unique_call 850} {:cexpr "tmp___3"} boogie_si_record_i32($i76);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i78 := $i20;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i79 := osst_verify_frame($p0, $sub.i32(0, 1), $i3);
    call {:si_unique_call 852} {:cexpr "tmp___6"} boogie_si_record_i32($i79);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    $i117, $i118 := $i20, $i21;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i119 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    call {:si_unique_call 865} {:cexpr "tmp___7"} boogie_si_record_i32($i119);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 2991);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i123 := $i117;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p124, 0);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i123, $i22, $i118;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i73, 1);
    call {:si_unique_call 848} {:cexpr "cnt"} boogie_si_record_i32($i125);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i126 := $sgt.i32($i73, 400);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb65;

  $bb65:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i20, $i21, $i22 := $i125, $i75, $i74;
    goto $bb65_dummy;

  $bb9:
    assume $i126 == 1;
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vslice_dummy_var_239 := printk.ref.ref.i32(.str.83, $p10, $i2);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.6, $p24);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_240 := osst_set_frame_position($p0, $p1, $i28, 0);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p30, 0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 1);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p34, $i33);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i120 == 1;
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} vslice_dummy_var_244 := osst_set_frame_position($p0, $p1, 3000, 0);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i122 := $sub.i32($i117, 1);
    call {:si_unique_call 867} {:cexpr "cnt"} boogie_si_record_i32($i122);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i123 := $i122;
    goto $bb64;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i80 == 1;
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.6, $p83);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i87 := __fswab32($i86);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i32($i87);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i92 := $i87;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i96 := $sgt.i32($i87, $i2);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i115, $i116 := $i20, 0;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i117, $i118 := $i115, $i116;
    goto $bb61;

  $bb49:
    assume $i96 == 1;
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i97 := $add.i32($i21, 1);
    call {:si_unique_call 856} {:cexpr "past"} boogie_si_record_i32($i97);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i98 := $sgt.i32($i97, 3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i98 == 1);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $i103 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    call {:si_unique_call 859} {:cexpr "tmp___5"} boogie_si_record_i32($i103);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, $i2);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, $i87);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $sub.i32(0, 1));
    call {:si_unique_call 860} {:cexpr "position"} boogie_si_record_i32($i106);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.6, $p107);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $i109 := $ugt.i32($i108, 2999);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i112 := $i106;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i102 := $i112;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} vslice_dummy_var_243 := osst_set_frame_position($p0, $p1, $i102, 0);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i20, 10);
    call {:si_unique_call 862} {:cexpr "cnt"} boogie_si_record_i32($i114);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i115, $i116 := $i114, $i97;
    goto $bb60;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i109 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i110 := $sle.i32($i106, 2999);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb56;

  $bb57:
    assume $i110 == 1;
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i106, $sub.i32(0, 10));
    call {:si_unique_call 863} {:cexpr "position"} boogie_si_record_i32($i111);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i112 := $i111;
    goto $bb59;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i98 == 1;
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.6, $p99);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, $sub.i32(0, 1));
    call {:si_unique_call 857} {:cexpr "position"} boogie_si_record_i32($i101);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb53;

  $bb46:
    assume $i91 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} vslice_dummy_var_242 := printk.ref.ref.i32.i32(.str.84, $p10, $i92, $i2);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p94, 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p95, 0);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb6;

  $bb40:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i127 := $sgt.i32($i78, 1);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(656, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i140 := $load.i32($M.6, $p139);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, 1);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(656, 1));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p142, $i141);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p143, 0);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p144, 0);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref($i8, 16)), $mul.ref(1, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.6, $p145);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i19 := $i147;
    goto $bb6;

  $bb66:
    assume $i127 == 1;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i129, 1);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p131, $i130);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.6, $p132);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i134 := $add.i32($i133, 1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(660, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p135, $i134);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.6, $p136);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} vslice_dummy_var_245 := printk.ref.ref.i32(.str.85, $p10, $i137);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb17:
    assume $i40 == 1;
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i41 := osst_read_frame($p0, $p1, 30);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    call {:si_unique_call 839} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.6, $p43);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i47 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 841} {:cexpr "position"} boogie_si_record_i32($i47);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 2989);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, $i47);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i55 == 1);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i22, 1);
    call {:si_unique_call 844} {:cexpr "bad"} boogie_si_record_i32($i62);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 10);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i63 == 1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i47, 29);
    call {:si_unique_call 846} {:cexpr "position"} boogie_si_record_i32($i70);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i71 := $add.i32($i20, 19);
    call {:si_unique_call 847} {:cexpr "cnt"} boogie_si_record_i32($i71);
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i71, $i62, $i70;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59, $i60, $i61 := $i67, $i68, $i69;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i59, $i60, $i61;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} vslice_dummy_var_241 := osst_set_frame_position($p0, $p1, $i52, 0);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i50, $i51, $i21;
    goto $bb36;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i63 == 1;
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, $sub.i32(0, 1));
    call {:si_unique_call 845} {:cexpr "position"} boogie_si_record_i32($i66);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i67, $i68, $i69 := $i20, 0, $i66;
    goto $bb35;

  $bb30:
    assume $i55 == 1;
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $sub.i32(0, 1));
    call {:si_unique_call 843} {:cexpr "position"} boogie_si_record_i32($i58);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i59, $i60, $i61 := $i20, 0, $i58;
    goto $bb32;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i49 := $sle.i32($i47, 2999);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb26;

  $bb27:
    assume $i49 == 1;
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i20, $i22, 3000;
    goto $bb29;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb6;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i36 == 1;
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref($i8, 16)), $mul.ref(1, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb6;

  $bb65_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const osst_initiate_read: ref;

axiom osst_initiate_read == $sub.ref(0, 351914);

procedure osst_initiate_read($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_initiate_read($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i41: i32;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p9 := tape_name($p0);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 1);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(0, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 1);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.6;
    call {:si_unique_call 873} cmdloc_dummy_var_48 := $memset.i8(cmdloc_dummy_var_47, $p27, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_48;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p28, 8);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 1);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.24, $p1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p34 := osst_do_scsi($p30, $p0, $p31, 0, 3, $i33, 0, 1);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p34);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    call {:si_unique_call 875} {:cexpr "retval"} boogie_si_record_i32($i38);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i41 := $i38;
    goto $bb12;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} vslice_dummy_var_248 := printk.ref.ref(.str.86, $p9);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p22, 0);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} vslice_dummy_var_246 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} vslice_dummy_var_247 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;
}



const osst_read_frame: ref;

axiom osst_read_frame == $sub.ref(0, 352946);

procedure osst_read_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_read_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $i38: i32;
  var $i26: i32;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 878} {:cexpr "osst_read_frame:arg:timeout"} boogie_si_record_i32($i2);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(669, 1));
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_49 := $M.6;
    call {:si_unique_call 883} cmdloc_dummy_var_50 := $memset.i8(cmdloc_dummy_var_49, $p15, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_50;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 8);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 1);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 1);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.24, $p1);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p23 := osst_do_scsi($p19, $p0, $p20, 33280, 2, $i22, 0, 1);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p23);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p27);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i31 == 1);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p42, $i41);
    assume {:verifier.code 0} true;
    $i38 := $i14;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i26 := $i38;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb11:
    assume $i31 == 1;
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.6, $p32);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i38 := 1;
    goto $bb16;

  $bb13:
    assume $i34 == 1;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p37, $i36);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 16);
    goto $bb9;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $i10 := osst_wait_frame($p0, $p1, $i9, 0, $i2);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    call {:si_unique_call 880} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i12 := osst_recover_wait_frame($p0, $p1, 0);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 882} {:cexpr "retval"} boogie_si_record_i32($i12);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb5;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  SeqInstr_376:
    assume !assertsPassed;
    return;
}



const osst_verify_frame: ref;

axiom osst_verify_frame == $sub.ref(0, 353978);

procedure osst_verify_frame($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_verify_frame($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i1;
  var $i30: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i16;
  var $i102: i16;
  var $i103: i32;
  var $p104: ref;
  var $i105: i16;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i8;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i32;
  var $p145: ref;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i64;
  var $p170: ref;
  var $p171: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p193: ref;
  var $i194: i16;
  var $i195: i32;
  var $i196: i16;
  var $i197: i16;
  var $i198: i32;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i215: i1;
  var $i216: i1;
  var $i217: i1;
  var $i218: i32;
  var $i219: i32;
  var $i220: i1;
  var $i221: i32;
  var $p222: ref;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $i226: i32;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i227: i32;
  var $p231: ref;
  var $i232: i32;
  var $i233: i1;
  var $i234: i32;
  var $p236: ref;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $p249: ref;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $p256: ref;
  var $i61: i32;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var vslice_dummy_var_249: ref;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "osst_verify_frame:arg:frame_seq_number"} boogie_si_record_i32($i1);
    call {:si_unique_call 886} {:cexpr "osst_verify_frame:arg:quiet"} boogie_si_record_i32($i2);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p3 := tape_name($p0);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.6, $p11);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.6, $p62);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.6, $p64);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(0, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.6, $p67);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i69 := __fswab32($i68);
    call {:si_unique_call 894} {:cexpr "tmp___2"} boogie_si_record_i32($i69);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(4, 1));
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(696, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i75 := memcmp($p72, $p74, 4);
    call {:si_unique_call 896} {:cexpr "tmp___3"} boogie_si_record_i32($i75);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i75, 0);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $p84 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    $p94 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.6, $p94);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 1);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    $p98 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.6, $p98);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i102 := __fswab16($i101);
    call {:si_unique_call 900} {:cexpr "tmp___5"} boogie_si_record_i16($i102);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i102);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i105 := $load.i16($M.6, $p104);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i105);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i103, $i106);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.6, $p108);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 128);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.6, $p120);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.6, $p137);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 2);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.6, $p180);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i183} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.6, $p186);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 128);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.6, $p242);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i244 := __fswab32($i243);
    call {:si_unique_call 917} {:cexpr "tmp___12"} boogie_si_record_i32($i244);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p245, $i244);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(52, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i247 := $load.i32($M.6, $p246);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i248 := __fswab32($i247);
    call {:si_unique_call 919} {:cexpr "tmp___13"} boogie_si_record_i32($i248);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p249, $i248);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb89:
    assume $i189 == 1;
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i194 := $load.i16($M.6, $p193);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i194);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i16($i195);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i197 := __fswab16($i196);
    call {:si_unique_call 911} {:cexpr "tmp___10"} boogie_si_record_i16($i197);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    call {:si_unique_call 912} {:cexpr "blk_cnt"} boogie_si_record_i32($i198);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.6, $p202);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $i204 := __fswab32($i203);
    call {:si_unique_call 914} {:cexpr "tmp___11"} boogie_si_record_i32($i204);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i205 := $mul.i32($i198, $i204);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.6, $p206);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p208, $i205);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.6, $p209);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p210, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p211, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p212, 1);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.6, $p213);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, $i204);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p10, $mul.ref($i13, 16)), $mul.ref(1, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p241, 0);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb91:
    assume $i215 == 1;
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i216 := $sgt.i32($i204, 0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb93;

  $bb94:
    assume $i216 == 1;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i217 := $sgt.i32($i204, 1023);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i217 == 1);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i219 := $i204;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i220 := $sle.i32($i204, 1023);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i221 := (if $i220 == 1 then 98 else 107);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i223 := $load.i32($M.6, $p222);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i224 := $sle.i32($i223, 1023);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i224 == 1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.6, $p228);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i230 := $sdiv.i32($i229, 1024);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i227 := $i230;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.6, $p231);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i233 := $sle.i32($i232, 1023);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i234 := (if $i233 == 1 then 98 else 107);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_251 := printk.ref.ref.i32.i32.i32.i32(.str.90, $p3, $i219, $i221, $i227, $i234);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p236, $i204);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i237 := $sdiv.i32(32768, $i204);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.6, $p238);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p239, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p240, $i237);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i224 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i226 := $load.i32($M.6, $p225);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i227 := $i226;
    goto $bb101;

  $bb96:
    assume $i217 == 1;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i218 := $sdiv.i32($i204, 1024);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i219 := $i218;
    goto $bb98;

  $bb86:
    assume $i183 == 1;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p10, $mul.ref($i13, 16)), $mul.ref(1, 1));
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p184, 5);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p185, 1);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb67:
    assume $i140 == 1;
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p10, $mul.ref($i13, 16)), $mul.ref(1, 1));
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p141, 1);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.6, $p142);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $i144 := __fswab32($i143);
    call {:si_unique_call 905} {:cexpr "tmp___7"} boogie_si_record_i32($i144);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.6, $p145);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb69:
    assume $i148 == 1;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i149 := $sle.i32($i144, 1023);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb71;

  $bb72:
    assume $i149 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.6, $p150);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i152 := $slt.i32($i151, $i144);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i152 == 1);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i144);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.6, $p154);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p155, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i153, 4));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.6, $p158);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i160 := __fswab32($i159);
    call {:si_unique_call 907} {:cexpr "tmp___9"} boogie_si_record_i32($i160);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.6, $p161);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i163 := $sub.i32($i162, 1);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, $i160);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb77:
    assume $i164 == 1;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.6, $p165);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i167 := $sub.i32($i166, 1);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $i168 := __fswab32($i167);
    call {:si_unique_call 909} {:cexpr "tmp___8"} boogie_si_record_i32($i168);
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i144);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.6, $p170);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($add.ref($p171, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i169, 4));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p174, $i168);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.6, $p175);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i177 := $sle.i32($i176, $i144);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i177 == 1;
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i178 := $add.i32($i144, 1);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p179, $i178);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i152 == 1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb61:
    assume $i132 == 1;
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.6, $p133);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i135 := __fswab32($i134);
    call {:si_unique_call 903} {:cexpr "tmp___6"} boogie_si_record_i32($i135);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, $i1);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb63:
    assume $i136 == 1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.6, $p250);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 0);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i252} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb14;

  $bb104:
    assume $i252 == 1;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.6, $p253);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i255 := $sub.i32($i254, 1);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p256, $i255);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb55:
    assume $i123 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.6, $p124);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.6, $p126);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i128 := $ult.i32($i125, $i127);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb57;

  $bb58:
    assume $i128 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.6, $p129);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} vslice_dummy_var_250 := printk.ref.ref.i32(.str.89, $p3, $i130);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb47:
    assume $i111 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.6, $p112);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb49;

  $bb50:
    assume $i115 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.6, $p116);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 2);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb49;

  $bb52:
    assume $i119 == 1;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb44:
    assume $i107 == 1;
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb41:
    assume $i97 == 1;
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb32:
    assume $i87 == 1;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i90 == 1);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.6, $p91);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i92, 2);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb35;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref(0, 512)), $mul.ref(4, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i79 := memcmp($p78, .str.88, 4);
    call {:si_unique_call 898} {:cexpr "tmp___4"} boogie_si_record_i32($i79);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i80 == 1);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.6, $p81);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 4);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i80 == 1;
    goto $bb26;

  $bb19:
    assume $i70 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i66 == 1;
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb14;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p60, 33280);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i61 := 1;
    goto $bb14;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.6, $p26);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_249 := strcpy($p56, .str.87);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i29 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb8;

  $bb8:
    call $p31, $p32, $p33, $p34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i30, cmdloc_dummy_var_51, cmdloc_dummy_var_52 := osst_verify_frame_loop_$bb8($p0, $p24, $p31, $p32, $p33, $p34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $i51, $i52, $i30, cmdloc_dummy_var_51, cmdloc_dummy_var_52);
    goto $bb8_last;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i30);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p34, $mul.ref($i35, 40));
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} $p37 := sg_page($p36);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p38 := lowmem_page_address($p37);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i30);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.6, $p40);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p41, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i39, 40)), $mul.ref(20, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i45);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.6;
    call {:si_unique_call 890} cmdloc_dummy_var_52 := $memset.i8(cmdloc_dummy_var_51, $p38, 0, $i46, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_52;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i30, 1);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p24);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.6, $p49);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i52 := $sgt.i32($i51, $i47);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i52 == 1);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i47;
    goto $bb10_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7534;
}



const strcpy: ref;

axiom strcpy == $sub.ref(0, 355010);

procedure strcpy($p0: ref, $p1: ref) returns ($r: ref);



const memcmp: ref;

axiom memcmp == $sub.ref(0, 356042);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const osst_wait_frame: ref;

axiom osst_wait_frame == $sub.ref(0, 357074);

procedure osst_wait_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_wait_frame($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i64;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i18: i64;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i1;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i28: i32;
  var vslice_dummy_var_252: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} {:cexpr "osst_wait_frame:arg:curr"} boogie_si_record_i32($i2);
    call {:si_unique_call 921} {:cexpr "osst_wait_frame:arg:minlast"} boogie_si_record_i32($i3);
    call {:si_unique_call 922} {:cexpr "osst_wait_frame:arg:to"} boogie_si_record_i32($i4);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.6, jiffies);
    call {:si_unique_call 923} {:cexpr "startwait"} boogie_si_record_i64($i5);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p6 := tape_name($p0);
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i7 := $sge.i32($i3, 0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.6, jiffies);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i4, 250);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, $i5);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $i22 := $sub.i64($i18, $i21);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $i23 := $slt.i64($i22, 0);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 16);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call $i24, $i25, $i26, $i27, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46 := osst_wait_frame_loop_$bb10($p0, $p1, $i2, $i3, $i21, $i24, $i25, $i26, $i27, $i29, $i30, $p31, $i32, $i33, $i34, $p35, $i36, $i37, $i38, $i39, $p40, $i41, $i42, $i43, $i44, $i45, $i46);
    goto $bb10_last;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i24 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    call {:si_unique_call 927} {:cexpr "result"} boogie_si_record_i32($i24);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, $sub.i32(0, 5));
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i29 := $i24;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.6, $p31);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, $i2);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} msleep(100);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.6, jiffies);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $i45 := $sub.i64($i44, $i21);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i46 := $slt.i64($i45, 0);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i46 == 1);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb39_dummy;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i3, 0);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i39 := $sge.i32($i3, 0);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb25;

  $bb32:
    assume $i39 == 1;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i3);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb25;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i43 := $sge.i32($i29, 0);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb36:
    assume $i43 == 1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb16;

  $bb26:
    assume $i34 == 1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i2, $i3);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i36, $i37);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb30;

  $bb19:
    assume $i30 == 1;
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i26 := osst_write_error_recovery($p0, $p1, 0);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    call {:si_unique_call 929} {:cexpr "result"} boogie_si_record_i32($i26);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i29 := $i26;
    goto $bb18;

  $bb14:
    assume $i27 == 1;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb16;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i10, 16)), $mul.ref(0, 1));
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 1);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_252 := printk.ref.ref(.str.44, $p6);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb39_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const osst_recover_wait_frame: ref;

axiom osst_recover_wait_frame == $sub.ref(0, 358106);

procedure osst_recover_wait_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_recover_wait_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i58: i1;
  var $i67: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i1;
  var $i24: i32;
  var $p25: ref;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $i75: i32;
  var $i38: i32;
  var $i80: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i82: i32;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var vslice_dummy_var_253: i64;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 933} {:cexpr "osst_recover_wait_frame:arg:writing"} boogie_si_record_i32($i2);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.6, jiffies);
    call {:si_unique_call 934} {:cexpr "startwait"} boogie_si_record_i64($i5);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p6 := tape_name($p0);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.6, $p83);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i82 := 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $r := $i82;
    return;

  $bb25:
    assume $i87 == 1;
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.24, $p1);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p88, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.6, $p90);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 15);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.24, $p1);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p94, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.6, $p96);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.24, $p1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p99, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.6, $p101);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} vslice_dummy_var_255 := printk.ref.ref.i32.i32.i32(.str.48, $p6, $i93, $i98, $i103);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.6, $p10);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    call {:si_unique_call 936} {:cexpr "oldsize"} boogie_si_record_i32($i15);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p3);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.6;
    call {:si_unique_call 937} cmdloc_dummy_var_54 := $memset.i8(cmdloc_dummy_var_53, $p16, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_54;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 16);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 1);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.24, $p1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p3);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $p23 := osst_do_scsi($p19, $p0, $p20, 0, 3, $i22, 0, 1);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i24, $p25 := 1, $p23;
    goto $bb3;

  $bb3:
    call $p26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $i58, $i67, $p68, $p69, $p70, $p71, $p72, $p73, $i74, $i24, $p25, $i76, $i77, $i78, $i79, $i75, cmdloc_dummy_var_55, cmdloc_dummy_var_56, vslice_dummy_var_253 := osst_recover_wait_frame_loop_$bb3($p0, $p3, $p4, $i5, $p11, $i15, $p26, $p27, $p28, $i29, $i30, $p32, $i33, $i34, $i35, $i36, $p41, $p42, $p43, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $p52, $p53, $p54, $p55, $i56, $i57, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $i58, $i67, $p68, $p69, $p70, $p71, $p72, $p73, $i74, $i24, $p25, $i76, $i77, $i78, $i79, $i75, cmdloc_dummy_var_55, cmdloc_dummy_var_56, vslice_dummy_var_253);
    goto $bb3_last;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.6, jiffies);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i77 := $sub.i64($i76, $i5);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i78 := $sub.i64($i77, 75000);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i79 := $slt.i64($i78, 0);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i75 := $i24;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i38 := $i75;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i38, 0);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i82 := $i38;
    goto $bb24;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vslice_dummy_var_254 := printk.ref.ref(.str.47, $p6);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i79 == 1;
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} vslice_dummy_var_253 := schedule_timeout_interruptible(25);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, $p4);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p46, 24);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p3);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_55 := $M.6;
    call {:si_unique_call 942} cmdloc_dummy_var_56 := $memset.i8(cmdloc_dummy_var_55, $p47, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_56;
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 52);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $p52 := osst_do_scsi($p25, $p0, $p49, 20, 2, $i51, 0, 1);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i58 := 1;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i57 == 1);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.6, $p59);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(15, 1));
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.6, $p63);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i66 := $ugt.i32($i65, 25);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i58 := $i66;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i58);
    call {:si_unique_call 944} {:cexpr "retval"} boogie_si_record_i32($i67);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.6, $p68);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p70, $p11);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.6, $p71);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p73, $i15);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i67, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i75 := $i67;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb17;

  $bb15:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i24, $p25 := $i67, $p52;
    goto $bb15_dummy;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb13;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 15);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 2);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb7;

  $bb8:
    assume $i36 == 1;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i37 := osst_write_error_recovery($p0, $p1, 0);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 940} {:cexpr "retval"} boogie_si_record_i32($i37);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb10;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7953;
}



const osst_flush_drive_buffer: ref;

axiom osst_flush_drive_buffer == $sub.ref(0, 359138);

procedure osst_flush_drive_buffer($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_flush_drive_buffer($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i38: i32;
  var $i36: i32;
  var $i37: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i64;
  var $p48: ref;
  var $i13: i32;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_57 := $M.6;
    call {:si_unique_call 948} cmdloc_dummy_var_58 := $memset.i8(cmdloc_dummy_var_57, $p3, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_58;
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p4, 16);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p5, 1);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.24, $p1);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $p10 := osst_do_scsi($p6, $p0, $p7, 0, 3, $i9, 0, 1);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p10);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i39, $i40 := 0, 20;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} $i41 := osst_wait_ready($p0, $p1, 300, $i40);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 953} {:cexpr "tmp"} boogie_si_record_i32($i41);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, $i39);
    call {:si_unique_call 954} {:cexpr "result"} boogie_si_record_i32($i42);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i45 := $sext.i32.i64($i44);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i45, 16)), $mul.ref(0, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p48, 3);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i13 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 15);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 2);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i38 := osst_write_error_recovery($p0, $p1, 0);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 951} {:cexpr "result"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    $i36, $i37 := $i38, 20;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i36, $i37;
    goto $bb16;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.6, $p26);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 4);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb10:
    assume $i29 == 1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 8);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 20;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i36, $i37 := 0, $i35;
    goto $bb15;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i35 := 125;
    goto $bb14;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const osst_write_filemark: ref;

axiom osst_write_filemark == $sub.ref(0, 360170);

procedure osst_write_filemark($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_filemark($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;
  var $i40: i1;
  var $p41: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    call {:si_unique_call 955} {:cexpr "this_mark_ppos"} boogie_si_record_i32($i3);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    call {:si_unique_call 956} {:cexpr "this_mark_lbn"} boogie_si_record_i32($i5);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.6, $p6);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p11, 2);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 1);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i13 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 958} {:cexpr "result"} boogie_si_record_i32($i13);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i14 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 960} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i14, $i13);
    call {:si_unique_call 961} {:cexpr "result"} boogie_si_record_i32($i15);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i3);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(748, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $i5);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.6, $p18);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    call {:si_unique_call 964} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.6, $p36);
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i37, 1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p39, $i38);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i35, 0);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i40 == 1;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p41, $i3);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i24 := $sle.i32($i23, 1023);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb7;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i25 := __fswab32($i3);
    call {:si_unique_call 963} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.6, $p29);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i28, 4));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, $i25);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const osst_write_eod: ref;

axiom osst_write_eod == $sub.ref(0, 361202);

procedure osst_write_eod($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_eod($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.6, $p2);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, 1);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, $i9);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 1);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i12 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 966} {:cexpr "result"} boogie_si_record_i32($i12);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i13 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 968} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, $i12);
    call {:si_unique_call 969} {:cexpr "result"} boogie_si_record_i32($i14);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, 1);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $i17);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(760, 1));
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $i20);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i6 := $i14;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const osst_write_header: ref;

axiom osst_write_header == $sub.ref(0, 362234);

procedure osst_write_header($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, assertsPassed, $M.39, $M.38, $CurrAddr;



implementation osst_write_header($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i16;
  var $i49: i16;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p80: ref;
  var $p83: ref;
  var $p86: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i32;
  var $i109: i32;
  var $i112: i16;
  var $i113: i32;
  var $i114: i16;
  var $i115: i16;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $i127: i32;
  var $i129: i1;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $i8: i32;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: ref;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} {:cexpr "osst_write_header:arg:locate_eod"} boogie_si_record_i32($i2);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p3 := tape_name($p0);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p29, 0);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(0, 1));
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} vslice_dummy_var_257 := strcpy($p33, .str.93);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(8, 1));
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 4);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(10, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p37, 10307);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(16, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p38, 1);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p41, 0);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p44, 1);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.6, $p45);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $i49 := __fswab16($i48);
    call {:si_unique_call 977} {:cexpr "tmp___2"} boogie_si_record_i16($i49);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p52, $i49);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $i55 := __fswab32($i54);
    call {:si_unique_call 979} {:cexpr "tmp___3"} boogie_si_record_i32($i55);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p58, $i55);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i61 := __fswab32($i60);
    call {:si_unique_call 981} {:cexpr "tmp___4"} boogie_si_record_i32($i61);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, $i61);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.6, $p65);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $i67 := __fswab32($i66);
    call {:si_unique_call 983} {:cexpr "tmp___5"} boogie_si_record_i32($i67);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p70, $i67);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(276, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p71, 335544320);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(280, 1));
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p72, $sub.i32(0, 603652096));
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(284, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p73, 0);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(0, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(2, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p77, 32);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p80, 0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p83, 1);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p86, 18501);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(760, 1));
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.6, $p90);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $i92 := __fswab32($i91);
    call {:si_unique_call 985} {:cexpr "tmp___6"} boogie_si_record_i32($i92);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p95, $i92);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.6, $p96);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i98 := __fswab32($i97);
    call {:si_unique_call 987} {:cexpr "tmp___7"} boogie_si_record_i32($i98);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p101, $i98);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(0, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(2, 1));
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p105, 4);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i108 := $slt.i32(1024, $i107);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i108 == 1);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.6, $p110);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i109 := $i111;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i109);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i16($i113);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} $i115 := __fswab16($i114);
    call {:si_unique_call 989} {:cexpr "tmp___8"} boogie_si_record_i16($i115);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(4, 1));
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p117, $i115);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $i118 := __osst_write_header($p0, $p1, 2990, 5);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 991} {:cexpr "result"} boogie_si_record_i32($i118);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.6, $p119);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 0);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i123 := __osst_write_header($p0, $p1, 5, 5);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 994} {:cexpr "tmp___9"} boogie_si_record_i32($i123);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, $i118);
    call {:si_unique_call 995} {:cexpr "result"} boogie_si_record_i32($i124);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i2, 0);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i124, 0);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i129 == 1);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(696, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_61 := $M.6;
    cmdloc_dummy_var_62 := $M.6;
    call {:si_unique_call 998} cmdloc_dummy_var_63 := $memcpy.i8(cmdloc_dummy_var_61, cmdloc_dummy_var_62, $p132, .str.49, 4, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_63;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p133, 1);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p134, 4);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p135, 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i8 := $i124;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb23:
    assume $i129 == 1;
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_260 := printk.ref.ref(.str.94, $p3);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i125 == 1;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.6, $p126);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_259 := osst_set_frame_position($p0, $p1, $i127, 0);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i121 == 1;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_258 := osst_write_filler($p0, $p1, 2995, 5);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i108 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i109 := 1024;
    goto $bb16;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i27);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p13 := ldv_vmalloc_25(32768);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, $p13);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p14);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.6;
    call {:si_unique_call 974} cmdloc_dummy_var_60 := $memset.i8(cmdloc_dummy_var_59, $p21, 0, 32768, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_60;
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} vslice_dummy_var_256 := printk.ref.ref(.str.92, $p3);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const ldv_vmalloc_25: ref;

axiom ldv_vmalloc_25 == $sub.ref(0, 363266);

procedure ldv_vmalloc_25($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_25($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} {:cexpr "ldv_vmalloc_25:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} ldv_check_alloc_nonatomic();
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p1 := ldv_undef_ptr();
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_436:
    assume !assertsPassed;
    return;
}



const __osst_write_header: ref;

axiom __osst_write_header == $sub.ref(0, 364298);

procedure __osst_write_header($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.6, $M.26, $M.24, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation __osst_write_header($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i25: i32;
  var $i26: i1;
  var $i10: i32;
  var $i27: i32;
  var $i24: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} {:cexpr "__osst_write_header:arg:where"} boogie_si_record_i32($i2);
    call {:si_unique_call 1003} {:cexpr "__osst_write_header:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $p4 := tape_name($p0);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} vslice_dummy_var_261 := osst_wait_ready($p0, $p1, 300, 0);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} vslice_dummy_var_262 := osst_set_frame_position($p0, $p1, $i2, 0);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, 4);
    call {:si_unique_call 1007} {:cexpr "__osst_write_header:arg:tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, 1);
    call {:si_unique_call 1008} {:cexpr "count"} boogie_si_record_i32($i8);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1014} $i27 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    call {:si_unique_call 1015} {:cexpr "result"} boogie_si_record_i32($i27);
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $p14, $p15, $p17, $p18, $p19, $p20, $i21, $i22, $i25, $i26, $i10, vslice_dummy_var_263 := __osst_write_header_loop_$bb4($p0, $p1, $p11, $p12, $p13, $p14, $p15, $p17, $p18, $p19, $p20, $i21, $i22, $i25, $i26, $i10, vslice_dummy_var_263);
    goto $bb4_last;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} vslice_dummy_var_263 := osst_copy_to_buffer($p12, $p15);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, 32768);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 1);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i21 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 1011} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i10, 1);
    call {:si_unique_call 1013} {:cexpr "count"} boogie_si_record_i32($i25);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i10, 0);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i25;
    goto $bb10_dummy;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_264 := printk.ref.ref(.str.95, $p4);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 5);
    goto $bb8;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8377;
}



const osst_write_filler: ref;

axiom osst_write_filler == $sub.ref(0, 365330);

procedure osst_write_filler($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.25, $M.6, $M.26, $M.24, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_filler($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i23: i32;
  var $i24: i1;
  var $i10: i32;
  var $i25: i32;
  var $i22: i32;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var vslice_dummy_var_265: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} {:cexpr "osst_write_filler:arg:where"} boogie_si_record_i32($i2);
    call {:si_unique_call 1017} {:cexpr "osst_write_filler:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p4 := tape_name($p0);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} vslice_dummy_var_265 := osst_wait_ready($p0, $p1, 300, 0);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_266 := osst_set_frame_position($p0, $p1, $i2, 0);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p7, 5);
    call {:si_unique_call 1021} {:cexpr "osst_write_filler:arg:tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, 1);
    call {:si_unique_call 1022} {:cexpr "count"} boogie_si_record_i32($i8);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i25 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    call {:si_unique_call 1029} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i22 := $i25;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb4;

  $bb4:
    call $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i23, $i24, $i10, cmdloc_dummy_var_64, cmdloc_dummy_var_65, cmdloc_dummy_var_66 := osst_write_filler_loop_$bb4($p0, $p1, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $i19, $i20, $i23, $i24, $i10, cmdloc_dummy_var_64, cmdloc_dummy_var_65, cmdloc_dummy_var_66);
    goto $bb4_last;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_64 := $M.6;
    cmdloc_dummy_var_65 := $M.6;
    call {:si_unique_call 1023} cmdloc_dummy_var_66 := $memcpy.i8(cmdloc_dummy_var_64, cmdloc_dummy_var_65, $p14, .str.96, 6, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_66;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, 6);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p18, 1);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i19 := osst_flush_write_buffer($p0, $p1);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    call {:si_unique_call 1025} {:cexpr "tmp___0"} boogie_si_record_i32($i19);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $sub.i32($i10, 1);
    call {:si_unique_call 1027} {:cexpr "count"} boogie_si_record_i32($i23);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i10, 0);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i23;
    goto $bb10_dummy;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_267 := printk.ref.ref(.str.97, $p4);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 5);
    goto $bb8;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8417;
}



const osst_write_behind_check: ref;

axiom osst_write_behind_check == $sub.ref(0, 366362);

procedure osst_write_behind_check($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_behind_check($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var vslice_dummy_var_268: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.6, $p1);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(184, 1));
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} wait_for_completion($p3);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.6, $p4);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 144)), $mul.ref(128, 1));
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, $0.ref);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.6, $p9);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i13 := osst_chk_result($p0, $p12);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.6, $p14);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $i13);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.6, $p17);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p32, $i31);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} osst_release_request($p36);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i38, $i40);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p43, $0.ref);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.6, $p44);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.6, $p46);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i45, $i47);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p49, $i48);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, 0);
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} vslice_dummy_var_268 := printk.ref(.str.98);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i25 := osst_write_error_recovery($p0, $p24, 1);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p28, $i25);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const osst_zero_buffer_tail: ref;

axiom osst_zero_buffer_tail == $sub.ref(0, 367394);

procedure osst_zero_buffer_tail($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_zero_buffer_tail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i11: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $i9: i32;
  var $i10: i32;
  var $i23: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i21: i32;
  var $i22: i32;
  var $i7: i32;
  var $i8: i32;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i50: i64;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i64;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i32;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i80: i32;
  var $i46: i32;
  var $i81: i1;
  var $i36: i32;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    call {:si_unique_call 1035} {:cexpr "offset"} boogie_si_record_i32($i2);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.6, $p3);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i2, 0;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.6, $p31);
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, $i8);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(32768, $i38);
    call {:si_unique_call 1039} {:cexpr "do_count"} boogie_si_record_i32($i39);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.6, $p40);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i8);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i39, 0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i45 := $and.i1($i43, $i44);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i46 := $i39;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i46, 0);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_270 := printk.ref.i32(.str.43, $i46);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 5);
    goto $bb13;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i47, $i48, $i49 := $i39, $i8, $i7;
    goto $bb18;

  $bb18:
    call $i50, $p53, $i54, $i55, $i56, $i57, $p60, $i61, $i62, $i63, $p64, $p65, $i66, $p67, $p68, $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i47, $i48, $i49, $i80, cmdloc_dummy_var_67, cmdloc_dummy_var_68 := osst_zero_buffer_tail_loop_$bb18($p0, $p40, $i50, $p53, $i54, $i55, $i56, $i57, $p60, $i61, $i62, $i63, $p64, $p65, $i66, $p67, $p68, $p69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i47, $i48, $i49, $i80, cmdloc_dummy_var_67, cmdloc_dummy_var_68);
    goto $bb18_last;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i48);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i50, 40)), $mul.ref(20, 1));
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, $i49);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i56 := $ult.i32($i55, $i47);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i56 == 1);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i63 := $i47;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i48);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p65, $mul.ref($i66, 40));
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p68 := sg_page($p67);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p69 := lowmem_page_address($p68);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i49);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p69, $mul.ref($i70, 1));
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i63);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.6;
    call {:si_unique_call 1042} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, $p71, 0, $i72, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_68;
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32($i47, $i63);
    call {:si_unique_call 1043} {:cexpr "do_count"} boogie_si_record_i32($i73);
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i48, 1);
    call {:si_unique_call 1044} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.6, $p40);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i74);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i73, 0);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $i79 := $and.i1($i77, $i78);
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i80 := $i73;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i46 := $i80;
    goto $bb17;

  $bb23:
    assume $i79 == 1;
    assume {:verifier.code 0} true;
    $i47, $i48, $i49 := $i73, $i74, 0;
    goto $bb23_dummy;

  $bb20:
    assume $i56 == 1;
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i57 := $sext.i32.i64($i48);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i57, 40)), $mul.ref(20, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.6, $p60);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i61, $i49);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb22;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} vslice_dummy_var_269 := printk.ref(.str.42);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 5);
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, $i2;
    goto $bb4;

  $bb4:
    call $i11, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i9, $i10, $i23, $p26, $i27, $i28, $i29, $i30, $i21, $i22 := osst_zero_buffer_tail_loop_$bb4($p0, $p3, $i11, $p14, $i15, $i16, $i17, $i18, $i19, $i20, $i9, $i10, $i23, $p26, $i27, $i28, $i29, $i30, $i21, $i22);
    goto $bb4_last;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i9);
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i23, 40)), $mul.ref(20, 1));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i28 := $uge.i32($i10, $i27);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i29, $i30 := $i10, $i9;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i29, $i30;
    goto $bb3;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i9);
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i10, $i15);
    call {:si_unique_call 1036} {:cexpr "offset"} boogie_si_record_i32($i16);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i9, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.6, $p3);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i19, $i17);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i21, $i22 := $i16, $i17;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i21, $i22;
    goto $bb3;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i17, $i16;
    goto $bb6_dummy;

  $bb23_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8566;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8523;
}



const atomic64_read: ref;

axiom atomic64_read == $sub.ref(0, 368426);

procedure atomic64_read($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation atomic64_read($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.6, $p1);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 369458);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    return;
}



const __os_scsi_tape_open: ref;

axiom __os_scsi_tape_open == $sub.ref(0, 370490);

procedure __os_scsi_tape_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.25, $M.26, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation __os_scsi_tape_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i8;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $p79: ref;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $i103: i1;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $i121: i1;
  var $i106: i32;
  var $i107: i32;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $i133: i32;
  var $i134: i32;
  var $i122: i32;
  var $i123: i32;
  var $i104: i32;
  var $i105: i32;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i64;
  var $i144: i64;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $p216: ref;
  var $p217: ref;
  var $p219: ref;
  var $i220: i8;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $p225: ref;
  var $p227: ref;
  var $i228: i8;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p234: ref;
  var $i235: i8;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $p246: ref;
  var $p247: ref;
  var $p249: ref;
  var $i250: i8;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $p254: ref;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i8;
  var $i266: i32;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i32;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $p294: ref;
  var $i295: i8;
  var $i296: i32;
  var $i297: i1;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $i306: i8;
  var $i307: i32;
  var $p308: ref;
  var $i309: i32;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p328: ref;
  var $i329: i8;
  var $i330: i32;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $i337: i8;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i8;
  var $i346: i32;
  var $i347: i1;
  var $p348: ref;
  var $p349: ref;
  var $i350: i32;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $i357: i8;
  var $i358: i32;
  var $i359: i1;
  var $i360: i32;
  var $i361: i1;
  var $p363: ref;
  var $p364: ref;
  var $i365: i8;
  var $i366: i32;
  var $i367: i1;
  var $p368: ref;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $i373: i32;
  var $p374: ref;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $i382: i32;
  var $i383: i32;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i32;
  var $i395: i1;
  var $p396: ref;
  var $p398: ref;
  var $i399: i8;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $p404: ref;
  var $i405: i8;
  var $i406: i32;
  var $i407: i1;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $i413: i8;
  var $i414: i32;
  var $i415: i32;
  var $i416: i8;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $p437: ref;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $p461: ref;
  var $i462: i32;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $p471: ref;
  var $p472: ref;
  var $p474: ref;
  var $i475: i8;
  var $i476: i32;
  var $i477: i32;
  var $i478: i1;
  var $p480: ref;
  var $p482: ref;
  var $i483: i8;
  var $i484: i32;
  var $i485: i32;
  var $i486: i1;
  var $i479: i32;
  var $p488: ref;
  var $p490: ref;
  var $i491: i8;
  var $i492: i32;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $p496: ref;
  var $p497: ref;
  var $p498: ref;
  var $i499: i8;
  var $i500: i32;
  var $i501: i1;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $i511: i32;
  var $i487: i32;
  var $i513: i32;
  var $i514: i32;
  var $i515: i1;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i32;
  var $i521: i1;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $i525: i8;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $p530: ref;
  var $i531: i8;
  var $i532: i32;
  var $i533: i32;
  var $i534: i1;
  var $p535: ref;
  var $p537: ref;
  var $i538: i8;
  var $i539: i32;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $p544: ref;
  var $i545: i8;
  var $i546: i32;
  var $i547: i1;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p556: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p564: ref;
  var $i565: i8;
  var $i566: i32;
  var $i567: i1;
  var $p568: ref;
  var $i569: i32;
  var $i570: i1;
  var $p571: ref;
  var $i572: i32;
  var $i573: i32;
  var $i574: i32;
  var $p575: ref;
  var $p576: ref;
  var $i577: i8;
  var $i578: i32;
  var $i579: i1;
  var $p580: ref;
  var $i581: i32;
  var $i582: i32;
  var $i583: i32;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i595: i8;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $i599: i32;
  var $i600: i32;
  var $i601: i1;
  var $i602: i32;
  var $i603: i32;
  var $i604: i1;
  var $i605: i1;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $i610: i8;
  var $i611: i32;
  var $i612: i1;
  var $i613: i32;
  var $i614: i1;
  var $p616: ref;
  var $p618: ref;
  var $i92: i32;
  var $p619: ref;
  var $i620: i64;
  var $i621: i1;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $p628: ref;
  var $i18: i32;
  var $p629: ref;
  var $p630: ref;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $p637: ref;
  var $p638: ref;
  var $p639: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $p648: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $p659: ref;
  var $p660: ref;
  var $i661: i32;
  var $p662: ref;
  var $p663: ref;
  var $p665: ref;
  var $i666: i8;
  var $i667: i32;
  var $i668: i32;
  var $i669: i1;
  var $p670: ref;
  var $p672: ref;
  var $i673: i8;
  var $i674: i32;
  var $i675: i32;
  var $i676: i1;
  var $p677: ref;
  var $p679: ref;
  var $i680: i8;
  var $i681: i32;
  var $i682: i32;
  var $i683: i1;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $p688: ref;
  var $i689: i8;
  var $i690: i32;
  var $i691: i1;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $p720: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $i684: i32;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $i733: i32;
  var $p734: ref;
  var $p735: ref;
  var $p737: ref;
  var $i738: i8;
  var $i739: i32;
  var $i740: i32;
  var $i741: i1;
  var $p742: ref;
  var $p744: ref;
  var $i745: i8;
  var $i746: i32;
  var $i747: i32;
  var $i748: i1;
  var $p749: ref;
  var $p751: ref;
  var $i752: i8;
  var $i753: i32;
  var $i754: i32;
  var $i755: i1;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $p760: ref;
  var $i761: i8;
  var $i762: i32;
  var $i763: i1;
  var $p764: ref;
  var $p765: ref;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $p781: ref;
  var $p782: ref;
  var $p783: ref;
  var $p785: ref;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p794: ref;
  var $p795: ref;
  var $p796: ref;
  var $p797: ref;
  var $p798: ref;
  var $p799: ref;
  var $i756: i32;
  var $p800: ref;
  var $p801: ref;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $i805: i32;
  var $p806: ref;
  var $p807: ref;
  var $p809: ref;
  var $i810: i8;
  var $i811: i32;
  var $i812: i32;
  var $i813: i1;
  var $p814: ref;
  var $p816: ref;
  var $i817: i8;
  var $i818: i32;
  var $i819: i32;
  var $i820: i1;
  var $p821: ref;
  var $p823: ref;
  var $i824: i8;
  var $i825: i32;
  var $i826: i32;
  var $i827: i1;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $i833: i8;
  var $i834: i32;
  var $i835: i1;
  var $p836: ref;
  var $p837: ref;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $p844: ref;
  var $p845: ref;
  var $p846: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $p853: ref;
  var $p854: ref;
  var $p855: ref;
  var $p857: ref;
  var $p858: ref;
  var $p859: ref;
  var $p860: ref;
  var $p861: ref;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $p866: ref;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $i828: i32;
  var $p872: ref;
  var $p873: ref;
  var $p874: ref;
  var $p875: ref;
  var $p876: ref;
  var $i877: i32;
  var $p878: ref;
  var $p879: ref;
  var $p881: ref;
  var $i882: i8;
  var $i883: i32;
  var $i884: i32;
  var $i885: i1;
  var $p886: ref;
  var $p888: ref;
  var $i889: i8;
  var $i890: i32;
  var $i891: i32;
  var $i892: i1;
  var $p893: ref;
  var $p895: ref;
  var $i896: i8;
  var $i897: i32;
  var $i898: i32;
  var $i899: i1;
  var $p901: ref;
  var $p902: ref;
  var $p903: ref;
  var $p904: ref;
  var $i905: i8;
  var $i906: i32;
  var $i907: i1;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $p914: ref;
  var $p915: ref;
  var $p916: ref;
  var $p917: ref;
  var $p918: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
  var $p923: ref;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p933: ref;
  var $p934: ref;
  var $p935: ref;
  var $p936: ref;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $p941: ref;
  var $p942: ref;
  var $p943: ref;
  var $i900: i32;
  var $p944: ref;
  var $p945: ref;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $i949: i32;
  var $p950: ref;
  var $p951: ref;
  var $p953: ref;
  var $i954: i8;
  var $i955: i32;
  var $i956: i32;
  var $i957: i1;
  var $p958: ref;
  var $p960: ref;
  var $i961: i8;
  var $i962: i32;
  var $i963: i32;
  var $i964: i1;
  var $p965: ref;
  var $p967: ref;
  var $i968: i8;
  var $i969: i32;
  var $i970: i32;
  var $i971: i1;
  var $p973: ref;
  var $p974: ref;
  var $p975: ref;
  var $p976: ref;
  var $i977: i8;
  var $i978: i32;
  var $i979: i1;
  var $p980: ref;
  var $p981: ref;
  var $p982: ref;
  var $p983: ref;
  var $p984: ref;
  var $p985: ref;
  var $p986: ref;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $p990: ref;
  var $p992: ref;
  var $p993: ref;
  var $p994: ref;
  var $p995: ref;
  var $p996: ref;
  var $p997: ref;
  var $p998: ref;
  var $p999: ref;
  var $p1001: ref;
  var $p1002: ref;
  var $p1003: ref;
  var $p1004: ref;
  var $p1005: ref;
  var $p1006: ref;
  var $p1007: ref;
  var $p1008: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $p1012: ref;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i972: i32;
  var $p1016: ref;
  var $p1017: ref;
  var $p1018: ref;
  var $p1019: ref;
  var $p1020: ref;
  var $i1021: i32;
  var $p1022: ref;
  var $p1023: ref;
  var $p1025: ref;
  var $i1026: i8;
  var $i1027: i32;
  var $i1028: i32;
  var $i1029: i1;
  var $p1030: ref;
  var $p1032: ref;
  var $i1033: i8;
  var $i1034: i32;
  var $i1035: i32;
  var $i1036: i1;
  var $p1037: ref;
  var $p1039: ref;
  var $i1040: i8;
  var $i1041: i32;
  var $i1042: i32;
  var $i1043: i1;
  var $p1045: ref;
  var $p1046: ref;
  var $p1047: ref;
  var $p1048: ref;
  var $i1049: i8;
  var $i1050: i32;
  var $i1051: i1;
  var $p1052: ref;
  var $p1053: ref;
  var $p1054: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $p1057: ref;
  var $p1058: ref;
  var $p1059: ref;
  var $p1060: ref;
  var $p1061: ref;
  var $p1062: ref;
  var $p1064: ref;
  var $p1065: ref;
  var $p1066: ref;
  var $p1067: ref;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $p1071: ref;
  var $p1073: ref;
  var $p1074: ref;
  var $p1075: ref;
  var $p1076: ref;
  var $p1077: ref;
  var $p1078: ref;
  var $p1079: ref;
  var $p1080: ref;
  var $p1082: ref;
  var $p1083: ref;
  var $p1084: ref;
  var $p1085: ref;
  var $p1086: ref;
  var $p1087: ref;
  var $i1044: i32;
  var $p1088: ref;
  var $p1089: ref;
  var $p1090: ref;
  var $p1091: ref;
  var $p1092: ref;
  var $i1093: i32;
  var $p1094: ref;
  var $p1095: ref;
  var $p1097: ref;
  var $i1098: i8;
  var $i1099: i32;
  var $i1100: i32;
  var $i1101: i1;
  var $p1102: ref;
  var $p1104: ref;
  var $i1105: i8;
  var $i1106: i32;
  var $i1107: i32;
  var $i1108: i1;
  var $p1109: ref;
  var $p1111: ref;
  var $i1112: i8;
  var $i1113: i32;
  var $i1114: i32;
  var $i1115: i1;
  var $p1117: ref;
  var $p1118: ref;
  var $p1119: ref;
  var $p1120: ref;
  var $i1121: i8;
  var $i1122: i32;
  var $i1123: i1;
  var $p1124: ref;
  var $p1125: ref;
  var $p1126: ref;
  var $p1127: ref;
  var $p1128: ref;
  var $p1129: ref;
  var $p1130: ref;
  var $p1131: ref;
  var $p1132: ref;
  var $p1133: ref;
  var $p1134: ref;
  var $p1136: ref;
  var $p1137: ref;
  var $p1138: ref;
  var $p1139: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $p1142: ref;
  var $p1143: ref;
  var $p1145: ref;
  var $p1146: ref;
  var $p1147: ref;
  var $p1148: ref;
  var $p1149: ref;
  var $p1150: ref;
  var $p1151: ref;
  var $p1152: ref;
  var $p1154: ref;
  var $p1155: ref;
  var $p1156: ref;
  var $p1157: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $i1116: i32;
  var $p1160: ref;
  var $p1161: ref;
  var $p1162: ref;
  var $p1163: ref;
  var $p1164: ref;
  var $i1165: i32;
  var $p1166: ref;
  var $p1167: ref;
  var $p1169: ref;
  var $i1170: i8;
  var $i1171: i32;
  var $i1172: i32;
  var $i1173: i1;
  var $p1174: ref;
  var $p1176: ref;
  var $i1177: i8;
  var $i1178: i32;
  var $i1179: i32;
  var $i1180: i1;
  var $p1181: ref;
  var $p1183: ref;
  var $i1184: i8;
  var $i1185: i32;
  var $i1186: i32;
  var $i1187: i1;
  var $p1189: ref;
  var $p1190: ref;
  var $p1191: ref;
  var $p1192: ref;
  var $i1193: i8;
  var $i1194: i32;
  var $i1195: i1;
  var $p1196: ref;
  var $p1197: ref;
  var $p1198: ref;
  var $p1199: ref;
  var $p1200: ref;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $p1204: ref;
  var $p1205: ref;
  var $p1206: ref;
  var $p1208: ref;
  var $p1209: ref;
  var $p1210: ref;
  var $p1211: ref;
  var $p1212: ref;
  var $p1213: ref;
  var $p1214: ref;
  var $p1215: ref;
  var $p1217: ref;
  var $p1218: ref;
  var $p1219: ref;
  var $p1220: ref;
  var $p1221: ref;
  var $p1222: ref;
  var $p1223: ref;
  var $p1224: ref;
  var $p1226: ref;
  var $p1227: ref;
  var $p1228: ref;
  var $p1229: ref;
  var $p1230: ref;
  var $p1231: ref;
  var $i1188: i32;
  var $p1232: ref;
  var $p1233: ref;
  var $p1234: ref;
  var $p1235: ref;
  var $p1236: ref;
  var $i1237: i32;
  var $p1238: ref;
  var $p1239: ref;
  var $p1241: ref;
  var $i1242: i8;
  var $i1243: i32;
  var $i1244: i32;
  var $i1245: i1;
  var $p1246: ref;
  var $p1248: ref;
  var $i1249: i8;
  var $i1250: i32;
  var $i1251: i32;
  var $i1252: i1;
  var $p1253: ref;
  var $p1255: ref;
  var $i1256: i8;
  var $i1257: i32;
  var $i1258: i32;
  var $i1259: i1;
  var $p1260: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $p1263: ref;
  var $i1264: i8;
  var $i1265: i32;
  var $i1266: i1;
  var $p1267: ref;
  var $p1268: ref;
  var $p1269: ref;
  var $p1270: ref;
  var $p1271: ref;
  var $p1272: ref;
  var $p1273: ref;
  var $p1274: ref;
  var $p1275: ref;
  var $p1276: ref;
  var $p1277: ref;
  var $p1279: ref;
  var $p1280: ref;
  var $p1281: ref;
  var $p1282: ref;
  var $p1283: ref;
  var $p1284: ref;
  var $p1285: ref;
  var $p1286: ref;
  var $p1288: ref;
  var $p1289: ref;
  var $p1290: ref;
  var $p1291: ref;
  var $p1292: ref;
  var $p1293: ref;
  var $p1294: ref;
  var $p1295: ref;
  var $p1297: ref;
  var $p1298: ref;
  var $p1299: ref;
  var $p1300: ref;
  var $p1301: ref;
  var $p1302: ref;
  var $i512: i32;
  var $p1303: ref;
  var $p1304: ref;
  var $p1306: ref;
  var $p1307: ref;
  var $p1308: ref;
  var $p1309: ref;
  var $p1310: ref;
  var $p1311: ref;
  var $p1312: ref;
  var $p1313: ref;
  var $p1315: ref;
  var $p1316: ref;
  var $p1317: ref;
  var $p1318: ref;
  var $p1319: ref;
  var $p1320: ref;
  var $p1321: ref;
  var $p1322: ref;
  var $p1324: ref;
  var $p1325: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $p1328: ref;
  var $p1329: ref;
  var $p1330: ref;
  var $p1331: ref;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $i1335: i32;
  var $p1336: ref;
  var $p1337: ref;
  var $p1339: ref;
  var $i1340: i8;
  var $i1341: i32;
  var $i1342: i32;
  var $i1343: i1;
  var $p1344: ref;
  var $p1346: ref;
  var $i1347: i8;
  var $i1348: i32;
  var $i1349: i32;
  var $i1350: i1;
  var $p1351: ref;
  var $p1352: ref;
  var $p1353: ref;
  var $p1354: ref;
  var $p1355: ref;
  var $i1356: i32;
  var $p1357: ref;
  var $p1358: ref;
  var $p1360: ref;
  var $i1361: i8;
  var $i1362: i32;
  var $i1363: i32;
  var $i1364: i1;
  var $p1365: ref;
  var $p1367: ref;
  var $i1368: i8;
  var $i1369: i32;
  var $i1370: i32;
  var $i1371: i1;
  var $p1372: ref;
  var $p1373: ref;
  var $p1374: ref;
  var $p1375: ref;
  var $p1376: ref;
  var $i1377: i32;
  var $p1378: ref;
  var $p1379: ref;
  var $p1381: ref;
  var $i1382: i8;
  var $i1383: i32;
  var $i1384: i32;
  var $i1385: i1;
  var $p1386: ref;
  var $p1388: ref;
  var $i1389: i8;
  var $i1390: i32;
  var $i1391: i32;
  var $i1392: i1;
  var $p1393: ref;
  var $p1394: ref;
  var $p1395: ref;
  var $p1396: ref;
  var $p1397: ref;
  var $i1398: i32;
  var $p1399: ref;
  var $p1400: ref;
  var $p1402: ref;
  var $i1403: i8;
  var $i1404: i32;
  var $i1405: i32;
  var $i1406: i1;
  var $p1407: ref;
  var $p1409: ref;
  var $i1410: i8;
  var $i1411: i32;
  var $i1412: i32;
  var $i1413: i1;
  var $p1414: ref;
  var $p1415: ref;
  var $p1416: ref;
  var $p1417: ref;
  var $p1418: ref;
  var $i1419: i32;
  var $p1420: ref;
  var $p1421: ref;
  var $p1423: ref;
  var $i1424: i8;
  var $i1425: i32;
  var $i1426: i32;
  var $i1427: i1;
  var $p1428: ref;
  var $p1430: ref;
  var $i1431: i8;
  var $i1432: i32;
  var $i1433: i32;
  var $i1434: i1;
  var $p1435: ref;
  var $p1436: ref;
  var $p1437: ref;
  var $p1438: ref;
  var $p1439: ref;
  var $i1440: i32;
  var $p1441: ref;
  var $p1442: ref;
  var $p1444: ref;
  var $i1445: i8;
  var $i1446: i32;
  var $i1447: i32;
  var $i1448: i1;
  var $p1449: ref;
  var $p1451: ref;
  var $i1452: i8;
  var $i1453: i32;
  var $i1454: i32;
  var $i1455: i1;
  var $p1456: ref;
  var $p1457: ref;
  var $p1458: ref;
  var $p1459: ref;
  var $p1460: ref;
  var $i1461: i32;
  var $p1462: ref;
  var $p1463: ref;
  var $p1465: ref;
  var $i1466: i8;
  var $i1467: i32;
  var $i1468: i32;
  var $i1469: i1;
  var $p1470: ref;
  var $p1472: ref;
  var $i1473: i8;
  var $i1474: i32;
  var $i1475: i32;
  var $i1476: i1;
  var $p1477: ref;
  var $p1478: ref;
  var $p1479: ref;
  var $p1480: ref;
  var $p1481: ref;
  var $i1482: i32;
  var $p1483: ref;
  var $p1484: ref;
  var $p1486: ref;
  var $i1487: i8;
  var $i1488: i32;
  var $i1489: i32;
  var $i1490: i1;
  var $p1491: ref;
  var $p1493: ref;
  var $i1494: i8;
  var $i1495: i32;
  var $i1496: i32;
  var $i1497: i1;
  var $p1498: ref;
  var $p1499: ref;
  var $p1500: ref;
  var $p1501: ref;
  var $p1502: ref;
  var $i1503: i32;
  var $p1504: ref;
  var $p1505: ref;
  var $p1507: ref;
  var $i1508: i8;
  var $i1509: i32;
  var $i1510: i32;
  var $i1511: i1;
  var $p1512: ref;
  var $p1514: ref;
  var $i1515: i8;
  var $i1516: i32;
  var $i1517: i32;
  var $i1518: i1;
  var $p1519: ref;
  var $p1520: ref;
  var $p1522: ref;
  var $p1523: ref;
  var $p1524: ref;
  var $p1526: ref;
  var $p1527: ref;
  var $p1528: ref;
  var $p1530: ref;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $0.ref);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i4 := iminor($p0);
    call {:si_unique_call 1050} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 31);
    call {:si_unique_call 1051} {:cexpr "dev"} boogie_si_record_i32($i5);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i6 := iminor($p0);
    call {:si_unique_call 1053} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 96);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i32($i7, 5);
    call {:si_unique_call 1054} {:cexpr "mode"} boogie_si_record_i32($i8);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $sub.i32(0, 25));
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(132, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, $i11);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} _raw_write_lock(os_scsi_tapes_lock);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i13 := $M.13;
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i14 := $sge.i32($i5, $i13);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p15 := $M.12;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 0);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    $p19 := $M.12;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i5);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p19, $mul.ref($i20, 8));
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i24 == 1);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.6, $p25);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p29 := tape_name($p22);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(620, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.6, $p34);
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i36 := scsi_device_get($p35);
    call {:si_unique_call 1062} {:cexpr "tmp___1"} boogie_si_record_i32($i36);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p39, $p22);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(620, 1));
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 1);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i41 := iminor($p0);
    call {:si_unique_call 1066} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 128);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(627, 1));
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, $i45);
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i49 := scsi_block_when_processing_errors($p48);
    call {:si_unique_call 1068} {:cexpr "tmp___3"} boogie_si_record_i32($i49);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 0);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, $i8);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    call {:si_unique_call 1069} {:cexpr "flags"} boogie_si_record_i16($i64);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 3);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p70, $i69);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i71 := iminor($p0);
    call {:si_unique_call 1071} {:cexpr "tmp___4"} boogie_si_record_i32($i71);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 96);
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i72, 5);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i8($i73);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 2);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p78, $i77);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.6, $p79);
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(294, 1));
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.6, $p86);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i89 := enlarge_buffer($p85, $i88);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    call {:si_unique_call 1073} {:cexpr "tmp___5"} boogie_si_record_i32($i89);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.6, $p93);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_8757;

  corral_source_split_8757:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.6, $p95);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i97 := $sgt.i32($i96, 33279);
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i97 == 1);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.6, $p150);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p152, $0.ref);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} vslice_dummy_var_272 := printk.ref.ref.i32(.str.115, $p29, 33280);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 5);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p619 := $load.ref($M.24, $p3);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i620 := $p2i.ref.i64($p619);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i621 := $ne.i64($i620, 0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.6, $p623);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} normalize_buffer($p624);
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p625, 0);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(620, 1));
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p626, 0);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.6, $p627);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} scsi_device_put($p628);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i18 := $i92;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb204:
    assume $i621 == 1;
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $p622 := $load.ref($M.24, $p3);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} osst_release_request($p622);
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb33:
    assume $i97 == 1;
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.6, $p98);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p99, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.6, $p100);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $i102 := $zext.i16.i32($i101);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i103 := $sgt.i32($i102, 0);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i104, $i105 := 0, 0;
    assume {:branchcond $i103} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.6, $p135);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i139 := $sext.i32.i64($i105);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p138, $mul.ref($i139, 40));
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $p141 := sg_page($p140);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $p142 := lowmem_page_address($p141);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i104);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $i144 := $sub.i64(32768, $i143);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($p142, $mul.ref($i144, 1));
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.6, $p147);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p149, $p145);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.6, $p154);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p156, 0);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.6, $p157);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p158, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p159, 0);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p160, 0);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p162, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p163, 0);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p1519 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p1520 := $bitcast.ref.ref($p1519);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p1522 := $add.ref($add.ref($p1520, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1522, 0);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $p1523 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p1524 := $bitcast.ref.ref($p1523);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    $p1526 := $add.ref($add.ref($p1524, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1526, 0);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p1527 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p1528 := $bitcast.ref.ref($p1527);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p1530 := $add.ref($add.ref($p1528, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1530, 0);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p164, 0);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p2);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_69 := $M.6;
    call {:si_unique_call 1080} cmdloc_dummy_var_70 := $memset.i8(cmdloc_dummy_var_69, $p165, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_70;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p166, 0);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p2);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.6, $p168);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $p170 := osst_do_scsi($0.ref, $p22, $p167, 0, 3, $i169, 0, 1);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p170);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.24, $p3);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $i173 := $eq.i64($i172, 0);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.24, $p3);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p178, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.6, $p180);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 112);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i184 := $eq.i32($i183, 112);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.24, $p3);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p225, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.6, $p227);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i229, 112);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 112);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i231 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i279 := $i55;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.6, $p280);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p281, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.6, $p282);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 0);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p390, 0);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.6, $p391);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p392, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.6, $p393);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i395 := $ne.i32($i394, 0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    assume {:branchcond $i395} true;
    goto $bb131, $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    assume !($i395 == 1);
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $i513 := $i279;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i514 := osst_wait_ready($p22, $p3, 900, 0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    call {:si_unique_call 1106} {:cexpr "tmp___14"} boogie_si_record_i32($i514);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $i515 := $ne.i32($i514, 0);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i515} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i515 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.6, $p517);
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p518, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i520 := $load.i32($M.6, $p519);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i521 := $ne.i32($i520, 0);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_276 := osst_configure_onstream($p22, $p3);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i565 := $load.i8($M.6, $p564);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i566 := $zext.i8.i32($i565);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i567 := $eq.i32($i566, 0);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i567 == 1);
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $i574 := 33280;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p575, $i574);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i577 := $load.i8($M.6, $p576);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $i578 := $zext.i8.i32($i577);
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i579 := $eq.i32($i578, 0);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i579} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i579 == 1);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i583 := 1;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p585 := $load.ref($M.6, $p584);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p585, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p586, $i583);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p587, 0);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.6, $p588);
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p589, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p590, 0);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.6, $p591);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p592, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p593, 0);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(619, 1));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.6, $p594);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i596 := $zext.i8.i32($i595);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i597 := $ne.i32($i596, 0);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i605 := $ne.i32($i513, 0);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i610 := $load.i8($M.6, $p609);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i611 := $zext.i8.i32($i610);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i612 := $eq.i32($i611, 0);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i612} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} vslice_dummy_var_278 := osst_analyze_headers($p22, $p3);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $p618 := $load.ref($M.24, $p3);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} osst_release_request($p618);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $0.ref);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb198:
    assume $i612 == 1;
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i613 := do_door_lock($p22, 1);
    call {:si_unique_call 1111} {:cexpr "tmp___19"} boogie_si_record_i32($i613);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i614 := $ne.i32($i613, 0);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i614} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i614 == 1);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p616, 2);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb200:
    assume $i614 == 1;
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} vslice_dummy_var_277 := printk.ref.ref(.str.116, $p29);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb195:
    assume $i605 == 1;
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(621, 1));
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p606, 0);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(622, 1));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p607, 0);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(623, 1));
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p608, 0);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb186:
    assume $i597 == 1;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p598, 1);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i599 := $zext.i16.i32($i64);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i600 := $and.i32($i599, 3);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $i601 := $eq.i32($i600, 1);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb188, $bb190;

  $bb190:
    assume !($i601 == 1);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i602 := $zext.i16.i32($i64);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i603 := $and.i32($i602, 3);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i604 := $eq.i32($i603, 2);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    assume {:branchcond $i604} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i604 == 1;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 30);
    goto $bb31;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i601 == 1;
    goto $bb189;

  $bb183:
    assume $i579 == 1;
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i581 := $load.i32($M.6, $p580);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i582 := $sdiv.i32(32768, $i581);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i583 := $i582;
    goto $bb185;

  $bb177:
    assume $i567 == 1;
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p57, $mul.ref($i60, 56)), $mul.ref(12, 1));
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i569 := $load.i32($M.6, $p568);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i570 := $sgt.i32($i569, 0);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume {:branchcond $i570} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i570 == 1);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $i573 := 32768;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i574 := $i573;
    goto $bb182;

  $bb179:
    assume $i570 == 1;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p57, $mul.ref($i60, 56)), $mul.ref(12, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i572 := $load.i32($M.6, $p571);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i573 := $i572;
    goto $bb181;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i521 == 1;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p523 := $load.ref($M.6, $p522);
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p523, $mul.ref(0, 3496)), $mul.ref(233, 1));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.6, $p524);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i526 := $sext.i8.i32($i525);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $i527 := $sgt.i32($i526, 2);
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i527 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p549, 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.24, $p3);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} osst_release_request($p550);
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $0.ref);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p551, 0);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p552, 0);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p553, 0);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p556, $sub.i32(0, 1));
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p559, $sub.i32(0, 1));
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p560, 0);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p561, 0);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p562, 0);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb166:
    assume $i527 == 1;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.24, $p3);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($add.ref($p528, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.6, $p530);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i532 := $zext.i8.i32($i531);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i533 := $and.i32($i532, 112);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i534 := $eq.i32($i533, 112);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i534 == 1);
    goto $bb168;

  $bb169:
    assume $i534 == 1;
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p535 := $load.ref($M.24, $p3);
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($add.ref($p535, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i538 := $load.i8($M.6, $p537);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i539 := $zext.i8.i32($i538);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i540 := $and.i32($i539, 15);
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 2);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i541} true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i541 == 1);
    goto $bb168;

  $bb171:
    assume $i541 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.24, $p3);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($add.ref($p542, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.6, $p544);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i546, 58);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i547} true;
    goto $bb173, $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    assume !($i547 == 1);
    goto $bb168;

  $bb173:
    assume $i547 == 1;
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p548, 2);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb161:
    assume $i515 == 1;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} vslice_dummy_var_275 := printk.ref.ref(.str.117, $p29);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    goto $bb163;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb131:
    assume $i395 == 1;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p396 := $load.ref($M.24, $p3);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p396, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i399 := $load.i8($M.6, $p398);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i399);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i401 := $ne.i32($i400, 2);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb134, $bb136;

  $bb136:
    assume !($i401 == 1);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p402 := $load.ref($M.24, $p3);
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($add.ref($p402, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.6, $p404);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i32($i405);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i407 := $ne.i32($i406, 58);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i407} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i407 == 1);
    goto $bb133;

  $bb137:
    assume {:verifier.code 0} true;
    assume $i407 == 1;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p408 := $bitcast.ref.ref($p2);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_79 := $M.6;
    call {:si_unique_call 1099} cmdloc_dummy_var_80 := $memset.i8(cmdloc_dummy_var_79, $p408, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_80;
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p409, 21);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p410, 16);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p411, 8);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.6, $p412);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i415 := $add.i32($i414, 255);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i8($i415);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p417 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $p418 := $load.ref($M.6, $p417);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p418, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $p420 := $load.ref($M.6, $p419);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p420, $i416);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.6, $p421);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p422, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.6, $p423);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($p424, $mul.ref(1, 1));
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p425, 0);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $p427 := $load.ref($M.6, $p426);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p427, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $p429 := $load.ref($M.6, $p428);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($p429, $mul.ref(2, 1));
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p430, 0);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.6, $p431);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p432, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.6, $p433);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($p434, $mul.ref(3, 1));
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p435, 0);
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.6, $p436);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p437, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p439 := $load.ref($M.6, $p438);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($p439, $mul.ref(4, 1));
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p440, 63);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.6, $p441);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p442, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p444 := $load.ref($M.6, $p443);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p445 := $add.ref($p444, $mul.ref(5, 1));
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p445, 1);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p447 := $load.ref($M.6, $p446);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p447, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.6, $p448);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($p449, $mul.ref(6, 1));
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p450, 2);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.6, $p451);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p452, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p454 := $load.ref($M.6, $p453);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($p454, $mul.ref(7, 1));
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p455, 3);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.24, $p3);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p457 := $bitcast.ref.ref($p2);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.6, $p458);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i462 := $load.i32($M.6, $p461);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $p463 := osst_do_scsi($p456, $p22, $p457, $i460, 1, $i462, 0, 1);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p463);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $p464 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p464, 0);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p465 := $bitcast.ref.ref($p2);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_81 := $M.6;
    call {:si_unique_call 1101} cmdloc_dummy_var_82 := $memset.i8(cmdloc_dummy_var_81, $p465, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_82;
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p466, 0);
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.24, $p3);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p2);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i470 := $load.i32($M.6, $p469);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $p471 := osst_do_scsi($p467, $p22, $p468, 0, 3, $i470, 0, 1);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p471);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.24, $p3);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($add.ref($p472, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i475 := $load.i8($M.6, $p474);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $i476 := $zext.i8.i32($i475);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i477 := $and.i32($i476, 112);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i478 := $ne.i32($i477, 112);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i479 := $i279;
    assume {:branchcond $i478} true;
    goto $bb141, $bb143;

  $bb143:
    assume !($i478 == 1);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $p480 := $load.ref($M.24, $p3);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($p480, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.6, $p482);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i485 := $and.i32($i484, 15);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 2);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $i479 := $i279;
    assume {:branchcond $i486} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p488 := $load.ref($M.24, $p3);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($add.ref($p488, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $i491 := $load.i8($M.6, $p490);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i492 := $zext.i8.i32($i491);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i493 := $and.i32($i492, 15);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 6);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i494} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    $i511 := $i279;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p656 := $bitcast.ref.ref($p2);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.6;
    call {:si_unique_call 1103} cmdloc_dummy_var_84 := $memset.i8(cmdloc_dummy_var_83, $p656, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_84;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p657, 0);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.24, $p3);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $p659 := $bitcast.ref.ref($p2);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p660 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i661 := $load.i32($M.6, $p660);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p662 := osst_do_scsi($p658, $p22, $p659, 0, 3, $i661, 0, 1);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p662);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p663 := $load.ref($M.24, $p3);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($add.ref($p663, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $i666 := $load.i8($M.6, $p665);
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i667 := $zext.i8.i32($i666);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i668 := $and.i32($i667, 112);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i669 := $ne.i32($i668, 112);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i479 := $i511;
    assume {:branchcond $i669} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i669 == 1);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.24, $p3);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($add.ref($p670, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i673 := $load.i8($M.6, $p672);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i674 := $zext.i8.i32($i673);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i675 := $and.i32($i674, 15);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i676 := $eq.i32($i675, 2);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i479 := $i511;
    assume {:branchcond $i676} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p677 := $load.ref($M.24, $p3);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($add.ref($p677, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i680 := $load.i8($M.6, $p679);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $i681 := $zext.i8.i32($i680);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i682 := $and.i32($i681, 15);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i682, 6);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    $i684 := $i511;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p728 := $bitcast.ref.ref($p2);
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_85 := $M.6;
    call {:si_unique_call 1118} cmdloc_dummy_var_86 := $memset.i8(cmdloc_dummy_var_85, $p728, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_86;
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p729, 0);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.24, $p3);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p731 := $bitcast.ref.ref($p2);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i733 := $load.i32($M.6, $p732);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p734 := osst_do_scsi($p730, $p22, $p731, 0, 3, $i733, 0, 1);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p734);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p735 := $load.ref($M.24, $p3);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($add.ref($p735, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $i738 := $load.i8($M.6, $p737);
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i739 := $zext.i8.i32($i738);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i740 := $and.i32($i739, 112);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i741 := $ne.i32($i740, 112);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i479 := $i684;
    assume {:branchcond $i741} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i741 == 1);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p742 := $load.ref($M.24, $p3);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p744 := $add.ref($add.ref($add.ref($p742, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i745 := $load.i8($M.6, $p744);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i746 := $zext.i8.i32($i745);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i747 := $and.i32($i746, 15);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i748 := $eq.i32($i747, 2);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $i479 := $i684;
    assume {:branchcond $i748} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i748 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p749 := $load.ref($M.24, $p3);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($add.ref($p749, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i752 := $load.i8($M.6, $p751);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i753 := $zext.i8.i32($i752);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i754 := $and.i32($i753, 15);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i755 := $eq.i32($i754, 6);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i755} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i755 == 1);
    assume {:verifier.code 0} true;
    $i756 := $i684;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p800 := $bitcast.ref.ref($p2);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_87 := $M.6;
    call {:si_unique_call 1120} cmdloc_dummy_var_88 := $memset.i8(cmdloc_dummy_var_87, $p800, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_88;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p801, 0);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.24, $p3);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p803 := $bitcast.ref.ref($p2);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i805 := $load.i32($M.6, $p804);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $p806 := osst_do_scsi($p802, $p22, $p803, 0, 3, $i805, 0, 1);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p806);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p807 := $load.ref($M.24, $p3);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($add.ref($p807, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i810 := $load.i8($M.6, $p809);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i811 := $zext.i8.i32($i810);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i812 := $and.i32($i811, 112);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i813 := $ne.i32($i812, 112);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i479 := $i756;
    assume {:branchcond $i813} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i813 == 1);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.24, $p3);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p814, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $i817 := $load.i8($M.6, $p816);
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i818 := $zext.i8.i32($i817);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i819 := $and.i32($i818, 15);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i820 := $eq.i32($i819, 2);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $i479 := $i756;
    assume {:branchcond $i820} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i820 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p821 := $load.ref($M.24, $p3);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($add.ref($p821, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i824 := $load.i8($M.6, $p823);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i825 := $zext.i8.i32($i824);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i826 := $and.i32($i825, 15);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i827 := $eq.i32($i826, 6);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i827} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i827 == 1);
    assume {:verifier.code 0} true;
    $i828 := $i756;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p872 := $bitcast.ref.ref($p2);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.6;
    call {:si_unique_call 1122} cmdloc_dummy_var_90 := $memset.i8(cmdloc_dummy_var_89, $p872, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_90;
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p873, 0);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $p874 := $load.ref($M.24, $p3);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $p875 := $bitcast.ref.ref($p2);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $i877 := $load.i32($M.6, $p876);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p878 := osst_do_scsi($p874, $p22, $p875, 0, 3, $i877, 0, 1);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p878);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p879 := $load.ref($M.24, $p3);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($p879, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i882 := $load.i8($M.6, $p881);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i883 := $zext.i8.i32($i882);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i884 := $and.i32($i883, 112);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i885 := $ne.i32($i884, 112);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i479 := $i828;
    assume {:branchcond $i885} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i885 == 1);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p886 := $load.ref($M.24, $p3);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p886, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $i889 := $load.i8($M.6, $p888);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i890 := $zext.i8.i32($i889);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i891 := $and.i32($i890, 15);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i891, 2);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i479 := $i828;
    assume {:branchcond $i892} true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p893 := $load.ref($M.24, $p3);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($add.ref($p893, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i896 := $load.i8($M.6, $p895);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i897 := $zext.i8.i32($i896);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i898 := $and.i32($i897, 15);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i899 := $eq.i32($i898, 6);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i899} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i899 == 1);
    assume {:verifier.code 0} true;
    $i900 := $i828;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p944 := $bitcast.ref.ref($p2);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_91 := $M.6;
    call {:si_unique_call 1124} cmdloc_dummy_var_92 := $memset.i8(cmdloc_dummy_var_91, $p944, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_92;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $p945 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p945, 0);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $p946 := $load.ref($M.24, $p3);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $p947 := $bitcast.ref.ref($p2);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $i949 := $load.i32($M.6, $p948);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p950 := osst_do_scsi($p946, $p22, $p947, 0, 3, $i949, 0, 1);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p950);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $p951 := $load.ref($M.24, $p3);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($add.ref($p951, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i954 := $load.i8($M.6, $p953);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $i955 := $zext.i8.i32($i954);
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    $i956 := $and.i32($i955, 112);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $i957 := $ne.i32($i956, 112);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i479 := $i900;
    assume {:branchcond $i957} true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i957 == 1);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $p958 := $load.ref($M.24, $p3);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    $p960 := $add.ref($add.ref($add.ref($p958, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i961 := $load.i8($M.6, $p960);
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i962 := $zext.i8.i32($i961);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i963 := $and.i32($i962, 15);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $i964 := $eq.i32($i963, 2);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i479 := $i900;
    assume {:branchcond $i964} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i964 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $p965 := $load.ref($M.24, $p3);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($add.ref($p965, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $i968 := $load.i8($M.6, $p967);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i969 := $zext.i8.i32($i968);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i970 := $and.i32($i969, 15);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $i971 := $eq.i32($i970, 6);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    assume {:branchcond $i971} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i971 == 1);
    assume {:verifier.code 0} true;
    $i972 := $i900;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p1016 := $bitcast.ref.ref($p2);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_93 := $M.6;
    call {:si_unique_call 1126} cmdloc_dummy_var_94 := $memset.i8(cmdloc_dummy_var_93, $p1016, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_94;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $p1017 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1017, 0);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $p1018 := $load.ref($M.24, $p3);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p1019 := $bitcast.ref.ref($p2);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i1021 := $load.i32($M.6, $p1020);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} $p1022 := osst_do_scsi($p1018, $p22, $p1019, 0, 3, $i1021, 0, 1);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1022);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p1023 := $load.ref($M.24, $p3);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $p1025 := $add.ref($add.ref($add.ref($p1023, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $i1026 := $load.i8($M.6, $p1025);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $i1027 := $zext.i8.i32($i1026);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i1028 := $and.i32($i1027, 112);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i1029 := $ne.i32($i1028, 112);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $i479 := $i972;
    assume {:branchcond $i1029} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i1029 == 1);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p1030 := $load.ref($M.24, $p3);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($add.ref($p1030, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i1033 := $load.i8($M.6, $p1032);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i1034 := $zext.i8.i32($i1033);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $i1035 := $and.i32($i1034, 15);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $i1036 := $eq.i32($i1035, 2);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i479 := $i972;
    assume {:branchcond $i1036} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p1037 := $load.ref($M.24, $p3);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $p1039 := $add.ref($add.ref($add.ref($p1037, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $i1040 := $load.i8($M.6, $p1039);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i1041 := $zext.i8.i32($i1040);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i1042 := $and.i32($i1041, 15);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    $i1043 := $eq.i32($i1042, 6);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1043} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    $i1044 := $i972;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p1088 := $bitcast.ref.ref($p2);
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.6;
    call {:si_unique_call 1128} cmdloc_dummy_var_96 := $memset.i8(cmdloc_dummy_var_95, $p1088, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_96;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p1089 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1089, 0);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $p1090 := $load.ref($M.24, $p3);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $p1091 := $bitcast.ref.ref($p2);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $p1092 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i1093 := $load.i32($M.6, $p1092);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p1094 := osst_do_scsi($p1090, $p22, $p1091, 0, 3, $i1093, 0, 1);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1094);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $p1095 := $load.ref($M.24, $p3);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($add.ref($p1095, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $i1098 := $load.i8($M.6, $p1097);
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i1099 := $zext.i8.i32($i1098);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i1100 := $and.i32($i1099, 112);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i1101 := $ne.i32($i1100, 112);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $i479 := $i1044;
    assume {:branchcond $i1101} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i1101 == 1);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $p1102 := $load.ref($M.24, $p3);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($add.ref($p1102, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $i1105 := $load.i8($M.6, $p1104);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i1106 := $zext.i8.i32($i1105);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i1107 := $and.i32($i1106, 15);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i1108 := $eq.i32($i1107, 2);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $i479 := $i1044;
    assume {:branchcond $i1108} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i1108 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p1109 := $load.ref($M.24, $p3);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $p1111 := $add.ref($add.ref($add.ref($p1109, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i1112 := $load.i8($M.6, $p1111);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $i1113 := $zext.i8.i32($i1112);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    $i1114 := $and.i32($i1113, 15);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i1115 := $eq.i32($i1114, 6);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1115} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i1115 == 1);
    assume {:verifier.code 0} true;
    $i1116 := $i1044;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p1160 := $bitcast.ref.ref($p2);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_97 := $M.6;
    call {:si_unique_call 1130} cmdloc_dummy_var_98 := $memset.i8(cmdloc_dummy_var_97, $p1160, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_98;
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $p1161 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1161, 0);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p1162 := $load.ref($M.24, $p3);
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $p1163 := $bitcast.ref.ref($p2);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p1164 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $i1165 := $load.i32($M.6, $p1164);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p1166 := osst_do_scsi($p1162, $p22, $p1163, 0, 3, $i1165, 0, 1);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1166);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $p1167 := $load.ref($M.24, $p3);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $p1169 := $add.ref($add.ref($add.ref($p1167, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $i1170 := $load.i8($M.6, $p1169);
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i1171 := $zext.i8.i32($i1170);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i1172 := $and.i32($i1171, 112);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $i1173 := $ne.i32($i1172, 112);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i479 := $i1116;
    assume {:branchcond $i1173} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i1173 == 1);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $p1174 := $load.ref($M.24, $p3);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $p1176 := $add.ref($add.ref($add.ref($p1174, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i1177 := $load.i8($M.6, $p1176);
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i1178 := $zext.i8.i32($i1177);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $i1179 := $and.i32($i1178, 15);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i1180 := $eq.i32($i1179, 2);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i479 := $i1116;
    assume {:branchcond $i1180} true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i1180 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p1181 := $load.ref($M.24, $p3);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    $p1183 := $add.ref($add.ref($add.ref($p1181, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i1184 := $load.i8($M.6, $p1183);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $i1185 := $zext.i8.i32($i1184);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $i1186 := $and.i32($i1185, 15);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i1187 := $eq.i32($i1186, 6);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1187} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i1187 == 1);
    assume {:verifier.code 0} true;
    $i1188 := $i1116;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    $p1232 := $bitcast.ref.ref($p2);
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_99 := $M.6;
    call {:si_unique_call 1132} cmdloc_dummy_var_100 := $memset.i8(cmdloc_dummy_var_99, $p1232, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_100;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p1233 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1233, 0);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p1234 := $load.ref($M.24, $p3);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $p1235 := $bitcast.ref.ref($p2);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $p1236 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i1237 := $load.i32($M.6, $p1236);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $p1238 := osst_do_scsi($p1234, $p22, $p1235, 0, 3, $i1237, 0, 1);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1238);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $p1239 := $load.ref($M.24, $p3);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $p1241 := $add.ref($add.ref($add.ref($p1239, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i1242 := $load.i8($M.6, $p1241);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i1243 := $zext.i8.i32($i1242);
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i1244 := $and.i32($i1243, 112);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i1245 := $ne.i32($i1244, 112);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i479 := $i1188;
    assume {:branchcond $i1245} true;
    goto $bb353, $bb354;

  $bb354:
    assume !($i1245 == 1);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $p1246 := $load.ref($M.24, $p3);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($add.ref($p1246, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $i1249 := $load.i8($M.6, $p1248);
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i1250 := $zext.i8.i32($i1249);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i1251 := $and.i32($i1250, 15);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i1252 := $eq.i32($i1251, 2);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $i479 := $i1188;
    assume {:branchcond $i1252} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i1252 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p1253 := $load.ref($M.24, $p3);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $p1255 := $add.ref($add.ref($add.ref($p1253, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i1256 := $load.i8($M.6, $p1255);
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i1257 := $zext.i8.i32($i1256);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i1258 := $and.i32($i1257, 15);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i1259 := $eq.i32($i1258, 6);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1259} true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i1259 == 1);
    assume {:verifier.code 0} true;
    $i512 := $i1188;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i487 := $i512;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i513 := $i487;
    goto $bb160;

  $bb358:
    assume $i1259 == 1;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $p1260 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1260, 0);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $p1261 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1261, 0);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p1262 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1262, 0);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $p1263 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i1264 := $load.i8($M.6, $p1263);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i1265 := $zext.i8.i32($i1264);
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i1266 := $ne.i32($i1265, 0);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1266} true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i1266 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p1268 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $p1269 := $bitcast.ref.ref($p1268);
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1270, 0);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $p1271 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1271, 0);
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $p1272 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1272, 0);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    $p1273 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1273, 0);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $p1274 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1274, 0);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $p1275 := $add.ref($add.ref($p1269, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1275, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $p1277 := $bitcast.ref.ref($p1276);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $p1279 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1279, 0);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $p1280 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1280, 0);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1281, 0);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p1282 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1282, 0);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $p1283 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1283, 0);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($p1277, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1284, 0);
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p1285 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $p1286 := $bitcast.ref.ref($p1285);
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p1288 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1288, 0);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $p1289 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1289, 0);
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p1290 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1290, 0);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $p1291 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1291, 0);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p1292 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1292, 0);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($p1286, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1293, 0);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $p1294 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $p1295 := $bitcast.ref.ref($p1294);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p1297 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1297, 0);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1298, 0);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $p1299 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1299, 0);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1300, 0);
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p1301 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1301, 0);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $p1302 := $add.ref($add.ref($p1295, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1302, 0);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $i512 := 1;
    goto $bb360;

  $bb361:
    assume $i1266 == 1;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1267, 1);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i1252 == 1;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $i487 := $i479;
    goto $bb146;

  $bb353:
    assume {:verifier.code 0} true;
    assume $i1245 == 1;
    goto $bb142;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb340:
    assume $i1187 == 1;
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p1189 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1189, 0);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p1190 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1190, 0);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p1191 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1191, 0);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i1193 := $load.i8($M.6, $p1192);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i1194 := $zext.i8.i32($i1193);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $i1195 := $ne.i32($i1194, 0);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1195} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i1195 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $p1198 := $bitcast.ref.ref($p1197);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $p1199 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1199, 0);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1200, 0);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $p1201 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1201, 0);
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p1202 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1202, 0);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $p1203 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1203, 0);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $p1204 := $add.ref($add.ref($p1198, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1204, 0);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p1205 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $p1206 := $bitcast.ref.ref($p1205);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $p1208 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1208, 0);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    $p1209 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1209, 0);
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p1210 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1210, 0);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1211, 0);
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p1212 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1212, 0);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p1213 := $add.ref($add.ref($p1206, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1213, 0);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $p1215 := $bitcast.ref.ref($p1214);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $p1217 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1217, 0);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p1218 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1218, 0);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p1219 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1219, 0);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1220, 0);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p1221 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1221, 0);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p1222 := $add.ref($add.ref($p1215, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1222, 0);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p1223 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p1224 := $bitcast.ref.ref($p1223);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $p1226 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1226, 0);
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $p1227 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1227, 0);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1228, 0);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p1229 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1229, 0);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1230, 0);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $p1231 := $add.ref($add.ref($p1224, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1231, 0);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $i1188 := 1;
    goto $bb342;

  $bb343:
    assume $i1195 == 1;
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $p1196 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1196, 1);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb337:
    assume {:verifier.code 0} true;
    assume $i1180 == 1;
    goto $bb142;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i1173 == 1;
    goto $bb142;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb322:
    assume $i1115 == 1;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $p1117 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1117, 0);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1118, 0);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $p1119 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1119, 0);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $p1120 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $i1121 := $load.i8($M.6, $p1120);
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $i1122 := $zext.i8.i32($i1121);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i1123 := $ne.i32($i1122, 0);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1123} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i1123 == 1);
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $p1126 := $bitcast.ref.ref($p1125);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $p1127 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1127, 0);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $p1128 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1128, 0);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p1129 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1129, 0);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1130, 0);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $p1131 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1131, 0);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($p1126, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1132, 0);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p1133 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    $p1134 := $bitcast.ref.ref($p1133);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p1136 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1136, 0);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p1137 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1137, 0);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p1138 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1138, 0);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p1139 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1139, 0);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $p1140 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1140, 0);
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $p1141 := $add.ref($add.ref($p1134, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1141, 0);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p1142 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $p1143 := $bitcast.ref.ref($p1142);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $p1145 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1145, 0);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1146, 0);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $p1147 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1147, 0);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $p1148 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1148, 0);
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $p1149 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1149, 0);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($add.ref($p1143, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1150, 0);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p1151 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $p1152 := $bitcast.ref.ref($p1151);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $p1154 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1154, 0);
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1155, 0);
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $p1156 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1156, 0);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $p1157 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1157, 0);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1158, 0);
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $p1159 := $add.ref($add.ref($p1152, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1159, 0);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $i1116 := 1;
    goto $bb324;

  $bb325:
    assume $i1123 == 1;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $p1124 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1124, 1);
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i1108 == 1;
    goto $bb142;

  $bb317:
    assume {:verifier.code 0} true;
    assume $i1101 == 1;
    goto $bb142;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb304:
    assume $i1043 == 1;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $p1045 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1045, 0);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1046, 0);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $p1047 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1047, 0);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i1049 := $load.i8($M.6, $p1048);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i1050 := $zext.i8.i32($i1049);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $i1051 := $ne.i32($i1050, 0);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1051} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p1053 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $p1054 := $bitcast.ref.ref($p1053);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1055, 0);
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p1056 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1056, 0);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1057, 0);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $p1058 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1058, 0);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    $p1059 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1059, 0);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($p1054, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1060, 0);
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    $p1061 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p1062 := $bitcast.ref.ref($p1061);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $p1064 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1064, 0);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    $p1065 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1065, 0);
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1066, 0);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $p1067 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1067, 0);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $p1068 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1068, 0);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    $p1069 := $add.ref($add.ref($p1062, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1069, 0);
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p1070 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $p1071 := $bitcast.ref.ref($p1070);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    $p1073 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10238;

  corral_source_split_10238:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1073, 0);
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1074, 0);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    $p1075 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1075, 0);
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1076, 0);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $p1077 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1077, 0);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $p1078 := $add.ref($add.ref($p1071, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1078, 0);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p1079 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p1080 := $bitcast.ref.ref($p1079);
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $p1082 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1082, 0);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $p1083 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1083, 0);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p1084 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1084, 0);
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $p1085 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1085, 0);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $p1086 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1086, 0);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $p1087 := $add.ref($add.ref($p1080, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1087, 0);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $i1044 := 1;
    goto $bb306;

  $bb307:
    assume $i1051 == 1;
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1052, 1);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb301:
    assume {:verifier.code 0} true;
    assume $i1036 == 1;
    goto $bb142;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i1029 == 1;
    goto $bb142;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb286:
    assume $i971 == 1;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p973, 0);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p974 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p974, 0);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p975 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p975, 0);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i977 := $load.i8($M.6, $p976);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $i978 := $zext.i8.i32($i977);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i979 := $ne.i32($i978, 0);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i979} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i979 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p981 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p982 := $bitcast.ref.ref($p981);
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p983, 0);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $p984 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p984, 0);
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p985, 0);
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $p986 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p986, 0);
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p987, 0);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p988, 0);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p990 := $bitcast.ref.ref($p989);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p992, 0);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p993, 0);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p994 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p994, 0);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $p995 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p995, 0);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p996, 0);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p990, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p997, 0);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $p999 := $bitcast.ref.ref($p998);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1001, 0);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $p1002 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1002, 0);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $p1003 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1003, 0);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1004, 0);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p1005 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1005, 0);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($p999, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1006, 0);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $p1007 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    $p1008 := $bitcast.ref.ref($p1007);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1010, 0);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1011, 0);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $p1012 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1012, 0);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1013, 0);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $p1014 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1014, 0);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $p1015 := $add.ref($add.ref($p1008, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1015, 0);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i972 := 1;
    goto $bb288;

  $bb289:
    assume $i979 == 1;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p980, 1);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i964 == 1;
    goto $bb142;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i957 == 1;
    goto $bb142;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb268:
    assume $i899 == 1;
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p901, 0);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p902, 0);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p903, 0);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $i905 := $load.i8($M.6, $p904);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i906 := $zext.i8.i32($i905);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i907 := $ne.i32($i906, 0);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    assume {:branchcond $i907} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p910 := $bitcast.ref.ref($p909);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p911, 0);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p912 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p912, 0);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p913, 0);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p914, 0);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p915 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p915, 0);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($p910, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p916, 0);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p918 := $bitcast.ref.ref($p917);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p920, 0);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p921 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p921, 0);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p922, 0);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p923, 0);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $p924 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p924, 0);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p918, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p925, 0);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p926 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $p927 := $bitcast.ref.ref($p926);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p929, 0);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p930, 0);
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p931, 0);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $p932 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p932, 0);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p933, 0);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p927, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p934, 0);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $p936 := $bitcast.ref.ref($p935);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p938, 0);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p939, 0);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p940 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p940, 0);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p941 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p941, 0);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p942, 0);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($p936, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p943, 0);
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $i900 := 1;
    goto $bb270;

  $bb271:
    assume $i907 == 1;
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p908, 1);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i892 == 1;
    goto $bb142;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i885 == 1;
    goto $bb142;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb250:
    assume $i827 == 1;
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p829, 0);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p830, 0);
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p831, 0);
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.6, $p832);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i834 := $zext.i8.i32($i833);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i835 := $ne.i32($i834, 0);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i835} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p838 := $bitcast.ref.ref($p837);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p839, 0);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $p840 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p840, 0);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p841, 0);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p842, 0);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p843, 0);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($p838, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p844, 0);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p846 := $bitcast.ref.ref($p845);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p848 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p848, 0);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p849, 0);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p850, 0);
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p851, 0);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p852 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p852, 0);
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($p846, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p853, 0);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p855 := $bitcast.ref.ref($p854);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p857, 0);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p858, 0);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p859, 0);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p860, 0);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p861, 0);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p855, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p862, 0);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p864 := $bitcast.ref.ref($p863);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p866, 0);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p867, 0);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p868 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p868, 0);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p869, 0);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $p870 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p870, 0);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p864, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p871, 0);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i828 := 1;
    goto $bb252;

  $bb253:
    assume $i835 == 1;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p836, 1);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i820 == 1;
    goto $bb142;

  $bb245:
    assume {:verifier.code 0} true;
    assume $i813 == 1;
    goto $bb142;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb232:
    assume $i755 == 1;
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p757, 0);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p758, 0);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p759, 0);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i761 := $load.i8($M.6, $p760);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i762 := $zext.i8.i32($i761);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i763 := $ne.i32($i762, 0);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p765 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $p766 := $bitcast.ref.ref($p765);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p767, 0);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p768, 0);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p769, 0);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p770, 0);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p771, 0);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p772 := $add.ref($add.ref($p766, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p772, 0);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p773);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p776, 0);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p777 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p777, 0);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p778, 0);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $p779 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p779, 0);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p780, 0);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p781 := $add.ref($add.ref($p774, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p781, 0);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $p783 := $bitcast.ref.ref($p782);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p785, 0);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p786 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p786, 0);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p787, 0);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p788, 0);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p789, 0);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($p783, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p790, 0);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p792 := $bitcast.ref.ref($p791);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p794, 0);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p795, 0);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p796, 0);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p797, 0);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    $p798 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p798, 0);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p792, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p799, 0);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i756 := 1;
    goto $bb234;

  $bb235:
    assume $i763 == 1;
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p764, 1);
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb229:
    assume {:verifier.code 0} true;
    assume $i748 == 1;
    goto $bb142;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i741 == 1;
    goto $bb142;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb214:
    assume $i683 == 1;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p685, 0);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p686, 0);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p687, 0);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.6, $p688);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    $i690 := $zext.i8.i32($i689);
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $i691 := $ne.i32($i690, 0);
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i691} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    $p694 := $bitcast.ref.ref($p693);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p695, 0);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p696, 0);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p697, 0);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p698, 0);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p699, 0);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p700, 0);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p702 := $bitcast.ref.ref($p701);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p704, 0);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p705, 0);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p706, 0);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p707, 0);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p708, 0);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p702, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p709, 0);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p711 := $bitcast.ref.ref($p710);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p713, 0);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p714, 0);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p715, 0);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p716, 0);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p717, 0);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p711, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p718, 0);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $p720 := $bitcast.ref.ref($p719);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p722, 0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p723, 0);
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p724, 0);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p725, 0);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p726 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p726, 0);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p720, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p727, 0);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i684 := 1;
    goto $bb216;

  $bb217:
    assume $i691 == 1;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p692, 1);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i676 == 1;
    goto $bb142;

  $bb209:
    assume {:verifier.code 0} true;
    assume $i669 == 1;
    goto $bb142;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb148:
    assume $i494 == 1;
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p495, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p496, 0);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p497, 0);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i499 := $load.i8($M.6, $p498);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $i500 := $zext.i8.i32($i499);
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i501 := $ne.i32($i500, 0);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $p504 := $bitcast.ref.ref($p503);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p505, 0);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p506, 0);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p507, 0);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p508, 0);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p509, 0);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($p504, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p510, 0);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p630 := $bitcast.ref.ref($p629);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p632, 0);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p633, 0);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p634, 0);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p635, 0);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p636, 0);
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $p637 := $add.ref($add.ref($p630, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p637, 0);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p638 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p639 := $bitcast.ref.ref($p638);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p641, 0);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p642, 0);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p643, 0);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p644, 0);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p645, 0);
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p639, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p646, 0);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p648 := $bitcast.ref.ref($p647);
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p650, 0);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p651, 0);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p652, 0);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p653, 0);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p654, 0);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p648, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p655, 0);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i511 := 1;
    goto $bb157;

  $bb150:
    assume $i501 == 1;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p502, 1);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i486 == 1;
    goto $bb142;

  $bb141:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb142;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i401 == 1;
    goto $bb135;

  $bb91:
    assume $i284 == 1;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.6, $p285);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i287 := $ne.i32($i286, 0);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb93;

  $bb94:
    assume $i287 == 1;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.24, $p3);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p288, $mul.ref(0, 144)), $mul.ref(112, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $i290 := $load.i32($M.6, $p289);
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 0);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb93;

  $bb96:
    assume $i291 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.24, $p3);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($add.ref($p292, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i295 := $load.i8($M.6, $p294);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i295);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i296, 0);
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb93;

  $bb98:
    assume $i297 == 1;
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $p298 := $bitcast.ref.ref($p2);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.6;
    call {:si_unique_call 1090} cmdloc_dummy_var_78 := $memset.i8(cmdloc_dummy_var_77, $p298, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_78;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p299, 26);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p300, 8);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p301, 54);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p302, 12);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p303 := $load.ref($M.24, $p3);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p304 := $bitcast.ref.ref($p2);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i306 := $load.i8($M.6, $p305);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i307 := $zext.i8.i32($i306);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.6, $p308);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p310 := osst_do_scsi($p303, $p22, $p304, $i307, 2, $i309, 0, 1);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p310);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.6, $p311);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p312, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.6, $p313);
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i315} true;
    goto $bb100, $bb102;

  $bb102:
    assume !($i315 == 1);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.6, $p316);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.6, $p318);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($p319, $mul.ref(6, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.6, $p320);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i323 := $ne.i32($i322, 76);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i323 == 1);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.6, $p324);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.6, $p326);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($p327, $mul.ref(7, 1));
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.6, $p328);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i331 := $ne.i32($i330, 73);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i331 == 1);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.6, $p332);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p333, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.6, $p334);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p335, $mul.ref(8, 1));
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.6, $p336);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 78);
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i339} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i339 == 1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.6, $p340);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p341, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.6, $p342);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($p343, $mul.ref(9, 1));
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.6, $p344);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i346 := $zext.i8.i32($i345);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $i347 := $ne.i32($i346, 52);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.6, $p349);
    call {:si_unique_call 1092} {:cexpr "i"} boogie_si_record_i32($i350);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i352 := $load.i32($M.6, $p351);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p389, 0);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb112:
    assume $i353 == 1;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i354 := osst_get_frame_position($p22, $p3);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 1094} {:cexpr "tmp___12"} boogie_si_record_i32($i354);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, $i350);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb114:
    assume $i355 == 1;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.6, $p356);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 0);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i359} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.6, $p364);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i367 := $eq.i32($i366, 0);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i367} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.6, $p381);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i383 := $sdiv.i32(32768, $i382);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.6, $p384);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p385, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p386, $i383);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p387, 1);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.24, $p3);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} osst_release_request($p388);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb122:
    assume $i367 == 1;
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p57, $mul.ref($i60, 56)), $mul.ref(12, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i369 := $load.i32($M.6, $p368);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $i370 := $sgt.i32($i369, 0);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i370 == 1);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i373 := 32768;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p374, $i373);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.6, $p375);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p376, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p377, 0);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.6, $p378);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p379, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p380, 0);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb124:
    assume $i370 == 1;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p57, $mul.ref($i60, 56)), $mul.ref(12, 1));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.6, $p371);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i373 := $i372;
    goto $bb126;

  $bb116:
    assume $i359 == 1;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i360 := do_door_lock($p22, 1);
    call {:si_unique_call 1096} {:cexpr "tmp___10"} boogie_si_record_i32($i360);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i361 == 1);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(626, 1));
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p363, 2);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb118:
    assume $i361 == 1;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} vslice_dummy_var_274 := printk.ref.ref(.str.116, $p29);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i347 == 1;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p348, 0);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i339 == 1;
    goto $bb101;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb101;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i323 == 1;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb101;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i231 == 1;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.24, $p3);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($add.ref($p232, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.6, $p234);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i32($i235);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i237 := $and.i32($i236, 15);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 6);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb69;

  $bb70:
    assume $i238 == 1;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p239, 0);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p240 := $bitcast.ref.ref($p2);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_73 := $M.6;
    call {:si_unique_call 1086} cmdloc_dummy_var_74 := $memset.i8(cmdloc_dummy_var_73, $p240, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_74;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p241, 0);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.24, $p3);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p2);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.6, $p244);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $p246 := osst_do_scsi($p242, $p22, $p243, 0, 3, $i245, 0, 1);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p246);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $p247 := $load.ref($M.24, $p3);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($add.ref($p247, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i250 := $load.i8($M.6, $p249);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i251 := $zext.i8.i32($i250);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $i252 := $and.i32($i251, 112);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 112);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i253 == 1);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.24, $p3);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($add.ref($p254, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.6, $p256);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 15);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 6);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    assume {:branchcond $i260} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p1330 := $bitcast.ref.ref($p2);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_75 := $M.6;
    call {:si_unique_call 1088} cmdloc_dummy_var_76 := $memset.i8(cmdloc_dummy_var_75, $p1330, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_76;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p1331 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1331, 0);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p1332 := $load.ref($M.24, $p3);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $p1333 := $bitcast.ref.ref($p2);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p1334 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i1335 := $load.i32($M.6, $p1334);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $p1336 := osst_do_scsi($p1332, $p22, $p1333, 0, 3, $i1335, 0, 1);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1336);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p1337 := $load.ref($M.24, $p3);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p1339 := $add.ref($add.ref($add.ref($p1337, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i1340 := $load.i8($M.6, $p1339);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i1341 := $zext.i8.i32($i1340);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i1342 := $and.i32($i1341, 112);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i1343 := $ne.i32($i1342, 112);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1343} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i1343 == 1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p1344 := $load.ref($M.24, $p3);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p1346 := $add.ref($add.ref($add.ref($p1344, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i1347 := $load.i8($M.6, $p1346);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i1348 := $zext.i8.i32($i1347);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i1349 := $and.i32($i1348, 15);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $i1350 := $ne.i32($i1349, 6);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1350} true;
    goto $bb374, $bb375;

  $bb375:
    assume !($i1350 == 1);
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p1351 := $bitcast.ref.ref($p2);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.6;
    call {:si_unique_call 1134} cmdloc_dummy_var_102 := $memset.i8(cmdloc_dummy_var_101, $p1351, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_102;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1352, 0);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $p1353 := $load.ref($M.24, $p3);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $p1354 := $bitcast.ref.ref($p2);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $p1355 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i1356 := $load.i32($M.6, $p1355);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p1357 := osst_do_scsi($p1353, $p22, $p1354, 0, 3, $i1356, 0, 1);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1357);
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p1358 := $load.ref($M.24, $p3);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    $p1360 := $add.ref($add.ref($add.ref($p1358, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $i1361 := $load.i8($M.6, $p1360);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    $i1362 := $zext.i8.i32($i1361);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i1363 := $and.i32($i1362, 112);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i1364 := $ne.i32($i1363, 112);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1364} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i1364 == 1);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p1365 := $load.ref($M.24, $p3);
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    $p1367 := $add.ref($add.ref($add.ref($p1365, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i1368 := $load.i8($M.6, $p1367);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $i1369 := $zext.i8.i32($i1368);
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $i1370 := $and.i32($i1369, 15);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i1371 := $ne.i32($i1370, 6);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1371} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i1371 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p1372 := $bitcast.ref.ref($p2);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_103 := $M.6;
    call {:si_unique_call 1136} cmdloc_dummy_var_104 := $memset.i8(cmdloc_dummy_var_103, $p1372, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_104;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p1373 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1373, 0);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $p1374 := $load.ref($M.24, $p3);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $p1375 := $bitcast.ref.ref($p2);
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p1376 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i1377 := $load.i32($M.6, $p1376);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p1378 := osst_do_scsi($p1374, $p22, $p1375, 0, 3, $i1377, 0, 1);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1378);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p1379 := $load.ref($M.24, $p3);
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $p1381 := $add.ref($add.ref($add.ref($p1379, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i1382 := $load.i8($M.6, $p1381);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $i1383 := $zext.i8.i32($i1382);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $i1384 := $and.i32($i1383, 112);
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $i1385 := $ne.i32($i1384, 112);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1385} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i1385 == 1);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $p1386 := $load.ref($M.24, $p3);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $p1388 := $add.ref($add.ref($add.ref($p1386, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i1389 := $load.i8($M.6, $p1388);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i1390 := $zext.i8.i32($i1389);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $i1391 := $and.i32($i1390, 15);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i1392 := $ne.i32($i1391, 6);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1392} true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i1392 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $p1393 := $bitcast.ref.ref($p2);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_105 := $M.6;
    call {:si_unique_call 1138} cmdloc_dummy_var_106 := $memset.i8(cmdloc_dummy_var_105, $p1393, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_106;
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $p1394 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1394, 0);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $p1395 := $load.ref($M.24, $p3);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $p1396 := $bitcast.ref.ref($p2);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $p1397 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $i1398 := $load.i32($M.6, $p1397);
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $p1399 := osst_do_scsi($p1395, $p22, $p1396, 0, 3, $i1398, 0, 1);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1399);
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $p1400 := $load.ref($M.24, $p3);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p1402 := $add.ref($add.ref($add.ref($p1400, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i1403 := $load.i8($M.6, $p1402);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    $i1404 := $zext.i8.i32($i1403);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $i1405 := $and.i32($i1404, 112);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $i1406 := $ne.i32($i1405, 112);
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1406} true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i1406 == 1);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p1407 := $load.ref($M.24, $p3);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p1409 := $add.ref($add.ref($add.ref($p1407, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i1410 := $load.i8($M.6, $p1409);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i1411 := $zext.i8.i32($i1410);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i1412 := $and.i32($i1411, 15);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i1413 := $ne.i32($i1412, 6);
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1413} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i1413 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p1414 := $bitcast.ref.ref($p2);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.6;
    call {:si_unique_call 1140} cmdloc_dummy_var_108 := $memset.i8(cmdloc_dummy_var_107, $p1414, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_108;
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $p1415 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1415, 0);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $p1416 := $load.ref($M.24, $p3);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    $p1417 := $bitcast.ref.ref($p2);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $p1418 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i1419 := $load.i32($M.6, $p1418);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p1420 := osst_do_scsi($p1416, $p22, $p1417, 0, 3, $i1419, 0, 1);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1420);
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $p1421 := $load.ref($M.24, $p3);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p1423 := $add.ref($add.ref($add.ref($p1421, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i1424 := $load.i8($M.6, $p1423);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $i1425 := $zext.i8.i32($i1424);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $i1426 := $and.i32($i1425, 112);
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i1427 := $ne.i32($i1426, 112);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1427} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i1427 == 1);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $p1428 := $load.ref($M.24, $p3);
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    $p1430 := $add.ref($add.ref($add.ref($p1428, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i1431 := $load.i8($M.6, $p1430);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    $i1432 := $zext.i8.i32($i1431);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $i1433 := $and.i32($i1432, 15);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i1434 := $ne.i32($i1433, 6);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1434} true;
    goto $bb398, $bb399;

  $bb399:
    assume !($i1434 == 1);
    assume {:verifier.code 0} true;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $p1435 := $bitcast.ref.ref($p2);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_109 := $M.6;
    call {:si_unique_call 1142} cmdloc_dummy_var_110 := $memset.i8(cmdloc_dummy_var_109, $p1435, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_110;
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $p1436 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1436, 0);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    $p1437 := $load.ref($M.24, $p3);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $p1438 := $bitcast.ref.ref($p2);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p1439 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i1440 := $load.i32($M.6, $p1439);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p1441 := osst_do_scsi($p1437, $p22, $p1438, 0, 3, $i1440, 0, 1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1441);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p1442 := $load.ref($M.24, $p3);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p1444 := $add.ref($add.ref($add.ref($p1442, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i1445 := $load.i8($M.6, $p1444);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i1446 := $zext.i8.i32($i1445);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    $i1447 := $and.i32($i1446, 112);
    goto corral_source_split_10753;

  corral_source_split_10753:
    assume {:verifier.code 0} true;
    $i1448 := $ne.i32($i1447, 112);
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1448} true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i1448 == 1);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p1449 := $load.ref($M.24, $p3);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $p1451 := $add.ref($add.ref($add.ref($p1449, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i1452 := $load.i8($M.6, $p1451);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    $i1453 := $zext.i8.i32($i1452);
    goto corral_source_split_10760;

  corral_source_split_10760:
    assume {:verifier.code 0} true;
    $i1454 := $and.i32($i1453, 15);
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i1455 := $ne.i32($i1454, 6);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1455} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i1455 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p1456 := $bitcast.ref.ref($p2);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_111 := $M.6;
    call {:si_unique_call 1144} cmdloc_dummy_var_112 := $memset.i8(cmdloc_dummy_var_111, $p1456, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_112;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $p1457 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1457, 0);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    $p1458 := $load.ref($M.24, $p3);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $p1459 := $bitcast.ref.ref($p2);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $p1460 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    $i1461 := $load.i32($M.6, $p1460);
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p1462 := osst_do_scsi($p1458, $p22, $p1459, 0, 3, $i1461, 0, 1);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1462);
    goto corral_source_split_10773;

  corral_source_split_10773:
    assume {:verifier.code 0} true;
    $p1463 := $load.ref($M.24, $p3);
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p1465 := $add.ref($add.ref($add.ref($p1463, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i1466 := $load.i8($M.6, $p1465);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i1467 := $zext.i8.i32($i1466);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $i1468 := $and.i32($i1467, 112);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i1469 := $ne.i32($i1468, 112);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1469} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i1469 == 1);
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p1470 := $load.ref($M.24, $p3);
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $p1472 := $add.ref($add.ref($add.ref($p1470, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i1473 := $load.i8($M.6, $p1472);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $i1474 := $zext.i8.i32($i1473);
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $i1475 := $and.i32($i1474, 15);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $i1476 := $ne.i32($i1475, 6);
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1476} true;
    goto $bb410, $bb411;

  $bb411:
    assume !($i1476 == 1);
    assume {:verifier.code 0} true;
    goto $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p1477 := $bitcast.ref.ref($p2);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.6;
    call {:si_unique_call 1146} cmdloc_dummy_var_114 := $memset.i8(cmdloc_dummy_var_113, $p1477, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_114;
    goto corral_source_split_10790;

  corral_source_split_10790:
    assume {:verifier.code 0} true;
    $p1478 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1478, 0);
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $p1479 := $load.ref($M.24, $p3);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $p1480 := $bitcast.ref.ref($p2);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    $p1481 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $i1482 := $load.i32($M.6, $p1481);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p1483 := osst_do_scsi($p1479, $p22, $p1480, 0, 3, $i1482, 0, 1);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1483);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $p1484 := $load.ref($M.24, $p3);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    $p1486 := $add.ref($add.ref($add.ref($p1484, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10800;

  corral_source_split_10800:
    assume {:verifier.code 0} true;
    $i1487 := $load.i8($M.6, $p1486);
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i1488 := $zext.i8.i32($i1487);
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i1489 := $and.i32($i1488, 112);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i1490 := $ne.i32($i1489, 112);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1490} true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i1490 == 1);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p1491 := $load.ref($M.24, $p3);
    goto corral_source_split_10807;

  corral_source_split_10807:
    assume {:verifier.code 0} true;
    $p1493 := $add.ref($add.ref($add.ref($p1491, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i1494 := $load.i8($M.6, $p1493);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $i1495 := $zext.i8.i32($i1494);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i1496 := $and.i32($i1495, 15);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i1497 := $ne.i32($i1496, 6);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1497} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i1497 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p1498 := $bitcast.ref.ref($p2);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_115 := $M.6;
    call {:si_unique_call 1148} cmdloc_dummy_var_116 := $memset.i8(cmdloc_dummy_var_115, $p1498, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_116;
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $p1499 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1499, 0);
    goto corral_source_split_10817;

  corral_source_split_10817:
    assume {:verifier.code 0} true;
    $p1500 := $load.ref($M.24, $p3);
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p1501 := $bitcast.ref.ref($p2);
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p1502 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i1503 := $load.i32($M.6, $p1502);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $p1504 := osst_do_scsi($p1500, $p22, $p1501, 0, 3, $i1503, 0, 1);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p1504);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p1505 := $load.ref($M.24, $p3);
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $p1507 := $add.ref($add.ref($add.ref($p1505, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i1508 := $load.i8($M.6, $p1507);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i1509 := $zext.i8.i32($i1508);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $i1510 := $and.i32($i1509, 112);
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $i1511 := $ne.i32($i1510, 112);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1511} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i1511 == 1);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $p1512 := $load.ref($M.24, $p3);
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p1514 := $add.ref($add.ref($add.ref($p1512, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    $i1515 := $load.i8($M.6, $p1514);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i1516 := $zext.i8.i32($i1515);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i1517 := $and.i32($i1516, 15);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    $i1518 := $ne.i32($i1517, 6);
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1518} true;
    goto $bb422, $bb423;

  $bb423:
    assume !($i1518 == 1);
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p261, 0);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(544, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p262, 0);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p263, 0);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.6, $p264);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i267 := $ne.i32($i266, 0);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p270 := $bitcast.ref.ref($p269);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p271, 0);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p272, 0);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p273, 0);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p274, 0);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p275, 0);
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p276, 0);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p1303 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p1304 := $bitcast.ref.ref($p1303);
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p1306 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1306, 0);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1307, 0);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p1308 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1308, 0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $p1309 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1309, 0);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p1310 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1310, 0);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p1311 := $add.ref($add.ref($p1304, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1311, 0);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p1312 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p1313 := $bitcast.ref.ref($p1312);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $p1315 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1315, 0);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p1316 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1316, 0);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p1317 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1317, 0);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1318, 0);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $p1319 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1319, 0);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    $p1320 := $add.ref($add.ref($p1313, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1320, 0);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p1322 := $bitcast.ref.ref($p1321);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $p1324 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1324, 0);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $p1325 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1325, 0);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1326, 0);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p1327 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1327, 0);
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1328, 0);
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $p1329 := $add.ref($add.ref($p1322, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p1329, 0);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(644, 1));
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p277, 0);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(648, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p278, 0);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i279 := 1;
    goto $bb90;

  $bb83:
    assume $i267 == 1;
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(548, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p268, 1);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb422:
    assume {:verifier.code 0} true;
    assume $i1518 == 1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb420:
    assume {:verifier.code 0} true;
    assume $i1511 == 1;
    goto $bb75;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb416:
    assume {:verifier.code 0} true;
    assume $i1497 == 1;
    goto $bb75;

  $bb414:
    assume {:verifier.code 0} true;
    assume $i1490 == 1;
    goto $bb75;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb410:
    assume {:verifier.code 0} true;
    assume $i1476 == 1;
    goto $bb75;

  $bb408:
    assume {:verifier.code 0} true;
    assume $i1469 == 1;
    goto $bb75;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i1455 == 1;
    goto $bb75;

  $bb402:
    assume {:verifier.code 0} true;
    assume $i1448 == 1;
    goto $bb75;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb398:
    assume {:verifier.code 0} true;
    assume $i1434 == 1;
    goto $bb75;

  $bb396:
    assume {:verifier.code 0} true;
    assume $i1427 == 1;
    goto $bb75;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb392:
    assume {:verifier.code 0} true;
    assume $i1413 == 1;
    goto $bb75;

  $bb390:
    assume {:verifier.code 0} true;
    assume $i1406 == 1;
    goto $bb75;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb386:
    assume {:verifier.code 0} true;
    assume $i1392 == 1;
    goto $bb75;

  $bb384:
    assume {:verifier.code 0} true;
    assume $i1385 == 1;
    goto $bb75;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb380:
    assume {:verifier.code 0} true;
    assume $i1371 == 1;
    goto $bb75;

  $bb378:
    assume {:verifier.code 0} true;
    assume $i1364 == 1;
    goto $bb75;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb374:
    assume {:verifier.code 0} true;
    assume $i1350 == 1;
    goto $bb75;

  $bb372:
    assume {:verifier.code 0} true;
    assume $i1343 == 1;
    goto $bb75;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb75;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb75;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i184 == 1;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.24, $p3);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p185, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.6, $p187);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i190 := $and.i32($i189, 15);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb55;

  $bb56:
    assume $i191 == 1;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.24, $p3);
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($add.ref($p192, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.6, $p194);
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 4);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb55;

  $bb58:
    assume $i197 == 1;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.6, $p198);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i199, 2048);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.24, $p3);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.6, $p204);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 2);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.24, $p3);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p217, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.6, $p219);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i223 := (if $i222 == 1 then 900 else 180);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_273 := osst_wait_ready($p22, $p3, $i223, 0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb63:
    assume $i207 == 1;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p2);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.6;
    call {:si_unique_call 1083} cmdloc_dummy_var_72 := $memset.i8(cmdloc_dummy_var_71, $p208, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_72;
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p209, 27);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p210, 1);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p211, 1);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.24, $p3);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p2);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.6, $p214);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p216 := osst_do_scsi($p212, $p22, $p213, 0, 3, $i215, 0, 1);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p3, $p216);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    goto $bb65;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i201 == 1;
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 11);
    goto $bb31;

  $bb50:
    assume $i173 == 1;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.6, $p174);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p175, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.6, $p176);
    call {:si_unique_call 1082} {:cexpr "retval"} boogie_si_record_i32($i177);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i92 := $i177;
    goto $bb31;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb35:
    assume $i103 == 1;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $i106, $i107 := 0, 0;
    goto $bb38;

  $bb38:
    call $i108, $i109, $p110, $p111, $p114, $i115, $i116, $p117, $p118, $i119, $i120, $i121, $i106, $i107, $i124, $p125, $p126, $p129, $i130, $i131, $i132, $i133, $i134, $i122, $i123 := __os_scsi_tape_open_loop_$bb38($p22, $p98, $i108, $i109, $p110, $p111, $p114, $i115, $i116, $p117, $p118, $i119, $i120, $i121, $i106, $i107, $i124, $p125, $p126, $p129, $i130, $i131, $i132, $i133, $i134, $i122, $i123);
    goto $bb38_last;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i106);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.6, $p125);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($add.ref($p126, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i124, 40)), $mul.ref(20, 1));
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.6, $p129);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, $i107);
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i132 := $ule.i32($i131, 32768);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i133, $i134 := $i107, $i106;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i104, $i105 := $i133, $i134;
    goto $bb37;

  $bb42:
    assume $i132 == 1;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i106, 1);
    call {:si_unique_call 1076} {:cexpr "i"} boogie_si_record_i32($i108);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i106);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.6, $p110);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p111, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i109, 40)), $mul.ref(20, 1));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.6, $p114);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, $i107);
    call {:si_unique_call 1077} {:cexpr "b_size"} boogie_si_record_i32($i116);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.6, $p98);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p117, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.6, $p118);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i121 := $sgt.i32($i120, $i108);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $i122, $i123 := $i116, $i108;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i104, $i105 := $i122, $i123;
    goto $bb37;

  $bb40:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i106, $i107 := $i108, $i116;
    goto $bb40_dummy;

  $bb29:
    assume $i90 == 1;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_271 := printk.ref.ref(.str.114, $p29);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32(0, 75);
    goto $bb31;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i82 == 1;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p83, 0);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p22, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p54, $i8);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb25;

  $bb20:
    assume $i50 == 1;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 16);
    goto $bb6;

  $bb9:
    assume $i28 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} _raw_write_unlock(os_scsi_tapes_lock);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;

  $bb40_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8778;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 371522);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 372554);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.6, $p1);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_device_get: ref;

axiom scsi_device_get == $sub.ref(0, 373586);

procedure scsi_device_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_device_get($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1150} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1151} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const scsi_block_when_processing_errors: ref;

axiom scsi_block_when_processing_errors == $sub.ref(0, 374618);

procedure scsi_block_when_processing_errors($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_block_when_processing_errors($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1152} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1153} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const enlarge_buffer: ref;

axiom enlarge_buffer == $sub.ref(0, 375650);

procedure enlarge_buffer($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, assertsPassed;



implementation enlarge_buffer($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p39: ref;
  var $i40: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $p46: ref;
  var $i47: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i32;
  var $i70: i16;
  var $p71: ref;
  var $i72: i1;
  var $i41: i32;
  var $i42: i32;
  var $i73: i1;
  var $i5: i32;
  var $p74: ref;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;
  var vslice_dummy_var_281: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} {:cexpr "enlarge_buffer:arg:need_dma"} boogie_si_record_i32($i1);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 33279);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_10872;

  corral_source_split_10872:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.6, $p6);
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.6, $p11);
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    call {:si_unique_call 1157} {:cexpr "max_segs"} boogie_si_record_i32($i13);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i13, 2);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i1, 0);
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i17 := 208;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $p18 := alloc_pages($i17, 3);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p18);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 32768, 3, $p18;
    assume {:branchcond $i23} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p74 := alloc_pages($i17, 2);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p77, 0);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p74);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 16384, 2, $p74;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p80 := alloc_pages($i17, 1);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p83, 0);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p80);
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i85 := $ne.i64($i84, 0);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 8192, 1, $p80;
    assume {:branchcond $i85} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p86 := alloc_pages($i17, 0);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p89, 0);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p86);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_10995;

  corral_source_split_10995:
    assume {:verifier.code 0} true;
    $i24, $i25, $p26 := 4096, 0, $p86;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i31, $i32 := 2048, $sub.i32(0, 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p35 := sg_page($p34);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p39, 1);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32(1, $i13);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i41, $i42 := $i31, 1;
    goto $bb29;

  $bb29:
    call $i43, $i44, $i45, $p46, $i47, $p50, $i51, $i52, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i41, $i42, $i73 := enlarge_buffer_loop_$bb29($p0, $i13, $i17, $i31, $i32, $i43, $i44, $i45, $p46, $i47, $p50, $i51, $i52, $p54, $p55, $i56, $p57, $i58, $i59, $i60, $i61, $i62, $p65, $i66, $i67, $p68, $i69, $i70, $p71, $i72, $i41, $i42, $i73);
    goto $bb29_last;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    $i73 := $sle.i32($i41, 33279);
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i73 == 1);
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb42:
    assume $i73 == 1;
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(33280, $i41);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, 4096);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p46 := alloc_pages($i17, $i45);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i42);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i47, 40)), $mul.ref(16, 1));
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, 0);
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p46);
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_10954;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    $i56 := $sext.i32.i64($i42);
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p55, $mul.ref($i56, 40));
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i58 := $sub.i32(33280, $i41);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i59 := $ule.i32($i58, 2048);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i59 == 1);
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $i61 := $i31;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} sg_set_page($p57, $p46, $i61, 0);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i42);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i62, 40)), $mul.ref(20, 1));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.6, $p65);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, $i41);
    call {:si_unique_call 1169} {:cexpr "got"} boogie_si_record_i32($i67);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p68, $i67);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i42, 1);
    call {:si_unique_call 1170} {:cexpr "segs"} boogie_si_record_i32($i69);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_10974;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p71, $i70);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i69, $i13);
    goto corral_source_split_10977;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i72 == 1);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb40:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i41, $i42 := $i67, $i69;
    goto $bb40_dummy;

  $bb37:
    assume $i59 == 1;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32(33280, $i41);
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb39;

  $bb34:
    assume $i52 == 1;
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} vslice_dummy_var_281 := printk.ref.i32(.str.120, 33280);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} normalize_buffer($p0);
    goto corral_source_split_10951;

  corral_source_split_10951:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $i45 := $i32;
    goto $bb33;

  $bb23:
    assume $i37 == 1;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_280 := printk.ref(.str.119);
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_10902;

  corral_source_split_10902:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} sg_set_page($p28, $p26, $i24, 0);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $p29 := lowmem_page_address($p26);
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p30, $p29);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i24, $i25;
    goto $bb19;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb17;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb17;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb17;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i16 := $or.i32(208, 1);
    call {:si_unique_call 1158} {:cexpr "priority"} boogie_si_record_i32($i16);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb13;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} vslice_dummy_var_279 := printk.ref(.str.118);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} normalize_buffer($p0);
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10931;
}



const osst_configure_onstream: ref;

axiom osst_configure_onstream == $sub.ref(0, 376682);

procedure osst_configure_onstream($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $CurrAddr, assertsPassed;



implementation osst_configure_onstream($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i8;
  var $i57: i8;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $p61: ref;
  var $i62: i8;
  var $i63: i8;
  var $i64: i8;
  var $p65: ref;
  var $i66: i8;
  var $i67: i8;
  var $p68: ref;
  var $i69: i8;
  var $i70: i8;
  var $i71: i8;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $p141: ref;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i64;
  var $i185: i64;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i16;
  var $i190: i32;
  var $i191: i16;
  var $i192: i16;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i32;
  var $i209: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i64;
  var $i223: i64;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $p228: ref;
  var $p229: ref;
  var $i230: i16;
  var $i231: i32;
  var $i232: i16;
  var $i233: i16;
  var $p234: ref;
  var $i235: i16;
  var $i236: i32;
  var $i237: i16;
  var $i238: i16;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $p242: ref;
  var $i9: i32;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p3 := tape_name($p0);
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.24, $p1);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.6, $p5);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(664, 1));
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.6, $p10);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    $i12 := $sle.i32($i11, 10599);
    goto corral_source_split_11011;

  corral_source_split_11011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p2);
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_117 := $M.6;
    call {:si_unique_call 1177} cmdloc_dummy_var_118 := $memset.i8(cmdloc_dummy_var_117, $p19, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_118;
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p20, 26);
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p21, 8);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 48);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 8);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_11035;

  corral_source_split_11035:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p30 := osst_do_scsi($p4, $p0, $p24, $i27, 2, $i29, 0, 1);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p30);
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_11045;

  corral_source_split_11045:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_11056;

  corral_source_split_11056:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.6, $p44);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.6, $p46);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p43, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i64($i49);
    goto corral_source_split_11064;

  corral_source_split_11064:
    assume {:verifier.code 0} true;
    $i51 := $add.i64($i50, 4);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p47, $mul.ref($i51, 1));
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $i56 := $and.i8($i55, 127);
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    $i57 := $or.i8($i56, $sub.i8(0, 128));
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, $i57);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.6, $p58);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 2));
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p58, $i60);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.6, $p61);
    goto corral_source_split_11078;

  corral_source_split_11078:
    assume {:verifier.code 0} true;
    $i63 := $and.i8($i62, $sub.i8(0, 3));
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i64 := $or.i8($i63, 2);
    goto corral_source_split_11080;

  corral_source_split_11080:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p61, $i64);
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11082;

  corral_source_split_11082:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.6, $p65);
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    $i67 := $and.i8($i66, $sub.i8(0, 17));
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p65, $i67);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p53, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.6, $p68);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    $i70 := $and.i8($i69, $sub.i8(0, 33));
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 0} true;
    $i71 := $or.i8($i70, 32);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p68, $i71);
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p2);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.6;
    call {:si_unique_call 1180} cmdloc_dummy_var_120 := $memset.i8(cmdloc_dummy_var_119, $p72, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_120;
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, 21);
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 16);
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 8);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.6, $p77);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.6, $p80);
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p82 := osst_do_scsi($p30, $p0, $p76, $i79, 1, $i81, 0, 1);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p82);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11107;

  corral_source_split_11107:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.6, $p83);
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.6, $p85);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_121 := $M.6;
    call {:si_unique_call 1183} cmdloc_dummy_var_122 := $memset.i8(cmdloc_dummy_var_121, $p89, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_122;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p90, 21);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p91, 16);
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p92, 12);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p43, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p93, 11);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p43, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_11126;

  corral_source_split_11126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p94, 0);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p43, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p95, 0);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p43, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p96, 0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.6, $p97);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.6, $p99);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p100, $mul.ref(4, 1));
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p101, $sub.i8(0, 74));
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p102);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11140;

  corral_source_split_11140:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.6, $p104);
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(5, 1));
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p106, 6);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.6, $p107);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.6, $p109);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(6, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p111, 76);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.6, $p112);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11152;

  corral_source_split_11152:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(7, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p116, 73);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.6, $p117);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p118, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11158;

  corral_source_split_11158:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.6, $p119);
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p120, $mul.ref(8, 1));
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p121, 78);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.6, $p122);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p124);
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p125, $mul.ref(9, 1));
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p126, 52);
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.6, $p127);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.6, $p129);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($p130, $mul.ref(10, 1));
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p131, 0);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11174;

  corral_source_split_11174:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p132);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11176;

  corral_source_split_11176:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.6, $p134);
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p135, $mul.ref(11, 1));
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p136, 0);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p2);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.6, $p138);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.6, $p141);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p143 := osst_do_scsi($p82, $p0, $p137, $i140, 1, $i142, 0, 1);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p143);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.6, $p144);
    goto corral_source_split_11189;

  corral_source_split_11189:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.6, $p146);
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p2);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_123 := $M.6;
    call {:si_unique_call 1186} cmdloc_dummy_var_124 := $memset.i8(cmdloc_dummy_var_123, $p155, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_124;
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p156, 26);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p157, 8);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11208;

  corral_source_split_11208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p158, 42);
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11210;

  corral_source_split_11210:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p159, 24);
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p2);
    goto corral_source_split_11212;

  corral_source_split_11212:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.6, $p161);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i32($i162);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.6, $p164);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p166 := osst_do_scsi($p143, $p0, $p160, $i163, 2, $i165, 0, 1);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_11218;

  corral_source_split_11218:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p166);
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.6, $p167);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i170 := $load.i32($M.6, $p169);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_11224;

  corral_source_split_11224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.6, $p173);
    goto corral_source_split_11230;

  corral_source_split_11230:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.6, $p175);
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.6, $p178);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p179, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.6, $p180);
    goto corral_source_split_11237;

  corral_source_split_11237:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p177, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.6, $p182);
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i64($i183);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    $i185 := $add.i64($i184, 4);
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p181, $mul.ref($i185, 1));
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $p187 := $bitcast.ref.ref($p186);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p187, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_11244;

  corral_source_split_11244:
    assume {:verifier.code 0} true;
    $i189 := $load.i16($M.6, $p188);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i189);
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i191 := $trunc.i32.i16($i190);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i192 := __fswab16($i191);
    call {:si_unique_call 1190} {:cexpr "tmp___0"} boogie_si_record_i16($i192);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p2);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_125 := $M.6;
    call {:si_unique_call 1191} cmdloc_dummy_var_126 := $memset.i8(cmdloc_dummy_var_125, $p193, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_126;
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11251;

  corral_source_split_11251:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p194, 26);
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p195, 8);
    goto corral_source_split_11254;

  corral_source_split_11254:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p196, 43);
    goto corral_source_split_11256;

  corral_source_split_11256:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p197, 20);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p2);
    goto corral_source_split_11259;

  corral_source_split_11259:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.6, $p199);
    goto corral_source_split_11261;

  corral_source_split_11261:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.6, $p202);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $p204 := osst_do_scsi($p166, $p0, $p198, $i201, 2, $i203, 0, 1);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p204);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.6, $p205);
    goto corral_source_split_11268;

  corral_source_split_11268:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p206, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i208 := $load.i32($M.6, $p207);
    goto corral_source_split_11270;

  corral_source_split_11270:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11276;

  corral_source_split_11276:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.6, $p211);
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.6, $p213);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.6, $p216);
    goto corral_source_split_11282;

  corral_source_split_11282:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p217, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $p219 := $load.ref($M.6, $p218);
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p215, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.6, $p220);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i64($i221);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    $i223 := $add.i64($i222, 4);
    goto corral_source_split_11288;

  corral_source_split_11288:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($p219, $mul.ref($i223, 1));
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p224);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p225, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.6, $p226);
    goto corral_source_split_11292;

  corral_source_split_11292:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(625, 1));
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p228, $i227);
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p225, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    $i230 := $load.i16($M.6, $p229);
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i231 := $zext.i16.i32($i230);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i16($i231);
    goto corral_source_split_11298;

  corral_source_split_11298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i233 := __fswab16($i232);
    call {:si_unique_call 1195} {:cexpr "tmp___1"} boogie_si_record_i16($i233);
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p225, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.6, $p234);
    goto corral_source_split_11301;

  corral_source_split_11301:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_11303;

  corral_source_split_11303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $i238 := __fswab16($i237);
    call {:si_unique_call 1197} {:cexpr "tmp___2"} boogie_si_record_i16($i238);
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i233);
    goto corral_source_split_11305;

  corral_source_split_11305:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i238);
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $i241 := $mul.i32($i239, $i240);
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p242, $i241);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb23:
    assume $i209 == 1;
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} vslice_dummy_var_288 := printk.ref.ref(.str.127, $p3);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i171 == 1;
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} vslice_dummy_var_287 := printk.ref.ref(.str.126, $p3);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i148 == 1;
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.6, $p149);
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.6, $p151);
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p152, $mul.ref(6, 1));
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} vslice_dummy_var_286 := printk.ref.ref.ref(.str.125, $p3, $p153);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i87 == 1;
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_285 := printk.ref.ref(.str.124, $p3);
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} vslice_dummy_var_284 := printk.ref.ref(.str.123, $p3);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3496)), $mul.ref(264, 1));
    goto corral_source_split_11016;

  corral_source_split_11016:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} vslice_dummy_var_282 := printk.ref.ref.ref(.str.121, $p3, $p16);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} vslice_dummy_var_283 := printk.ref.ref(.str.122, $p3);
    goto corral_source_split_11019;

  corral_source_split_11019:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 5);
    goto $bb3;
}



const osst_analyze_headers: ref;

axiom osst_analyze_headers == $sub.ref(0, 377714);

procedure osst_analyze_headers($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_analyze_headers($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i28: i32;
  var $i29: i32;
  var $i35: i32;
  var $i27: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i42: i32;
  var $i43: i32;
  var $i49: i32;
  var $i41: i32;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p64: ref;
  var $p67: ref;
  var $i68: i32;
  var $p70: ref;
  var $i11: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $p2 := tape_name($p0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i3 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    call {:si_unique_call 1200} {:cexpr "position"} boogie_si_record_i32($i3);
    goto corral_source_split_11313;

  corral_source_split_11313:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_11315;

  corral_source_split_11315:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_11317;

  corral_source_split_11317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11329;

  corral_source_split_11329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 0);
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 0);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 0);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_11335;

  corral_source_split_11335:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $sub.i32(0, 1));
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p16, $sub.i16(0, 1));
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $sub.i32(0, 1));
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $sub.i32(0, 1));
    goto corral_source_split_11342;

  corral_source_split_11342:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(748, 1));
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p19, $sub.i32(0, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, $sub.i32(0, 1));
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, $sub.i32(0, 1));
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i3, 10);
    goto corral_source_split_11349;

  corral_source_split_11349:
    assume {:verifier.code 0} true;
    $i23 := (if $i22 == 1 then 2990 else 5);
    call {:si_unique_call 1201} {:cexpr "first"} boogie_si_record_i32($i23);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i3, 10);
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 2995 else 10);
    call {:si_unique_call 1202} {:cexpr "last"} boogie_si_record_i32($i25);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i23, $i25);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i3, 10);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 5 else 2990);
    call {:si_unique_call 1206} {:cexpr "first"} boogie_si_record_i32($i37);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i3, 10);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    $i39 := (if $i38 == 1 then 10 else 2995);
    call {:si_unique_call 1207} {:cexpr "last"} boogie_si_record_i32($i39);
    goto corral_source_split_11373;

  corral_source_split_11373:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, $i39);
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i41 := $i27;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i41, 0);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.6, $p55);
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    $i57 := $sge.i32($i56, $i3);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i68 := $i3;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} vslice_dummy_var_291 := osst_set_frame_position($p0, $p1, $i68, 0);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p70, 1);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i57 == 1;
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_11406;

  corral_source_split_11406:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    call {:si_unique_call 1213} {:cexpr "position"} boogie_si_record_i32($i59);
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p60, 0);
    goto corral_source_split_11409;

  corral_source_split_11409:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p61, 0);
    goto corral_source_split_11411;

  corral_source_split_11411:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p64, 0);
    goto corral_source_split_11413;

  corral_source_split_11413:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p67, 0);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    $i68 := $i59;
    goto $bb32;

  $bb27:
    assume $i50 == 1;
    goto corral_source_split_11393;

  corral_source_split_11393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_289 := printk.ref.ref(.str.128, $p2);
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p52, 0);
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p53, 0);
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} vslice_dummy_var_290 := osst_set_frame_position($p0, $p1, 10, 0);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    $i42, $i43 := $i27, $i37;
    goto $bb19;

  $bb19:
    call $i44, $i45, $i46, $i47, $i48, $i42, $i43, $i49 := osst_analyze_headers_loop_$bb19($p0, $p1, $i39, $i44, $i45, $i46, $i47, $i48, $i42, $i43, $i49);
    goto $bb19_last;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i44 := __osst_analyze_headers($p0, $p1, $i43);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    call {:si_unique_call 1209} {:cexpr "tmp___7"} boogie_si_record_i32($i44);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_11381;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $i42;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i43, 1);
    call {:si_unique_call 1210} {:cexpr "ppos"} boogie_si_record_i32($i47);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, $i39);
    goto corral_source_split_11387;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $i41 := $i49;
    goto $bb18;

  $bb24:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i42, $i43 := $i46, $i47;
    goto $bb24_dummy;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i46 := 1;
    goto $bb23;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    $i28, $i29 := 0, $i23;
    goto $bb8;

  $bb8:
    call $i30, $i31, $i32, $i33, $i34, $i28, $i29, $i35 := osst_analyze_headers_loop_$bb8($p0, $p1, $i25, $i30, $i31, $i32, $i33, $i34, $i28, $i29, $i35);
    goto $bb8_last;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} $i30 := __osst_analyze_headers($p0, $p1, $i29);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    call {:si_unique_call 1204} {:cexpr "tmp___6"} boogie_si_record_i32($i30);
    goto corral_source_split_11359;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i29, 1);
    call {:si_unique_call 1205} {:cexpr "ppos"} boogie_si_record_i32($i33);
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, $i25);
    goto corral_source_split_11366;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    $i35 := $i32;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $i27 := $i35;
    goto $bb7;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i28, $i29 := $i32, $i33;
    goto $bb13_dummy;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb12;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, 1);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, 1);
    goto corral_source_split_11323;

  corral_source_split_11323:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, 0);
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb24_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11378;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11357;
}



const __osst_analyze_headers: ref;

axiom __osst_analyze_headers == $sub.ref(0, 378746);

procedure __osst_analyze_headers($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation __osst_analyze_headers($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i8;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p114: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p146: ref;
  var $p147: ref;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $i153: i16;
  var $i154: i16;
  var $p155: ref;
  var $p158: ref;
  var $i159: i32;
  var $i160: i32;
  var $p161: ref;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $p185: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $i192: i8;
  var $i193: i32;
  var $i194: i1;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i8;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i16;
  var $i211: i32;
  var $i212: i1;
  var $p215: ref;
  var $i216: i8;
  var $i217: i32;
  var $i218: i1;
  var $p221: ref;
  var $i222: i8;
  var $i223: i32;
  var $i224: i1;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $p231: ref;
  var $i232: i32;
  var $i233: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p239: ref;
  var $i240: i32;
  var $i241: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i1;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;
  var $p254: ref;
  var $i255: i8;
  var $i256: i32;
  var $i257: i1;
  var $p261: ref;
  var $i262: i8;
  var $i263: i32;
  var $i264: i1;
  var $p268: ref;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $p275: ref;
  var $i276: i16;
  var $i277: i32;
  var $i278: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $p296: ref;
  var $i297: i8;
  var $i298: i32;
  var $i299: i1;
  var $p302: ref;
  var $i303: i8;
  var $i304: i32;
  var $i305: i1;
  var $p307: ref;
  var $i308: i32;
  var $i309: i1;
  var $p311: ref;
  var $i312: i32;
  var $i310: i32;
  var $i313: i16;
  var $i314: i32;
  var $i315: i16;
  var $i316: i16;
  var $p318: ref;
  var $i319: i16;
  var $i320: i32;
  var $i321: i32;
  var $i322: i1;
  var $i9: i32;
  var cmdloc_dummy_var_127: [ref]i8;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;
  var cmdloc_dummy_var_130: [ref]i8;
  var cmdloc_dummy_var_131: [ref]i8;
  var cmdloc_dummy_var_132: [ref]i8;
  var cmdloc_dummy_var_133: [ref]i8;
  var cmdloc_dummy_var_134: [ref]i8;
  var cmdloc_dummy_var_135: [ref]i8;
  var cmdloc_dummy_var_136: [ref]i8;
  var cmdloc_dummy_var_137: [ref]i8;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i64;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1216} {:cexpr "__osst_analyze_headers:arg:ppos"} boogie_si_record_i32($i2);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $p4 := tape_name($p0);
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.6, $p5);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_11427;

  corral_source_split_11427:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i2, 5);
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i10 == 1);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i2, 2990);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11442;

  corral_source_split_11442:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_11444;

  corral_source_split_11444:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i24 := osst_read_frame($p0, $p1, 180);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    call {:si_unique_call 1226} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.6, $p26);
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.6, $p28);
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_11469;

  corral_source_split_11469:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 8);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i41 := __fswab32($i40);
    call {:si_unique_call 1228} {:cexpr "tmp___3"} boogie_si_record_i32($i41);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i42 == 1);
    goto corral_source_split_11486;

  corral_source_split_11486:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(52, 1));
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.6, $p43);
    goto corral_source_split_11488;

  corral_source_split_11488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i45 := __fswab32($i44);
    call {:si_unique_call 1230} {:cexpr "tmp___4"} boogie_si_record_i32($i45);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i46 == 1);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.6, $p48);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 255);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i51 == 1);
    goto corral_source_split_11502;

  corral_source_split_11502:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(4, 1));
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.6, $p53);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} $i55 := __fswab32($i54);
    call {:si_unique_call 1232} {:cexpr "tmp___5"} boogie_si_record_i32($i55);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i56 == 1);
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(20, 1)), $mul.ref(8, 1));
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i60 := __fswab32($i59);
    call {:si_unique_call 1234} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 2999);
    goto corral_source_split_11514;

  corral_source_split_11514:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(0, 1));
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i64 := strncmp($p63, .str.93, 7);
    call {:si_unique_call 1236} {:cexpr "tmp___7"} boogie_si_record_i32($i64);
    goto corral_source_split_11520;

  corral_source_split_11520:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(12, 1));
    goto corral_source_split_11535;

  corral_source_split_11535:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.6, $p74);
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} $i76 := __fswab32($i75);
    call {:si_unique_call 1241} {:cexpr "tmp___9"} boogie_si_record_i32($i76);
    goto corral_source_split_11537;

  corral_source_split_11537:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.6, $p77);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $i79 := $sgt.i32($i78, $i76);
    goto corral_source_split_11540;

  corral_source_split_11540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(8, 1));
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.6, $p80);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_11546;

  corral_source_split_11546:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 1);
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume !($i83 == 1);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.6, $p84);
    goto corral_source_split_11556;

  corral_source_split_11556:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i85);
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 4);
    goto corral_source_split_11558;

  corral_source_split_11558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p3);
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(4, 1));
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_127 := $M.6;
    cmdloc_dummy_var_128 := $M.6;
    call {:si_unique_call 1242} cmdloc_dummy_var_129 := $memcpy.i8(cmdloc_dummy_var_127, cmdloc_dummy_var_128, $p100, $p102, 4, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_129;
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_11577;

  corral_source_split_11577:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p3);
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i105 := memcmp($p104, .str.132, 3);
    call {:si_unique_call 1244} {:cexpr "tmp___10"} boogie_si_record_i32($i105);
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i106 == 1);
    goto corral_source_split_11591;

  corral_source_split_11591:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p3);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_296 := printk.ref.ref.ref(.str.134, $p4, $p114);
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb63:
    assume $i106 == 1;
    goto corral_source_split_11582;

  corral_source_split_11582:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p107, 1);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.6, $p108);
    goto corral_source_split_11586;

  corral_source_split_11586:
    assume {:verifier.code 0} true;
    $i110 := $sext.i8.i32($i109);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i110, $sub.i32(0, 48));
    call {:si_unique_call 1245} {:cexpr "linux_media_version"} boogie_si_record_i32($i111);
    goto corral_source_split_11588;

  corral_source_split_11588:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 4);
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11598;

  corral_source_split_11598:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.6, $p116);
    goto corral_source_split_11599;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    $i118 := $sgt.i32($i117, $i111);
    goto corral_source_split_11600;

  corral_source_split_11600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.6, $p119);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, $i111);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $i128 := $load.i32($M.6, $p127);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i128, $i76);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb75:
    assume $i129 == 1;
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.6, $p130);
    goto corral_source_split_11624;

  corral_source_split_11624:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_11626;

  corral_source_split_11626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.6, $p140);
    goto corral_source_split_11640;

  corral_source_split_11640:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.6, $p142);
    goto corral_source_split_11642;

  corral_source_split_11642:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} vslice_dummy_var_299 := osst_copy_from_buffer($p141, $p144);
    goto corral_source_split_11644;

  corral_source_split_11644:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.6, $p146);
    goto corral_source_split_11646;

  corral_source_split_11646:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.6, $p150);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i32.i16($i152);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $i154 := __fswab16($i153);
    call {:si_unique_call 1253} {:cexpr "tmp___13"} boogie_si_record_i16($i154);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(702, 1));
    goto corral_source_split_11652;

  corral_source_split_11652:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p155, $i154);
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.6, $p158);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i160 := __fswab32($i159);
    call {:si_unique_call 1255} {:cexpr "tmp___14"} boogie_si_record_i32($i160);
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p161, $i160);
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.6, $p164);
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $i166 := __fswab32($i165);
    call {:si_unique_call 1257} {:cexpr "tmp___15"} boogie_si_record_i32($i166);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p167, $i166);
    goto corral_source_split_11663;

  corral_source_split_11663:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.6, $p170);
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $i172 := __fswab32($i171);
    call {:si_unique_call 1259} {:cexpr "tmp___16"} boogie_si_record_i32($i172);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(760, 1));
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p173, $i172);
    goto corral_source_split_11668;

  corral_source_split_11668:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.6, $p174);
    goto corral_source_split_11670;

  corral_source_split_11670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $i176 := __fswab32($i175);
    call {:si_unique_call 1261} {:cexpr "tmp___17"} boogie_si_record_i32($i176);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p177, $i176);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_11674;

  corral_source_split_11674:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.6, $p178);
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i180 := __fswab32($i179);
    call {:si_unique_call 1263} {:cexpr "tmp___18"} boogie_si_record_i32($i180);
    goto corral_source_split_11676;

  corral_source_split_11676:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p181, $i180);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.6, $p182);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i184 := __fswab32($i183);
    call {:si_unique_call 1265} {:cexpr "tmp___19"} boogie_si_record_i32($i184);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_11682;

  corral_source_split_11682:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p185, $i184);
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p34, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.6, $p186);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $i188 := __fswab32($i187);
    call {:si_unique_call 1267} {:cexpr "tmp___20"} boogie_si_record_i32($i188);
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(748, 1));
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p189, $i188);
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p190, $i76);
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    $i192 := $load.i8($M.6, $p191);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $i193 := $zext.i8.i32($i192);
    goto corral_source_split_11693;

  corral_source_split_11693:
    assume {:verifier.code 0} true;
    $i194 := $ule.i32($i193, 3);
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    $i206 := $load.i8($M.6, $p205);
    goto corral_source_split_11712;

  corral_source_split_11712:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i206);
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 4);
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb89:
    assume $i208 == 1;
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(10, 1));
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $i210 := $load.i16($M.6, $p209);
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $i211 := $zext.i16.i32($i210);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 10307);
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  $bb93:
    assume !($i212 == 1);
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    $i216 := $load.i8($M.6, $p215);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    $i217 := $zext.i8.i32($i216);
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_11728;

  corral_source_split_11728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i218 == 1);
    goto corral_source_split_11730;

  corral_source_split_11730:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.6, $p221);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i223 := $zext.i8.i32($i222);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    $i224 := $ne.i32($i223, 1);
    goto corral_source_split_11734;

  corral_source_split_11734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i224 == 1);
    goto corral_source_split_11736;

  corral_source_split_11736:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.6, $p226);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i228 := __fswab32($i227);
    call {:si_unique_call 1272} {:cexpr "tmp___21"} boogie_si_record_i32($i228);
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(20, 1)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i232 := $load.i32($M.6, $p231);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    $i233 := $ne.i32($i232, $i228);
    goto corral_source_split_11742;

  corral_source_split_11742:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i233 == 1);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(276, 1));
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $i236 := $load.i32($M.6, $p235);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $i237 := $ne.i32($i236, 335544320);
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i237 == 1);
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(280, 1));
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    $i240 := $load.i32($M.6, $p239);
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, $sub.i32(0, 603652096));
    goto corral_source_split_11758;

  corral_source_split_11758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i241 == 1);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(284, 1));
    goto corral_source_split_11764;

  corral_source_split_11764:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.6, $p243);
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i245 := $ne.i32($i244, 0);
    goto corral_source_split_11766;

  corral_source_split_11766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i245 == 1);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(0, 1));
    goto corral_source_split_11772;

  corral_source_split_11772:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.6, $p248);
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 1);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i251 == 1);
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(2, 1));
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    $i255 := $load.i8($M.6, $p254);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i256 := $zext.i8.i32($i255);
    goto corral_source_split_11783;

  corral_source_split_11783:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 32);
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i257 == 1);
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_11790;

  corral_source_split_11790:
    assume {:verifier.code 0} true;
    $i262 := $load.i8($M.6, $p261);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i262);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i264 == 1);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(1, 1));
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.6, $p268);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 1);
    goto corral_source_split_11802;

  corral_source_split_11802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i271 == 1);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $i276 := $load.i16($M.6, $p275);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $i277 := $zext.i16.i32($i276);
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i278 := $ne.i32($i277, 18501);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i278} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i278 == 1);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(8, 1));
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.6, $p282);
    goto corral_source_split_11818;

  corral_source_split_11818:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    assume {:branchcond $i284} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i284 == 1);
    goto corral_source_split_11824;

  corral_source_split_11824:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.6, $p286);
    goto corral_source_split_11826;

  corral_source_split_11826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i288 := __fswab32($i287);
    call {:si_unique_call 1284} {:cexpr "tmp___22"} boogie_si_record_i32($i288);
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17192, 1)), $mul.ref(16, 1)), $mul.ref(16, 1));
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $i292 := $load.i32($M.6, $p291);
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, $i288);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i293} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i293 == 1);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(0, 1));
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $i297 := $load.i8($M.6, $p296);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i32($i297);
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $i299 := $ne.i32($i298, 0);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i299 == 1);
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(2, 1));
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.6, $p302);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    $i304 := $zext.i8.i32($i303);
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $i305 := $ne.i32($i304, 4);
    goto corral_source_split_11848;

  corral_source_split_11848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i305 == 1);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_11854;

  corral_source_split_11854:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.6, $p307);
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $i309 := $slt.i32(1024, $i308);
    goto corral_source_split_11856;

  corral_source_split_11856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i309 == 1);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    $i312 := $load.i32($M.6, $p311);
    goto corral_source_split_11862;

  corral_source_split_11862:
    assume {:verifier.code 0} true;
    $i310 := $i312;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $i313 := $trunc.i32.i16($i310);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $i314 := $zext.i16.i32($i313);
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $i315 := $trunc.i32.i16($i314);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $i316 := __fswab16($i315);
    call {:si_unique_call 1289} {:cexpr "tmp___23"} boogie_si_record_i16($i316);
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(4, 1));
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $i319 := $load.i16($M.6, $p318);
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i320 := $zext.i16.i32($i319);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    $i321 := $zext.i16.i32($i316);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i322 := $ne.i32($i320, $i321);
    goto corral_source_split_11873;

  corral_source_split_11873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb141:
    assume $i322 == 1;
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_314 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i309 == 1;
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $i310 := 1024;
    goto $bb140;

  $bb135:
    assume $i305 == 1;
    goto corral_source_split_11850;

  corral_source_split_11850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} vslice_dummy_var_313 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume $i299 == 1;
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_312 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb129:
    assume $i293 == 1;
    goto corral_source_split_11832;

  corral_source_split_11832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_311 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb126:
    assume $i284 == 1;
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_310 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i278 == 1;
    goto corral_source_split_11813;

  corral_source_split_11813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_309 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb120:
    assume $i271 == 1;
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} vslice_dummy_var_308 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb117:
    assume $i264 == 1;
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} vslice_dummy_var_307 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11796;

  corral_source_split_11796:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb114:
    assume $i257 == 1;
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_306 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume $i251 == 1;
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} vslice_dummy_var_305 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb108:
    assume $i245 == 1;
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_304 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i241 == 1;
    goto corral_source_split_11760;

  corral_source_split_11760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} vslice_dummy_var_303 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb102:
    assume $i237 == 1;
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_302 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11753;

  corral_source_split_11753:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i233 == 1;
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} vslice_dummy_var_301 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_300 := printk.ref.ref(.str.135, $p4);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i218 == 1;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i212 == 1;
    goto $bb92;

  $bb83:
    assume $i194 == 1;
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.6, $p195);
    goto corral_source_split_11698;

  corral_source_split_11698:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 4);
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i197} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb85;

  $bb86:
    assume $i197 == 1;
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1));
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $p200 := $bitcast.ref.ref($p199);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(512, 1));
    goto corral_source_split_11704;

  corral_source_split_11704:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_133 := $M.6;
    cmdloc_dummy_var_134 := $M.6;
    call {:si_unique_call 1268} cmdloc_dummy_var_135 := $memcpy.i8(cmdloc_dummy_var_133, cmdloc_dummy_var_134, $p200, $p202, 4096, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_135;
    goto corral_source_split_11706;

  corral_source_split_11706:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p147, $mul.ref(0, 32768)), $mul.ref(512, 1));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p203);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_136 := $M.6;
    call {:si_unique_call 1269} cmdloc_dummy_var_137 := $memset.i8(cmdloc_dummy_var_136, $p204, 0, 16680, $zext.i32.i64(4), 0 == 1);
    $M.6 := cmdloc_dummy_var_137;
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb77:
    assume $i133 == 1;
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p134 := ldv_vmalloc_26(32768);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    $p135 := $bitcast.ref.ref($p134);
    goto corral_source_split_11630;

  corral_source_split_11630:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p136, $p134);
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $i137 := $p2i.ref.i64($p135);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    $i138 := $eq.i64($i137, 0);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb79:
    assume $i138 == 1;
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_298 := printk.ref.ref(.str.92, $p4);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb72:
    assume $i121 == 1;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(696, 1));
    goto corral_source_split_11609;

  corral_source_split_11609:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_11610;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p3);
    goto corral_source_split_11611;

  corral_source_split_11611:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_130 := $M.6;
    cmdloc_dummy_var_131 := $M.6;
    call {:si_unique_call 1248} cmdloc_dummy_var_132 := $memcpy.i8(cmdloc_dummy_var_130, cmdloc_dummy_var_131, $p123, $p124, 5, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_132;
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p125, $i111);
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(704, 1));
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p126, $sub.i32(0, 1));
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb69:
    assume $i118 == 1;
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb65:
    assume $i112 == 1;
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} vslice_dummy_var_297 := printk.ref.ref.i32(.str.133, $p4, $i111);
    goto corral_source_split_11596;

  corral_source_split_11596:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i87 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(8, 1));
    goto corral_source_split_11549;

  corral_source_split_11549:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 1);
    goto corral_source_split_11552;

  corral_source_split_11552:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb56;

  $bb56:
    assume !($i91 == 1);
    goto corral_source_split_11560;

  corral_source_split_11560:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.6, $p92);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i95 := $ule.i32($i94, 1);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i95 == 1);
    goto corral_source_split_11566;

  corral_source_split_11566:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(9, 1));
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.6, $p96);
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $i99 := $ugt.i32($i98, 4);
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb55;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb55;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb50;

  $bb46:
    assume $i79 == 1;
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb40:
    assume $i65 == 1;
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(0, 1));
    goto corral_source_split_11524;

  corral_source_split_11524:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i68 := strncmp($p67, .str.131, 7);
    call {:si_unique_call 1238} {:cexpr "tmp___8"} boogie_si_record_i32($i68);
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i69 == 1;
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p3);
    goto corral_source_split_11530;

  corral_source_split_11530:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p30, $mul.ref(0, 32768)), $mul.ref(0, 1));
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} vslice_dummy_var_295 := strlcpy($p70, $p72, 8);
    goto corral_source_split_11533;

  corral_source_split_11533:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb33:
    assume $i61 == 1;
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb31:
    assume $i56 == 1;
    goto corral_source_split_11508;

  corral_source_split_11508:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb29:
    assume $i51 == 1;
    goto corral_source_split_11500;

  corral_source_split_11500:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb27:
    assume $i46 == 1;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb22:
    assume $i38 == 1;
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb19:
    assume $i25 == 1;
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i17 := osst_set_frame_position($p0, $p1, $i2, 0);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    call {:si_unique_call 1219} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_293 := osst_wait_ready($p0, $p1, 900, 0);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i21 := osst_initiate_read($p0, $p1);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 1223} {:cexpr "tmp___1"} boogie_si_record_i32($i21);
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} vslice_dummy_var_294 := printk.ref.ref(.str.130, $p4);
    goto corral_source_split_11456;

  corral_source_split_11456:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} vslice_dummy_var_292 := printk.ref.ref(.str.129, $p4);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11429;

  corral_source_split_11429:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 379778);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1291} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11878;

  corral_source_split_11878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1292} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1293} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_vmalloc_26: ref;

axiom ldv_vmalloc_26 == $sub.ref(0, 380810);

procedure ldv_vmalloc_26($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_vmalloc_26($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} {:cexpr "ldv_vmalloc_26:arg:ldv_func_arg1"} boogie_si_record_i64($i0);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} ldv_check_alloc_nonatomic();
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p1 := ldv_undef_ptr();
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_616:
    assume !assertsPassed;
    return;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 381842);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} {:cexpr "alloc_pages:arg:flags"} boogie_si_record_i32($i0);
    call {:si_unique_call 1298} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} ldv_check_alloc_flags($i0);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_11886;

  corral_source_split_11886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p2 := ldv_undef_ptr();
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_619:
    assume !assertsPassed;
    return;
}



const sg_set_page: ref;

axiom sg_set_page == $sub.ref(0, 382874);

procedure sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation sg_set_page($p0: ref, $p1: ref, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} {:cexpr "sg_set_page:arg:len"} boogie_si_record_i32($i2);
    call {:si_unique_call 1302} {:cexpr "sg_set_page:arg:offset"} boogie_si_record_i32($i3);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} sg_assign_page($p0, $p1);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_11892;

  corral_source_split_11892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p4, $i3);
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p5, $i2);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    return;
}



const sg_assign_page: ref;

axiom sg_assign_page == $sub.ref(0, 383906);

procedure sg_assign_page($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation sg_assign_page($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.6, $p2);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 3);
    call {:si_unique_call 1304} {:cexpr "page_link"} boogie_si_record_i64($i4);
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, 3);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_11903;

  corral_source_split_11903:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 1306} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.6, $p12);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 2271560481);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_11914;

  corral_source_split_11914:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1309} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_11916;

  corral_source_split_11916:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.6, $p19);
    goto corral_source_split_11922;

  corral_source_split_11922:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i20);
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i21);
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1312} {:cexpr "tmp___1"} boogie_si_record_i64($i24);
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    $i27 := $or.i64($i4, $i26);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_11933;

  corral_source_split_11933:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, $p28, $i27);
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i25 == 1;
    call {:si_unique_call 1313} devirtbounce(0, .str.35, 93, 12);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    call sg_assign_page_loop_$bb11();
    goto $bb11_last;

  $bb5:
    assume $i18 == 1;
    call {:si_unique_call 1310} devirtbounce(0, .str.35, 92, 12);
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call sg_assign_page_loop_$bb7();
    goto $bb7_last;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 1307} devirtbounce(0, .str.35, 90, 12);
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call sg_assign_page_loop_$bb3();
    goto $bb3_last;

  $bb11_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb7_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const mutex_lock_interruptible_nested: ref;

axiom mutex_lock_interruptible_nested == $sub.ref(0, 384938);

procedure mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible_nested($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1314} {:cexpr "mutex_lock_interruptible_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1315} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const scsi_ioctl_block_when_processing_errors: ref;

axiom scsi_ioctl_block_when_processing_errors == $sub.ref(0, 385970);

procedure scsi_ioctl_block_when_processing_errors($p0: ref, $i1: i32, $i2: i1) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_ioctl_block_when_processing_errors($p0: ref, $i1: i32, $i2: i1) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1317} {:cexpr "scsi_ioctl_block_when_processing_errors:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1318} {:cexpr "scsi_ioctl_block_when_processing_errors:arg:arg2"} boogie_si_record_i1($i2);
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1319} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1320} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11940;

  corral_source_split_11940:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 387002);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1323} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_11944;

  corral_source_split_11944:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1324} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} __might_fault(.str.99, 697);
    goto corral_source_split_11946;

  corral_source_split_11946:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1327} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_11952;

  corral_source_split_11952:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_11963;

  corral_source_split_11963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1329} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const capable: ref;

axiom capable == $sub.ref(0, 388034);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1331} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1332} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1333} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_11968;

  corral_source_split_11968:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const reset_state: ref;

axiom reset_state == $sub.ref(0, 389066);

procedure reset_state($p0: ref);
  free requires assertsPassed;
  modifies $M.6;



implementation reset_state($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11970;

  corral_source_split_11970:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p1, 0);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_11974;

  corral_source_split_11974:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11976;

  corral_source_split_11976:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p4, 0);
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p5, 0);
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p6, 0);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_11982;

  corral_source_split_11982:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p7, 0);
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p8, $sub.i32(0, 1));
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, $sub.i32(0, 1));
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_11993;

  corral_source_split_11993:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(1, 1));
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_11998;

  corral_source_split_11998:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p16, 0);
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_12000;

  corral_source_split_12000:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $sub.i32(0, 1));
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(1, 16)), $mul.ref(12, 1));
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p18, $sub.i32(0, 1));
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_12006;

  corral_source_split_12006:
    assume {:verifier.code 0} true;
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(1, 1));
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 0);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(2, 1));
    goto corral_source_split_12012;

  corral_source_split_12012:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p25, 0);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(8, 1));
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p26, $sub.i32(0, 1));
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(2, 16)), $mul.ref(12, 1));
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p27, $sub.i32(0, 1));
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    goto corral_source_split_12023;

  corral_source_split_12023:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p31, 0);
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(1, 1));
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(2, 1));
    goto corral_source_split_12028;

  corral_source_split_12028:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_12030;

  corral_source_split_12030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(8, 1));
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p35, $sub.i32(0, 1));
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p29, $mul.ref(3, 16)), $mul.ref(12, 1));
    goto corral_source_split_12034;

  corral_source_split_12034:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p36, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const osst_set_options: ref;

axiom osst_set_options == $sub.ref(0, 390098);

procedure osst_set_options($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation osst_set_options($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i8;
  var $i19: i32;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i8;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i32;
  var $i31: i8;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $i36: i8;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i8;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i8;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i64;
  var $i70: i1;
  var $i71: i32;
  var $i72: i8;
  var $p73: ref;
  var $i74: i64;
  var $i75: i1;
  var $i76: i32;
  var $i77: i8;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i8;
  var $p83: ref;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i8;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i8;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $i99: i8;
  var $p100: ref;
  var $i101: i64;
  var $i102: i1;
  var $i103: i8;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $i107: i8;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i111: i8;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $i115: i8;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $i119: i8;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i8;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i8;
  var $i129: i32;
  var $i130: i1;
  var $i131: i64;
  var $i132: i1;
  var $i133: i8;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i137: i8;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $i141: i8;
  var $p142: ref;
  var $i143: i1;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i32;
  var $i149: i1;
  var $p152: ref;
  var $i154: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i160: i1;
  var $i161: i1;
  var $i162: i32;
  var $i163: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $i179: i32;
  var $p180: ref;
  var $i182: i1;
  var $i183: i64;
  var $i184: i32;
  var $i185: i32;
  var $i186: i1;
  var $i187: i1;
  var $p188: ref;
  var $i190: i16;
  var $i191: i32;
  var $i192: i32;
  var $i193: i16;
  var $p194: ref;
  var $p195: ref;
  var $i196: i16;
  var $i197: i32;
  var $i199: i1;
  var $i200: i1;
  var $p201: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i32;
  var $i206: i8;
  var $p207: ref;
  var $p208: ref;
  var $i209: i8;
  var $i210: i32;
  var $i212: i1;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $i218: i32;
  var $i219: i8;
  var $p220: ref;
  var $i221: i32;
  var $i151: i32;
  var cmdloc_dummy_var_138: [ref]i8;
  var cmdloc_dummy_var_139: [ref]i8;
  var cmdloc_dummy_var_140: [ref]i8;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} {:cexpr "osst_set_options:arg:options"} boogie_si_record_i64($i1);
    goto corral_source_split_12036;

  corral_source_split_12036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $p2 := tape_name($p0);
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_12042;

  corral_source_split_12042:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p4, $mul.ref($i7, 56));
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(0, 1));
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.6, $p9);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i1, 4026531840);
    call {:si_unique_call 1338} {:cexpr "code"} boogie_si_record_i64($i16);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i16, 268435456);
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $i84 := $eq.i64($i16, 805306368);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i84 == 1);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i16, 1073741824);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i85 == 1);
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $i143 := $eq.i64($i16, 536870912);
    goto corral_source_split_12156;

  corral_source_split_12156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i143 == 1);
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i154 := $eq.i64($i16, 1342177280);
    goto corral_source_split_12268;

  corral_source_split_12268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i154 == 1);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i16, 1879048192);
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i169 == 1);
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i16, 1610612736);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i182 == 1);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32(0, 5);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto corral_source_split_12276;

  corral_source_split_12276:
    assume {:verifier.code 0} true;
    $r := $i151;
    return;

  $bb85:
    assume $i182 == 1;
    goto corral_source_split_12334;

  corral_source_split_12334:
    assume {:verifier.code 0} true;
    $i183 := $and.i64($i1, $sub.i64(0, 1048576));
    call {:si_unique_call 1352} {:cexpr "code"} boogie_si_record_i64($i183);
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i64.i32($i1);
    goto corral_source_split_12336;

  corral_source_split_12336:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 1048575);
    call {:si_unique_call 1353} {:cexpr "value"} boogie_si_record_i32($i185);
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i183, 1611661312);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i186 == 1);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $i199 := $eq.i64($i183, 1613758464);
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i199} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i199 == 1);
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    $i212 := $eq.i64($i183, 1612709888);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i151 := 0;
    goto $bb62;

  $bb99:
    assume $i212 == 1;
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i185, 1048575);
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i213 == 1);
    goto corral_source_split_12394;

  corral_source_split_12394:
    assume {:verifier.code 0} true;
    $i216 := $and.i32($i185, 1);
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i217 := $ne.i32($i216, 0);
    goto corral_source_split_12396;

  corral_source_split_12396:
    assume {:verifier.code 0} true;
    $i218 := (if $i217 == 1 then 2 else 1);
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(6, 1));
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p220, $i219);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i221 := $and.i32($i185, 1);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vslice_dummy_var_327 := printk.ref.ref.i32(.str.149, $p2, $i221);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb101:
    assume $i213 == 1;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(6, 1));
    goto corral_source_split_12390;

  corral_source_split_12390:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p214, 0);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} vslice_dummy_var_326 := printk.ref.ref(.str.148, $p2);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb93:
    assume $i199 == 1;
    goto corral_source_split_12364;

  corral_source_split_12364:
    assume {:verifier.code 0} true;
    $i200 := $eq.i32($i185, 1048575);
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i200 == 1);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i8($i185);
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 7);
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $i206 := $trunc.i32.i8($i205);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(296, 1));
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p207, $i206);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(296, 1));
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.6, $p208);
    goto corral_source_split_12383;

  corral_source_split_12383:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} vslice_dummy_var_325 := printk.ref.ref.i32(.str.147, $p2, $i210);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i200 == 1;
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(296, 1));
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p201, $sub.i8(0, 1));
    goto corral_source_split_12372;

  corral_source_split_12372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_324 := printk.ref.ref(.str.146, $p2);
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb87:
    assume $i186 == 1;
    goto corral_source_split_12342;

  corral_source_split_12342:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i185, 1048575);
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i187 == 1);
    goto corral_source_split_12353;

  corral_source_split_12353:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i16($i185);
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $i191 := $sext.i16.i32($i190);
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    $i192 := $and.i32($i191, 255);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i16($i192);
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(8, 1));
    goto corral_source_split_12358;

  corral_source_split_12358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p194, $i193);
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(8, 1));
    goto corral_source_split_12360;

  corral_source_split_12360:
    assume {:verifier.code 0} true;
    $i196 := $load.i16($M.6, $p195);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i197 := $sext.i16.i32($i196);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} vslice_dummy_var_323 := printk.ref.ref.i32(.str.145, $p2, $i197);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i187 == 1;
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(8, 1));
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, $p188, $sub.i16(0, 1));
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_322 := printk.ref.ref(.str.144, $p2);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb79:
    assume $i169 == 1;
    goto corral_source_split_12312;

  corral_source_split_12312:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i64.i32($i1);
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 268435455);
    call {:si_unique_call 1349} {:cexpr "value"} boogie_si_record_i32($i171);
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 1880096768);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i173} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i173 == 1);
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    $i179 := $mul.i32($i171, 250);
    goto corral_source_split_12330;

  corral_source_split_12330:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p180, $i179);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} vslice_dummy_var_321 := printk.ref.ref.i32(.str.143, $p2, $i171);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i173 == 1;
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i171, $sub.i32(0, 1880096769));
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $i175 := $mul.i32($i174, 250);
    goto corral_source_split_12323;

  corral_source_split_12323:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(308, 1));
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p176, $i175);
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i171, $sub.i32(0, 1880096769));
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} vslice_dummy_var_320 := printk.ref.ref.i32(.str.142, $p2, $i177);
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb65:
    assume $i154 == 1;
    goto corral_source_split_12282;

  corral_source_split_12282:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i64.i32($i1);
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $i156 := $and.i32($i155, 268435455);
    call {:si_unique_call 1345} {:cexpr "value"} boogie_si_record_i32($i156);
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 268435455);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i157 == 1);
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    $i160 := $sle.i32($i156, 511);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb72;

  $bb72:
    assume !($i160 == 1);
    goto corral_source_split_12300;

  corral_source_split_12300:
    assume {:verifier.code 0} true;
    $i161 := $sgt.i32($i156, 32768);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i161 == 1);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    $i162 := $srem.i32(32768, $i156);
    goto corral_source_split_12304;

  corral_source_split_12304:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(12, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p165, $i156);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(12, 1));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.6, $p166);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} vslice_dummy_var_319 := printk.ref.ref.i32(.str.141, $p2, $i167);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} vslice_dummy_var_318 := printk.ref.ref.i32(.str.140, $p2, $i156);
    goto corral_source_split_12298;

  corral_source_split_12298:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32(0, 22);
    goto $bb62;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb71;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb71;

  $bb67:
    assume $i157 == 1;
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(12, 1));
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p158, $sub.i32(0, 1));
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_317 := printk.ref.ref(.str.139, $p2);
    goto corral_source_split_12293;

  corral_source_split_12293:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb55:
    assume $i143 == 1;
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i32($i1);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i145 := $and.i32($i144, 268435455);
    goto corral_source_split_12263;

  corral_source_split_12263:
    assume {:verifier.code 0} true;
    $i146 := $mul.i32($i145, 1024);
    call {:si_unique_call 1342} {:cexpr "value"} boogie_si_record_i32($i146);
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $i147 := $sle.i32($i146, 0);
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb59;

  $bb59:
    assume !($i147 == 1);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i148 := $M.41;
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    $i149 := $sgt.i32($i146, $i148);
    goto corral_source_split_12274;

  corral_source_split_12274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(300, 1));
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p152, $i146);
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} vslice_dummy_var_316 := printk.ref.ref.i32(.str.138, $p2, $i146);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} vslice_dummy_var_315 := printk.ref.ref.i32(.str.137, $p2, $i146);
    goto corral_source_split_12270;

  corral_source_split_12270:
    assume {:verifier.code 0} true;
    $i151 := $sub.i32(0, 5);
    goto $bb62;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb58;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i16, 805306368);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 1340} {:cexpr "value"} boogie_si_record_i32($i87);
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i64.i32($i1);
    goto corral_source_split_12148;

  corral_source_split_12148:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 1);
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_12150;

  corral_source_split_12150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i1, 2);
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i1, 128);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i1, 4);
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    $i102 := $ne.i64($i101, 0);
    goto corral_source_split_12180;

  corral_source_split_12180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i105 := $and.i64($i1, 16);
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i109 := $and.i64($i1, 32);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i113 := $and.i64($i1, 64);
    goto corral_source_split_12203;

  corral_source_split_12203:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i114} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i117 := $and.i64($i1, 256);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i121 := $and.i64($i1, 512);
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.6, $p125);
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 3496)), $mul.ref(233, 1));
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $i128 := $load.i8($M.6, $p127);
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i129 := $sext.i8.i32($i128);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    $i130 := $sgt.i32($i129, 2);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i135 := $and.i64($i1, 2048);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_12244;

  corral_source_split_12244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i136} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i139 := $and.i64($i1, 4096);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_12252;

  corral_source_split_12252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} osst_log_options($p0, $p8, $p2);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i140 == 1;
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i87);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(1, 1));
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, $i141);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb48:
    assume $i136 == 1;
    goto corral_source_split_12246;

  corral_source_split_12246:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i87);
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(295, 1));
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p138, $i137);
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i130 == 1;
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $i131 := $and.i64($i1, 1024);
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    $i132 := $ne.i64($i131, 0);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb44;

  $bb45:
    assume $i132 == 1;
    goto corral_source_split_12238;

  corral_source_split_12238:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i8($i87);
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_12240;

  corral_source_split_12240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p134, $i133);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i122 == 1;
    goto corral_source_split_12222;

  corral_source_split_12222:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i87);
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p124, $i123);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i118 == 1;
    goto corral_source_split_12214;

  corral_source_split_12214:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i32.i8($i87);
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_12216;

  corral_source_split_12216:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p120, $i119);
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i114 == 1;
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i87);
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_12208;

  corral_source_split_12208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p116, $i115);
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i110 == 1;
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i87);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(293, 1));
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p112, $i111);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i106 == 1;
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i87);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(292, 1));
    goto corral_source_split_12192;

  corral_source_split_12192:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p108, $i107);
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i102 == 1;
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i87);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(4, 1));
    goto corral_source_split_12184;

  corral_source_split_12184:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p104, $i103);
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i98 == 1;
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i87);
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(5, 1));
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p100, $i99);
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i94 == 1;
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i87);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(2, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p96, $i95);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i90 == 1;
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i8($i87);
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(3, 1));
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p92, $i91);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb11;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i8($i1);
    goto corral_source_split_12060;

  corral_source_split_12060:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(3, 1));
    goto corral_source_split_12064;

  corral_source_split_12064:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, $i21);
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i1, 2);
    goto corral_source_split_12066;

  corral_source_split_12066:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(2, 1));
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, $i26);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i1, 128);
    goto corral_source_split_12072;

  corral_source_split_12072:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(5, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, $i31);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i1, 4);
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(4, 1));
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, $i36);
    goto corral_source_split_12083;

  corral_source_split_12083:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i1, 16);
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(292, 1));
    goto corral_source_split_12088;

  corral_source_split_12088:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p42, $i41);
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i1, 32);
    goto corral_source_split_12090;

  corral_source_split_12090:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i32($i44);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(293, 1));
    goto corral_source_split_12094;

  corral_source_split_12094:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p47, $i46);
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i1, 64);
    goto corral_source_split_12096;

  corral_source_split_12096:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p52, $i51);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i1, 256);
    goto corral_source_split_12102;

  corral_source_split_12102:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p57, $i56);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i1, 512);
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p62, $i61);
    goto corral_source_split_12113;

  corral_source_split_12113:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p63);
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p64, $mul.ref(0, 3496)), $mul.ref(233, 1));
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.6, $p65);
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i67 := $sext.i8.i32($i66);
    goto corral_source_split_12118;

  corral_source_split_12118:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, 2);
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i1, 2048);
    goto corral_source_split_12132;

  corral_source_split_12132:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i32($i75);
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(295, 1));
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p78, $i77);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i1, 4096);
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i8($i81);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref($i7, 56)), $mul.ref(1, 1));
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p83, $i82);
    goto corral_source_split_12143;

  corral_source_split_12143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} osst_log_options($p0, $p8, $p2);
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i68 == 1;
    goto corral_source_split_12124;

  corral_source_split_12124:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i1, 1024);
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_12126;

  corral_source_split_12126:
    assume {:verifier.code 0} true;
    $i71 := $zext.i1.i32($i70);
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, $i72);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p8);
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(312, 1));
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_138 := $M.6;
    cmdloc_dummy_var_139 := $M.6;
    call {:si_unique_call 1336} cmdloc_dummy_var_140 := $memcpy.i8(cmdloc_dummy_var_138, cmdloc_dummy_var_139, $p13, $p15, 56, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_140;
    goto corral_source_split_12053;

  corral_source_split_12053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} {:cexpr "modes_defined"} boogie_si_record_i32(1);
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const osst_int_ioctl: ref;

axiom osst_int_ioctl == $sub.ref(0, 391130);

procedure osst_int_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_int_ioctl($p0: ref, $p1: ref, $i2: i32, $i3: i64) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $i68: i8;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i77: i32;
  var $i78: i32;
  var $i76: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i58: i32;
  var $p91: ref;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i108: i32;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $i123: i8;
  var $p124: ref;
  var $i125: i64;
  var $i126: i8;
  var $p127: ref;
  var $i128: i8;
  var $p129: ref;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $i144: i8;
  var $p145: ref;
  var $i146: i64;
  var $i147: i8;
  var $p148: ref;
  var $i149: i8;
  var $p150: ref;
  var $i151: i1;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i8;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i8;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $i170: i1;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i64;
  var $i178: i1;
  var $i172: i32;
  var $i173: i32;
  var $i179: i32;
  var $i171: i32;
  var $i180: i1;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i1;
  var $p196: ref;
  var $i197: i64;
  var $i198: i8;
  var $p199: ref;
  var $i200: i64;
  var $i201: i8;
  var $p202: ref;
  var $i203: i8;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i212: i32;
  var $p213: ref;
  var $p214: ref;
  var $i215: i1;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $i222: i1;
  var $p223: ref;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $i232: i32;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $i246: i32;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i1;
  var $i254: i32;
  var $p255: ref;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i32;
  var $i264: i1;
  var $p265: ref;
  var $i266: i8;
  var $i267: i32;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $i274: i64;
  var $i275: i1;
  var $i276: i64;
  var $i277: i1;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $i281: i32;
  var $i282: i32;
  var $p283: ref;
  var $p284: ref;
  var $i285: i32;
  var $p287: ref;
  var $i288: i8;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i64;
  var $i299: i1;
  var $i300: i64;
  var $p301: ref;
  var $i302: i32;
  var $i303: i64;
  var $i304: i1;
  var $i305: i32;
  var $i306: i32;
  var $i307: i64;
  var $i308: i64;
  var $i309: i1;
  var $p310: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $i318: i32;
  var $p319: ref;
  var $i320: i64;
  var $i321: i1;
  var $i322: i1;
  var $p323: ref;
  var $p324: ref;
  var $i86: i32;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i325: i1;
  var $i326: i1;
  var $i327: i32;
  var $i328: i32;
  var $i329: i32;
  var $i330: i32;
  var $i331: i1;
  var $i332: i32;
  var $i333: i32;
  var $i334: i32;
  var $i335: i32;
  var $p336: ref;
  var $p337: ref;
  var $i338: i8;
  var $p339: ref;
  var $i340: i1;
  var $p341: ref;
  var $i343: i1;
  var $i344: i1;
  var $p345: ref;
  var $i346: i8;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $p353: ref;
  var $i354: i32;
  var $i355: i32;
  var $p356: ref;
  var $p357: ref;
  var $i358: i32;
  var $i359: i32;
  var $p360: ref;
  var $p361: ref;
  var $i362: i32;
  var $i363: i32;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $p367: ref;
  var $p368: ref;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $p373: ref;
  var $i374: i32;
  var $i375: i1;
  var $i376: i32;
  var $i377: i8;
  var $p378: ref;
  var $i379: i1;
  var $p380: ref;
  var $i369: i32;
  var $i342: i32;
  var $i381: i1;
  var $i382: i1;
  var $p383: ref;
  var $i384: i1;
  var $p387: ref;
  var $p390: ref;
  var $p391: ref;
  var $i392: i1;
  var $p393: ref;
  var $i394: i32;
  var $i395: i32;
  var $i396: i1;
  var $i397: i32;
  var $i398: i32;
  var $i400: i1;
  var $i401: i1;
  var $p402: ref;
  var $i403: i32;
  var $i404: i32;
  var $i405: i1;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $i412: i1;
  var $i413: i1;
  var $p414: ref;
  var $i415: i32;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $i421: i32;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $i426: i1;
  var $i427: i1;
  var $i428: i1;
  var $i429: i1;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i435: i1;
  var $p436: ref;
  var $p438: ref;
  var $i439: i64;
  var $i440: i1;
  var $p441: ref;
  var $p443: ref;
  var $i444: i8;
  var $i445: i32;
  var $i446: i32;
  var $i447: i1;
  var $p448: ref;
  var $p449: ref;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $p454: ref;
  var $i455: i8;
  var $i456: i32;
  var $i457: i32;
  var $i458: i1;
  var $p459: ref;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i32;
  var $i465: i32;
  var $i466: i32;
  var $i437: i32;
  var $i434: i32;
  var $i425: i32;
  var $i411: i32;
  var $i399: i32;
  var $p467: ref;
  var $i17: i32;
  var $p470: ref;
  var $p473: ref;
  var $p476: ref;
  var $p479: ref;
  var $p482: ref;
  var $p485: ref;
  var cmdloc_dummy_var_141: [ref]i8;
  var cmdloc_dummy_var_142: [ref]i8;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 1362} {:cexpr "osst_int_ioctl:arg:cmd_in"} boogie_si_record_i32($i2);
    call {:si_unique_call 1363} {:cexpr "osst_int_ioctl:arg:arg"} boogie_si_record_i64($i3);
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.24, $p1);
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $p6);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p7 := tape_name($p0);
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.6, $p8);
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(308, 1));
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    call {:si_unique_call 1365} {:cexpr "timeout"} boogie_si_record_i32($i19);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_12432;

  corral_source_split_12432:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.6, $p26);
    call {:si_unique_call 1366} {:cexpr "fileno"} boogie_si_record_i32($i27);
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    call {:si_unique_call 1367} {:cexpr "blkno"} boogie_si_record_i32($i29);
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(2, 1));
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    call {:si_unique_call 1368} {:cexpr "at_sm"} boogie_si_record_i32($i32);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    call {:si_unique_call 1369} {:cexpr "frame_seq_numbr"} boogie_si_record_i32($i34);
    goto corral_source_split_12443;

  corral_source_split_12443:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.6, $p35);
    call {:si_unique_call 1370} {:cexpr "logical_blk_num"} boogie_si_record_i32($i36);
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p4);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_141 := $M.6;
    call {:si_unique_call 1371} cmdloc_dummy_var_142 := $memset.i8(cmdloc_dummy_var_141, $p37, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_142;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i2, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i2, 25);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i2, 30);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i2, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i2, 65537);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i2, 65537);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 38);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_12448;

  corral_source_split_12448:
    assume {:verifier.code 0} true;
    $i288 := $load.i8($M.6, $p287);
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    $i289 := $zext.i8.i32($i288);
    goto corral_source_split_12450;

  corral_source_split_12450:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i290} true;
    goto $bb186, $bb188;

  $bb188:
    assume !($i290 == 1);
    goto corral_source_split_12833;

  corral_source_split_12833:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.6, $p291);
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p292, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.6, $p293);
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_12838;

  corral_source_split_12838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i2, 20);
    goto corral_source_split_12840;

  corral_source_split_12840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb192, $bb194;

  $bb194:
    assume !($i296 == 1);
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i2, 65537);
    goto corral_source_split_12846;

  corral_source_split_12846:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i297 == 1;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i3, 16777215);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $i299 := $ne.i64($i298, 0);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i299} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb197;

  $bb198:
    assume $i299 == 1;
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $i300 := $and.i64($i3, 16777215);
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.6, $p301);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    $i303 := $sext.i32.i64($i302);
    goto corral_source_split_12852;

  corral_source_split_12852:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i300, $i303);
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb200, $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb197;

  $bb200:
    assume $i304 == 1;
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $i305 := $trunc.i64.i32($i3);
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 16777215);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $i307 := $and.i64($i3, 16777215);
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $i308 := $urem.i64(32768, $i307);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $i309 := $ne.i64($i308, 0);
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $p310 := (if $i309 == 1 then .str.27 else .str.156);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} vslice_dummy_var_329 := printk.ref.ref.i32.ref(.str.155, $p7, $i306, $p310);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb8;

  $bb192:
    assume {:verifier.code 0} true;
    assume $i296 == 1;
    goto $bb193;

  $bb189:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb8;

  $bb186:
    assume {:verifier.code 0} true;
    assume $i290 == 1;
    goto $bb187;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i2, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb25;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p213, 27);
    goto corral_source_split_12514;

  corral_source_split_12514:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p214, 1);
    goto corral_source_split_12516;

  corral_source_split_12516:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i2, 30);
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i2, 9);
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i2, 7);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.6, $p226);
    call {:si_unique_call 1404} {:cexpr "timeout"} boogie_si_record_i32($i227);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    $i134, $i135, $i136, $i137, $i138, $i139 := 0, $i227, 0, 0, 0, 0;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.24, $p5);
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p4);
    goto corral_source_split_12628;

  corral_source_split_12628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p314 := osst_do_scsi($p312, $p0, $p313, 0, 3, $i135, 0, 1);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p5, $p314);
    goto corral_source_split_12630;

  corral_source_split_12630:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.6, $p315);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p316, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    $i318 := $load.i32($M.6, $p317);
    call {:si_unique_call 1393} {:cexpr "ioctl_result"} boogie_si_record_i32($i318);
    goto corral_source_split_12634;

  corral_source_split_12634:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.24, $p5);
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i320 := $p2i.ref.i64($p319);
    goto corral_source_split_12636;

  corral_source_split_12636:
    assume {:verifier.code 0} true;
    $i321 := $eq.i64($i320, 0);
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i322 := $eq.i32($i318, 0);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $i318, $i134, $i136, $i137;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i87, 0);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i325 == 1);
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i2, 2);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i400} true;
    goto $bb256, $bb258;

  $bb258:
    assume !($i400 == 1);
    goto corral_source_split_13013;

  corral_source_split_13013:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i2, 10);
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i401 == 1);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i2, 1);
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb265, $bb267;

  $bb267:
    assume !($i412 == 1);
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $i413 := $eq.i32($i2, 11);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i413 == 1);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    $i426 := $eq.i32($i2, 4);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb274, $bb276;

  $bb276:
    assume !($i426 == 1);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i2, 3);
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i427 == 1);
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i2, 5);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i428} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i428 == 1);
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i2, 12);
    goto corral_source_split_13076;

  corral_source_split_13076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i429 == 1);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    $i435 := $eq.i32($i2, 13);
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i435} true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i435 == 1);
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    $p438 := $load.ref($M.24, $p5);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    $i439 := $p2i.ref.i64($p438);
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $i440 := $ne.i64($i439, 0);
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i440} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i440 == 1);
    assume {:verifier.code 0} true;
    $i466 := $i87;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i437 := $i466;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i434 := $i437;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i425 := $i434;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i411 := $i425;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i399 := $i411;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.24, $p5);
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p467);
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $i17 := $i399;
    goto $bb8;

  $bb287:
    assume $i440 == 1;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $p441 := $load.ref($M.24, $p5);
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($add.ref($p441, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_13092;

  corral_source_split_13092:
    assume {:verifier.code 0} true;
    $i444 := $load.i8($M.6, $p443);
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    $i445 := $zext.i8.i32($i444);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    $i446 := $and.i32($i445, 64);
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $i447 := $ne.i32($i446, 0);
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i447} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i447 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $i450 := $ne.i32($i86, 0);
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.24, $p5);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p452, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $i455 := $load.i8($M.6, $p454);
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    $i457 := $and.i32($i456, 15);
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i457, 8);
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i458} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i458 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i2, 30);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i460} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    $i465 := $i87;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    $i466 := $i465;
    goto $bb304;

  $bb298:
    assume $i460 == 1;
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} $i461 := osst_wait_for_medium($p0, $p5, 60);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    call {:si_unique_call 1431} {:cexpr "tmp___9"} boogie_si_record_i32($i461);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    $i464 := $i87;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    $i465 := $i464;
    goto $bb303;

  $bb300:
    assume $i462 == 1;
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} $i463 := osst_wait_ready($p0, $p5, 300, 1);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    call {:si_unique_call 1433} {:cexpr "ioctl_result"} boogie_si_record_i32($i463);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $i464 := $i463;
    goto $bb302;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb295:
    assume $i458 == 1;
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p459, 7);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb292:
    assume $i450 == 1;
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p451, 0);
    goto corral_source_split_13108;

  corral_source_split_13108:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb289:
    assume $i447 == 1;
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p448, 3);
    goto corral_source_split_13100;

  corral_source_split_13100:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p449, 0);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb284:
    assume $i435 == 1;
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p436, 0);
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    $i437 := $i87;
    goto $bb286;

  $bb281:
    assume {:verifier.code 0} true;
    assume $i429 == 1;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13060;

  corral_source_split_13060:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p430, $sub.i32(0, 1));
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p431, $sub.i32(0, 1));
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p432, 0);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p433, 0);
    goto corral_source_split_13067;

  corral_source_split_13067:
    assume {:verifier.code 0} true;
    $i434 := $i87;
    goto $bb283;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i428 == 1;
    goto $bb275;

  $bb277:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb275;

  $bb274:
    assume {:verifier.code 0} true;
    assume $i426 == 1;
    goto $bb275;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $i415 := $load.i32($M.6, $p414);
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i416 := osst_position_tape_and_confirm($p0, $p5, $i415);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    call {:si_unique_call 1429} {:cexpr "tmp___7"} boogie_si_record_i32($i416);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $i417 := $slt.i32($i416, 0);
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i417 == 1);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_13051;

  corral_source_split_13051:
    assume {:verifier.code 0} true;
    $i421 := $load.i32($M.6, $p420);
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p422, $i421);
    goto corral_source_split_13054;

  corral_source_split_13054:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p423, 0);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13057;

  corral_source_split_13057:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p424, 7);
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 0} true;
    $i425 := $i87;
    goto $bb273;

  $bb270:
    assume $i417 == 1;
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p418, $sub.i32(0, 1));
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p419, $sub.i32(0, 1));
    goto corral_source_split_13048;

  corral_source_split_13048:
    assume {:verifier.code 0} true;
    goto $bb272;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb265:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb266;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i401 == 1;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $i403 := $load.i32($M.6, $p402);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} $i404 := osst_position_tape_and_confirm($p0, $p5, $i403);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    call {:si_unique_call 1427} {:cexpr "tmp___5"} boogie_si_record_i32($i404);
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $i405 := $slt.i32($i404, 0);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i405 == 1);
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13026;

  corral_source_split_13026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p408, 0);
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p409, 0);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p410, 0);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    $i411 := $i87;
    goto $bb264;

  $bb261:
    assume $i405 == 1;
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_13020;

  corral_source_split_13020:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p406, $sub.i32(0, 1));
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p407, $sub.i32(0, 1));
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    goto $bb263;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i400 == 1;
    goto $bb257;

  $bb210:
    assume $i325 == 1;
    goto corral_source_split_12874;

  corral_source_split_12874:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i2, 11);
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    $i329, $i330 := $i88, $i89;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $i331 := $eq.i32($i2, 10);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    $i334, $i335 := $i329, $i330;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p336, $i335);
    goto corral_source_split_12893;

  corral_source_split_12893:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p337, $i334);
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i32.i8($i90);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(2, 1));
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p339, $i338);
    goto corral_source_split_12898;

  corral_source_split_12898:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i2, 12);
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i340} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i340 == 1);
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i2, 11);
    goto corral_source_split_12906;

  corral_source_split_12906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb221, $bb223;

  $bb223:
    assume !($i343 == 1);
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $i344 := $eq.i32($i2, 2);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i344 == 1);
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i2, 1);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i370 == 1);
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    $i379 := $ne.i32($i86, 0);
    goto corral_source_split_12960;

  corral_source_split_12960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i369 := $i87;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i342 := $i369;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i2, 7);
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb236, $bb238;

  $bb238:
    assume !($i381 == 1);
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i2, 31);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i382} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i382 == 1);
    goto corral_source_split_12972;

  corral_source_split_12972:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i2, 30);
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i384} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i2, 6);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    $i398 := $i342;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto corral_source_split_13002;

  corral_source_split_13002:
    assume {:verifier.code 0} true;
    $i399 := $i398;
    goto $bb255;

  $bb249:
    assume $i392 == 1;
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.6, $p393);
    goto corral_source_split_12994;

  corral_source_split_12994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} $i395 := osst_position_tape_and_confirm($p0, $p5, $i394);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    call {:si_unique_call 1425} {:cexpr "ioctl_result"} boogie_si_record_i32($i395);
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i396 := $sgt.i32($i395, 0);
    goto corral_source_split_12996;

  corral_source_split_12996:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    $i397 := $i395;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i398 := $i397;
    goto $bb254;

  $bb251:
    assume $i396 == 1;
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $i397 := 0;
    goto $bb253;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i384 == 1;
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p387, 0);
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p390, 0);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p470 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p470, 0);
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(1, 16)), $mul.ref(3, 1));
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p473, 0);
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(2, 16)), $mul.ref(0, 1));
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p476, 0);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    $p479 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(2, 16)), $mul.ref(3, 1));
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p479, 0);
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(3, 16)), $mul.ref(0, 1));
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p482, 0);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    $p485 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref(3, 16)), $mul.ref(3, 1));
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p485, 0);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p391, 0);
    goto corral_source_split_12990;

  corral_source_split_12990:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(627, 1));
    goto corral_source_split_12966;

  corral_source_split_12966:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p383, 0);
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i381 == 1;
    goto $bb237;

  $bb233:
    assume $i379 == 1;
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $p380 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p380, 0);
    goto corral_source_split_12964;

  corral_source_split_12964:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb230:
    assume $i370 == 1;
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.6, $p371);
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.6, $p373);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i375 := $uge.i32($i372, $i374);
    goto corral_source_split_12953;

  corral_source_split_12953:
    assume {:verifier.code 0} true;
    $i376 := (if $i375 == 1 then 7 else 2);
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $i377 := $trunc.i32.i8($i376);
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    $p378 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p378, $i377);
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb224:
    assume {:verifier.code 0} true;
    assume $i344 == 1;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.6, $p345);
    goto corral_source_split_12912;

  corral_source_split_12912:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i32($i346);
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $i348 := $eq.i32($i347, 1);
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i348 == 1);
    goto $bb226;

  $bb227:
    assume $i348 == 1;
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $i350 := $load.i32($M.6, $p349);
    goto corral_source_split_12923;

  corral_source_split_12923:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, $sub.i32(0, 1));
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} $i352 := osst_seek_logical_blk($p0, $p5, $i351);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    call {:si_unique_call 1423} {:cexpr "ioctl_result"} boogie_si_record_i32($i352);
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.6, $p353);
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $i355 := $add.i32($i354, 1);
    goto corral_source_split_12928;

  corral_source_split_12928:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p356, $i355);
    goto corral_source_split_12930;

  corral_source_split_12930:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $i358 := $load.i32($M.6, $p357);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i359 := $add.i32($i358, 1);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_12934;

  corral_source_split_12934:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p360, $i359);
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_12936;

  corral_source_split_12936:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.6, $p361);
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i362, 1);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p364, $i363);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p365, 0);
    goto corral_source_split_12942;

  corral_source_split_12942:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $p367 := $load.ref($M.6, $p366);
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p367, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p368, 0);
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $i369 := $i352;
    goto $bb229;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb222;

  $bb218:
    assume $i340 == 1;
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(1, 1));
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p341, 7);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    $i342 := $i87;
    goto $bb220;

  $bb215:
    assume $i331 == 1;
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $i332 := $add.i32($i329, 1);
    call {:si_unique_call 1420} {:cexpr "fileno"} boogie_si_record_i32($i332);
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $i333 := $add.i32($i330, 1);
    call {:si_unique_call 1421} {:cexpr "blkno"} boogie_si_record_i32($i333);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $i334, $i335 := $i332, $i333;
    goto $bb217;

  $bb212:
    assume $i326 == 1;
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i327 := $sub.i32($i88, 1);
    call {:si_unique_call 1418} {:cexpr "fileno"} boogie_si_record_i32($i327);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    $i328 := $sub.i32($i89, 1);
    call {:si_unique_call 1419} {:cexpr "blkno"} boogie_si_record_i32($i328);
    goto corral_source_split_12882;

  corral_source_split_12882:
    assume {:verifier.code 0} true;
    $i329, $i330 := $i327, $i328;
    goto $bb214;

  $bb207:
    assume $i322 == 1;
    goto corral_source_split_12868;

  corral_source_split_12868:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p323, $i138);
    goto corral_source_split_12870;

  corral_source_split_12870:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p324, $i139);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i321 == 1;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $i17 := $i318;
    goto $bb8;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb151:
    assume $i224 == 1;
    goto corral_source_split_12748;

  corral_source_split_12748:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p225, 4);
    goto corral_source_split_12750;

  corral_source_split_12750:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i222 == 1;
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12743;

  corral_source_split_12743:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p223, 3);
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb142:
    assume $i215 == 1;
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.6, $p216);
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 2);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i219 == 1);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p221, 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb144:
    assume $i219 == 1;
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p220, 4);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb15:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i2, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i2, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i2, 27);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb25;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.6, $p186);
    goto corral_source_split_12492;

  corral_source_split_12492:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.6, $p190);
    goto corral_source_split_12690;

  corral_source_split_12690:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 0);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12696;

  corral_source_split_12696:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p194, 16);
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i2, 27);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i197 := $lshr.i64($i3, 16);
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i64.i8($i197);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p199, $i198);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $i200 := $lshr.i64($i3, 8);
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i64.i8($i200);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p202, $i201);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i64.i8($i3);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12713;

  corral_source_split_12713:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p204, $i203);
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.6, $p205);
    call {:si_unique_call 1401} {:cexpr "timeout"} boogie_si_record_i32($i206);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    $i207 := $sge.i32($i27, 0);
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i210 := $i27;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i2, 27);
    goto corral_source_split_12724;

  corral_source_split_12724:
    assume {:verifier.code 0} true;
    $i212 := $zext.i1.i32($i211);
    call {:si_unique_call 1403} {:cexpr "at_sm"} boogie_si_record_i32($i212);
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i134, $i135, $i136, $i137, $i138, $i139 := $i210, $i206, 0, $i212, $i34, $i36;
    goto $bb103;

  $bb139:
    assume $i207 == 1;
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i64.i32($i3);
    goto corral_source_split_12720;

  corral_source_split_12720:
    assume {:verifier.code 0} true;
    $i209 := $add.i32($i208, $i27);
    call {:si_unique_call 1402} {:cexpr "fileno"} boogie_si_record_i32($i209);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i210 := $i209;
    goto $bb141;

  $bb136:
    assume $i195 == 1;
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p196, 2);
    goto corral_source_split_12702;

  corral_source_split_12702:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i193 == 1;
    goto corral_source_split_12694;

  corral_source_split_12694:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb130:
    assume $i189 == 1;
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 13);
    goto $bb8;

  $bb31:
    assume $i46 == 1;
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p140, 17);
    goto corral_source_split_12473;

  corral_source_split_12473:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p141, 4);
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    $i142 := $sub.i64(0, $i3);
    call {:si_unique_call 1372} {:cexpr "ltmp"} boogie_si_record_i64($i142);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    $i143 := $ashr.i64($i142, 16);
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i8($i143);
    goto corral_source_split_12478;

  corral_source_split_12478:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p145, $i144);
    goto corral_source_split_12480;

  corral_source_split_12480:
    assume {:verifier.code 0} true;
    $i146 := $ashr.i64($i142, 8);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i64.i8($i146);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p148, $i147);
    goto corral_source_split_12484;

  corral_source_split_12484:
    assume {:verifier.code 0} true;
    $i149 := $trunc.i64.i8($i142);
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12486;

  corral_source_split_12486:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p150, $i149);
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i3, 0);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i151} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    $i152, $i153, $i154 := $i27, $i29, $i32;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    $i134, $i135, $i136, $i137, $i138, $i139 := $i152, $i19, $i153, $i154, $i34, $i36;
    goto $bb103;

  $bb104:
    assume $i151 == 1;
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i152, $i153, $i154 := $sub.i32(0, 1), $sub.i32(0, 1), 1;
    goto $bb106;

  $bb29:
    assume $i45 == 1;
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12454;

  corral_source_split_12454:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p120, 17);
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_12456;

  corral_source_split_12456:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p121, 4);
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    $i122 := $lshr.i64($i3, 16);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i64.i8($i122);
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p124, $i123);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    $i125 := $lshr.i64($i3, 8);
    goto corral_source_split_12462;

  corral_source_split_12462:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i64.i8($i125);
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p127, $i126);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i64.i8($i3);
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p129, $i128);
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i3, 0);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131, $i132, $i133 := $i27, $i29, $i32;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $i134, $i135, $i136, $i137, $i138, $i139 := $i131, $i19, $i132, $i133, $i34, $i36;
    goto $bb103;

  $bb100:
    assume $i130 == 1;
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i131, $i132, $i133 := $sub.i32(0, 1), $sub.i32(0, 1), 1;
    goto $bb102;

  $bb13:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i2, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i2, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i2, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb39:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i2, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb25;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb37:
    assume $i49 == 1;
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.6, $p262);
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i263, 0);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb172, $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb172:
    assume $i264 == 1;
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.6, $p265);
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 0);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i268 == 1);
    goto $bb174;

  $bb175:
    assume $i268 == 1;
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.6, $p269);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p270, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.6, $p271);
    goto corral_source_split_12808;

  corral_source_split_12808:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 0);
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb177, $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume !($i273 == 1);
    goto $bb174;

  $bb177:
    assume $i273 == 1;
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i274 := $and.i64($i3, 16777215);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i275 := $ugt.i64($i274, 511);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i275 == 1);
    goto $bb174;

  $bb179:
    assume $i275 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $i276 := $and.i64($i3, 16777215);
    goto corral_source_split_12816;

  corral_source_split_12816:
    assume {:verifier.code 0} true;
    $i277 := $ule.i64($i276, 32768);
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb181, $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb174;

  $bb181:
    assume $i277 == 1;
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $i278 := $and.i64($i3, 16777215);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i279 := $urem.i64(32768, $i278);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    $i280 := $eq.i64($i279, 0);
    goto corral_source_split_12822;

  corral_source_split_12822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb174;

  $bb183:
    assume $i280 == 1;
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $i281 := $trunc.i64.i32($i3);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $i282 := $and.i32($i281, 16777215);
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p283, $i282);
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $i285 := $load.i32($M.6, $p284);
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_328 := printk.ref.ref.i32(.str.154, $p7, $i285);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb35:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i2, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i2, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb47:
    assume $i53 == 1;
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(618, 1));
    goto corral_source_split_12508;

  corral_source_split_12508:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.6, $p247);
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_12510;

  corral_source_split_12510:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $i251 := osst_reset_header($p0, $p5);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    call {:si_unique_call 1411} {:cexpr "ioctl_result"} boogie_si_record_i32($i251);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i252 := osst_write_eod($p0, $p5);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    call {:si_unique_call 1413} {:cexpr "i"} boogie_si_record_i32($i252);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    $i253 := $slt.i32($i252, $i251);
    goto corral_source_split_12784;

  corral_source_split_12784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    $i254 := $i251;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.6, $p255);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $i257 := osst_position_tape_and_confirm($p0, $p5, $i256);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    call {:si_unique_call 1415} {:cexpr "i"} boogie_si_record_i32($i257);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, $i254);
    goto corral_source_split_12792;

  corral_source_split_12792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    $i259 := $i254;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $i259, 0, 0, 0;
    goto $bb84;

  $bb169:
    assume $i258 == 1;
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $i259 := $i257;
    goto $bb171;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb166:
    assume $i253 == 1;
    goto corral_source_split_12786;

  corral_source_split_12786:
    assume {:verifier.code 0} true;
    $i254 := $i252;
    goto $bb168;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb163:
    assume $i250 == 1;
    goto corral_source_split_12780;

  corral_source_split_12780:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 13);
    goto $bb8;

  $bb45:
    assume $i52 == 1;
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.6, $p228);
    goto corral_source_split_12503;

  corral_source_split_12503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} $i230 := osst_position_tape_and_confirm($p0, $p5, $i229);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    call {:si_unique_call 1374} {:cexpr "tmp___1"} boogie_si_record_i32($i230);
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i230, 0);
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i231} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i231 == 1);
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} $i232 := osst_get_logical_frame($p0, $p5, $sub.i32(0, 1), 0);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    call {:si_unique_call 1406} {:cexpr "tmp___2"} boogie_si_record_i32($i232);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $i233 := $slt.i32($i232, 0);
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.6, $p234);
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.6, $p236);
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p237, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.6, $p238);
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 1);
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $i243 := $load.i32($M.6, $p242);
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} $i244 := osst_set_frame_position($p0, $p5, $i243, 0);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    call {:si_unique_call 1408} {:cexpr "ioctl_result"} boogie_si_record_i32($i244);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.6, $p245);
    call {:si_unique_call 1409} {:cexpr "fileno"} boogie_si_record_i32($i246);
    goto corral_source_split_12778;

  corral_source_split_12778:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $i244, $i246, 0, 0;
    goto $bb84;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb160:
    assume $i241 == 1;
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $sub.i32(0, 5), $i27, $i29, $i32;
    goto $bb84;

  $bb156:
    assume $i233 == 1;
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $sub.i32(0, 5), $i27, $i29, $i32;
    goto $bb84;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb154:
    assume $i231 == 1;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $sub.i32(0, 5), $i27, $i29, $i32;
    goto $bb84;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i2, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i2, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i2, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb55;

  $bb55:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i2, 11);
    assume {:verifier.code 0} true;
    $i58 := 1;
    assume true;
    goto $bb56, $bb58;

  $bb58:
    assume !($i57 == 1);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.6, $p67);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i68);
    goto corral_source_split_12552;

  corral_source_split_12552:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(716, 1));
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.6, $p71);
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i73 == 1);
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i3);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $i78 := osst_space_over_filemarks_forward_slow($p0, $p5, $i2, $i77);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    call {:si_unique_call 1378} {:cexpr "ioctl_result"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    $i76 := $i78;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_12568;

  corral_source_split_12568:
    assume {:verifier.code 0} true;
    $i79 := $sge.i32($i27, 0);
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i82 := $i27;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i3, 0);
    goto corral_source_split_12576;

  corral_source_split_12576:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, $i32);
    call {:si_unique_call 1380} {:cexpr "at_sm"} boogie_si_record_i32($i85);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := $i66, $i76, $i82, 0, $i85;
    goto $bb84;

  $bb81:
    assume $i79 == 1;
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i64.i32($i3);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, $i27);
    call {:si_unique_call 1379} {:cexpr "fileno"} boogie_si_record_i32($i81);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb83;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i73 == 1;
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i64.i32($i3);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i75 := osst_space_over_filemarks_forward_fast($p0, $p5, $i2, $i74);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    call {:si_unique_call 1376} {:cexpr "ioctl_result"} boogie_si_record_i32($i75);
    goto corral_source_split_12563;

  corral_source_split_12563:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb80;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i70 == 1;
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb8;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.6, $p91);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i92);
    goto corral_source_split_12522;

  corral_source_split_12522:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i64.i32($i3);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $i96 := osst_space_over_filemarks_backward($p0, $p5, $i2, $i95);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    call {:si_unique_call 1382} {:cexpr "ioctl_result"} boogie_si_record_i32($i96);
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $i97 := $sge.i32($i27, 0);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    $i100 := $i27;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_12593;

  corral_source_split_12593:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i3, 0);
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $i32);
    call {:si_unique_call 1384} {:cexpr "at_sm"} boogie_si_record_i32($i103);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := $i58, $i96, $i100, $sub.i32(0, 1), $i103;
    goto $bb84;

  $bb88:
    assume $i97 == 1;
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i3);
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i99 := $sub.i32($i27, $i98);
    call {:si_unique_call 1383} {:cexpr "fileno"} boogie_si_record_i32($i99);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    $i100 := $i99;
    goto $bb90;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i94 == 1;
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb8;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb54;

  $bb51:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i2, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i60 == 1);
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb8;

  $bb61:
    assume $i60 == 1;
    goto corral_source_split_12533;

  corral_source_split_12533:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb59:
    assume $i59 == 1;
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p260, 1);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p261, 1);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    $i134, $i135, $i136, $i137, $i138, $i139 := 0, $i19, 0, 0, 0, 0;
    goto $bb103;

  $bb49:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i2, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb69;

  $bb69:
    assume !($i63 == 1);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.6, $p155);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_12544;

  corral_source_split_12544:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 2);
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb107, $bb109;

  $bb109:
    assume !($i158 == 1);
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.6, $p159);
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $i169 := 0;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    $i170 := $ult.i64(0, $i3);
    goto corral_source_split_12660;

  corral_source_split_12660:
    assume {:verifier.code 0} true;
    $i171 := $i169;
    assume {:branchcond $i170} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i180 := $sge.i32($i27, 0);
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    $i183 := $i27;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i184 := $sge.i32($i29, 0);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    $i185 := $i29;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $i171, $i183, $i185, $i32;
    goto $bb84;

  $bb127:
    assume $i184 == 1;
    goto corral_source_split_12683;

  corral_source_split_12683:
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb129;

  $bb124:
    assume $i180 == 1;
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i64.i32($i3);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i181, $i27);
    call {:si_unique_call 1400} {:cexpr "fileno"} boogie_si_record_i32($i182);
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $i183 := $i182;
    goto $bb126;

  $bb116:
    assume $i170 == 1;
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i172, $i173 := 0, $i169;
    goto $bb119;

  $bb119:
    call $i174, $i175, $i176, $i177, $i178, $i172, $i173, $i179 := osst_int_ioctl_loop_$bb119($p0, $i3, $p5, $i174, $i175, $i176, $i177, $i178, $i172, $i173, $i179);
    goto $bb119_last;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $i174 := osst_write_filemark($p0, $p5);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    call {:si_unique_call 1397} {:cexpr "tmp___0"} boogie_si_record_i32($i174);
    goto corral_source_split_12666;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, $i173);
    call {:si_unique_call 1398} {:cexpr "ioctl_result"} boogie_si_record_i32($i175);
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i172, 1);
    call {:si_unique_call 1399} {:cexpr "i"} boogie_si_record_i32($i176);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $i177 := $sext.i32.i64($i176);
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i178 := $ult.i64($i177, $i3);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i179 := $i175;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_12672;

  corral_source_split_12672:
    assume {:verifier.code 0} true;
    $i171 := $i179;
    goto $bb118;

  $bb121:
    assume $i178 == 1;
    assume {:verifier.code 0} true;
    $i172, $i173 := $i176, $i175;
    goto $bb121_dummy;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb110:
    assume {:verifier.code 0} true;
    assume $i162 == 1;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(297, 1));
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.6, $p163);
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i32($i164);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 0);
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb112;

  $bb113:
    assume $i166 == 1;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p167, 0);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $i168 := osst_flush_write_buffer($p0, $p5);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    call {:si_unique_call 1395} {:cexpr "ioctl_result"} boogie_si_record_i32($i168);
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $i169 := $i168;
    goto $bb115;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb108;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i2, 3);
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i104 == 1);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i3);
    goto corral_source_split_12604;

  corral_source_split_12604:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32($i36, $i109);
    call {:si_unique_call 1386} {:cexpr "logical_blk_num"} boogie_si_record_i32($i110);
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i111 := $sge.i32($i29, 0);
    goto corral_source_split_12606;

  corral_source_split_12606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i108 := $i110;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $i112 := osst_seek_logical_blk($p0, $p5, $i108);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    call {:si_unique_call 1388} {:cexpr "ioctl_result"} boogie_si_record_i32($i112);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(12, 1));
    goto corral_source_split_12612;

  corral_source_split_12612:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.6, $p113);
    call {:si_unique_call 1389} {:cexpr "fileno"} boogie_si_record_i32($i114);
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p21, $mul.ref($i24, 16)), $mul.ref(8, 1));
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.6, $p115);
    call {:si_unique_call 1390} {:cexpr "blkno"} boogie_si_record_i32($i116);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $i117 := $eq.i64($i3, 0);
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $i118 := $zext.i1.i32($i117);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, $i32);
    call {:si_unique_call 1391} {:cexpr "at_sm"} boogie_si_record_i32($i119);
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $i86, $i87, $i88, $i89, $i90 := 1, $i112, $i114, $i116, $i119;
    goto $bb84;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i111 == 1;
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb91:
    assume $i104 == 1;
    goto corral_source_split_12598;

  corral_source_split_12598:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i64.i32($i3);
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, $i36);
    call {:si_unique_call 1385} {:cexpr "logical_blk_num"} boogie_si_record_i32($i106);
    goto corral_source_split_12600;

  corral_source_split_12600:
    assume {:verifier.code 0} true;
    $i107 := $sge.i32($i29, 0);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i108 := $i106;
    goto $bb96;

  $bb93:
    assume $i107 == 1;
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb65:
    assume $i62 == 1;
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb63:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i64 == 1);
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb57;

  $bb70:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    $i66 := 1;
    assume true;
    goto $bb72, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb25;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i65 == 1;
    goto $bb73;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i2, 30);
    goto corral_source_split_12413;

  corral_source_split_12413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(617, 1));
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_12418;

  corral_source_split_12418:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 2);
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 5);
    goto $bb8;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 123);
    goto $bb8;

  $bb121_dummy:
    assume false;
    return;

  $bb119_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12664;
}



const osst_seek_sector: ref;

axiom osst_seek_sector == $sub.ref(0, 392162);

procedure osst_seek_sector($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_seek_sector($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $i71: i16;
  var $i72: i16;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i32;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i8;
  var $p133: ref;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} {:cexpr "osst_seek_sector:arg:sector"} boogie_si_record_i32($i2);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1));
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.6, $p5);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $i9 := $ashr.i32($i2, 6);
    call {:si_unique_call 1435} {:cexpr "frame"} boogie_si_record_i32($i9);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i2, 63);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 9);
    call {:si_unique_call 1436} {:cexpr "offset"} boogie_si_record_i32($i11);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i9, 0);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i12 == 1);
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(8, 1));
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $i15 := $uge.i32($i9, $i14);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $i19 := $sge.i32($i18, $i9);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i11, 0);
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    $i27 := $i9;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1439} $i28 := osst_set_frame_position($p0, $p1, $i27, 0);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    call {:si_unique_call 1440} {:cexpr "r"} boogie_si_record_i32($i28);
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} $i30 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 1);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    call {:si_unique_call 1442} {:cexpr "r"} boogie_si_record_i32($i30);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_13191;

  corral_source_split_13191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i32 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    call {:si_unique_call 1444} {:cexpr "tmp___3"} boogie_si_record_i32($i32);
    goto corral_source_split_13195;

  corral_source_split_13195:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i11, 0);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i33 == 1);
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $i35 := $i9;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_13203;

  corral_source_split_13203:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i32, $i35);
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i11, 0);
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i37 == 1);
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13234;

  corral_source_split_13234:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, 1);
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p59, $i58);
    goto corral_source_split_13238;

  corral_source_split_13238:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p60, 0);
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.6, $p61);
    goto corral_source_split_13242;

  corral_source_split_13242:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.6, $p63);
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($add.ref($add.ref($p64, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.6, $p68);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_13247;

  corral_source_split_13247:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i72 := __fswab16($i71);
    call {:si_unique_call 1446} {:cexpr "tmp___4"} boogie_si_record_i16($i72);
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.6, $p73);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i72);
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i74, $i75);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p77, $i76);
    goto corral_source_split_13255;

  corral_source_split_13255:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_13257;

  corral_source_split_13257:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p80, 0);
    goto corral_source_split_13259;

  corral_source_split_13259:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.6, $p81);
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p83, 0);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_13267;

  corral_source_split_13267:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.6, $p88);
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $i90 := __fswab32($i89);
    call {:si_unique_call 1448} {:cexpr "tmp___6"} boogie_si_record_i32($i90);
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p91, $i90);
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.6, $p92);
    goto corral_source_split_13274;

  corral_source_split_13274:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i95 == 1);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13288;

  corral_source_split_13288:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.6, $p101);
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.6, $p103);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_13292;

  corral_source_split_13292:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.6, $p105);
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} $i107 := __fswab32($i106);
    call {:si_unique_call 1450} {:cexpr "tmp___10"} boogie_si_record_i32($i107);
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i108 == 1);
    goto corral_source_split_13312;

  corral_source_split_13312:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p125, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.6, $p126);
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.6, $p128);
    goto corral_source_split_13300;

  corral_source_split_13300:
    assume {:verifier.code 0} true;
    $i130 := $uge.i32($i127, $i129);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i131 := (if $i130 == 1 then 7 else 0);
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(1, 1));
    goto corral_source_split_13304;

  corral_source_split_13304:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p133, $i132);
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb32:
    assume $i108 == 1;
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_13308;

  corral_source_split_13308:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.6, $p109);
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i120 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.6, $p121);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    $i123 := $sub.i32($i122, $i120);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p124, $i123);
    goto corral_source_split_13330;

  corral_source_split_13330:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i111 == 1;
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13316;

  corral_source_split_13316:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.6, $p112);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.6, $p114);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p115, $mul.ref(0, 512)), $mul.ref(228, 1));
    goto corral_source_split_13320;

  corral_source_split_13320:
    assume {:verifier.code 0} true;
    $i117 := $load.i32($M.6, $p116);
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} $i118 := __fswab32($i117);
    call {:si_unique_call 1452} {:cexpr "tmp___8"} boogie_si_record_i32($i118);
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    call {:si_unique_call 1453} {:cexpr "tmp___9"} boogie_si_record_i32($i119);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    $i120 := $i119;
    goto $bb36;

  $bb29:
    assume $i95 == 1;
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.6, $p96);
    goto corral_source_split_13280;

  corral_source_split_13280:
    assume {:verifier.code 0} true;
    $i98 := $add.i32($i97, 1);
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_13282;

  corral_source_split_13282:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p99, $i98);
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_13284;

  corral_source_split_13284:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p100, 0);
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i37 == 1;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.6, $p38);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_13213;

  corral_source_split_13213:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $i42 := $sdiv.i32($i11, $i41);
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i39, $i42);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13217;

  corral_source_split_13217:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p44, $i43);
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p47, $i11);
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.6, $p48);
    goto corral_source_split_13224;

  corral_source_split_13224:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.6, $p50);
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i51, $i11);
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.6, $p53);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13230;

  corral_source_split_13230:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p55, $i52);
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i36 == 1;
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 5);
    goto $bb6;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i9, 1);
    goto corral_source_split_13199;

  corral_source_split_13199:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb22;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i31 == 1;
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb6;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb6;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_13179;

  corral_source_split_13179:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i9, $sub.i32(0, 1));
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(8, 1));
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p20, 0);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref($i7, 16)), $mul.ref(12, 1));
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p21, 0);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p22, 0);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p23, 0);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i24 := osst_set_frame_position($p0, $p1, $i9, 0);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    call {:si_unique_call 1438} {:cexpr "tmp___2"} boogie_si_record_i32($i24);
    goto corral_source_split_13175;

  corral_source_split_13175:
    assume {:verifier.code 0} true;
    $i16 := $i24;
    goto $bb6;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 6);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 393194);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_13333;

  corral_source_split_13333:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1456} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1457} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} __might_fault(.str.99, 732);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_13345;

  corral_source_split_13345:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_13339;

  corral_source_split_13339:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1460} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1462} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const osst_get_sector: ref;

axiom osst_get_sector == $sub.ref(0, 394226);

procedure osst_get_sector($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr, assertsPassed;



implementation osst_get_sector($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i18: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i38: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13357;

  corral_source_split_13357:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_13360;

  corral_source_split_13360:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i4, 16)), $mul.ref(8, 1));
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.6, $p7);
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, 0);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $i47 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    call {:si_unique_call 1465} {:cexpr "sector"} boogie_si_record_i32($i47);
    goto corral_source_split_13372;

  corral_source_split_13372:
    assume {:verifier.code 0} true;
    $i48 := $sgt.i32($i47, 0);
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i47;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i50;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $r := $i46;
    return;

  $bb10:
    assume $i48 == 1;
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32($i47, 6);
    call {:si_unique_call 1468} {:cexpr "sector"} boogie_si_record_i32($i49);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb12;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_13365;

  corral_source_split_13365:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.6, $p10);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_13382;

  corral_source_split_13382:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $i21 := $shl.i32($i20, 6);
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $i18 := $i21;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.6, $p22);
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i24, 16)), $mul.ref(0, 1));
    goto corral_source_split_13390;

  corral_source_split_13390:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 2);
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    goto corral_source_split_13404;

  corral_source_split_13404:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.6, $p39);
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.6, $p41);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    $i43 := $ashr.i32($i42, 9);
    goto corral_source_split_13409;

  corral_source_split_13409:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 63);
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, $i18);
    call {:si_unique_call 1467} {:cexpr "sector"} boogie_si_record_i32($i45);
    assume {:verifier.code 0} true;
    $i38 := $i45;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    $i46 := $i38;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13396;

  corral_source_split_13396:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.6, $p31);
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.6, $p33);
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i34, 9);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 63);
    goto corral_source_split_13401;

  corral_source_split_13401:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, $i18);
    call {:si_unique_call 1466} {:cexpr "sector"} boogie_si_record_i32($i37);
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_13375;

  corral_source_split_13375:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.6, $p14);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 6);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb5;
}



const scsi_ioctl: ref;

axiom scsi_ioctl == $sub.ref(0, 395258);

procedure scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_ioctl($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1469} {:cexpr "scsi_ioctl:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1470} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1471} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 396290);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 397322);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 398354);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1473} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1474} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1475} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_13425;

  corral_source_split_13425:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 399386);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    return;
}



const osst_space_over_filemarks_forward_fast: ref;

axiom osst_space_over_filemarks_forward_fast == $sub.ref(0, 400418);

procedure osst_space_over_filemarks_forward_fast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_space_over_filemarks_forward_fast($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i51: i64;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i50: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $i121: i32;
  var $i119: i32;
  var $i120: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i140: i1;
  var $i141: i32;
  var $i142: i32;
  var $p143: ref;
  var $i144: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i8;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i159: i32;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i1;
  var $i181: i32;
  var $i185: i32;
  var $i186: i32;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i201: i1;
  var $i172: i32;
  var $i202: i1;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p221: ref;
  var $i222: i16;
  var $i223: i32;
  var $i224: i16;
  var $i225: i16;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var $i7: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} {:cexpr "osst_space_over_filemarks_forward_fast:arg:mt_op"} boogie_si_record_i32($i2);
    call {:si_unique_call 1477} {:cexpr "osst_space_over_filemarks_forward_fast:arg:mt_count"} boogie_si_record_i32($i3);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} $p4 := tape_name($p0);
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} $i5 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    call {:si_unique_call 1480} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_13432;

  corral_source_split_13432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_13439;

  corral_source_split_13439:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 3);
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.6, $p111);
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.6, $p113);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p114, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13460;

  corral_source_split_13460:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.6, $p115);
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_13462;

  corral_source_split_13462:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 2);
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 0} true;
    $i119 := $i3;
    assume true;
    goto $bb43, $bb45;

  $bb45:
    assume !($i118 == 1);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $i120 := $i3;
    goto $bb46;

  $bb46:
    call $i121, $i120, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $i141, $p143, $i144, $i146, $i147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $i155, $i160, $i161, $i162, $i159, $p163, $p164, $p165, $p166, $i167, $i168, $i169, vslice_dummy_var_333 := osst_space_over_filemarks_forward_fast_loop_$bb46($p0, $p1, $p111, $i121, $i120, $p122, $p123, $p124, $p125, $p126, $i127, $i128, $i129, $p130, $p131, $p132, $p133, $p134, $i135, $i136, $i137, $p138, $i139, $i140, $i141, $p143, $i144, $i146, $i147, $p148, $p149, $p150, $p151, $p152, $i153, $i154, $i155, $i160, $i161, $i162, $i159, $p163, $p164, $p165, $p166, $i167, $i168, $i169, vslice_dummy_var_333);
    goto $bb46_last;

  $bb49:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.6, $p122);
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.6, $p124);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p125, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13596;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.6, $p126);
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13603;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.6, $p130);
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13605;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.6, $p132);
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.6, $p134);
    goto corral_source_split_13608;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $i136 := __fswab32($i135);
    call {:si_unique_call 1503} {:cexpr "tmp___11"} boogie_si_record_i32($i136);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 0);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i137 == 1);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $i160 := osst_space_over_filemarks_backward($p0, $p1, 2, 1);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    call {:si_unique_call 1505} {:cexpr "tmp___10"} boogie_si_record_i32($i160);
    goto corral_source_split_13618;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    $i161 := $slt.i32($i160, 0);
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i162 := $add.i32($i120, 1);
    call {:si_unique_call 1512} {:cexpr "mt_count"} boogie_si_record_i32($i162);
    assume {:verifier.code 0} true;
    $i159 := $i162;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.6, $p111);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.6, $p164);
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13650;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.6, $p166);
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i121 := $i159;
    assume true;
    goto $bb47, $bb68;

  $bb68:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    $i120 := $i159;
    goto $bb68_dummy;

  $bb47:
    assume $i169 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13587;

  corral_source_split_13587:
    assume {:verifier.code 0} true;
    $i119 := $i121;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i170 := $add.i32(0, 1);
    call {:si_unique_call 1501} {:cexpr "cnt"} boogie_si_record_i32($i170);
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, $i119);
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i171 == 1);
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i2, 1);
    goto corral_source_split_13581;

  corral_source_split_13581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb89:
    assume $i202 == 1;
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    $i204 := $load.i32($M.6, $p203);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i205 := $add.i32($i204, 1);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13706;

  corral_source_split_13706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p206, $i205);
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p207, 0);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.6, $p208);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p209, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p210, 0);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13714;

  corral_source_split_13714:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.6, $p211);
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p213, 0);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.6, $p214);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p215, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $p217 := $load.ref($M.6, $p216);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($add.ref($add.ref($add.ref($p217, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_13722;

  corral_source_split_13722:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.6, $p221);
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i225 := __fswab16($i224);
    call {:si_unique_call 1523} {:cexpr "tmp___15"} boogie_si_record_i16($i225);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.6, $p226);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i225);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i227, $i228);
    goto corral_source_split_13730;

  corral_source_split_13730:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p230, $i229);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb69:
    assume $i171 == 1;
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    $i172 := $i170;
    goto $bb72;

  $bb72:
    call $p173, $p174, $p175, $p176, $p177, $i178, $i179, $i180, $p182, $i183, $i184, $i181, $i188, $i189, $i190, $p191, $p192, $p193, $p194, $p195, $i196, $i197, $i198, $i199, $i201, $i172, vslice_dummy_var_335 := osst_space_over_filemarks_forward_fast_loop_$bb72($p0, $p1, $i119, $p173, $p174, $p175, $p176, $p177, $i178, $i179, $i180, $p182, $i183, $i184, $i181, $i188, $i189, $i190, $p191, $p192, $p193, $p194, $p195, $i196, $i197, $i198, $i199, $i201, $i172, vslice_dummy_var_335);
    goto $bb72_last;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.6, $p173);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p174, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.6, $p175);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p176, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.6, $p177);
    goto corral_source_split_13666;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $i179 := __fswab32($i178);
    call {:si_unique_call 1514} {:cexpr "tmp___12"} boogie_si_record_i32($i179);
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i180 := $eq.i32($i179, 0);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $i181 := $i172;
    assume true;
    goto $bb74, $bb76;

  $bb76:
    assume !($i180 == 1);
    goto corral_source_split_13674;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.6, $p182);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i184 := $slt.i32($i183, $i179);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i181 := $i172;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_335 := osst_position_tape_and_confirm($p0, $p1, $i179);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    $i188 := $add.i32($i172, 1);
    call {:si_unique_call 1518} {:cexpr "cnt"} boogie_si_record_i32($i188);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $i189 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    call {:si_unique_call 1520} {:cexpr "tmp___14"} boogie_si_record_i32($i189);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    $i190 := $slt.i32($i189, 0);
    goto corral_source_split_13682;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.6, $p191);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.6, $p193);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13690;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.6, $p195);
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 2);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i199 := $i179;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i188, $i119);
    goto corral_source_split_13698;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i201 == 1);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb86:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i172 := $i188;
    goto $bb86_dummy;

  $bb83:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_336 := printk.ref.ref.i32(.str.157, $p4, $i199);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb80:
    assume $i190 == 1;
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i185 := $sub.i32($i119, $i181);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i186 := osst_space_over_filemarks_forward_slow($p0, $p1, $i2, $i185);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    call {:si_unique_call 1516} {:cexpr "tmp___13"} boogie_si_record_i32($i186);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i7 := $i186;
    goto $bb3;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i180 == 1;
    goto $bb75;

  $bb65:
    assume $i161 == 1;
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i137 == 1;
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.6, $p138);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, $sub.i32(0, 1));
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    $i141 := $i120;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.6, $p143);
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_333 := osst_position_tape_and_confirm($p0, $p1, $i144);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_13626;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $i146 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    call {:si_unique_call 1510} {:cexpr "tmp___9"} boogie_si_record_i32($i146);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i146, 0);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.6, $p148);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p149, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13634;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.6, $p150);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13636;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.6, $p152);
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 2);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i159 := $i120;
    goto $bb64;

  $bb61:
    assume $i155 == 1;
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.6, $p156);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_334 := printk.ref.ref.i32(.str.159, $p4, $i157);
    goto corral_source_split_13644;

  corral_source_split_13644:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb58:
    assume $i147 == 1;
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i140 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $i142 := osst_space_over_filemarks_forward_slow($p0, $p1, $i2, $i141);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    call {:si_unique_call 1507} {:cexpr "tmp___8"} boogie_si_record_i32($i142);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $i7 := $i142;
    goto $bb3;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i129 == 1;
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb44;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13443;

  corral_source_split_13443:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13447;

  corral_source_split_13447:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} $i17 := __fswab32($i16);
    call {:si_unique_call 1482} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i17, 1);
    call {:si_unique_call 1483} {:cexpr "cnt"} boogie_si_record_i32($i18);
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.6, $p19);
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i75 := $sub.i32(0, 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    $i76 := $sle.i32($i75, 10);
    goto corral_source_split_13532;

  corral_source_split_13532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i76 == 1);
    goto corral_source_split_13536;

  corral_source_split_13536:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.6, $p77);
    goto corral_source_split_13538;

  corral_source_split_13538:
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i78, $i75);
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i79 == 1);
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vslice_dummy_var_330 := osst_position_tape_and_confirm($p0, $p1, $i75);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} $i82 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    call {:si_unique_call 1494} {:cexpr "tmp___5"} boogie_si_record_i32($i82);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.6, $p84);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.6, $p86);
    goto corral_source_split_13551;

  corral_source_split_13551:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 2);
    goto corral_source_split_13555;

  corral_source_split_13555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.6, $p93);
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.6, $p95);
    goto corral_source_split_13563;

  corral_source_split_13563:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p96, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.6, $p97);
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} $i99 := __fswab32($i98);
    call {:si_unique_call 1497} {:cexpr "tmp___7"} boogie_si_record_i32($i99);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i18, $i3);
    goto corral_source_split_13567;

  corral_source_split_13567:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i99, $i100);
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb38:
    assume $i101 == 1;
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.6, $p102);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p103, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13573;

  corral_source_split_13573:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.6, $p104);
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.6, $p106);
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i108 := __fswab32($i107);
    call {:si_unique_call 1499} {:cexpr "tmp___6"} boogie_si_record_i32($i108);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $i109 := $add.i32($i18, $i3);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_332 := printk.ref.ref.i32.i32.i32(.str.158, $p4, $i109, $i75, $i108);
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb35:
    assume $i91 == 1;
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_331 := printk.ref.ref.i32(.str.157, $p4, $i75);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $i80 := osst_space_over_filemarks_forward_slow($p0, $p1, $i2, $i3);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    call {:si_unique_call 1491} {:cexpr "tmp___4"} boogie_si_record_i32($i80);
    goto corral_source_split_13534;

  corral_source_split_13534:
    assume {:verifier.code 0} true;
    $i7 := $i80;
    goto $bb3;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb28;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.6, $p22);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_13468;

  corral_source_split_13468:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb10:
    assume $i25 == 1;
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i18, $i3);
    goto corral_source_split_13472;

  corral_source_split_13472:
    assume {:verifier.code 0} true;
    $i27 := $sle.i32($i26, 1023);
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb9;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i18, $i3);
    goto corral_source_split_13476;

  corral_source_split_13476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i28, $i30);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i18, $sub.i32(0, 1));
    goto corral_source_split_13482;

  corral_source_split_13482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    goto corral_source_split_13494;

  corral_source_split_13494:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i51 := $sext.i32.i64($i18);
    goto corral_source_split_13507;

  corral_source_split_13507:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.6, $p52);
    goto corral_source_split_13509;

  corral_source_split_13509:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p53, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i51, 4));
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.6, $p56);
    goto corral_source_split_13511;

  corral_source_split_13511:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.6, $p60);
    goto corral_source_split_13515;

  corral_source_split_13515:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i57, $i63);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i74 := $sub.i32(0, 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i50 := $i74;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $i75 := $i50;
    goto $bb26;

  $bb23:
    assume $i64 == 1;
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i18, $i3);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i65);
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_13526;

  corral_source_split_13526:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p68, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i66, 4));
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.6, $p71);
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} $i73 := __fswab32($i72);
    call {:si_unique_call 1489} {:cexpr "tmp___2"} boogie_si_record_i32($i73);
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    $i74 := $i73;
    goto $bb25;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.6, $p33);
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_13488;

  corral_source_split_13488:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.6, $p37);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i39 := __fswab32($i38);
    call {:si_unique_call 1485} {:cexpr "tmp___3"} boogie_si_record_i32($i39);
    goto corral_source_split_13491;

  corral_source_split_13491:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, $sub.i32(0, 1));
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i40 == 1);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i18, $i3);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p44, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i42, 4));
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $i49 := __fswab32($i48);
    call {:si_unique_call 1487} {:cexpr "tmp___2"} boogie_si_record_i32($i49);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb22;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13434;

  corral_source_split_13434:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb68_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb86_dummy:
    assume false;
    return;

  $bb72_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13659;
}



const osst_space_over_filemarks_backward: ref;

axiom osst_space_over_filemarks_backward == $sub.ref(0, 401450);

procedure osst_space_over_filemarks_backward($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_space_over_filemarks_backward($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i1;
  var $i96: i32;
  var $i98: i1;
  var $i75: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p118: ref;
  var $i119: i16;
  var $i120: i32;
  var $i121: i16;
  var $i122: i16;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $i126: i32;
  var $p127: ref;
  var $i7: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} {:cexpr "osst_space_over_filemarks_backward:arg:mt_op"} boogie_si_record_i32($i2);
    call {:si_unique_call 1525} {:cexpr "osst_space_over_filemarks_backward:arg:mt_count"} boogie_si_record_i32($i3);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} $p4 := tape_name($p0);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i5 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    call {:si_unique_call 1528} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 3);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32(0, $i3);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i2, 10);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb52:
    assume $i99 == 1;
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.6, $p100);
    goto corral_source_split_13874;

  corral_source_split_13874:
    assume {:verifier.code 0} true;
    $i102 := $add.i32($i101, 1);
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p103, $i102);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p104, 0);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.6, $p105);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p106, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_13882;

  corral_source_split_13882:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p107, 0);
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.6, $p108);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p110, 0);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.6, $p111);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p112, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13890;

  corral_source_split_13890:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.6, $p113);
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($add.ref($p114, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i119 := $load.i16($M.6, $p118);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i120 := $zext.i16.i32($i119);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i121 := $trunc.i32.i16($i120);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} $i122 := __fswab16($i121);
    call {:si_unique_call 1545} {:cexpr "tmp___6"} boogie_si_record_i16($i122);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.6, $p123);
    goto corral_source_split_13898;

  corral_source_split_13898:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i122);
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i126 := $add.i32($i124, $i125);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p127, $i126);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb35:
    assume $i74 == 1;
    goto corral_source_split_13834;

  corral_source_split_13834:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb38;

  $bb38:
    call $p76, $p77, $p78, $p79, $p80, $i81, $i82, $i83, $i85, $i86, $i87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i98, $i75, vslice_dummy_var_339 := osst_space_over_filemarks_backward_loop_$bb38($p0, $p1, $i3, $p76, $p77, $p78, $p79, $p80, $i81, $i82, $i83, $i85, $i86, $i87, $p88, $p89, $p90, $p91, $p92, $i93, $i94, $i95, $i96, $i98, $i75, vslice_dummy_var_339);
    goto $bb38_last;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.6, $p76);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.6, $p78);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_13842;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.6, $p80);
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} $i82 := __fswab32($i81);
    call {:si_unique_call 1538} {:cexpr "tmp___4"} boogie_si_record_i32($i82);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, $sub.i32(0, 1));
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_339 := osst_position_tape_and_confirm($p0, $p1, $i82);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i75, 1);
    call {:si_unique_call 1540} {:cexpr "cnt"} boogie_si_record_i32($i85);
    goto corral_source_split_13850;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} $i86 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    call {:si_unique_call 1542} {:cexpr "tmp___5"} boogie_si_record_i32($i86);
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.6, $p88);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13858;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.6, $p90);
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.6, $p92);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 2);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    $i96 := $i82;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i85, $i3);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i98 == 1);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb49:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $i75 := $i85;
    goto $bb49_dummy;

  $bb46:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_340 := printk.ref.ref.i32(.str.157, $p4, $i96);
    goto corral_source_split_13866;

  corral_source_split_13866:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb43:
    assume $i87 == 1;
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i83 == 1;
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.6, $p13);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.6, $p15);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} $i17 := __fswab32($i16);
    call {:si_unique_call 1530} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_13754;

  corral_source_split_13754:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(712, 1));
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.6, $p18);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 10);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb21:
    assume $i58 == 1;
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $i61 := $sgt.i32($i60, $i57);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb23;

  $bb24:
    assume $i61 == 1;
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_337 := osst_position_tape_and_confirm($p0, $p1, $i57);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i63 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    call {:si_unique_call 1535} {:cexpr "tmp___3"} boogie_si_record_i32($i63);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i63, 0);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13818;

  corral_source_split_13818:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.6, $p65);
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.6, $p67);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 2);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i72 == 1;
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_338 := printk.ref.ref.i32(.str.157, $p4, $i57);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  $bb26:
    assume $i64 == 1;
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_13762;

  corral_source_split_13762:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb9;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $i25 := $sub.i32($i17, $i3);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $i26 := $sge.i32($i25, 0);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb9;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i17, $i3);
    goto corral_source_split_13770;

  corral_source_split_13770:
    assume {:verifier.code 0} true;
    $i28 := $sle.i32($i27, 1023);
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb9;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i17, $i3);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.6, $p30);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, $i31);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i17, $sub.i32(0, 1));
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.6, $p35);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p36, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i34, 4));
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p39);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13786;

  corral_source_split_13786:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.6, $p41);
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.6, $p43);
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i40, $i46);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb9;

  $bb18:
    assume $i47 == 1;
    goto corral_source_split_13794;

  corral_source_split_13794:
    assume {:verifier.code 0} true;
    $i48 := $sub.i32($i17, $i3);
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.6, $p50);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i49, 4));
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $i56 := __fswab32($i55);
    call {:si_unique_call 1532} {:cexpr "tmp___2"} boogie_si_record_i32($i56);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb20;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb49_dummy:
    assume false;
    return;

  $bb38_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13836;
}



const osst_reset_header: ref;

axiom osst_reset_header == $sub.ref(0, 402482);

procedure osst_reset_header($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.26, $M.25, $M.24, assertsPassed, $M.39, $M.38, $CurrAddr;



implementation osst_reset_header($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var cmdloc_dummy_var_143: [ref]i8;
  var cmdloc_dummy_var_144: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.6, $p2);
    goto corral_source_split_13906;

  corral_source_split_13906:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p9, 0);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p10, 0);
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(752, 1));
    goto corral_source_split_13922;

  corral_source_split_13922:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p12, 10);
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p13, 10);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p14, 0);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(748, 1));
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p15, $sub.i32(0, 1));
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(744, 1));
    goto corral_source_split_13930;

  corral_source_split_13930:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p16, $sub.i32(0, 1));
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p17, $sub.i32(0, 1));
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i18 := osst_write_header($p0, $p1, 1);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    call {:si_unique_call 1548} {:cexpr "tmp___3"} boogie_si_record_i32($i18);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.6, $p6);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_143 := $M.6;
    call {:si_unique_call 1546} cmdloc_dummy_var_144 := $memset.i8(cmdloc_dummy_var_143, $p8, 0, 32768, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_144;
    goto corral_source_split_13914;

  corral_source_split_13914:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const osst_wait_for_medium: ref;

axiom osst_wait_for_medium == $sub.ref(0, 403514);

procedure osst_wait_for_medium($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $CurrAddr, assertsPassed;



implementation osst_wait_for_medium($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p21: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p51: ref;
  var $p45: ref;
  var $p39: ref;
  var $p32: ref;
  var $p20: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i14: i32;
  var cmdloc_dummy_var_145: [ref]i8;
  var cmdloc_dummy_var_146: [ref]i8;
  var cmdloc_dummy_var_147: [ref]i8;
  var cmdloc_dummy_var_148: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1550} {:cexpr "osst_wait_for_medium:arg:timeout"} boogie_si_record_i32($i2);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.6, jiffies);
    call {:si_unique_call 1551} {:cexpr "startwait"} boogie_si_record_i64($i4);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_13938;

  corral_source_split_13938:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_145 := $M.6;
    call {:si_unique_call 1552} cmdloc_dummy_var_146 := $memset.i8(cmdloc_dummy_var_145, $p5, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_146;
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p6, 0);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.24, $p1);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.6, $p9);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p11 := osst_do_scsi($p7, $p0, $p8, 0, 3, $i10, 0, 1);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_13946;

  corral_source_split_13946:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p11);
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.6, $p17);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    $p20 := $p11;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p20);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.6, $p58);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_14018;

  corral_source_split_14018:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.6, $p60);
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb21:
    assume $i62 == 1;
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.6, $p64);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 2);
    goto corral_source_split_14026;

  corral_source_split_14026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb23;

  $bb24:
    assume $i67 == 1;
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 4);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb23;

  $bb26:
    assume $i72 == 1;
    goto corral_source_split_14034;

  corral_source_split_14034:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.6, $p74);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb23;

  $bb28:
    assume $i77 == 1;
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    $p21 := $p11;
    goto $bb8;

  $bb8:
    call $p22, $p23, $p24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $p21, $i33, $i34, $i35, $i36, $i37, $i38, $p41, $i42, $i43, $i44, $p47, $i48, $i49, $i50, $p53, $i54, $i55, $i56, $p57, $p51, $p45, $p39, $p32, cmdloc_dummy_var_147, cmdloc_dummy_var_148 := osst_wait_for_medium_loop_$bb8($p0, $i2, $p3, $i4, $p15, $p22, $p23, $p24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $p21, $i33, $i34, $i35, $i36, $i37, $i38, $p41, $i42, $i43, $i44, $p47, $i48, $i49, $i50, $p53, $i54, $i55, $i56, $p57, $p51, $p45, $p39, $p32, cmdloc_dummy_var_147, cmdloc_dummy_var_148);
    goto $bb8_last;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.6, jiffies);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i2, 250);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i36 := $add.i64($i35, $i4);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    $i37 := $sub.i64($i33, $i36);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $i38 := $slt.i64($i37, 0);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    $p39 := $p21;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    $p20 := $p39;
    goto $bb7;

  $bb12:
    assume $i38 == 1;
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 2);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    $p45 := $p21;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    $p20 := $p45;
    goto $bb7;

  $bb14:
    assume $i44 == 1;
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 58);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    $p51 := $p21;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    $p20 := $p51;
    goto $bb7;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    $p57 := $p21;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $p20 := $p57;
    goto $bb7;

  $bb18:
    assume $i56 == 1;
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} msleep(100);
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_147 := $M.6;
    call {:si_unique_call 1555} cmdloc_dummy_var_148 := $memset.i8(cmdloc_dummy_var_147, $p22, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_148;
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p23, 0);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.6, $p25);
    goto corral_source_split_13978;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p27 := osst_do_scsi($p21, $p0, $p24, 0, 3, $i26, 0, 1);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.6, $p15);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.6, $p29);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    $p32 := $p27;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    $p20 := $p32;
    goto $bb7;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $p21 := $p27;
    goto $bb10_dummy;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 16);
    goto $bb3;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_13963;
}



const osst_log_options: ref;

axiom osst_log_options == $sub.ref(0, 404546);

procedure osst_log_options($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation osst_log_options($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14042;

  corral_source_split_14042:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(536, 1));
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(3, 1));
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.6, $p5);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(2, 1));
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.6, $p8);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_14050;

  corral_source_split_14050:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.6, $p11);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} vslice_dummy_var_341 := printk.ref.ref.i32.i32.i32.i32(.str.150, $p2, $i4, $i7, $i10, $i13);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(290, 1));
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(292, 1));
    goto corral_source_split_14058;

  corral_source_split_14058:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(293, 1));
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.6, $p21);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(289, 1));
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.6, $p24);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_14066;

  corral_source_split_14066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_342 := printk.ref.ref.i32.i32.i32.i32(.str.151, $p2, $i17, $i20, $i23, $i26);
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(5, 1));
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(288, 1));
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(291, 1));
    goto corral_source_split_14074;

  corral_source_split_14074:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(295, 1));
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} vslice_dummy_var_343 := printk.ref.ref.i32.i32.i32.i32(.str.152, $p2, $i30, $i33, $i36, $i39);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(1, 1));
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_14082;

  corral_source_split_14082:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_344 := printk.ref.ref.i32(.str.153, $p2, $i43);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 405578);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1562} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1563} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 406610);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    return;
}



const osst_verify_position: ref;

axiom osst_verify_position == $sub.ref(0, 407642);

procedure osst_verify_position($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_verify_position($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i17: i32;
  var $i18: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i27: i32;
  var $i28: i32;
  var $i42: i32;
  var $i26: i32;
  var $i44: i32;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i54: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i19: i32;
  var vslice_dummy_var_345: i32;
  var vslice_dummy_var_346: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.6, $p2);
    call {:si_unique_call 1564} {:cexpr "frame_position"} boogie_si_record_i32($i3);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.6, $p4);
    call {:si_unique_call 1565} {:cexpr "frame_seq_numbr"} boogie_si_record_i32($i5);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.6, $p6);
    call {:si_unique_call 1566} {:cexpr "logical_blk_num"} boogie_si_record_i32($i7);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_14098;

  corral_source_split_14098:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.6, $p8);
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 1567} {:cexpr "halfway_frame"} boogie_si_record_i32($i10);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.6, $p11);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.6, $p13);
    call {:si_unique_call 1568} {:cexpr "read_pointer"} boogie_si_record_i32($i14);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} vslice_dummy_var_345 := osst_set_frame_position($p0, $p1, $i15, 0);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_14106;

  corral_source_split_14106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} $i17 := osst_get_logical_frame($p0, $p1, $sub.i32(0, 1), 0);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    call {:si_unique_call 1571} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(720, 1));
    goto corral_source_split_14114;

  corral_source_split_14114:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.6, $p20);
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, 3);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i3, $sub.i32(0, 1));
    call {:si_unique_call 1572} {:cexpr "prev_mark_ppos"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    $i43 := $i44;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_14146;

  corral_source_split_14146:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.6, $p45);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.6, $p47);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.6, $p49);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_14154;

  corral_source_split_14154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.6, $p55);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_14162;

  corral_source_split_14162:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.6, $p57);
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.6, $p59);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} $i61 := __fswab32($i60);
    call {:si_unique_call 1578} {:cexpr "tmp___1"} boogie_si_record_i32($i61);
    assume {:verifier.code 0} true;
    $i54 := $i61;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.6, $p62);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i3, $i63);
    goto corral_source_split_14170;

  corral_source_split_14170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i64 == 1);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.6, $p65);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i10, 0);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i66, $i68);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, $i5);
    goto corral_source_split_14178;

  corral_source_split_14178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i70 == 1);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i43, $i54);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i10, 0);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i8($i10);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, $i85);
    goto corral_source_split_14202;

  corral_source_split_14202:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p87, $i5);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p88, $i7);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb30:
    assume $i72 == 1;
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_14186;

  corral_source_split_14186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_346 := osst_set_frame_position($p0, $p1, $i73, 0);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.6, $p75);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p77, $i14);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.6, $p78);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_14194;

  corral_source_split_14194:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i80, 16)), $mul.ref(0, 1));
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p83, 2);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p84, 1);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i71 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb3;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb23;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i3, $sub.i32(0, 1));
    call {:si_unique_call 1576} {:cexpr "actual_mark_ppos"} boogie_si_record_i32($i53);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i54 := $i53;
    goto $bb21;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(736, 1));
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.6, $p23);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, 0);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 1);
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i43 := $i26;
    goto $bb18;

  $bb7:
    assume $i25 == 1;
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $i27, $i28 := 0, $sub.i32(0, 1);
    goto $bb10;

  $bb10:
    call $i29, $p30, $p31, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i27, $i28, $i42 := osst_verify_position_loop_$bb10($p0, $i3, $p23, $i29, $p30, $p31, $p34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i27, $i28, $i42);
    goto $bb10_last;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i27);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_14130;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.6, $p30);
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($add.ref($p31, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref($i29, 4));
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.6, $p34);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} $i36 := __fswab32($i35);
    call {:si_unique_call 1574} {:cexpr "tmp___0"} boogie_si_record_i32($i36);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, $i3);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i28;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i27, 1);
    call {:si_unique_call 1575} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.6, $p23);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $i41 := $sgt.i32($i40, $i39);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $i42 := $i38;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i26 := $i42;
    goto $bb9;

  $bb15:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i27, $i28 := $i39, $i38;
    goto $bb15_dummy;

  $bb12:
    assume $i37 == 1;
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb14;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 5);
    goto $bb3;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14127;
}



const append_to_buffer: ref;

axiom append_to_buffer == $sub.ref(0, 408674);

procedure append_to_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation append_to_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i13: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i11: i32;
  var $i12: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i23: i32;
  var $i24: i32;
  var $i9: i32;
  var $i10: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i48: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i86: i1;
  var $i87: i32;
  var $i85: i32;
  var $i43: i32;
  var $i88: i1;
  var $i38: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} {:cexpr "append_to_buffer:arg:do_count"} boogie_si_record_i32($i2);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    call {:si_unique_call 1581} {:cexpr "offset"} boogie_si_record_i32($i4);
    goto corral_source_split_14210;

  corral_source_split_14210:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.6, $p5);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, $i4;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.6, $p33);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, $i9);
    goto corral_source_split_14242;

  corral_source_split_14242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.6, $p39);
    goto corral_source_split_14250;

  corral_source_split_14250:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i9);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $i43 := $i2;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i43, 0);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb31:
    assume $i88 == 1;
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_348 := printk.ref.i32(.str.101, $i43);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 5);
    goto $bb13;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $p44, $i45, $i46, $i47 := $p0, $i10, $i2, $i9;
    goto $bb18;

  $bb18:
    call $i48, $p51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p44, $i45, $i46, $i47, $i86, $i87, $i85 := append_to_buffer_loop_$bb18($p1, $p39, $i48, $p51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i83, $i84, $p44, $i45, $i46, $i47, $i86, $i87, $i85);
    goto $bb18_last;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i86 := $sgt.i32($i46, 0);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    $i87 := $i46;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14306;

  corral_source_split_14306:
    assume {:verifier.code 0} true;
    $i43 := $i87;
    goto $bb17;

  $bb28:
    assume $i86 == 1;
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i48, 40)), $mul.ref(20, 1));
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, $i45);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32($i53, $i46);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    $i61 := $i46;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_14274;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i47);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 40));
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} $p66 := sg_page($p65);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $p67 := lowmem_page_address($p66);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i45);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 1));
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i61);
    goto corral_source_split_14282;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} $i71 := copy_from_user($p69, $p44, $i70);
    call {:si_unique_call 1588} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    call {:si_unique_call 1589} {:cexpr "res"} boogie_si_record_i32($i72);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i46, $i61);
    call {:si_unique_call 1590} {:cexpr "do_count"} boogie_si_record_i32($i74);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14290;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.6, $p75);
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, $i61);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p78, $i77);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i79 := $sext.i32.i64($i61);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p44, $mul.ref($i79, 1));
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i47, 1);
    call {:si_unique_call 1591} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.6, $p39);
    goto corral_source_split_14298;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $i84 := $sgt.i32($i83, $i81);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i85 := $i74;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    $i43 := $i85;
    goto $bb17;

  $bb26:
    assume $i84 == 1;
    assume {:verifier.code 0} true;
    $p44, $i45, $i46, $i47 := $p80, 0, $i74, $i81;
    goto $bb26_dummy;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 14);
    goto $bb13;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i47);
    goto corral_source_split_14266;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i55, 40)), $mul.ref(20, 1));
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, $i45);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb22;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_347 := printk.ref(.str.100);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 5);
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i4, 0;
    goto $bb4;

  $bb4:
    call $i13, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i11, $i12, $i25, $p28, $i29, $i30, $i31, $i32, $i23, $i24 := append_to_buffer_loop_$bb4($p1, $p5, $i13, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i11, $i12, $i25, $p28, $i29, $i30, $i31, $i32, $i23, $i24);
    goto $bb4_last;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i12);
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i25, 40)), $mul.ref(20, 1));
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $i30 := $uge.i32($i11, $i29);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i12, $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i31, $i32;
    goto $bb3;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_14226;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i11, $i17);
    call {:si_unique_call 1582} {:cexpr "offset"} boogie_si_record_i32($i18);
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i12, 1);
    call {:si_unique_call 1583} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.6, $p5);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i19);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i19, $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i23, $i24;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12 := $i18, $i19;
    goto $bb6_dummy;

  $bb26_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14256;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14218;
}



const osst_write_frame: ref;

axiom osst_write_frame == $sub.ref(0, 409706);

procedure osst_write_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_write_frame($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i13: i32;
  var cmdloc_dummy_var_149: [ref]i8;
  var cmdloc_dummy_var_150: [ref]i8;
  var vslice_dummy_var_349: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1594} {:cexpr "osst_write_frame:arg:synchronous"} boogie_si_record_i32($i2);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_14314;

  corral_source_split_14314:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.6, $p4);
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(669, 1));
    goto corral_source_split_14338;

  corral_source_split_14338:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.6, $p17);
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(540, 1));
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.6, $p27);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i28);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(552, 1)), $mul.ref($i29, 16)), $mul.ref(0, 1));
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 2);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p33, 0);
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p3);
    goto corral_source_split_14362;

  corral_source_split_14362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_149 := $M.6;
    call {:si_unique_call 1604} cmdloc_dummy_var_150 := $memset.i8(cmdloc_dummy_var_149, $p34, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := cmdloc_dummy_var_150;
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 10);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 1);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p37, 1);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14370;

  corral_source_split_14370:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.6, $p38);
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.6, $p40);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.6, $p42);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    $i44 := $sdiv.i32($i41, $i43);
    call {:si_unique_call 1605} {:cexpr "blks"} boogie_si_record_i32($i44);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.6, $p45);
    call {:si_unique_call 1606} {:cexpr "tmp___3"} boogie_si_record_i32($i46);
    goto corral_source_split_14378;

  corral_source_split_14378:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.6, $p47);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p50, $i49);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, $i44);
    goto corral_source_split_14386;

  corral_source_split_14386:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.6, $p54);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} osst_init_aux($p0, 128, $i46, $i53, $i55, $i44);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.24, $p1);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p3);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p60 := osst_do_scsi($p56, $p0, $p57, 33280, 1, $i59, 0, $i2);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_14394;

  corral_source_split_14394:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i61, 0);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $M.24 := $store.ref($M.24, $p1, $p60);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i2, 0);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.6, $p93);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i94, 1);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(652, 1));
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p96, $i95);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_14330;

  corral_source_split_14330:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.6, $p64);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.6, $p66);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14418;

  corral_source_split_14418:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.6, $p89);
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 1);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p92, $i91);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_14410;

  corral_source_split_14410:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.6, $p70);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 112);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 112);
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i87 := osst_write_error_recovery($p0, $p1, 1);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    call {:si_unique_call 1610} {:cexpr "tmp___4"} boogie_si_record_i32($i87);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb39:
    assume $i88 == 1;
    goto corral_source_split_14442;

  corral_source_split_14442:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb8;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i74 == 1;
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.6, $p76);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_14426;

  corral_source_split_14426:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 64);
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb32;

  $bb33:
    assume $i80 == 1;
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p60, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_14434;

  corral_source_split_14434:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.6, $p82);
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 15);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 13);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i86 == 1;
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 28);
    goto $bb8;

  $bb23:
    assume $i62 == 1;
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb8;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.6, $p21);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $i23 := osst_wait_frame($p0, $p1, $i22, $sub.i32(0, 48), 120);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    call {:si_unique_call 1601} {:cexpr "tmp___2"} boogie_si_record_i32($i23);
    goto corral_source_split_14346;

  corral_source_split_14346:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $i25 := osst_recover_wait_frame($p0, $p1, 1);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    call {:si_unique_call 1603} {:cexpr "tmp___1"} boogie_si_record_i32($i25);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i26 == 1;
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb8;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.6, $p8);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 2990);
    goto corral_source_split_14322;

  corral_source_split_14322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} $i11 := osst_flush_drive_buffer($p0, $p1);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    call {:si_unique_call 1596} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} $i14 := osst_get_frame_position($p0, $p1);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    call {:si_unique_call 1598} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 2999);
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_349 := osst_position_tape_and_confirm($p0, $p1, 3000);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 5);
    goto $bb8;

  SeqInstr_760:
    assume !assertsPassed;
    return;
}



const from_buffer: ref;

axiom from_buffer == $sub.ref(0, 410738);

procedure from_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6;



implementation from_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $i13: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i1;
  var $i11: i32;
  var $i12: i32;
  var $i25: i64;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i23: i32;
  var $i24: i32;
  var $i9: i32;
  var $i10: i32;
  var $p33: ref;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i1;
  var $i48: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i64;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $i83: i64;
  var $p84: ref;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i90: i1;
  var $i91: i32;
  var $i89: i32;
  var $i43: i32;
  var $i92: i1;
  var $i38: i32;
  var vslice_dummy_var_350: i32;
  var vslice_dummy_var_351: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} {:cexpr "from_buffer:arg:do_count"} boogie_si_record_i32($i2);
    goto corral_source_split_14450;

  corral_source_split_14450:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.6, $p3);
    call {:si_unique_call 1612} {:cexpr "offset"} boogie_si_record_i32($i4);
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.6, $p5);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 0);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, $i4;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    $i34 := $load.i16($M.6, $p33);
    goto corral_source_split_14482;

  corral_source_split_14482:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i34);
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, $i9);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.6, $p39);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i9);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $i43 := $i2;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i43, 0);
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb31:
    assume $i92 == 1;
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} vslice_dummy_var_351 := printk.ref.i32(.str.105, $i43);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 5);
    goto $bb13;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $i44, $p45, $i46, $i47 := $i10, $p1, $i2, $i9;
    goto $bb18;

  $bb18:
    call $i48, $p51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $i83, $p84, $i85, $i86, $i87, $i88, $i44, $p45, $i46, $i47, $i90, $i91, $i89 := from_buffer_loop_$bb18($p0, $p39, $i48, $p51, $i52, $i53, $i54, $i55, $p58, $i59, $i60, $i61, $p62, $p63, $i64, $p65, $p66, $p67, $i68, $p69, $i70, $i71, $i72, $i73, $i74, $p75, $i76, $i77, $p78, $p79, $i80, $i81, $p82, $i83, $p84, $i85, $i86, $i87, $i88, $i44, $p45, $i46, $i47, $i90, $i91, $i89);
    goto $bb18_last;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i46, 0);
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $i91 := $i46;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    $i43 := $i91;
    goto $bb17;

  $bb28:
    assume $i90 == 1;
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i48, 40)), $mul.ref(20, 1));
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.6, $p51);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    $i53 := $sub.i32($i52, $i44);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32($i53, $i46);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i54 == 1);
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    $i61 := $i46;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i47);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p63, $mul.ref($i64, 40));
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $p66 := sg_page($p65);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $p67 := lowmem_page_address($p66);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i44);
    goto corral_source_split_14522;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p67, $mul.ref($i68, 1));
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i61);
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} $i71 := copy_to_user($p45, $p69, $i70);
    call {:si_unique_call 1619} {:cexpr "tmp___1"} boogie_si_record_i64($i71);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i64.i32($i71);
    call {:si_unique_call 1620} {:cexpr "res"} boogie_si_record_i32($i72);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i46, $i61);
    call {:si_unique_call 1621} {:cexpr "do_count"} boogie_si_record_i32($i74);
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.6, $p75);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i76, $i61);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p78, $i77);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.6, $p79);
    goto corral_source_split_14538;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, $i61);
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, $p82, $i81);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i61);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($p45, $mul.ref($i83, 1));
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i47, 1);
    call {:si_unique_call 1622} {:cexpr "i"} boogie_si_record_i32($i85);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.6, $p39);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_14546;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    $i88 := $sgt.i32($i87, $i85);
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i89 := $i74;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i43 := $i89;
    goto $bb17;

  $bb26:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i44, $p45, $i46, $i47 := 0, $p84, $i74, $i85;
    goto $bb26_dummy;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 14);
    goto $bb13;

  $bb20:
    assume $i54 == 1;
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i47);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i55, 40)), $mul.ref(20, 1));
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.6, $p58);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, $i44);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    $i61 := $i60;
    goto $bb22;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_350 := printk.ref(.str.104);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 5);
    goto $bb13;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_14458;

  corral_source_split_14458:
    assume {:verifier.code 0} true;
    $i11, $i12 := $i4, 0;
    goto $bb4;

  $bb4:
    call $i13, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i11, $i12, $i25, $p28, $i29, $i30, $i31, $i32, $i23, $i24 := from_buffer_loop_$bb4($p0, $p5, $i13, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i11, $i12, $i25, $p28, $i29, $i30, $i31, $i32, $i23, $i24);
    goto $bb4_last;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i12);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i25, 40)), $mul.ref(20, 1));
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.6, $p28);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    $i30 := $uge.i32($i11, $i29);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i12, $i11;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i31, $i32;
    goto $bb3;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_14466;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.6, $p16);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i11, $i17);
    call {:si_unique_call 1613} {:cexpr "offset"} boogie_si_record_i32($i18);
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i12, 1);
    call {:si_unique_call 1614} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.6, $p5);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i21, $i19);
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i19, $i18;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $i9, $i10 := $i23, $i24;
    goto $bb3;

  $bb6:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i11, $i12 := $i18, $i19;
    goto $bb6_dummy;

  $bb26_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14498;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14460;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 411770);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 1624} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 412802);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} $p1 := calloc(1, $i0);
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_14562;

  corral_source_split_14562:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1627} __VERIFIER_assume($i4);
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 413834);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.42;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_151: [ref]i8;
  var cmdloc_dummy_var_152: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1629} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_151 := $M.42;
    call {:si_unique_call 1630} cmdloc_dummy_var_152 := $memset.i8(cmdloc_dummy_var_151, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.42 := cmdloc_dummy_var_152;
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_scsi_driver_9: ref;

axiom ldv_initialize_scsi_driver_9 == $sub.ref(0, 414866);

procedure ldv_initialize_scsi_driver_9();
  free requires assertsPassed;
  modifies $M.43, $M.6, $CurrAddr;



implementation ldv_initialize_scsi_driver_9()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} $p0 := ldv_init_zalloc(1416);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $M.43 := $p0;
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_8: ref;

axiom ldv_file_operations_8 == $sub.ref(0, 415898);

procedure ldv_file_operations_8();
  free requires assertsPassed;
  modifies $M.44, $M.45, $M.6, $CurrAddr;



implementation ldv_file_operations_8()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    goto corral_source_split_14578;

  corral_source_split_14578:
    assume {:verifier.code 0} true;
    $M.44 := $p0;
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $M.45 := $p2;
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 416930);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.42, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.12, $M.6, $M.14, $M.57, $M.24, $M.58, $M.59, $M.43, $M.65, $M.63, $M.62, $M.61, $M.60, $M.94, $M.41, $M.17, $M.16, $M.15, $M.13, $M.95, $M.23, $M.45, $M.44, $M.22, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.26, $M.25, $M.39, $M.38, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i64;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i64;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i149: i64;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $i165: i32;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i32;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $i190: i32;
  var $i191: i64;
  var $i193: i32;
  var $i194: i1;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i1;
  var $i200: i32;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i1;
  var $i211: i1;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $i219: i32;
  var $i220: i32;
  var $i221: i1;
  var $i222: i32;
  var $i223: i1;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i32;
  var $i229: i1;
  var vslice_dummy_var_352: ref;
  var vslice_dummy_var_353: ref;
  var vslice_dummy_var_354: ref;
  var vslice_dummy_var_355: ref;
  var vslice_dummy_var_356: ref;
  var vslice_dummy_var_357: ref;
  var vslice_dummy_var_358: ref;
  var vslice_dummy_var_359: ref;
  var vslice_dummy_var_360: i64;
  var vslice_dummy_var_361: i64;
  var vslice_dummy_var_362: i64;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i64;
  var vslice_dummy_var_365: i64;
  var vslice_dummy_var_366: i64;
  var vslice_dummy_var_367: i64;
  var vslice_dummy_var_368: i32;
  var vslice_dummy_var_369: i32;
  var vslice_dummy_var_370: i64;
  var vslice_dummy_var_371: i32;
  var vslice_dummy_var_372: i64;
  var vslice_dummy_var_373: i64;
  var vslice_dummy_var_374: i64;
  var vslice_dummy_var_375: i64;
  var vslice_dummy_var_376: i64;

  $bb0:
    call {:si_unique_call 1634} $initialize();
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_14586;

  corral_source_split_14586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1645} $p9 := ldv_init_zalloc(1416);
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $p11 := ldv_init_zalloc(48);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $p13 := ldv_init_zalloc(1);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $p14 := ldv_init_zalloc(1416);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $p16 := ldv_init_zalloc(48);
    goto corral_source_split_14594;

  corral_source_split_14594:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} $p19 := ldv_init_zalloc(120);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} $p21 := ldv_init_zalloc(1416);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} $p23 := ldv_init_zalloc(48);
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_14602;

  corral_source_split_14602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p26 := ldv_init_zalloc(8);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p30 := ldv_init_zalloc(8);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p32 := ldv_init_zalloc(1);
    goto corral_source_split_14610;

  corral_source_split_14610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $p33 := ldv_init_zalloc(1416);
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1661} $p35 := ldv_init_zalloc(48);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} $p37 := ldv_init_zalloc(1);
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $p38 := ldv_init_zalloc(1416);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} $p40 := ldv_init_zalloc(48);
    goto corral_source_split_14618;

  corral_source_split_14618:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $p42 := ldv_init_zalloc(1);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} $p43 := ldv_init_zalloc(48);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} $p45 := ldv_init_zalloc(1);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p46 := ldv_init_zalloc(1416);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} ldv_initialize();
    goto corral_source_split_14626;

  corral_source_split_14626:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_352 := ldv_memset($p48, 0, 8);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p1);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} vslice_dummy_var_353 := ldv_memset($p50, 0, 4);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_354 := ldv_memset($p52, 0, 4);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} vslice_dummy_var_355 := ldv_memset($p54, 0, 8);
    goto corral_source_split_14634;

  corral_source_split_14634:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_356 := ldv_memset($p56, 0, 8);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p5);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} vslice_dummy_var_357 := ldv_memset($p58, 0, 4);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p6);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_358 := ldv_memset($p60, 0, 8);
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p7);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} vslice_dummy_var_359 := ldv_memset($p62, 0, 8);
    goto corral_source_split_14642;

  corral_source_split_14642:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $M.48 := 0;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    $M.53 := 0;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_14650;

  corral_source_split_14650:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1686} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $M.56 := 0;
    call {:si_unique_call 1688} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i94, $i95, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i149, $i151, $i152, $p153, $i155, $i156, $p157, $i159, $i160, $p161, $i162, $i163, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $p177, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i193, $i194, $i195, $i196, $i197, $i198, $i200, $i201, $i202, $i203, $i204, $i205, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, vslice_dummy_var_360, vslice_dummy_var_361, vslice_dummy_var_362, vslice_dummy_var_363, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366, vslice_dummy_var_367, vslice_dummy_var_368, vslice_dummy_var_369, vslice_dummy_var_370, vslice_dummy_var_371, vslice_dummy_var_372, vslice_dummy_var_373, vslice_dummy_var_374, vslice_dummy_var_375, vslice_dummy_var_376 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p10, $p12, $p13, $p15, $p17, $p18, $p20, $p22, $p24, $p25, $p27, $p28, $p29, $p31, $p32, $p34, $p36, $p37, $p39, $p41, $p42, $p44, $p45, $p47, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i94, $i95, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $p138, $i139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i149, $i151, $i152, $p153, $i155, $i156, $p157, $i159, $i160, $p161, $i162, $i163, $i165, $i166, $p167, $p168, $i169, $i170, $i171, $i172, $i173, $i174, $i175, $p176, $p177, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $i187, $i188, $p189, $i190, $i191, $i193, $i194, $i195, $i196, $i197, $i198, $i200, $i201, $i202, $i203, $i204, $i205, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $i227, $i228, $i229, vslice_dummy_var_360, vslice_dummy_var_361, vslice_dummy_var_362, vslice_dummy_var_363, vslice_dummy_var_364, vslice_dummy_var_365, vslice_dummy_var_366, vslice_dummy_var_367, vslice_dummy_var_368, vslice_dummy_var_369, vslice_dummy_var_370, vslice_dummy_var_371, vslice_dummy_var_372, vslice_dummy_var_373, vslice_dummy_var_374, vslice_dummy_var_375, vslice_dummy_var_376);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i64, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i64, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i64, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} ldv_stop();
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb11:
    assume $i69 == 1;
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    $i224 := $M.56;
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb211:
    assume $i225 == 1;
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} $i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1787} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i226);
    call {:si_unique_call 1788} {:cexpr "tmp___34"} boogie_si_record_i32($i226);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_stop();
    goto corral_source_split_14970;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb214:
    assume $i227 == 1;
    goto corral_source_split_14962;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    $i228 := $M.56;
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 1);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb216:
    assume $i229 == 1;
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} vslice_dummy_var_376 := osst_linux_media_version_show($p47, $p44, $p45);
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb9:
    assume $i68 == 1;
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $i207 := $M.55;
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb181:
    assume $i208 == 1;
    goto corral_source_split_14914;

  corral_source_split_14914:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1766} $i209 := __VERIFIER_nondet_int();
    call {:si_unique_call 1767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i209);
    call {:si_unique_call 1768} {:cexpr "tmp___33"} boogie_si_record_i32($i209);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i210 := $slt.i32($i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ldv_stop();
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb186:
    assume $i211 == 1;
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $i217 := $M.55;
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb199:
    assume $i218 == 1;
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} $i219 := init_osst();
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $M.59 := $i219;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i219);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $i220 := $M.59;
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    $i221 := $ne.i32($i220, 0);
    goto corral_source_split_14938;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i222 := $M.59;
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 0);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb204:
    assume $i223 == 1;
    goto corral_source_split_14946;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} ldv_initialize_scsi_driver_9();
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14954;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i221 == 1;
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1774} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} ldv_check_final_state();
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb184:
    assume $i210 == 1;
    assume {:verifier.code 0} true;
    $i212 := $eq.i32($i209, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i212 == 1);
    goto $bb188;

  $bb189:
    assume $i212 == 1;
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $i213 := $M.55;
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 2);
    goto corral_source_split_14922;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb191:
    assume $i214 == 1;
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $i215 := $M.54;
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i215, 0);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb193;

  $bb194:
    assume $i216 == 1;
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} exit_osst();
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1770} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_14930;

  corral_source_split_14930:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb7:
    assume $i67 == 1;
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    $i200 := $M.53;
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb169:
    assume $i201 == 1;
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1760} $i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 1761} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i202);
    call {:si_unique_call 1762} {:cexpr "tmp___32"} boogie_si_record_i32($i202);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_stop();
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb172:
    assume $i203 == 1;
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i204 := $M.53;
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_14906;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb174:
    assume $i205 == 1;
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} vslice_dummy_var_375 := osst_capacity_show($p39, $p41, $p42);
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb5:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i64, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i70 == 1);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    $i193 := $M.52;
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb157:
    assume $i194 == 1;
    goto corral_source_split_14890;

  corral_source_split_14890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1754} $i195 := __VERIFIER_nondet_int();
    call {:si_unique_call 1755} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i195);
    call {:si_unique_call 1756} {:cexpr "tmp___31"} boogie_si_record_i32($i195);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_stop();
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb160:
    assume $i196 == 1;
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $i197 := $M.52;
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 1);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb162:
    assume $i198 == 1;
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} vslice_dummy_var_374 := osst_filemark_cnt_show($p34, $p36, $p37);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14898;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb14:
    assume $i70 == 1;
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $i124 := $M.51;
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $i125 := $ne.i32($i124, 0);
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb98:
    assume $i125 == 1;
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} $i126 := __VERIFIER_nondet_int();
    call {:si_unique_call 1728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i126);
    call {:si_unique_call 1729} {:cexpr "tmp___30"} boogie_si_record_i32($i126);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i126, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_stop();
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb107:
    assume $i130 == 1;
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $i187 := $M.51;
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 2);
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb151:
    assume $i188 == 1;
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    $p189 := $M.45;
    goto corral_source_split_14882;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    $i190 := $load.i32($M.42, $p1);
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i191 := $load.i64($M.42, $p0);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} vslice_dummy_var_373 := osst_ioctl($p189, $i190, $i191);
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    goto $bb153;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb105:
    assume $i129 == 1;
    goto corral_source_split_14778;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    $i181 := $M.51;
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 2);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb148:
    assume $i182 == 1;
    goto corral_source_split_14874;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    $p183 := $M.45;
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $i184 := $load.i64($M.42, $p4);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.42, $p5);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} vslice_dummy_var_372 := noop_llseek($p183, $i184, $i185);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb103:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i126, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i131 == 1);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $i174 := $M.51;
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 2);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb145:
    assume $i175 == 1;
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    $p176 := $M.44;
    goto corral_source_split_14866;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    $p177 := $M.45;
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} vslice_dummy_var_371 := os_scsi_tape_close($p176, $p177);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i179 := $M.54;
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $i180 := $sub.i32($i179, 1);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $M.54 := $i180;
    call {:si_unique_call 1748} {:cexpr "ref_cnt"} boogie_si_record_i32($i180);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb110:
    assume $i131 == 1;
    goto corral_source_split_14786;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    $i165 := $M.51;
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $i166 := $eq.i32($i165, 1);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb139:
    assume $i166 == 1;
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    $p167 := $M.44;
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $p168 := $M.45;
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} $i169 := os_scsi_tape_open($p167, $p168);
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $M.58 := $i169;
    call {:si_unique_call 1743} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i169);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    $i170 := $M.58;
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 0);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb141:
    assume $i171 == 1;
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    $i172 := $M.54;
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i172, 1);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $M.54 := $i173;
    call {:si_unique_call 1745} {:cexpr "ref_cnt"} boogie_si_record_i32($i173);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    goto $bb143;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i126, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i133 == 1);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $i159 := $M.51;
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 2);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb136:
    assume $i160 == 1;
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $p161 := $M.45;
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.42, $p2);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $i163 := $load.i64($M.42, $p3);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} vslice_dummy_var_370 := osst_compat_ioctl($p161, $i162, $i163);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb114:
    assume $i133 == 1;
    goto corral_source_split_14794;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    $i151 := $M.51;
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i155 := $M.51;
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i155, 2);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb133:
    assume $i156 == 1;
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    $p157 := $M.45;
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} vslice_dummy_var_369 := os_scsi_tape_flush($p157, $p32);
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14842;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    goto $bb135;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i152 == 1;
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    $p153 := $M.45;
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} vslice_dummy_var_368 := os_scsi_tape_flush($p153, $p32);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14834;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i132 == 1;
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i126, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i134 == 1);
    goto corral_source_split_14802;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    $i146 := $M.51;
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 2);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb127:
    assume $i147 == 1;
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    $p148 := $M.45;
    goto corral_source_split_14826;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    $i149 := $load.i64($M.42, $p7);
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} vslice_dummy_var_367 := osst_read($p148, $p28, $i149, $p27);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i126, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i135 == 1);
    goto $bb109;

  $bb118:
    assume $i135 == 1;
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i136 := $M.51;
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 1);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i141 := $M.51;
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb123:
    assume $i142 == 1;
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    $p143 := $M.45;
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    $i144 := $load.i64($M.42, $p6);
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} vslice_dummy_var_366 := osst_write($p143, $p29, $i144, $p31);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i137 == 1;
    goto corral_source_split_14810;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    $p138 := $M.45;
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $i139 := $load.i64($M.42, $p6);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} vslice_dummy_var_365 := osst_write($p138, $p29, $i139, $p31);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i73 == 1);
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $i117 := $M.50;
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb86:
    assume $i118 == 1;
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1721} $i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 1722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i119);
    call {:si_unique_call 1723} {:cexpr "tmp___29"} boogie_si_record_i32($i119);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ldv_stop();
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb89:
    assume $i120 == 1;
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $i121 := $M.50;
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 1);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb91:
    assume $i122 == 1;
    goto corral_source_split_14770;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} vslice_dummy_var_364 := osst_eod_frame_ppos_show($p22, $p24, $p25);
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb20:
    assume $i73 == 1;
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    $i97 := $M.49;
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb63:
    assume $i98 == 1;
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} $i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i99);
    call {:si_unique_call 1712} {:cexpr "tmp___28"} boogie_si_record_i32($i99);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} ldv_stop();
    goto corral_source_split_14762;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb68:
    assume $i101 == 1;
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $i111 := $M.49;
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 2);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb80:
    assume $i112 == 1;
    goto corral_source_split_14754;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    $p113 := $M.43;
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} vslice_dummy_var_363 := osst_remove($p113);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i115 := $M.54;
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i115, 1);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $M.54 := $i116;
    call {:si_unique_call 1719} {:cexpr "ref_cnt"} boogie_si_record_i32($i116);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb66:
    assume $i100 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb70;

  $bb71:
    assume $i102 == 1;
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    $i103 := $M.49;
    goto corral_source_split_14738;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb73:
    assume $i104 == 1;
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $p105 := $M.43;
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} $i106 := osst_probe($p105);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    $M.57 := $i106;
    call {:si_unique_call 1714} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i106);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $i107 := $M.57;
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_14746;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb75:
    assume $i108 == 1;
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $i109 := $M.54;
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 1);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $M.54 := $i110;
    call {:si_unique_call 1716} {:cexpr "ref_cnt"} boogie_si_record_i32($i110);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    goto $bb77;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i72 == 1;
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $i90 := $M.48;
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb51:
    assume $i91 == 1;
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} $i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1705} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i92);
    call {:si_unique_call 1706} {:cexpr "tmp___27"} boogie_si_record_i32($i92);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_stop();
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb54:
    assume $i93 == 1;
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    $i94 := $M.48;
    goto corral_source_split_14722;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb56:
    assume $i95 == 1;
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} vslice_dummy_var_362 := osst_version_show($p20, $p18);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb16:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i74 == 1);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    $i83 := $M.47;
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb39:
    assume $i84 == 1;
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} $i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i85);
    call {:si_unique_call 1700} {:cexpr "tmp___26"} boogie_si_record_i32($i85);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_stop();
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb42:
    assume $i86 == 1;
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $i87 := $M.47;
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb44:
    assume $i88 == 1;
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} vslice_dummy_var_361 := osst_first_data_ppos_show($p15, $p17, $p13);
    goto corral_source_split_14714;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb22:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb13;

  $bb24:
    assume $i75 == 1;
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $i76 := $M.46;
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i78);
    call {:si_unique_call 1694} {:cexpr "tmp___25"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_stop();
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    $i80 := $M.46;
    goto corral_source_split_14698;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    $i81 := $eq.i32($i80, 1);
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i81 == 1;
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} vslice_dummy_var_360 := osst_adr_rev_show($p10, $p12, $p8);
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb38_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} $i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i64);
    call {:si_unique_call 1691} {:cexpr "tmp___24"} boogie_si_record_i32($i64);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 417962);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 418994);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const exit_osst: ref;

axiom exit_osst == $sub.ref(0, 420026);

procedure exit_osst();
  free requires assertsPassed;
  modifies $M.6, $M.51;



implementation exit_osst()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i5: i32;
  var $p30: ref;
  var $p31: ref;
  var vslice_dummy_var_377: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_14978;

  corral_source_split_14978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} osst_remove_sysfs_files(osst_template);
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} driver_unregister(osst_template);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} ldv_unregister_chrdev_28(206, .str.28);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} osst_sysfs_cleanup();
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $p0 := $M.12;
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1804} vslice_dummy_var_377 := printk.ref(.str.160);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $i3 := $M.13;
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p30 := $M.12;
    goto corral_source_split_15034;

  corral_source_split_15034:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} kfree($p31);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb6:
    call $p6, $i7, $p8, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $i5 := exit_osst_loop_$bb6($p6, $i7, $p8, $p9, $i10, $i11, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $i27, $i28, $i29, $i5);
    goto $bb6_last;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $M.12;
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i5);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 8));
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.6, $p8);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.6, $p12);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_15010;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vfree($p14);
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.6, $p15);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(792, 1));
    goto corral_source_split_15026;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.6, $p24);
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} put_disk($p25);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p9);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} kfree($p26);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i5, 1);
    call {:si_unique_call 1797} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $i28 := $M.13;
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb15:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i27;
    goto $bb15_dummy;

  $bb12:
    assume $i18 == 1;
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15018;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.6, $p19);
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} normalize_buffer($p20);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.6, $p21);
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} kfree($p23);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_15002;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb15_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_14993;
}



const init_osst: ref;

axiom init_osst == $sub.ref(0, 421058);

procedure init_osst() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.13, $M.16, $M.15, $M.17, $M.51, $M.44, $M.45, $M.6, $CurrAddr;



implementation init_osst() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i12: i32;
  var $i9: i32;
  var $i5: i32;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $p0 := $M.23;
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    $p1 := $M.60;
    goto corral_source_split_15042;

  corral_source_split_15042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} vslice_dummy_var_378 := printk.ref.ref.ref(.str.162, $p0, $p1);
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1806} validate_options();
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} $i3 := osst_sysfs_init();
    call {:si_unique_call 1808} {:cexpr "err"} boogie_si_record_i32($i3);
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} $i6 := ldv_register_chrdev_27(206, .str.28, osst_fops);
    call {:si_unique_call 1810} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} $i10 := scsi_register_driver(osst_template);
    call {:si_unique_call 1814} {:cexpr "err"} boogie_si_record_i32($i10);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1816} $i13 := osst_create_sysfs_files(osst_template);
    call {:si_unique_call 1817} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15050;

  corral_source_split_15050:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} driver_unregister(osst_template);
    goto corral_source_split_15074;

  corral_source_split_15074:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_15066;

  corral_source_split_15066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} ldv_unregister_chrdev_28(206, .str.28);
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_15058;

  corral_source_split_15058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} osst_sysfs_cleanup();
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb11;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} vslice_dummy_var_379 := printk.ref.i32(.str.163, 206);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $i5 := $i3;
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 422090);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    return;
}



const validate_options: ref;

axiom validate_options == $sub.ref(0, 423122);

procedure validate_options();
  free requires assertsPassed;
  modifies $M.13, $M.16, $M.15;



implementation validate_options()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $i0 := $M.61;
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    $i1 := $sgt.i32($i0, 0);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i3 := $M.62;
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $M.16;
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    $i8 := $M.41;
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i7, $i8);
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $M.63;
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i11, 7);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    $i13 := $M.63;
    goto corral_source_split_15106;

  corral_source_split_15106:
    assume {:verifier.code 0} true;
    $M.15 := $i13;
    call {:si_unique_call 1822} {:cexpr "osst_max_sg_segs"} boogie_si_record_i32($i13);
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_15098;

  corral_source_split_15098:
    assume {:verifier.code 0} true;
    $i10 := $M.41;
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $M.16 := $i10;
    call {:si_unique_call 1821} {:cexpr "osst_write_threshold"} boogie_si_record_i32($i10);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    $i5 := $M.62;
    goto corral_source_split_15090;

  corral_source_split_15090:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 1024);
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $M.16 := $i6;
    call {:si_unique_call 1820} {:cexpr "osst_write_threshold"} boogie_si_record_i32($i6);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15082;

  corral_source_split_15082:
    assume {:verifier.code 0} true;
    $i2 := $M.61;
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $M.13 := $i2;
    call {:si_unique_call 1819} {:cexpr "osst_max_dev"} boogie_si_record_i32($i2);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const osst_sysfs_init: ref;

axiom osst_sysfs_init == $sub.ref(0, 424154);

procedure osst_sysfs_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $CurrAddr;



implementation osst_sysfs_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var vslice_dummy_var_380: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1824} $p1 := __class_create(__this_module, .str.165, $p0);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $M.17 := $p1;
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    $p2 := $M.17;
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} $i4 := IS_ERR($p3);
    goto corral_source_split_15114;

  corral_source_split_15114:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1826} {:cexpr "tmp___1"} boogie_si_record_i8($i5);
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} vslice_dummy_var_380 := printk.ref(.str.166);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    $p8 := $M.17;
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} $i10 := PTR_ERR($p9);
    call {:si_unique_call 1829} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_15122;

  corral_source_split_15122:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const ldv_register_chrdev_27: ref;

axiom ldv_register_chrdev_27 == $sub.ref(0, 425186);

procedure ldv_register_chrdev_27($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.51, $M.44, $M.45, $M.6, $CurrAddr;



implementation ldv_register_chrdev_27($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} {:cexpr "ldv_register_chrdev_27:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i3 := register_chrdev($i0, $p1, $p2);
    call {:si_unique_call 1832} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1833} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} ldv_file_operations_8();
    goto corral_source_split_15130;

  corral_source_split_15130:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const scsi_register_driver: ref;

axiom scsi_register_driver == $sub.ref(0, 426218);

procedure scsi_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scsi_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1835} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1836} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const osst_create_sysfs_files: ref;

axiom osst_create_sysfs_files == $sub.ref(0, 427250);

procedure osst_create_sysfs_files($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation osst_create_sysfs_files($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} $i1 := driver_create_file($p0, driver_attr_version);
    call {:si_unique_call 1838} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const driver_unregister: ref;

axiom driver_unregister == $sub.ref(0, 428282);

procedure driver_unregister($p0: ref);
  free requires assertsPassed;



implementation driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15138;

  corral_source_split_15138:
    assume {:verifier.code 0} true;
    return;
}



const ldv_unregister_chrdev_28: ref;

axiom ldv_unregister_chrdev_28 == $sub.ref(0, 429314);

procedure ldv_unregister_chrdev_28($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.51;



implementation ldv_unregister_chrdev_28($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} {:cexpr "ldv_unregister_chrdev_28:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} unregister_chrdev($i0, $p1);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $M.51 := 0;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    return;
}



const osst_sysfs_cleanup: ref;

axiom osst_sysfs_cleanup == $sub.ref(0, 430346);

procedure osst_sysfs_cleanup();
  free requires assertsPassed;



implementation osst_sysfs_cleanup()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $p0 := $M.17;
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} class_destroy($p0);
    goto corral_source_split_15146;

  corral_source_split_15146:
    assume {:verifier.code 0} true;
    return;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0, 431378);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    return;
}



const unregister_chrdev: ref;

axiom unregister_chrdev == $sub.ref(0, 432410);

procedure unregister_chrdev($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation unregister_chrdev($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} {:cexpr "unregister_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} __unregister_chrdev($i0, 0, 256, $p1);
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    return;
}



const __unregister_chrdev: ref;

axiom __unregister_chrdev == $sub.ref(0, 433442);

procedure __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __unregister_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} {:cexpr "__unregister_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1846} {:cexpr "__unregister_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1847} {:cexpr "__unregister_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    return;
}



const driver_create_file: ref;

axiom driver_create_file == $sub.ref(0, 434474);

procedure driver_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation driver_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1848} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1849} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const register_chrdev: ref;

axiom register_chrdev == $sub.ref(0, 435506);

procedure register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev($i0: i32, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} {:cexpr "register_chrdev:arg:major"} boogie_si_record_i32($i0);
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1851} $i3 := __register_chrdev($i0, 0, 256, $p1, $p2);
    call {:si_unique_call 1852} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __register_chrdev: ref;

axiom __register_chrdev == $sub.ref(0, 436538);

procedure __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __register_chrdev($i0: i32, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1853} {:cexpr "__register_chrdev:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1854} {:cexpr "__register_chrdev:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1855} {:cexpr "__register_chrdev:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1856} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 1857} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_15162;

  corral_source_split_15162:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __class_create: ref;

axiom __class_create == $sub.ref(0, 437570);

procedure __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} $p3 := external_alloc();
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const osst_remove_sysfs_files: ref;

axiom osst_remove_sysfs_files == $sub.ref(0, 438602);

procedure osst_remove_sysfs_files($p0: ref);
  free requires assertsPassed;



implementation osst_remove_sysfs_files($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} driver_remove_file($p0, driver_attr_version);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    return;
}



const driver_remove_file: ref;

axiom driver_remove_file == $sub.ref(0, 439634);

procedure driver_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation driver_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 440666);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1860} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 1} true;
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 441698);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 442730);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 443762);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15178;

  corral_source_split_15178:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_805:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 444794);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 445826);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 446858);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 447890);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 448922);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 449954);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 450986);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 452018);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 453050);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 454082);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1861} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1862} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1863} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15186;

  corral_source_split_15186:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1864} __VERIFIER_assume($i4);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 455114);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 456146);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 457178);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 458210);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1865} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1866} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1867} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1868} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1869} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1870} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1871} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1872} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1873} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_15194;

  corral_source_split_15194:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15199;

  corral_source_split_15199:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1874} __VERIFIER_assume($i7);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_15202;

  corral_source_split_15202:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1875} __VERIFIER_assume($i11);
    goto corral_source_split_15210;

  corral_source_split_15210:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 459242);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 460274);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1876} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1877} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1878} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15218;

  corral_source_split_15218:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1879} __VERIFIER_assume($i4);
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 461306);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 462338);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 463370);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 464402);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 465434);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1880} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1881} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1882} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1883} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1884} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1885} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1886} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1887} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1888} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15226;

  corral_source_split_15226:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1889} __VERIFIER_assume($i7);
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15234;

  corral_source_split_15234:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1890} __VERIFIER_assume($i11);
    goto corral_source_split_15242;

  corral_source_split_15242:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 466466);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 467498);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 468530);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 469562);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 470594);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 471626);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 472658);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 473690);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 474722);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1891} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1892} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1893} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15250;

  corral_source_split_15250:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15258;

  corral_source_split_15258:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1894} __VERIFIER_assume($i10);
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 475754);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1895} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1896} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1897} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 476786);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1898} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1899} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1900} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15266;

  corral_source_split_15266:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 477818);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1901} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1902} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 478850);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 479882);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1903} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1904} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 480914);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 481946);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 482978);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_153: [ref]i8;
  var cmdloc_dummy_var_154: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1905} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1906} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15274;

  corral_source_split_15274:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1907} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1908} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1909} $p6 := malloc($i5);
    goto corral_source_split_15282;

  corral_source_split_15282:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_153 := $M.6;
    call {:si_unique_call 1910} cmdloc_dummy_var_154 := $memset.i8(cmdloc_dummy_var_153, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.6 := cmdloc_dummy_var_154;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 484010);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 485042);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.65, $M.63, $M.62, $M.61, $M.60, $M.94, $M.41, $M.6, $M.17, $M.16, $M.15, $M.14, $M.13, $M.12, $M.95, $M.23, $M.59, $M.58, $M.57, $M.43, $M.53, $M.48, $M.52, $M.45, $M.54, $M.50, $M.47, $M.44, $M.56, $M.49, $M.55, $M.46, $M.51, $M.22, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1911} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.65 := $store.ref($M.65, dev_attr_ADR_rev, .str);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_adr_rev_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_ADR_rev, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.63 := 0;
    call {:si_unique_call 1912} {:cexpr "max_sg_segs"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1913} {:cexpr "write_threshold_kbs"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1914} {:cexpr "max_dev"} boogie_si_record_i32(0);
    $M.60 := .str.164;
    $M.94 := $store.ref($M.94, driver_attr_version, .str.161);
    $M.94 := $store.i16($M.94, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.94 := $store.ref($M.94, $add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.i8($M.94, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_version_show);
    $M.94 := $store.ref($M.94, $add.ref($add.ref(driver_attr_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.41 := 32768;
    call {:si_unique_call 1915} {:cexpr "osst_buffer_size"} boogie_si_record_i32(32768);
    call {:si_unique_call 1916} {:cexpr "modes_defined"} boogie_si_record_i32(0);
    $M.6 := $store.i32($M.6, osst_int_mutex, 1);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.112);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(osst_int_mutex, $mul.ref(80, 1)));
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(osst_int_mutex, $mul.ref(80, 1)));
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(104, 1)), osst_int_mutex);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.113);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i64($M.6, $add.ref($add.ref($add.ref(osst_int_mutex, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.17 := $0.ref;
    $M.16 := 32768;
    call {:si_unique_call 1917} {:cexpr "osst_write_threshold"} boogie_si_record_i32(32768);
    $M.6 := $store.ref($M.6, osst_template, .str.28);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(16, 1)), __this_module);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.6 := $store.i8($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.6 := $store.i32($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(56, 1)), osst_probe);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(64, 1)), osst_remove);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(120, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(128, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(136, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(144, 1)), $0.ref);
    $M.6 := $store.ref($M.6, $add.ref($add.ref(osst_template, $mul.ref(0, 160)), $mul.ref(152, 1)), $0.ref);
    $M.15 := 9;
    call {:si_unique_call 1918} {:cexpr "osst_max_sg_segs"} boogie_si_record_i32(9);
    $M.14 := 0;
    call {:si_unique_call 1919} {:cexpr "osst_nr_dev"} boogie_si_record_i32(0);
    $M.13 := 4;
    call {:si_unique_call 1920} {:cexpr "osst_max_dev"} boogie_si_record_i32(4);
    $M.12 := $0.ref;
    $M.95 := $store.i32($M.95, os_scsi_tapes_lock, 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.95 := $store.i32($M.95, $add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(8, 1)), $sub.i32(0, 558948627));
    $M.95 := $store.i32($M.95, $add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.95 := $store.ref($M.95, $add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.95 := $store.ref($M.95, $add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.31);
    $M.95 := $store.i32($M.95, $add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.95 := $store.i64($M.95, $add.ref($add.ref($add.ref(os_scsi_tapes_lock, $mul.ref(0, 72)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.23 := .str.10;
    $M.59 := 0;
    call {:si_unique_call 1921} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1922} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1923} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1924} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1925} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1926} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.45 := $0.ref;
    $M.54 := 0;
    call {:si_unique_call 1927} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1928} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1929} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.44 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1930} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1931} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1932} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1934} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1935} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.65 := $store.ref($M.65, dev_attr_file_count, .str.5);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_filemark_cnt_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_file_count, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.65 := $store.ref($M.65, dev_attr_EOD_frame, .str.4);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_eod_frame_ppos_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_EOD_frame, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.65 := $store.ref($M.65, dev_attr_BOT_frame, .str.3);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_first_data_ppos_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_BOT_frame, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.65 := $store.ref($M.65, dev_attr_capacity, .str.2);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_capacity_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_capacity, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.65 := $store.ref($M.65, dev_attr_media_version, .str.1);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(32, 1)), osst_linux_media_version_show);
    $M.65 := $store.ref($M.65, $add.ref($add.ref(dev_attr_media_version, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.96 := $store.i8($M.96, .str.6, 37);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(1, 1)), 100);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(2, 1)), 46);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.96 := $store.i8($M.96, $add.ref($add.ref(.str.6, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.97 := $store.i8($M.97, .str.7, 76);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(1, 1)), 73);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(2, 1)), 78);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(3, 1)), 37);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(4, 1)), 100);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(5, 1)), 10);
    $M.97 := $store.i8($M.97, $add.ref($add.ref(.str.7, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.98 := $store.i8($M.98, .str.8, 37);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.8, $mul.ref(0, 4)), $mul.ref(1, 1)), 100);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.8, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.98 := $store.i8($M.98, $add.ref($add.ref(.str.8, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, .str.10, 48);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(1, 1)), 46);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(2, 1)), 57);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(3, 1)), 57);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(4, 1)), 46);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(5, 1)), 52);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.10, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.6 := $store.i8($M.6, .str.28, 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.28, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.28, $mul.ref(0, 5)), $mul.ref(2, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.28, $mul.ref(0, 5)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.28, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.100 := $store.i8($M.100, .str.17, 111);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(1, 1)), 115);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(2, 1)), 115);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(3, 1)), 116);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(4, 1)), 37);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(5, 1)), 100);
    $M.100 := $store.i8($M.100, $add.ref($add.ref(.str.17, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.101 := $store.i8($M.101, .str.18, 68);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.18, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.18, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.18, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.101 := $store.i8($M.101, .str.19, 70);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(1, 1)), 87);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.19, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.102 := $store.i8($M.102, .str.21, 37);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.21, $mul.ref(0, 5)), $mul.ref(1, 1)), 115);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.21, $mul.ref(0, 5)), $mul.ref(2, 1)), 37);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.21, $mul.ref(0, 5)), $mul.ref(3, 1)), 115);
    $M.102 := $store.i8($M.102, $add.ref($add.ref(.str.21, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i8($M.6, .str.22, 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.22, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.103 := $store.i8($M.103, .str.25, 79);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(1, 1)), 110);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(2, 1)), 83);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(3, 1)), 116);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(4, 1)), 114);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(5, 1)), 101);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(6, 1)), 97);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(7, 1)), 109);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(.str.25, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.101 := $store.i8($M.101, .str.26, 83);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.26, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.6 := $store.i8($M.6, .str.27, 0);
    $M.101 := $store.i8($M.101, .str.29, 68);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.29, $mul.ref(0, 4)), $mul.ref(1, 1)), 80);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.29, $mul.ref(0, 4)), $mul.ref(2, 1)), 45);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.29, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.101 := $store.i8($M.101, .str.30, 85);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(1, 1)), 83);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(2, 1)), 66);
    $M.101 := $store.i8($M.101, $add.ref($add.ref(.str.30, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.6 := $store.i8($M.6, .str.112, 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(2, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(9, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(10, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(13, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(14, 1)), 46);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(15, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(17, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.112, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.6 := $store.i8($M.6, .str.113, 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(1, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(2, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(10, 1)), 117);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(11, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(12, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(13, 1)), 120);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.113, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.104 := $store.i8($M.104, .str.9, 37);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(1, 1)), 115);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.104 := $store.i8($M.104, $add.ref($add.ref(.str.9, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.99 := $store.i8($M.99, .str.164, 36);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(1, 1)), 73);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(2, 1)), 100);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(3, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(4, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(5, 1)), 111);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(6, 1)), 115);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(7, 1)), 115);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(8, 1)), 116);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(9, 1)), 46);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(10, 1)), 99);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(11, 1)), 44);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(12, 1)), 118);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(13, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(14, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(15, 1)), 46);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(16, 1)), 55);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(17, 1)), 51);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(18, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(19, 1)), 50);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(20, 1)), 48);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(21, 1)), 48);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(22, 1)), 53);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(23, 1)), 47);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(24, 1)), 48);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(25, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(26, 1)), 47);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(27, 1)), 48);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(28, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(29, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(30, 1)), 50);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(31, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(32, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(33, 1)), 49);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(34, 1)), 51);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(35, 1)), 58);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(36, 1)), 51);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(37, 1)), 52);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(38, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(39, 1)), 119);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(40, 1)), 114);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(41, 1)), 105);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(42, 1)), 101);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(43, 1)), 100);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(44, 1)), 101);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(45, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(46, 1)), 69);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(47, 1)), 120);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(48, 1)), 112);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(49, 1)), 32);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(50, 1)), 36);
    $M.99 := $store.i8($M.99, $add.ref($add.ref(.str.164, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.6 := $store.i8($M.6, .str.59, 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.59, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.6 := $store.i8($M.6, .str.60, 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.60, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.6 := $store.i8($M.6, .str.61, 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(2, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(3, 1)), 39);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(4, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(5, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(6, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(7, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(8, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(9, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(10, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(11, 1)), 44);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(12, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.61, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.6 := $store.i8($M.6, .str.62, 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(1, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(2, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(3, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(4, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.62, $mul.ref(0, 6)), $mul.ref(5, 1)), 0);
    $M.6 := $store.i8($M.6, .str.63, 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.63, $mul.ref(0, 2)), $mul.ref(1, 1)), 0);
    $M.6 := $store.i8($M.6, .str.71, 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(2, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(4, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(5, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(6, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(7, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(8, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(10, 1)), 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(13, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(14, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(15, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(16, 1)), 115);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(17, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(18, 1)), 112);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(20, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(21, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(22, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(23, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(24, 1)), 103);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.71, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.6 := $store.i8($M.6, .str.75, 104);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(1, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(2, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(3, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.75, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.6 := $store.i8($M.6, .str.76, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(2, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(3, 1)), 121);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.76, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i8($M.6, .str.49, 76);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(1, 1)), 73);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(2, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(3, 1)), 52);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.49, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i8($M.6, .str.81, 102);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(1, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(2, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(3, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(4, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(6, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.81, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.6 := $store.i8($M.6, .str.82, 98);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(1, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(2, 1)), 99);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(3, 1)), 107);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(4, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(5, 1)), 97);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(6, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(7, 1)), 100);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.82, $mul.ref(0, 9)), $mul.ref(8, 1)), 0);
    $M.6 := $store.i8($M.6, .str.87, 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(1, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(2, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(3, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(4, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(5, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(6, 1)), 76);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(7, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(8, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(9, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(10, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(11, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(12, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(13, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(14, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(15, 1)), 79);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(16, 1)), 78);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(17, 1)), 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(18, 1)), 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(19, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(20, 1)), 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(21, 1)), 77);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(22, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.87, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.105 := $store.i8($M.105, .str.88, 76);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(1, 1)), 73);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(2, 1)), 78);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(3, 1)), 51);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.88, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    $M.6 := $store.i8($M.6, .str.93, 65);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(2, 1)), 82);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(3, 1)), 95);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(4, 1)), 83);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(6, 1)), 81);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.93, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.6 := $store.i8($M.6, .str.96, 70);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(1, 1)), 105);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(2, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(3, 1)), 108);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(4, 1)), 101);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(5, 1)), 114);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.96, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.106 := $store.i8($M.106, .str.131, 65);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(1, 1)), 68);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(2, 1)), 82);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(3, 1)), 45);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(4, 1)), 83);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(5, 1)), 69);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(6, 1)), 81);
    $M.106 := $store.i8($M.106, $add.ref($add.ref(.str.131, $mul.ref(0, 8)), $mul.ref(7, 1)), 0);
    $M.107 := $store.i8($M.107, .str.132, 76);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.132, $mul.ref(0, 4)), $mul.ref(1, 1)), 73);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.132, $mul.ref(0, 4)), $mul.ref(2, 1)), 78);
    $M.107 := $store.i8($M.107, $add.ref($add.ref(.str.132, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.6 := $store.i8($M.6, .str.156, 32);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(1, 1)), 110);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(2, 1)), 111);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(3, 1)), 119);
    $M.6 := $store.i8($M.6, $add.ref($add.ref(.str.156, $mul.ref(0, 5)), $mul.ref(4, 1)), 0);
    call {:si_unique_call 1936} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 486074);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 487106);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1937} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 488138);

procedure devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 489170);

procedure devirtbounce.3(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i64, arg1: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1938} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 490202);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1939} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 491234);

procedure devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1940} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.65, $M.63, $M.62, $M.61, $M.60, $M.94, $M.41, $M.6, $M.17, $M.16, $M.15, $M.14, $M.13, $M.12, $M.95, $M.23, $M.59, $M.58, $M.57, $M.43, $M.53, $M.48, $M.52, $M.45, $M.54, $M.50, $M.47, $M.44, $M.56, $M.49, $M.55, $M.46, $M.51, $M.22, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1941} __SMACK_static_init();
    call {:si_unique_call 1942} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.42, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.12, $M.6, $M.14, $M.57, $M.24, $M.58, $M.59, $M.43, $M.65, $M.63, $M.62, $M.61, $M.60, $M.94, $M.41, $M.17, $M.16, $M.15, $M.13, $M.95, $M.23, $M.45, $M.44, $M.22, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $CurrAddr, $M.18, $M.19, $M.20, $M.21, $M.26, $M.25, $M.39, $M.38;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation osst_probe_loop_$bb32(in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i46: i32, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$i50: i32) returns (out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i46: i32, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$i50: i32)
{

  entry:
    out_$i47, out_$i48, out_$i49, out_$i46, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i50 := in_$i47, in_$i48, in_$i49, in_$i46, in_$p51, in_$i52, in_$p53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i50;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_236;

  $bb34:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i47;
    goto $bb34_dummy;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i47;
    assume true;
    goto $bb34;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i47, out_$i48);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i48 := $M.13;
    goto corral_source_split_245;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i46, 1);
    call {:si_unique_call 38} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_244;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb36:
    assume out_$i56 == 1;
    goto corral_source_split_250;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$i57 := out_$i46;
    assume true;
    goto $bb36;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i64(out_$i55, 0);
    goto corral_source_split_242;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.6, out_$p53);
    goto corral_source_split_240;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref(out_$p51, $mul.ref(out_$i52, 8));
    goto corral_source_split_239;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i46);
    goto corral_source_split_238;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    out_$p51 := $M.12;
    goto corral_source_split_237;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i47, out_$i48, out_$i49, out_$i46, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i50 := osst_probe_loop_$bb32(out_$i47, out_$i48, out_$i49, out_$i46, out_$p51, out_$i52, out_$p53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i50);
    return;

  exit:
    return;
}



procedure osst_probe_loop_$bb32(in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i46: i32, in_$p51: ref, in_$i52: i64, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$i57: i32, in_$i50: i32) returns (out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i46: i32, out_$p51: ref, out_$i52: i64, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$i57: i32, out_$i50: i32);



implementation osst_probe_loop_$bb20(in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i31: i32) returns (out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i31: i32)
{

  entry:
    out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i31 := in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i31;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  $bb22:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := out_$i35;
    goto $bb22_dummy;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i35, out_$i36);
    goto corral_source_split_218;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    out_$i36 := $M.13;
    goto corral_source_split_217;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i31, 1);
    call {:si_unique_call 35} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_216;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p34, $0.ref);
    goto corral_source_split_215;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref(out_$p32, $mul.ref(out_$i33, 8));
    goto corral_source_split_214;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i31);
    goto corral_source_split_213;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p32 := $M.12;
    goto corral_source_split_212;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i31 := osst_probe_loop_$bb20(out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i31);
    return;

  exit:
    return;
}



procedure osst_probe_loop_$bb20(in_$p32: ref, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i31: i32) returns (out_$p32: ref, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i31: i32);
  modifies $M.6;



implementation osst_remove_loop_$bb11(in_$p2: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i11: i32)
{

  entry:
    out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i49, out_$i50, out_$i51, out_$i11 := in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p24, in_$i49, in_$i50, in_$i51, in_$i11;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_636;

  $bb22:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i49;
    goto $bb22_dummy;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i49, out_$i50);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i50 := $M.13;
    goto corral_source_split_693;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i11, 1);
    call {:si_unique_call 80} {:cexpr "i"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_692;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb15;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    out_$i23, out_$p24 := out_$i11, out_$p15;
    assume true;
    goto $bb17;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i64(out_$i20, out_$i21);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.6, out_$p18);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(0, 800)), $mul.ref(16, 1));
    goto corral_source_split_646;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_643;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.6, out_$p14);
    goto corral_source_split_641;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 8));
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i11);
    goto corral_source_split_639;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p12 := $M.12;
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i49, out_$i50, out_$i51, out_$i11 := osst_remove_loop_$bb11(in_$p2, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p24, out_$i49, out_$i50, out_$i51, out_$i11);
    return;

  exit:
    return;
}



procedure osst_remove_loop_$bb11(in_$p2: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i11: i32) returns (out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i11: i32);



implementation normalize_buffer_loop_$bb9(in_$p9: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i13: i32, in_$i14: i32, in_$i19: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i13: i32, out_$i14: i32, out_$i19: i32)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19 := in_$i15, in_$i16, in_$i17, in_$i18, in_$i13, in_$i14, in_$i19;
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  $bb11:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i15, out_$i16;
    goto $bb11_dummy;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i16;
    assume true;
    goto $bb11;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i15, out_$i17);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, in_$p9);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i14, 1);
    call {:si_unique_call 85} {:cexpr "order"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_732;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i15 := $mul.i32(out_$i13, 2);
    call {:si_unique_call 84} {:cexpr "b_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19 := normalize_buffer_loop_$bb9(in_$p9, out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19);
    return;

  exit:
    return;
}



procedure normalize_buffer_loop_$bb9(in_$p9: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i13: i32, in_$i14: i32, in_$i19: i32) returns (out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i13: i32, out_$i14: i32, out_$i19: i32);



implementation normalize_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i13: i32, in_$i14: i32, in_$i19: i32, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i13: i32, out_$i14: i32, out_$i19: i32, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p9, out_$i10, out_$i11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19, out_$i12, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i5 := in_$i6, in_$p9, in_$i10, in_$i11, in_$i15, in_$i16, in_$i17, in_$i18, in_$i13, in_$i14, in_$i19, in_$i12, in_$p20, in_$p21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  $bb14:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i34;
    goto $bb14_dummy;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i34);
    goto corral_source_split_755;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_754;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.6, in_$p1);
    goto corral_source_split_753;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i5, 1);
    call {:si_unique_call 88} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_752;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p33, out_$i32);
    goto corral_source_split_751;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_750;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    out_$i32 := $sub.i32(out_$i26, out_$i31);
    goto corral_source_split_749;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.6, out_$p30);
    goto corral_source_split_748;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i27, 40)), $mul.ref(20, 1));
    goto corral_source_split_747;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i5);
    goto corral_source_split_746;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.6, out_$p25);
    goto corral_source_split_745;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_744;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} __free_pages(out_$p24, out_$i12);
    goto corral_source_split_743;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} out_$p24 := sg_page(out_$p23);
    goto corral_source_split_742;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 40));
    goto corral_source_split_741;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i5);
    goto corral_source_split_740;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_739;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_738;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i11 == 1);
    goto $bb8;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i19;
    goto $bb8;

  $bb12:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i16;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    out_$i18 := $ult.i32(out_$i15, out_$i17);
    goto corral_source_split_734;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, out_$p9);
    goto corral_source_split_733;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i14, 1);
    call {:si_unique_call 85} {:cexpr "order"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_732;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i15 := $mul.i32(out_$i13, 2);
    call {:si_unique_call 84} {:cexpr "b_size"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_731;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb9:
    call out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19 := normalize_buffer_loop_$bb9(out_$p9, out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19);
    goto $bb9_last;

  $bb9_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_729;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := 4096, 0;
    goto $bb9;

  $bb11:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$i14 := out_$i15, out_$i16;
    assume false;
    return;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_727;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    out_$i12 := 0;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    out_$i11 := $ult.i32(4096, out_$i10);
    goto corral_source_split_725;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.6, out_$p9);
    goto corral_source_split_724;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i6, 40)), $mul.ref(20, 1));
    goto corral_source_split_723;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_722;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i6, out_$p9, out_$i10, out_$i11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19, out_$i12, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i5 := normalize_buffer_loop_$bb4(in_$p0, in_$p1, out_$i6, out_$p9, out_$i10, out_$i11, out_$i15, out_$i16, out_$i17, out_$i18, out_$i13, out_$i14, out_$i19, out_$i12, out_$p20, out_$p21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i5);
    return;

  exit:
    return;
}



procedure normalize_buffer_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i6: i64, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i13: i32, in_$i14: i32, in_$i19: i32, in_$i12: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i64, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i16, in_$i36: i32, in_$i37: i1, in_$i5: i32) returns (out_$i6: i64, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i13: i32, out_$i14: i32, out_$i19: i32, out_$i12: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i64, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i16, out_$i36: i32, out_$i37: i1, out_$i5: i32);
  modifies $M.6;



implementation sg_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb7();



implementation sg_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_page_loop_$bb3();



implementation osst_supports_loop_$bb4(in_$p0: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$p55: ref) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$p55: ref)
{

  entry:
    out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p55 := in_$p56, in_$p57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p65, in_$p66, in_$i67, in_$p68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$p74, in_$p75, in_$i76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$p84, in_$p85, in_$p86, in_$i87, in_$i88, in_$p55;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_856;

  $bb16:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$p55 := out_$p84;
    goto $bb16_dummy;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i64(out_$i87, 0);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    out_$i87 := $p2i.ref.i64(out_$p86);
    goto corral_source_split_897;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    out_$p86 := $load.ref($M.18, out_$p85);
    goto corral_source_split_896;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p55, $mul.ref(1, 32)), $mul.ref(0, 1));
    goto corral_source_split_895;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p55, $mul.ref(1, 32));
    goto corral_source_split_894;

  $bb7:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} out_$i81 := strncmp(out_$p78, out_$p80, out_$i76);
    call {:si_unique_call 113} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$p80 := $load.ref($M.6, out_$p79);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3496)), $mul.ref(264, 1));
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.20, out_$p77);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} out_$i76 := strlen(out_$p75);
    call {:si_unique_call 111} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.20, out_$p74);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_880;

  $bb8:
    assume out_$i73 == 1;
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 0);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} out_$i72 := strncmp(out_$p69, out_$p71, out_$i67);
    call {:si_unique_call 109} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.6, out_$p70);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3496)), $mul.ref(256, 1));
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.19, out_$p68);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_872;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} out_$i67 := strlen(out_$p66);
    call {:si_unique_call 107} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i67);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.19, out_$p65);
    goto corral_source_split_870;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_869;

  $bb6:
    assume out_$i64 == 1;
    goto corral_source_split_868;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 0);
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} out_$i63 := strncmp(out_$p60, out_$p62, out_$i58);
    call {:si_unique_call 105} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_865;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.6, out_$p61);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3496)), $mul.ref(248, 1));
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.18, out_$p59);
    goto corral_source_split_862;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_861;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} out_$i58 := strlen(out_$p57);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i64(out_$i58);
    goto corral_source_split_860;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.18, out_$p56);
    goto corral_source_split_859;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_858;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p55 := osst_supports_loop_$bb4(in_$p0, out_$p56, out_$p57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p65, out_$p66, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$p74, out_$p75, out_$i76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$i87, out_$i88, out_$p55);
    return;

  exit:
    return;
}



procedure osst_supports_loop_$bb4(in_$p0: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$p65: ref, in_$p66: ref, in_$i67: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$i87: i64, in_$i88: i1, in_$p55: ref) returns (out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$p65: ref, out_$p66: ref, out_$i67: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$i87: i64, out_$i88: i1, out_$p55: ref);



implementation osst_read_loop_$bb66(in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p53: ref, in_$i56: i64, in_$p120: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i1, in_$i139: i64, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i148: i32, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i167: i64, in_$i166: i64, in_$p168: ref, in_$i169: i32, in_$i170: i64, in_$i171: i64, in_$p172: ref, in_$i173: i32, in_$i174: i64, in_$i175: i64, in_$i176: i1, in_$i177: i64, in_$p192: ref, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i196: i64, in_$i197: i64, in_$i198: i1, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i205: i64, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i64, in_$i214: i64, in_$i215: i32, in_$i216: i32, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$p220: ref, in_$i221: i64, in_$i222: i64, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$p233: ref, in_$i234: i32, in_$i235: i64, in_$i236: i64, in_$i237: i64, in_$i238: i1, in_$i127: i32, in_$p128: ref, in_$i129: i64, in_$i240: i1, in_$i241: i64, in_$i239: i64) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i1, out_$i139: i64, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i148: i32, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i167: i64, out_$i166: i64, out_$p168: ref, out_$i169: i32, out_$i170: i64, out_$i171: i64, out_$p172: ref, out_$i173: i32, out_$i174: i64, out_$i175: i64, out_$i176: i1, out_$i177: i64, out_$p192: ref, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i196: i64, out_$i197: i64, out_$i198: i1, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i205: i64, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i64, out_$i214: i64, out_$i215: i32, out_$i216: i32, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$p220: ref, out_$i221: i64, out_$i222: i64, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$p233: ref, out_$i234: i32, out_$i235: i64, out_$i236: i64, out_$i237: i64, out_$i238: i1, out_$i127: i32, out_$p128: ref, out_$i129: i64, out_$i240: i1, out_$i241: i64, out_$i239: i64)
{

  entry:
    out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i166, out_$p168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$p224, out_$p225, out_$p226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i127, out_$p128, out_$i129, out_$i240, out_$i241, out_$i239 := in_$p130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i148, in_$p149, in_$p150, in_$p151, in_$i152, in_$i153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p161, in_$p162, in_$p163, in_$i164, in_$i165, in_$i167, in_$i166, in_$p168, in_$i169, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p192, in_$p193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$p200, in_$i201, in_$p202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$p208, in_$p209, in_$i210, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$p224, in_$p225, in_$p226, in_$i227, in_$i228, in_$p229, in_$p230, in_$i231, in_$i232, in_$p233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i127, in_$p128, in_$i129, in_$i240, in_$i241, in_$i239;
    goto $bb66, exit;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;

  $bb96:
    assume out_$i238 == 1;
    assume {:verifier.code 0} true;
    out_$i127, out_$p128, out_$i129 := out_$i148, out_$p223, out_$i222;
    goto $bb96_dummy;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    out_$i239 := out_$i222;
    assume true;
    goto $bb96;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    out_$i238 := $ult.i64(out_$i222, out_$i237);
    goto corral_source_split_1488;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    out_$i237 := $add.i64(out_$i236, 1);
    goto corral_source_split_1487;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    out_$i236 := $sub.i64(in_$i2, out_$i235);
    goto corral_source_split_1486;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    out_$i235 := $sext.i32.i64(out_$i234);
    goto corral_source_split_1485;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i234 := $load.i32($M.6, in_$p120);
    goto corral_source_split_1484;

  $bb94:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p233, out_$i232);
    goto corral_source_split_1482;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1481;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    out_$i232 := $add.i32(out_$i231, 1);
    goto corral_source_split_1480;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    out_$i231 := $load.i32($M.6, out_$p230);
    goto corral_source_split_1479;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1478;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p229, 0);
    goto corral_source_split_1477;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    out_$p229 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_1476;

  $bb93:
    assume out_$i228 == 1;
    goto corral_source_split_1475;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    out_$i228 := $eq.i32(out_$i227, 0);
    goto corral_source_split_1473;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.6, out_$p226);
    goto corral_source_split_1472;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(out_$p225, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1471;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    out_$p225 := $load.ref($M.6, out_$p224);
    goto corral_source_split_1470;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    out_$p224 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1469;

  $bb92:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1468;

  $bb79:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    out_$i222, out_$p223 := out_$i129, out_$p128;
    goto $bb92;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    out_$i222, out_$p223 := out_$i221, out_$p220;
    goto $bb92;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    out_$i221 := $add.i64(out_$i129, out_$i175);
    call {:si_unique_call 221} {:cexpr "total"} boogie_si_record_i64(out_$i221);
    goto corral_source_split_1466;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref(out_$p128, $mul.ref(out_$i175, 1));
    goto corral_source_split_1465;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p3, out_$i219);
    goto corral_source_split_1464;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    out_$i219 := $add.i64(out_$i218, out_$i175);
    goto corral_source_split_1463;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i64($M.6, in_$p3);
    goto corral_source_split_1462;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p217, out_$i216);
    goto corral_source_split_1461;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p53, $mul.ref(in_$i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1460;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    out_$i216 := $add.i32(out_$i210, out_$i215);
    goto corral_source_split_1459;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    out_$i215 := $trunc.i64.i32(out_$i214);
    goto corral_source_split_1458;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    out_$i214 := $sdiv.i64(out_$i175, out_$i213);
    goto corral_source_split_1457;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    out_$i213 := $sext.i32.i64(out_$i212);
    goto corral_source_split_1456;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i32($M.6, out_$p211);
    goto corral_source_split_1455;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1454;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i32($M.6, out_$p209);
    goto corral_source_split_1453;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p53, $mul.ref(in_$i56, 16)), $mul.ref(8, 1));
    goto corral_source_split_1452;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p208, out_$i207);
    goto corral_source_split_1451;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    out_$p208 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_1450;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    out_$i207 := $add.i32(out_$i201, out_$i206);
    goto corral_source_split_1449;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    out_$i206 := $trunc.i64.i32(out_$i205);
    goto corral_source_split_1448;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    out_$i205 := $sdiv.i64(out_$i175, out_$i204);
    goto corral_source_split_1447;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    out_$i204 := $sext.i32.i64(out_$i203);
    goto corral_source_split_1446;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i32($M.6, out_$p202);
    goto corral_source_split_1445;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1444;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.6, out_$p200);
    goto corral_source_split_1443;

  $bb91:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_1442;

  $bb90:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$i198 := $ne.i64(out_$i197, 0);
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i64($M.6, in_$p4);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p4, out_$i196);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i196 := $sext.i32.i64(out_$i195);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} out_$i195 := from_buffer(out_$p193, out_$p128, out_$i194);
    call {:si_unique_call 219} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i195);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$i194 := $trunc.i64.i32(out_$i175);
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    out_$p193 := $load.ref($M.6, out_$p192);
    goto corral_source_split_1431;

  $bb88:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1430;

  $bb84:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$i177 := out_$i129;
    assume true;
    goto $bb84;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i64(out_$i175, 0);
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    out_$i175 := $mul.i64(out_$i171, out_$i174);
    call {:si_unique_call 216} {:cexpr "transfer"} boogie_si_record_i64(out_$i175);
    goto corral_source_split_1406;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$i174 := $sext.i32.i64(out_$i173);
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.6, out_$p172);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1403;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    out_$i171 := $udiv.i64(out_$i166, out_$i170);
    goto corral_source_split_1402;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    out_$i170 := $sext.i32.i64(out_$i169);
    goto corral_source_split_1401;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i32($M.6, out_$p168);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1399;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i167;
    goto $bb82;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    out_$i166 := out_$i165;
    goto $bb82;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    out_$i165 := $sext.i32.i64(out_$i164);
    goto corral_source_split_1393;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i164 := $load.i32($M.6, out_$p163);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(out_$p162, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.6, out_$p161);
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1389;

  $bb80:
    assume out_$i160 == 1;
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    out_$i160 := $ult.i64(out_$i158, out_$i159);
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    out_$i159 := $sub.i64(in_$i2, out_$i129);
    goto corral_source_split_1385;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    out_$i158 := $sext.i32.i64(out_$i157);
    goto corral_source_split_1384;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i32($M.6, out_$p156);
    goto corral_source_split_1383;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p155, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1382;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.6, out_$p154);
    goto corral_source_split_1381;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1380;

  $bb78:
    assume out_$i153 == 1;
    goto corral_source_split_1379;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    out_$i153 := $sgt.i32(out_$i152, 0);
    goto corral_source_split_1377;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.6, out_$p151);
    goto corral_source_split_1376;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p150, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1375;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    out_$p150 := $load.ref($M.6, out_$p149);
    goto corral_source_split_1374;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1373;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_1372;

  $bb69:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i148 := out_$i127;
    goto $bb77;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i148 := out_$i143;
    goto $bb77;

  $bb75:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i143;
    assume true;
    goto $bb75;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i143, 0);
    goto corral_source_split_1365;

  SeqInstr_27:
    call {:si_unique_call 214} {:cexpr "special"} boogie_si_record_i32(out_$i143);
    goto corral_source_split_1364;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} out_$i143 := osst_get_logical_frame(in_$p8, in_$p5, out_$i142, 0);
    goto SeqInstr_26;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    out_$i142 := $load.i32($M.6, out_$p141);
    goto corral_source_split_1363;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(672, 1));
    goto corral_source_split_1362;

  $bb71:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$i139 := out_$i129;
    assume true;
    goto $bb71;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 1);
    goto corral_source_split_1355;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i8.i32(out_$i136);
    goto corral_source_split_1354;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i8($M.6, out_$p135);
    goto corral_source_split_1353;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p53, $mul.ref(in_$i56, 16)), $mul.ref(1, 1));
    goto corral_source_split_1352;

  $bb68:
    assume out_$i134 == 1;
    goto corral_source_split_1351;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    out_$i134 := $eq.i32(out_$i133, 0);
    goto corral_source_split_1349;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.6, out_$p132);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.6, out_$p130);
    goto corral_source_split_1346;

  $bb67:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1345;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb98:
    assume out_$i240 == 1;
    goto corral_source_split_1492;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    out_$i241 := out_$i129;
    assume true;
    goto $bb98;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i127, 0);
    goto corral_source_split_1343;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$i167 := $sub.i64(in_$i2, out_$i129);
    goto corral_source_split_1396;

  $bb81:
    assume !(out_$i160 == 1);
    goto corral_source_split_1395;

  $bb96_dummy:
    call {:si_unique_call 1} out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i166, out_$p168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$p224, out_$p225, out_$p226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i127, out_$p128, out_$i129, out_$i240, out_$i241, out_$i239 := osst_read_loop_$bb66(in_$i2, in_$p3, in_$p4, in_$p5, in_$p8, in_$p53, in_$i56, in_$p120, out_$p130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i148, out_$p149, out_$p150, out_$p151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$p163, out_$i164, out_$i165, out_$i167, out_$i166, out_$p168, out_$i169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$p200, out_$i201, out_$p202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$p208, out_$p209, out_$i210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$p224, out_$p225, out_$p226, out_$i227, out_$i228, out_$p229, out_$p230, out_$i231, out_$i232, out_$p233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i127, out_$p128, out_$i129, out_$i240, out_$i241, out_$i239);
    return;

  exit:
    return;
}



procedure osst_read_loop_$bb66(in_$i2: i64, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p53: ref, in_$i56: i64, in_$p120: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i1, in_$p135: ref, in_$i136: i8, in_$i137: i32, in_$i138: i1, in_$i139: i64, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i148: i32, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$i152: i32, in_$i153: i1, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i32, in_$i158: i64, in_$i159: i64, in_$i160: i1, in_$p161: ref, in_$p162: ref, in_$p163: ref, in_$i164: i32, in_$i165: i64, in_$i167: i64, in_$i166: i64, in_$p168: ref, in_$i169: i32, in_$i170: i64, in_$i171: i64, in_$p172: ref, in_$i173: i32, in_$i174: i64, in_$i175: i64, in_$i176: i1, in_$i177: i64, in_$p192: ref, in_$p193: ref, in_$i194: i32, in_$i195: i32, in_$i196: i64, in_$i197: i64, in_$i198: i1, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$i203: i32, in_$i204: i64, in_$i205: i64, in_$i206: i32, in_$i207: i32, in_$p208: ref, in_$p209: ref, in_$i210: i32, in_$p211: ref, in_$i212: i32, in_$i213: i64, in_$i214: i64, in_$i215: i32, in_$i216: i32, in_$p217: ref, in_$i218: i64, in_$i219: i64, in_$p220: ref, in_$i221: i64, in_$i222: i64, in_$p223: ref, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$i227: i32, in_$i228: i1, in_$p229: ref, in_$p230: ref, in_$i231: i32, in_$i232: i32, in_$p233: ref, in_$i234: i32, in_$i235: i64, in_$i236: i64, in_$i237: i64, in_$i238: i1, in_$i127: i32, in_$p128: ref, in_$i129: i64, in_$i240: i1, in_$i241: i64, in_$i239: i64) returns (out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i1, out_$p135: ref, out_$i136: i8, out_$i137: i32, out_$i138: i1, out_$i139: i64, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i148: i32, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$i152: i32, out_$i153: i1, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i32, out_$i158: i64, out_$i159: i64, out_$i160: i1, out_$p161: ref, out_$p162: ref, out_$p163: ref, out_$i164: i32, out_$i165: i64, out_$i167: i64, out_$i166: i64, out_$p168: ref, out_$i169: i32, out_$i170: i64, out_$i171: i64, out_$p172: ref, out_$i173: i32, out_$i174: i64, out_$i175: i64, out_$i176: i1, out_$i177: i64, out_$p192: ref, out_$p193: ref, out_$i194: i32, out_$i195: i32, out_$i196: i64, out_$i197: i64, out_$i198: i1, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$i203: i32, out_$i204: i64, out_$i205: i64, out_$i206: i32, out_$i207: i32, out_$p208: ref, out_$p209: ref, out_$i210: i32, out_$p211: ref, out_$i212: i32, out_$i213: i64, out_$i214: i64, out_$i215: i32, out_$i216: i32, out_$p217: ref, out_$i218: i64, out_$i219: i64, out_$p220: ref, out_$i221: i64, out_$i222: i64, out_$p223: ref, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$i227: i32, out_$i228: i1, out_$p229: ref, out_$p230: ref, out_$i231: i32, out_$i232: i32, out_$p233: ref, out_$i234: i32, out_$i235: i64, out_$i236: i64, out_$i237: i64, out_$i238: i1, out_$i127: i32, out_$p128: ref, out_$i129: i64, out_$i240: i1, out_$i241: i64, out_$i239: i64);
  modifies $M.6, $M.26, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_write_loop_$bb129(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p90: ref, in_$i93: i64, in_$p246: ref, in_$i252: i64, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i32, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$p266: ref, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i64, in_$i272: i1, in_$i273: i64, in_$p274: ref, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i64, in_$i279: i64, in_$i280: i1, in_$p282: ref, in_$i283: i32, in_$i284: i64, in_$i285: i64, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$p290: ref, in_$i291: i32, in_$i292: i64, in_$i293: i64, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$p297: ref, in_$i298: i32, in_$i299: i64, in_$i300: i1, in_$i301: i64, in_$i302: i64, in_$i303: i64, in_$i304: i64, in_$i305: i64, in_$p306: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i64, in_$p312: ref, in_$i313: i32, in_$i314: i64, in_$i315: i64, in_$i316: i32, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$p322: ref, in_$p323: ref, in_$i320: i64, in_$i321: i64, in_$i326: i64, in_$i324: i64, in_$i325: i64, in_$i327: i1, in_$i328: i64, in_$i329: i64, in_$i341: i64, in_$i342: i64, in_$p343: ref, in_$i344: i64, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$p352: ref, in_$p353: ref, in_$p354: ref, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p358: ref, in_$i359: i32, in_$i360: i64, in_$i361: i64, in_$i362: i1, in_$p257: ref, in_$i258: i64, in_$i363: i64, in_$i364: i32, in_$p365: ref) returns (out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i32, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$p266: ref, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i64, out_$i272: i1, out_$i273: i64, out_$p274: ref, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i64, out_$i279: i64, out_$i280: i1, out_$p282: ref, out_$i283: i32, out_$i284: i64, out_$i285: i64, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$p290: ref, out_$i291: i32, out_$i292: i64, out_$i293: i64, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$p297: ref, out_$i298: i32, out_$i299: i64, out_$i300: i1, out_$i301: i64, out_$i302: i64, out_$i303: i64, out_$i304: i64, out_$i305: i64, out_$p306: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i64, out_$p312: ref, out_$i313: i32, out_$i314: i64, out_$i315: i64, out_$i316: i32, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$p322: ref, out_$p323: ref, out_$i320: i64, out_$i321: i64, out_$i326: i64, out_$i324: i64, out_$i325: i64, out_$i327: i1, out_$i328: i64, out_$i329: i64, out_$i341: i64, out_$i342: i64, out_$p343: ref, out_$i344: i64, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$p352: ref, out_$p353: ref, out_$p354: ref, out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p358: ref, out_$i359: i32, out_$i360: i64, out_$i361: i64, out_$i362: i1, out_$p257: ref, out_$i258: i64, out_$i363: i64, out_$i364: i32, out_$p365: ref)
{

  entry:
    out_$p259, out_$p260, out_$p261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$p322, out_$p323, out_$i320, out_$i321, out_$i326, out_$i324, out_$i325, out_$i327, out_$i328, out_$i329, out_$i341, out_$i342, out_$p343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$p352, out_$p353, out_$p354, out_$p355, out_$p356, out_$p357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$p257, out_$i258, out_$i363, out_$i364, out_$p365 := in_$p259, in_$p260, in_$p261, in_$i262, in_$p263, in_$i264, in_$i265, in_$p266, in_$p267, in_$p268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$p274, in_$p275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$p282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289, in_$p290, in_$i291, in_$i292, in_$i293, in_$i294, in_$p295, in_$p296, in_$p297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$p306, in_$i307, in_$i308, in_$p309, in_$i310, in_$i311, in_$p312, in_$i313, in_$i314, in_$i315, in_$i316, in_$i317, in_$p318, in_$p319, in_$p322, in_$p323, in_$i320, in_$i321, in_$i326, in_$i324, in_$i325, in_$i327, in_$i328, in_$i329, in_$i341, in_$i342, in_$p343, in_$i344, in_$p345, in_$i346, in_$i347, in_$p348, in_$i349, in_$i350, in_$i351, in_$p352, in_$p353, in_$p354, in_$p355, in_$p356, in_$p357, in_$p358, in_$i359, in_$i360, in_$i361, in_$i362, in_$p257, in_$i258, in_$i363, in_$i364, in_$p365;
    goto $bb129, exit;

  $bb129:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1972;

  $bb158:
    assume out_$i362 == 1;
    assume {:verifier.code 0} true;
    out_$p257, out_$i258 := out_$p343, out_$i344;
    goto $bb158_dummy;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i363, out_$i364, out_$p365 := out_$i344, 1, out_$p343;
    assume true;
    goto $bb158;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$i362 := $ugt.i64(out_$i361, in_$i252);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$i361 := $add.i64(out_$i360, out_$i344);
    goto corral_source_split_2117;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    out_$i360 := $sext.i32.i64(out_$i359);
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    out_$i359 := $load.i32($M.6, out_$p358);
    goto corral_source_split_2115;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(out_$p357, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2114;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    out_$p357 := $load.ref($M.6, in_$p246);
    goto corral_source_split_2113;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p356, 0);
    goto corral_source_split_2112;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    out_$p356 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_2111;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p355, 0);
    goto corral_source_split_2110;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    out_$p355 := $add.ref($add.ref(out_$p354, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_2109;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    out_$p354 := $load.ref($M.6, out_$p353);
    goto corral_source_split_2108;

  $bb157:
    assume {:verifier.code 0} true;
    out_$p353 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2107;

  $bb156:
    assume !(out_$i347 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p352, out_$i351);
    goto corral_source_split_2105;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    out_$p352 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2104;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i349, out_$i350);
    goto corral_source_split_2103;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    out_$i350 := $trunc.i64.i32(out_$i285);
    goto corral_source_split_2102;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    out_$i349 := $load.i32($M.6, out_$p348);
    goto corral_source_split_2101;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$p348 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2100;

  $bb155:
    assume out_$i347 == 1;
    goto corral_source_split_2099;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    out_$i347 := $sge.i32(out_$i346, 0);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$i346 := $load.i32($M.6, out_$p345);
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$p345 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$i344 := $sub.i64(out_$i325, out_$i273);
    call {:si_unique_call 267} {:cexpr "count"} boogie_si_record_i64(out_$i344);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$p343 := $add.ref(out_$p257, $mul.ref(out_$i273, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p3, out_$i342);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$i342 := $add.i64(out_$i341, out_$i273);
    goto corral_source_split_2091;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i341 := $load.i64($M.6, in_$p3);
    goto corral_source_split_2090;

  $bb147:
    assume !(out_$i327 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    out_$i328, out_$i329 := out_$i324, out_$i325;
    assume true;
    goto $bb147;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    out_$i327 := $slt.i64(out_$i324, 0);
    goto corral_source_split_2065;

  $bb145:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2064;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    out_$i326 := $load.i64($M.6, in_$p4);
    call {:si_unique_call 263} {:cexpr "retval"} boogie_si_record_i64(out_$i326);
    assume {:verifier.code 0} true;
    out_$i324, out_$i325 := out_$i326, out_$i258;
    goto $bb145;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    out_$i324, out_$i325 := out_$i320, out_$i321;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2062;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p323, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    out_$i320, out_$i321 := $sub.i64(0, 5), out_$i258;
    goto $bb144;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    out_$i320, out_$i321 := $sub.i64(0, 28), out_$i305;
    goto $bb144;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p319, 3);
    goto corral_source_split_2060;

  $bb143:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_2059;

  $bb142:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p318, out_$i317);
    goto corral_source_split_2057;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$p318 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i310, out_$i316);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i316 := $trunc.i64.i32(out_$i315);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i315 := $sdiv.i64(out_$i311, out_$i314);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    out_$i314 := $sext.i32.i64(out_$i313);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$i313 := $load.i32($M.6, out_$p312);
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$p312 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$i311 := $sub.i64(out_$i273, out_$i299);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$i310 := $load.i32($M.6, out_$p309);
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p309 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2047;

  $bb141:
    assume out_$i308 == 1;
    goto corral_source_split_2046;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i308 := $sge.i32(out_$i307, 0);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i307 := $load.i32($M.6, out_$p306);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2037;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    out_$i305 := $add.i64(out_$i304, out_$i258);
    call {:si_unique_call 264} {:cexpr "count"} boogie_si_record_i64(out_$i305);
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    out_$i304 := $sub.i64(out_$i299, out_$i273);
    goto corral_source_split_2035;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p3, out_$i303);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i303 := $add.i64(out_$i301, out_$i302);
    goto corral_source_split_2033;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    out_$i302 := $sub.i64(out_$i273, out_$i299);
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    out_$i301 := $load.i64($M.6, in_$p3);
    goto corral_source_split_2031;

  $bb139:
    assume out_$i300 == 1;
    goto corral_source_split_2030;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    out_$i300 := $sle.i64(out_$i299, out_$i273);
    goto corral_source_split_2026;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    out_$i299 := $sext.i32.i64(out_$i298);
    call {:si_unique_call 262} {:cexpr "transfer"} boogie_si_record_i64(out_$i299);
    goto corral_source_split_2025;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$i298 := $load.i32($M.6, out_$p297);
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$p297 := $add.ref($add.ref(out_$p296, $mul.ref(0, 176)), $mul.ref(20, 1));
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p296 := $load.ref($M.6, out_$p295);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_2021;

  $bb137:
    assume out_$i294 == 1;
    goto corral_source_split_2020;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb137, $bb138;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    out_$i294 := $eq.i64(out_$i293, $sub.i64(0, 28));
    goto corral_source_split_2018;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i64($M.6, in_$p4);
    goto corral_source_split_2017;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p4, out_$i292);
    goto corral_source_split_2016;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    out_$i292 := $sext.i32.i64(out_$i291);
    goto corral_source_split_2015;

  SeqInstr_42:
    call {:si_unique_call 261} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i291);
    goto corral_source_split_2014;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} out_$i291 := osst_write_frame(in_$p8, in_$p5, 1);
    goto SeqInstr_41;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p290, out_$i289);
    goto corral_source_split_2013;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    out_$p290 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2012;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    out_$i289 := $add.i32(out_$i287, out_$i288);
    goto corral_source_split_2011;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    out_$i288 := $trunc.i64.i32(out_$i285);
    goto corral_source_split_2010;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.6, out_$p286);
    goto corral_source_split_2009;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(676, 1));
    goto corral_source_split_2008;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    out_$i285 := $sdiv.i64(out_$i273, out_$i284);
    call {:si_unique_call 259} {:cexpr "blks"} boogie_si_record_i64(out_$i285);
    goto corral_source_split_2007;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    out_$i284 := $sext.i32.i64(out_$i283);
    goto corral_source_split_2006;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.6, out_$p282);
    goto corral_source_split_2005;

  $bb136:
    assume {:verifier.code 0} true;
    out_$p282 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_2004;

  $bb135:
    assume !(out_$i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    out_$i280 := $ne.i64(out_$i279, 0);
    goto corral_source_split_1999;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i64($M.6, in_$p4);
    goto corral_source_split_1998;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $M.6 := $store.i64($M.6, in_$p4, out_$i278);
    goto corral_source_split_1997;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    out_$i278 := $sext.i32.i64(out_$i277);
    goto corral_source_split_1996;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} out_$i277 := append_to_buffer(out_$p257, out_$p275, out_$i276);
    call {:si_unique_call 257} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i277);
    goto corral_source_split_1995;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    out_$i276 := $trunc.i64.i32(out_$i273);
    goto corral_source_split_1994;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    out_$p275 := $load.ref($M.6, out_$p274);
    goto corral_source_split_1993;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    out_$p274 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1992;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_1991;

  $bb132:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    out_$i273 := out_$i271;
    goto $bb133;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    out_$i273 := out_$i258;
    goto $bb133;

  $bb131:
    assume out_$i272 == 1;
    goto corral_source_split_1989;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    out_$i272 := $ugt.i64(out_$i271, out_$i258);
    goto corral_source_split_1987;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    out_$i271 := $sext.i32.i64(out_$i270);
    call {:si_unique_call 255} {:cexpr "do_count"} boogie_si_record_i64(out_$i271);
    goto corral_source_split_1986;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    out_$i270 := $sub.i32(out_$i265, out_$i269);
    goto corral_source_split_1985;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.6, out_$p268);
    goto corral_source_split_1984;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    out_$p268 := $add.ref($add.ref(out_$p267, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_1983;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    out_$p267 := $load.ref($M.6, out_$p266);
    goto corral_source_split_1982;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    out_$p266 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1981;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    out_$i265 := $mul.i32(out_$i262, out_$i264);
    goto corral_source_split_1980;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i32($M.6, out_$p263);
    goto corral_source_split_1979;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(632, 1));
    goto corral_source_split_1978;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.6, out_$p261);
    goto corral_source_split_1977;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    out_$p261 := $add.ref($add.ref(out_$p260, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_1976;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    out_$p260 := $load.ref($M.6, out_$p259);
    goto corral_source_split_1975;

  $bb130:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref(in_$p8, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_1974;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$p323 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p322, 4);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    out_$p322 := $add.ref($add.ref(in_$p90, $mul.ref(in_$i93, 16)), $mul.ref(1, 1));
    goto corral_source_split_2042;

  $bb140:
    assume !(out_$i300 == 1);
    goto corral_source_split_2041;

  $bb138:
    assume !(out_$i294 == 1);
    goto corral_source_split_2028;

  $bb158_dummy:
    call {:si_unique_call 1} out_$p259, out_$p260, out_$p261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$p322, out_$p323, out_$i320, out_$i321, out_$i326, out_$i324, out_$i325, out_$i327, out_$i328, out_$i329, out_$i341, out_$i342, out_$p343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$p352, out_$p353, out_$p354, out_$p355, out_$p356, out_$p357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$p257, out_$i258, out_$i363, out_$i364, out_$p365 := osst_write_loop_$bb129(in_$p3, in_$p4, in_$p5, in_$p8, in_$p90, in_$i93, in_$p246, in_$i252, out_$p259, out_$p260, out_$p261, out_$i262, out_$p263, out_$i264, out_$i265, out_$p266, out_$p267, out_$p268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$p275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$p290, out_$i291, out_$i292, out_$i293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$p306, out_$i307, out_$i308, out_$p309, out_$i310, out_$i311, out_$p312, out_$i313, out_$i314, out_$i315, out_$i316, out_$i317, out_$p318, out_$p319, out_$p322, out_$p323, out_$i320, out_$i321, out_$i326, out_$i324, out_$i325, out_$i327, out_$i328, out_$i329, out_$i341, out_$i342, out_$p343, out_$i344, out_$p345, out_$i346, out_$i347, out_$p348, out_$i349, out_$i350, out_$i351, out_$p352, out_$p353, out_$p354, out_$p355, out_$p356, out_$p357, out_$p358, out_$i359, out_$i360, out_$i361, out_$i362, out_$p257, out_$i258, out_$i363, out_$i364, out_$p365);
    return;

  exit:
    return;
}



procedure osst_write_loop_$bb129(in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p8: ref, in_$p90: ref, in_$i93: i64, in_$p246: ref, in_$i252: i64, in_$p259: ref, in_$p260: ref, in_$p261: ref, in_$i262: i32, in_$p263: ref, in_$i264: i32, in_$i265: i32, in_$p266: ref, in_$p267: ref, in_$p268: ref, in_$i269: i32, in_$i270: i32, in_$i271: i64, in_$i272: i1, in_$i273: i64, in_$p274: ref, in_$p275: ref, in_$i276: i32, in_$i277: i32, in_$i278: i64, in_$i279: i64, in_$i280: i1, in_$p282: ref, in_$i283: i32, in_$i284: i64, in_$i285: i64, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$p290: ref, in_$i291: i32, in_$i292: i64, in_$i293: i64, in_$i294: i1, in_$p295: ref, in_$p296: ref, in_$p297: ref, in_$i298: i32, in_$i299: i64, in_$i300: i1, in_$i301: i64, in_$i302: i64, in_$i303: i64, in_$i304: i64, in_$i305: i64, in_$p306: ref, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$i310: i32, in_$i311: i64, in_$p312: ref, in_$i313: i32, in_$i314: i64, in_$i315: i64, in_$i316: i32, in_$i317: i32, in_$p318: ref, in_$p319: ref, in_$p322: ref, in_$p323: ref, in_$i320: i64, in_$i321: i64, in_$i326: i64, in_$i324: i64, in_$i325: i64, in_$i327: i1, in_$i328: i64, in_$i329: i64, in_$i341: i64, in_$i342: i64, in_$p343: ref, in_$i344: i64, in_$p345: ref, in_$i346: i32, in_$i347: i1, in_$p348: ref, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$p352: ref, in_$p353: ref, in_$p354: ref, in_$p355: ref, in_$p356: ref, in_$p357: ref, in_$p358: ref, in_$i359: i32, in_$i360: i64, in_$i361: i64, in_$i362: i1, in_$p257: ref, in_$i258: i64, in_$i363: i64, in_$i364: i32, in_$p365: ref) returns (out_$p259: ref, out_$p260: ref, out_$p261: ref, out_$i262: i32, out_$p263: ref, out_$i264: i32, out_$i265: i32, out_$p266: ref, out_$p267: ref, out_$p268: ref, out_$i269: i32, out_$i270: i32, out_$i271: i64, out_$i272: i1, out_$i273: i64, out_$p274: ref, out_$p275: ref, out_$i276: i32, out_$i277: i32, out_$i278: i64, out_$i279: i64, out_$i280: i1, out_$p282: ref, out_$i283: i32, out_$i284: i64, out_$i285: i64, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$p290: ref, out_$i291: i32, out_$i292: i64, out_$i293: i64, out_$i294: i1, out_$p295: ref, out_$p296: ref, out_$p297: ref, out_$i298: i32, out_$i299: i64, out_$i300: i1, out_$i301: i64, out_$i302: i64, out_$i303: i64, out_$i304: i64, out_$i305: i64, out_$p306: ref, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$i310: i32, out_$i311: i64, out_$p312: ref, out_$i313: i32, out_$i314: i64, out_$i315: i64, out_$i316: i32, out_$i317: i32, out_$p318: ref, out_$p319: ref, out_$p322: ref, out_$p323: ref, out_$i320: i64, out_$i321: i64, out_$i326: i64, out_$i324: i64, out_$i325: i64, out_$i327: i1, out_$i328: i64, out_$i329: i64, out_$i341: i64, out_$i342: i64, out_$p343: ref, out_$i344: i64, out_$p345: ref, out_$i346: i32, out_$i347: i1, out_$p348: ref, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$p352: ref, out_$p353: ref, out_$p354: ref, out_$p355: ref, out_$p356: ref, out_$p357: ref, out_$p358: ref, out_$i359: i32, out_$i360: i64, out_$i361: i64, out_$i362: i1, out_$p257: ref, out_$i258: i64, out_$i363: i64, out_$i364: i32, out_$p365: ref);
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_wait_ready_loop_$bb11(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$i5: i64, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p25: ref, in_$i38: i64, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$p78: ref, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$p32: ref, in_$p82: ref, in_$p76: ref, in_$p70: ref, in_$p44: ref, in_$p37: ref, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p25: ref, out_$i38: i64, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$p78: ref, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$p32: ref, out_$p82: ref, out_$p76: ref, out_$p70: ref, out_$p44: ref, out_$p37: ref, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8)
{

  entry:
    out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p25, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$i79, out_$i80, out_$i81, out_$p32, out_$p82, out_$p76, out_$p70, out_$p44, out_$p37, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p33, in_$p34, in_$i35, in_$i36, in_$p25, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p46, in_$i47, in_$i48, in_$i49, in_$p51, in_$i52, in_$i53, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$i64, in_$p66, in_$i67, in_$i68, in_$i69, in_$p72, in_$i73, in_$i74, in_$i75, in_$p78, in_$i79, in_$i80, in_$i81, in_$p32, in_$p82, in_$p76, in_$p70, in_$p44, in_$p37, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4066;

  $bb13:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$p25 := out_$p31;
    goto $bb13_dummy;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    out_$p37 := out_$p31;
    assume true;
    goto $bb13;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4086;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.6, out_$p34);
    goto corral_source_split_4085;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4084;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.6, in_$p19);
    goto corral_source_split_4083;

  SeqInstr_156:
    goto corral_source_split_4082;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} out_$p31 := osst_do_scsi(out_$p32, in_$p0, out_$p28, 0, 3, out_$i30, 0, 1);
    goto SeqInstr_155;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_4081;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_4080;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4079;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, out_$p27, 0);
    goto corral_source_split_4078;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4077;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_4 := $M.25;
    call {:si_unique_call 450} out_cmdloc_dummy_var_5 := $memset.i8(out_cmdloc_dummy_var_4, out_$p26, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.25 := out_cmdloc_dummy_var_5;
    goto corral_source_split_4076;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4075;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} msleep(100);
    goto corral_source_split_4074;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_4115;

  $bb31:
    assume {:verifier.code 0} true;
    assume out_$i81 == 1;
    goto $bb23;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i64 == 1;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    assume out_$i59 == 1;
    goto $bb23;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p25;
    assume true;
    goto $bb22, $bb24;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i32(out_$i58, 1);
    goto corral_source_split_4113;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    goto corral_source_split_4112;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.6, out_$p56);
    goto corral_source_split_4111;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4110;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_4109;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 4);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i8.i32(out_$i52);
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i8($M.6, out_$p51);
    goto corral_source_split_4100;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4099;

  $bb17:
    assume out_$i49 == 1;
    goto corral_source_split_4098;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i48, 2);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_4093;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.6, out_$p46);
    goto corral_source_split_4092;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4091;

  $bb15:
    assume out_$i43 == 1;
    goto corral_source_split_4090;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    out_$p44 := out_$p25;
    assume true;
    goto $bb15;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    out_$i43 := $slt.i64(out_$i42, 0);
    goto corral_source_split_4072;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    out_$i42 := $sub.i64(out_$i38, out_$i41);
    goto corral_source_split_4071;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i64(out_$i40, in_$i5);
    goto corral_source_split_4070;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_4069;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    out_$i39 := $mul.i32(in_$i2, 250);
    goto corral_source_split_4068;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.6, jiffies);
    goto corral_source_split_4067;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p25;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i63, 8);
    goto corral_source_split_4121;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i8.i32(out_$i62);
    goto corral_source_split_4120;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i8($M.6, out_$p61);
    goto corral_source_split_4119;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4118;

  $bb24:
    assume !(out_$i59 == 1);
    goto corral_source_split_4117;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    out_$p32, out_$p82 := out_$p25, out_$p25;
    assume true;
    goto $bb31;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 0);
    goto corral_source_split_4135;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i8.i32(out_$i79);
    goto corral_source_split_4134;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i8($M.6, out_$p78);
    goto corral_source_split_4133;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_4132;

  $bb29:
    assume out_$i75 == 1;
    goto corral_source_split_4131;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    out_$p76 := out_$p25;
    assume true;
    goto $bb29;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 40);
    goto corral_source_split_4127;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i8.i32(out_$i73);
    goto corral_source_split_4126;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i8($M.6, out_$p72);
    goto corral_source_split_4125;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_4124;

  $bb27:
    assume out_$i69 == 1;
    goto corral_source_split_4123;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    out_$p70 := out_$p25;
    assume true;
    goto $bb27;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 6);
    goto corral_source_split_4107;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i8.i32(out_$i67);
    goto corral_source_split_4106;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i8($M.6, out_$p66);
    goto corral_source_split_4105;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_4104;

  $bb18:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb19;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i54 == 1);
    goto $bb19;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb19;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p25, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$i79, out_$i80, out_$i81, out_$p32, out_$p82, out_$p76, out_$p70, out_$p44, out_$p37, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5 := osst_wait_ready_loop_$bb11(in_$p0, in_$i2, in_$p4, in_$i5, in_$p19, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p33, out_$p34, out_$i35, out_$i36, out_$p25, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p46, out_$i47, out_$i48, out_$i49, out_$p51, out_$i52, out_$i53, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$i67, out_$i68, out_$i69, out_$p72, out_$i73, out_$i74, out_$i75, out_$p78, out_$i79, out_$i80, out_$i81, out_$p32, out_$p82, out_$p76, out_$p70, out_$p44, out_$p37, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5);
    return;

  exit:
    return;
}



procedure osst_wait_ready_loop_$bb11(in_$p0: ref, in_$i2: i32, in_$p4: ref, in_$i5: i64, in_$p19: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$p31: ref, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$p25: ref, in_$i38: i64, in_$i39: i32, in_$i40: i64, in_$i41: i64, in_$i42: i64, in_$i43: i1, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i1, in_$p51: ref, in_$i52: i8, in_$i53: i32, in_$i54: i1, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$p61: ref, in_$i62: i8, in_$i63: i32, in_$i64: i1, in_$p66: ref, in_$i67: i8, in_$i68: i32, in_$i69: i1, in_$p72: ref, in_$i73: i8, in_$i74: i32, in_$i75: i1, in_$p78: ref, in_$i79: i8, in_$i80: i32, in_$i81: i1, in_$p32: ref, in_$p82: ref, in_$p76: ref, in_$p70: ref, in_$p44: ref, in_$p37: ref, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$p31: ref, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$p25: ref, out_$i38: i64, out_$i39: i32, out_$i40: i64, out_$i41: i64, out_$i42: i64, out_$i43: i1, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i1, out_$p51: ref, out_$i52: i8, out_$i53: i32, out_$i54: i1, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$p61: ref, out_$i62: i8, out_$i63: i32, out_$i64: i1, out_$p66: ref, out_$i67: i8, out_$i68: i32, out_$i69: i1, out_$p72: ref, out_$i73: i8, out_$i74: i32, out_$i75: i1, out_$p78: ref, out_$i79: i8, out_$i80: i32, out_$i81: i1, out_$p32: ref, out_$p82: ref, out_$p76: ref, out_$p70: ref, out_$p44: ref, out_$p37: ref, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8);
  modifies $M.6, $CurrAddr, assertsPassed, $M.25;



implementation osst_set_frame_position_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$i30: i32, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$p40: ref, in_$i41: i32, in_$i42: i8, in_$p43: ref, in_$i44: i32, in_$i45: i8, in_$p46: ref, in_$i47: i8, in_$p48: ref, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i66: i1, in_$i68: i1, in_$i69: i32, in_$i67: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_vslice_dummy_var_189: i32) returns (out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$p40: ref, out_$i41: i32, out_$i42: i8, out_$p43: ref, out_$i44: i32, out_$i45: i8, out_$p46: ref, out_$i47: i8, out_$p48: ref, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i66: i1, out_$i68: i1, out_$i69: i32, out_$i67: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_vslice_dummy_var_189: i32)
{

  entry:
    out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i68, out_$i69, out_$i67, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_189 := in_$i33, in_$i34, in_$p35, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$p46, in_$i47, in_$p48, in_$i49, in_$p50, in_$p51, in_$p52, in_$p53, in_$i54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i66, in_$i68, in_$i69, in_$i67, in_cmdloc_dummy_var_6, in_cmdloc_dummy_var_7, in_vslice_dummy_var_189;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;

  $bb35:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i33, out_$i34 := out_$i63, in_$i30;
    goto $bb35_dummy;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i69 := out_$i63;
    assume true;
    goto $bb35;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    out_$i68 := $ne.i32(in_$i30, 0);
    goto corral_source_split_4256;

  $bb33:
    assume out_$i66 == 1;
    goto corral_source_split_4255;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$i67 := out_$i63;
    assume true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i34, in_$i30);
    goto corral_source_split_4253;

  $bb31:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_165:
    goto corral_source_split_4251;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} out_vslice_dummy_var_189 := osst_wait_ready(in_$p0, in_$p1, 300, 1);
    goto SeqInstr_164;

  $bb30:
    assume out_$i64 == 1;
    goto corral_source_split_4250;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i34, in_$i30);
    goto corral_source_split_4248;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4247;

  $bb28:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := out_$i33;
    goto $bb29;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    out_$i63 := $sub.i32(0, 5);
    goto $bb29;

  $bb27:
    assume out_$i62 == 1;
    goto corral_source_split_4245;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    out_$i62 := $ne.i32(out_$i61, 0);
    goto corral_source_split_4243;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.6, out_$p60);
    goto corral_source_split_4242;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_4241;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.6, out_$p58);
    goto corral_source_split_4240;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_4239;

  $bb26:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, in_$p1, out_$p55);
    goto corral_source_split_4238;

  $bb25:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_4233;

  SeqInstr_162:
    goto corral_source_split_4232;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} out_$p55 := osst_do_scsi(out_$p51, in_$p0, out_$p52, 0, 3, out_$i54, 0, 1);
    goto SeqInstr_161;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.6, out_$p53);
    goto corral_source_split_4231;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(308, 1));
    goto corral_source_split_4230;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4229;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.6, in_$p1);
    goto corral_source_split_4228;

  $bb22:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p50, $sub.i8(0, 128));
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(9, 1));
    goto corral_source_split_4225;

  $bb21:
    assume out_$i49 == 1;
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(in_$i3, 0);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p48, out_$i47);
    goto corral_source_split_4221;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_4220;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    out_$i47 := $trunc.i32.i8(out_$i34);
    goto corral_source_split_4219;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p46, out_$i45);
    goto corral_source_split_4218;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(5, 1));
    goto corral_source_split_4217;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    out_$i45 := $trunc.i32.i8(out_$i44);
    goto corral_source_split_4216;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    out_$i44 := $ashr.i32(out_$i34, 8);
    goto corral_source_split_4215;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p43, out_$i42);
    goto corral_source_split_4214;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4213;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i8(out_$i41);
    goto corral_source_split_4212;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    out_$i41 := $ashr.i32(out_$i34, 16);
    goto corral_source_split_4211;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p40, out_$i39);
    goto corral_source_split_4210;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(3, 1));
    goto corral_source_split_4209;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i8(out_$i38);
    goto corral_source_split_4208;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    out_$i38 := $ashr.i32(out_$i34, 24);
    goto corral_source_split_4207;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p37, 1);
    goto corral_source_split_4206;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_4205;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, out_$p36, 43);
    goto corral_source_split_4204;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4203;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_6 := $M.26;
    call {:si_unique_call 459} out_cmdloc_dummy_var_7 := $memset.i8(out_cmdloc_dummy_var_6, out_$p35, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.26 := out_cmdloc_dummy_var_7;
    goto corral_source_split_4202;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_4201;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i68, out_$i69, out_$i67, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_189 := osst_set_frame_position_loop_$bb20(in_$p0, in_$p1, in_$i3, in_$p4, in_$i30, out_$i33, out_$i34, out_$p35, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$p53, out_$i54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i66, out_$i68, out_$i69, out_$i67, out_cmdloc_dummy_var_6, out_cmdloc_dummy_var_7, out_vslice_dummy_var_189);
    return;

  exit:
    return;
}



procedure osst_set_frame_position_loop_$bb20(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p4: ref, in_$i30: i32, in_$i33: i32, in_$i34: i32, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$i39: i8, in_$p40: ref, in_$i41: i32, in_$i42: i8, in_$p43: ref, in_$i44: i32, in_$i45: i8, in_$p46: ref, in_$i47: i8, in_$p48: ref, in_$i49: i1, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$i54: i32, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$i63: i32, in_$i64: i1, in_$i66: i1, in_$i68: i1, in_$i69: i32, in_$i67: i32, in_cmdloc_dummy_var_6: [ref]i8, in_cmdloc_dummy_var_7: [ref]i8, in_vslice_dummy_var_189: i32) returns (out_$i33: i32, out_$i34: i32, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$i39: i8, out_$p40: ref, out_$i41: i32, out_$i42: i8, out_$p43: ref, out_$i44: i32, out_$i45: i8, out_$p46: ref, out_$i47: i8, out_$p48: ref, out_$i49: i1, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$i54: i32, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$i63: i32, out_$i64: i1, out_$i66: i1, out_$i68: i1, out_$i69: i32, out_$i67: i32, out_cmdloc_dummy_var_6: [ref]i8, out_cmdloc_dummy_var_7: [ref]i8, out_vslice_dummy_var_189: i32);
  modifies $M.25, $M.6, $M.26, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_execute_loop_$bb14(in_$i6: i32, in_$p38: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i1, in_$i42: i32, in_$p43: ref) returns (out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i1, out_$i42: i32, out_$p43: ref)
{

  entry:
    out_$p44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i42, out_$p43 := in_$p44, in_$i45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i42, in_$p43;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4736;

  $bb16:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$p43 := out_$i47, out_$p48;
    goto $bb16_dummy;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i47, in_$i6);
    goto corral_source_split_4744;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} out_$p48 := sg_next(out_$p43);
    goto corral_source_split_4743;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i42, 1);
    call {:si_unique_call 522} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_4742;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p46, out_$p44);
    goto corral_source_split_4741;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref(in_$p38, $mul.ref(out_$i45, 8));
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    out_$i45 := $sext.i32.i64(out_$i42);
    goto corral_source_split_4739;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} out_$p44 := sg_page(out_$p43);
    goto corral_source_split_4738;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i42, out_$p43 := osst_execute_loop_$bb14(in_$i6, in_$p38, out_$p44, out_$i45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i42, out_$p43);
    return;

  exit:
    return;
}



procedure osst_execute_loop_$bb14(in_$i6: i32, in_$p38: ref, in_$p44: ref, in_$i45: i64, in_$p46: ref, in_$i47: i32, in_$p48: ref, in_$i49: i1, in_$i42: i32, in_$p43: ref) returns (out_$p44: ref, out_$i45: i64, out_$p46: ref, out_$i47: i32, out_$p48: ref, out_$i49: i1, out_$i42: i32, out_$p43: ref);
  modifies $M.6;



implementation osst_reposition_and_retry_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i8: i64, in_$i14: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i36: i32, in_$i37: i64, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i103: i64, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_212: i64) returns (out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i36: i32, out_$i37: i64, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i103: i64, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_212: i64)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i36, in_$i37, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p92, in_$i93, in_$i94, in_$i95, in_$i103, in_$i15, in_$i16, in_$i17, in_$i18, in_$i105, in_$i106, in_$i107, in_$i108, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_212;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17, out_$i18 := out_$i48, out_$i41, out_$i47, out_$i39;
    goto $bb19_dummy;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i41, 0);
    goto corral_source_split_5259;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i40, out_$i42;
    goto $bb18;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i46, 1;
    goto $bb18;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.6, out_$p45);
    call {:si_unique_call 627} {:cexpr "frame"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_5255;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_5254;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 0);
    goto corral_source_split_5252;

  SeqInstr_210:
    call {:si_unique_call 626} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_5251;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} out_$i43 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_209;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$i41, out_$i42 := out_$i18, out_$i17, out_$i16, out_$i15;
    goto $bb15;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$i41, out_$i42 := out_$i33, out_$i28, out_$i36, 0;
    goto $bb15;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_vslice_dummy_var_208 := schedule_timeout_interruptible(out_$i37);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} out_$i37 := msecs_to_jiffies(100);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 621} {:cexpr "attempts"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_5246;

  SeqInstr_207:
    goto corral_source_split_5245;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} out_vslice_dummy_var_207 := osst_set_frame_position(in_$p0, in_$p1, out_$i34, 1);
    goto SeqInstr_206;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i28, in_$i3);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i32, in_$i14);
    call {:si_unique_call 619} {:cexpr "expected"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i29, out_$i31);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.6, out_$p30);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, in_$i3);
    goto corral_source_split_5239;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i17;
    goto $bb14;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i27;
    goto $bb14;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(3000, in_$i3);
    call {:si_unique_call 618} {:cexpr "frame"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5236;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, 2989);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, in_$i14);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i21, out_$i23);
    goto corral_source_split_5231;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.6, out_$p22);
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i17, in_$i3);
    goto corral_source_split_5228;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    out_$i20 := $ule.i32(out_$i17, 2989);
    goto corral_source_split_5225;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i15, 0);
    goto corral_source_split_5222;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb49:
    assume out_$i108 == 1;
    goto corral_source_split_5339;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i64(out_$i107, 0);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i64(out_$i106, 15000);
    goto corral_source_split_5219;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i64(out_$i105, in_$i8);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.6, jiffies);
    goto corral_source_split_5217;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb11;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_vslice_dummy_var_212 := schedule_timeout_interruptible(out_$i103);
    goto corral_source_split_5337;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_$i103 := msecs_to_jiffies(100);
    call {:si_unique_call 634} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_5336;

  $bb43:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i39;
    assume true;
    goto $bb43;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.6, out_$p92);
    goto corral_source_split_5321;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5320;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb24;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$i56, out_$i57 := out_$i39, out_$i40, out_$i41, out_$i42;
    assume true;
    goto $bb26;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    out_$i53 := $sle.i32(out_$i52, 49);
    goto corral_source_split_5268;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, out_$p51);
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5266;

  $bb22:
    assume out_$i50 == 1;
    goto corral_source_split_5265;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(in_$i14, 0);
    goto corral_source_split_5263;

  $bb17:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := osst_reposition_and_retry_loop_$bb5(in_$p0, in_$p1, in_$i3, in_$i8, in_$i14, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212);
    return;

  exit:
    return;
}



procedure osst_reposition_and_retry_loop_$bb5(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i8: i64, in_$i14: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i36: i32, in_$i37: i64, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i103: i64, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_212: i64) returns (out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i36: i32, out_$i37: i64, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i103: i64, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_212: i64);
  modifies $M.6, $CurrAddr, assertsPassed, $M.26, $M.25, $M.39, $M.38;



implementation osst_reposition_and_retry_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i8: i64, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i36: i32, in_$i37: i64, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i103: i64, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_212: i64) returns (out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i36: i32, out_$i37: i64, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i103: i64, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_212: i64)
{

  entry:
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$p30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i36, in_$i37, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$p64, in_$i65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p79, in_$i80, in_$i81, in_$i82, in_$p84, in_$i85, in_$i86, in_$i87, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i103, in_$i15, in_$i16, in_$i17, in_$i18, in_$i105, in_$i106, in_$i107, in_$i108, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_212;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5214;

  $bb39:
    assume out_$i91 == 1;
    assume {:verifier.code 0} true;
    out_$i10, out_$i11, out_$i12, out_$i13, out_$i14 := out_$i90, out_$i56, out_$i55, out_$i54, out_$i89;
    goto $bb39_dummy;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i56, 0);
    goto corral_source_split_5316;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5315;

  $bb28:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i89, out_$i90 := 0, out_$i57;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i89, out_$i90 := out_$i14, 1;
    goto $bb38;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i77 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb31;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i87 == 1);
    goto $bb31;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 2);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i8.i32(out_$i85);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i8($M.6, out_$p84);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5305;

  $bb32:
    assume out_$i82 == 1;
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 0);
    goto corral_source_split_5302;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i8.i32(out_$i80);
    goto corral_source_split_5301;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i8($M.6, out_$p79);
    goto corral_source_split_5300;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5299;

  $bb29:
    assume out_$i77 == 1;
    goto corral_source_split_5298;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 13);
    goto corral_source_split_5296;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    out_$i76 := $and.i32(out_$i75, 15);
    goto corral_source_split_5295;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    out_$i75 := $zext.i8.i32(out_$i74);
    goto corral_source_split_5294;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    out_$i74 := $load.i8($M.6, out_$p73);
    goto corral_source_split_5293;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5292;

  $bb27:
    assume out_$i71 == 1;
    goto corral_source_split_5291;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_5289;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.6, out_$p69);
    goto corral_source_split_5288;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(out_$p68, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5287;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.6, out_$p67);
    goto corral_source_split_5286;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5285;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, in_$p1, out_$p66);
    goto corral_source_split_5284;

  SeqInstr_213:
    goto corral_source_split_5283;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} out_$p66 := osst_do_scsi(out_$p62, in_$p0, out_$p63, 33280, 1, out_$i65, 0, 1);
    goto SeqInstr_212;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.6, out_$p64);
    goto corral_source_split_5282;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5281;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5280;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.6, in_$p1);
    goto corral_source_split_5279;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, out_$p61, 1);
    goto corral_source_split_5278;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5277;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, out_$p60, 1);
    goto corral_source_split_5276;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5275;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, out_$p59, 10);
    goto corral_source_split_5274;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5273;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_26 := $M.38;
    call {:si_unique_call 628} out_cmdloc_dummy_var_27 := $memset.i8(out_cmdloc_dummy_var_26, out_$p58, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.38 := out_cmdloc_dummy_var_27;
    goto corral_source_split_5272;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5271;

  $bb25:
    assume out_$i53 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5270;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    out_$i54, out_$i55, out_$i56, out_$i57 := out_$i39, out_$i40, out_$i41, out_$i42;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    out_$i53 := $sle.i32(out_$i52, 49);
    goto corral_source_split_5268;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, out_$p51);
    goto corral_source_split_5267;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5266;

  $bb22:
    assume out_$i50 == 1;
    goto corral_source_split_5265;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i32(out_$i14, 0);
    goto corral_source_split_5263;

  $bb17:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, 0);
    goto corral_source_split_5252;

  SeqInstr_210:
    call {:si_unique_call 626} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i43);
    goto corral_source_split_5251;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} out_$i43 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_209;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5250;

  $bb8:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$i41, out_$i42 := out_$i18, out_$i17, out_$i16, out_$i15;
    goto $bb15;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40, out_$i41, out_$i42 := out_$i33, out_$i28, out_$i36, 0;
    goto $bb15;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} out_vslice_dummy_var_208 := schedule_timeout_interruptible(out_$i37);
    goto corral_source_split_5248;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} out_$i37 := msecs_to_jiffies(100);
    call {:si_unique_call 623} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i37);
    goto corral_source_split_5247;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    out_$i36 := $sub.i32(out_$i16, 1);
    call {:si_unique_call 621} {:cexpr "attempts"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_5246;

  SeqInstr_207:
    goto corral_source_split_5245;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} out_vslice_dummy_var_207 := osst_set_frame_position(in_$p0, in_$p1, out_$i34, 1);
    goto SeqInstr_206;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i28, in_$i3);
    goto corral_source_split_5244;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i32, out_$i14);
    call {:si_unique_call 619} {:cexpr "expected"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5243;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    out_$i32 := $add.i32(out_$i29, out_$i31);
    goto corral_source_split_5242;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.6, out_$p30);
    goto corral_source_split_5241;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5240;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i28, in_$i3);
    goto corral_source_split_5239;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5238;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i17;
    goto $bb14;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i27;
    goto $bb14;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    out_$i27 := $sub.i32(3000, in_$i3);
    call {:si_unique_call 618} {:cexpr "frame"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5236;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_5235;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    out_$i26 := $ugt.i32(out_$i25, 2989);
    goto corral_source_split_5233;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, out_$i14);
    goto corral_source_split_5232;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i21, out_$i23);
    goto corral_source_split_5231;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.6, out_$p22);
    goto corral_source_split_5230;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5229;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i17, in_$i3);
    goto corral_source_split_5228;

  $bb9:
    assume out_$i20 == 1;
    goto corral_source_split_5227;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    out_$i20 := $ule.i32(out_$i17, 2989);
    goto corral_source_split_5225;

  $bb7:
    assume out_$i19 == 1;
    goto corral_source_split_5224;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i32(out_$i15, 0);
    goto corral_source_split_5222;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb49:
    assume out_$i108 == 1;
    goto corral_source_split_5339;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    out_$i108 := $slt.i64(out_$i107, 0);
    goto corral_source_split_5220;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i64(out_$i106, 15000);
    goto corral_source_split_5219;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    out_$i106 := $sub.i64(out_$i105, in_$i8);
    goto corral_source_split_5218;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.6, jiffies);
    goto corral_source_split_5217;

  $bb5:
    call out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := osst_reposition_and_retry_loop_$bb5(in_$p0, in_$p1, in_$i3, in_$i8, out_$i14, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212);
    goto $bb5_last;

  $bb5_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17, out_$i18 := out_$i10, out_$i11, out_$i12, out_$i13;
    goto $bb5;

  $bb19:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$i16, out_$i17, out_$i18 := out_$i48, out_$i41, out_$i47, out_$i39;
    assume false;
    return;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    out_$i49 := $ne.i32(out_$i41, 0);
    goto corral_source_split_5259;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5258;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i40, out_$i42;
    goto $bb18;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    out_$i47, out_$i48 := out_$i46, 1;
    goto $bb18;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i32($M.6, out_$p45);
    call {:si_unique_call 627} {:cexpr "frame"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_5256;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_5255;

  $bb16:
    assume out_$i44 == 1;
    goto corral_source_split_5254;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} out_vslice_dummy_var_212 := schedule_timeout_interruptible(out_$i103);
    goto corral_source_split_5337;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} out_$i103 := msecs_to_jiffies(100);
    call {:si_unique_call 634} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_5336;

  $bb43:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i39;
    assume true;
    goto $bb43;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 0);
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.6, out_$p92);
    goto corral_source_split_5321;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_5320;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb24;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i20 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb11;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212 := osst_reposition_and_retry_loop_$bb4(in_$p0, in_$p1, in_$i3, in_$p5, in_$i8, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$p30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i36, out_$i37, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$p64, out_$i65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p79, out_$i80, out_$i81, out_$i82, out_$p84, out_$i85, out_$i86, out_$i87, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i103, out_$i15, out_$i16, out_$i17, out_$i18, out_$i105, out_$i106, out_$i107, out_$i108, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_212);
    return;

  exit:
    return;
}



procedure osst_reposition_and_retry_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p5: ref, in_$i8: i64, in_$i10: i32, in_$i11: i32, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i19: i1, in_$i20: i1, in_$i21: i32, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i27: i32, in_$i28: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i36: i32, in_$i37: i64, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i32, in_$i57: i32, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$p73: ref, in_$i74: i8, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p79: ref, in_$i80: i8, in_$i81: i32, in_$i82: i1, in_$p84: ref, in_$i85: i8, in_$i86: i32, in_$i87: i1, in_$i89: i32, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i103: i64, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$i108: i1, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i64, in_vslice_dummy_var_212: i64) returns (out_$i10: i32, out_$i11: i32, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i19: i1, out_$i20: i1, out_$i21: i32, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i27: i32, out_$i28: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i36: i32, out_$i37: i64, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i32, out_$i57: i32, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$p73: ref, out_$i74: i8, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p79: ref, out_$i80: i8, out_$i81: i32, out_$i82: i1, out_$p84: ref, out_$i85: i8, out_$i86: i32, out_$i87: i1, out_$i89: i32, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i103: i64, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$i108: i1, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i64, out_vslice_dummy_var_212: i64);
  modifies $M.6, $CurrAddr, assertsPassed, $M.38, $M.26, $M.25, $M.39;



implementation osst_read_back_buffer_and_rewrite_loop_$bb51(in_$p0: ref, in_$p5: ref, in_$i44: i64, in_$i194: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p210: ref, in_$i211: i8, in_$i212: i32, in_$i213: i1, in_$p215: ref, in_$i216: i8, in_$i217: i32, in_$i218: i1, in_$p220: ref, in_$i221: i8, in_$i222: i32, in_$i223: i1, in_$p208: ref, in_$p196: ref, in_$i233: i64, in_$i234: i64, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p224: ref, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p210: ref, out_$i211: i8, out_$i212: i32, out_$i213: i1, out_$p215: ref, out_$i216: i8, out_$i217: i32, out_$i218: i1, out_$p220: ref, out_$i221: i8, out_$i222: i32, out_$i223: i1, out_$p208: ref, out_$p196: ref, out_$i233: i64, out_$i234: i64, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p224: ref, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8)
{

  entry:
    out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := in_$p197, in_$p198, in_$p199, in_$p200, in_$i201, in_$p202, in_$p204, in_$i205, in_$i206, in_$i207, in_$p210, in_$i211, in_$i212, in_$i213, in_$p215, in_$i216, in_$i217, in_$i218, in_$p220, in_$i221, in_$i222, in_$i223, in_$p208, in_$p196, in_$i233, in_$i234, in_$i235, in_$i236, in_$p237, in_$p224, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35;
    goto $bb51, exit;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  $bb63:
    assume in_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$p196 := out_$p202;
    goto $bb63_dummy;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p224 := out_$p202;
    assume true;
    goto $bb63;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} msleep(100);
    goto corral_source_split_5601;

  $bb61:
    assume {:verifier.code 0} true;
    assume out_$i223 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i218 == 1;
    goto $bb59;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i217 := $zext.i8.i32(out_$i216);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i8($M.6, out_$p215);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5596;

  $bb56:
    assume out_$i213 == 1;
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb56;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 4);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i212 := $zext.i8.i32(out_$i211);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i211 := $load.i8($M.6, out_$p210);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5590;

  $bb53:
    assume out_$i207 == 1;
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb53;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i206 := $zext.i8.i32(out_$i205);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i8($M.6, out_$p204);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5584;

  SeqInstr_240:
    goto corral_source_split_5583;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$p202 := osst_do_scsi(out_$p196, in_$p0, out_$p199, 0, 3, out_$i201, 0, 1);
    goto SeqInstr_239;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.6, out_$p200);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$p199 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p198, 0);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_34 := $M.39;
    call {:si_unique_call 681} out_cmdloc_dummy_var_35 := $memset.i8(out_cmdloc_dummy_var_34, out_$p197, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := out_cmdloc_dummy_var_35;
    goto corral_source_split_5577;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p197 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5576;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb70:
    assume out_$i236 == 1;
    goto corral_source_split_5623;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$p237 := out_$p196;
    assume true;
    goto $bb70;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i64(out_$i235, 0);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i235 := $sub.i64(out_$i234, 15000);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i64(out_$i233, in_$i44);
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i64($M.6, jiffies);
    goto corral_source_split_5571;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb61;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 8);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i222 := $zext.i8.i32(out_$i221);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i8($M.6, out_$p220);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5604;

  $bb60:
    assume !(out_$i218 == 1);
    goto corral_source_split_5603;

  $bb63_dummy:
    call {:si_unique_call 1} out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := osst_read_back_buffer_and_rewrite_loop_$bb51(in_$p0, in_$p5, in_$i44, in_$i194, out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    return;

  exit:
    return;
}



procedure osst_read_back_buffer_and_rewrite_loop_$bb51(in_$p0: ref, in_$p5: ref, in_$i44: i64, in_$i194: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p210: ref, in_$i211: i8, in_$i212: i32, in_$i213: i1, in_$p215: ref, in_$i216: i8, in_$i217: i32, in_$i218: i1, in_$p220: ref, in_$i221: i8, in_$i222: i32, in_$i223: i1, in_$p208: ref, in_$p196: ref, in_$i233: i64, in_$i234: i64, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p224: ref, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p210: ref, out_$i211: i8, out_$i212: i32, out_$i213: i1, out_$p215: ref, out_$i216: i8, out_$i217: i32, out_$i218: i1, out_$p220: ref, out_$i221: i8, out_$i222: i32, out_$i223: i1, out_$p208: ref, out_$p196: ref, out_$i233: i64, out_$i234: i64, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p224: ref, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8);
  modifies $M.6, $CurrAddr, assertsPassed, $M.39;



implementation osst_read_back_buffer_and_rewrite_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$i8: i32, in_$i21: i32, in_$i31: i32, in_$i42: i32, in_$i44: i64, in_$p48: ref, in_$i92: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i64, in_$p108: ref, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i119: i32, in_$i118: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i120: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$p131: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p210: ref, in_$i211: i8, in_$i212: i32, in_$i213: i1, in_$p215: ref, in_$i216: i8, in_$i217: i32, in_$i218: i1, in_$p220: ref, in_$i221: i8, in_$i222: i32, in_$i223: i1, in_$p208: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$p196: ref, in_$i233: i64, in_$i234: i64, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p224: ref, in_$p195: ref, in_$p231: ref, in_$i232: i32, in_$p238: ref, in_$i239: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i240: i1, in_$p242: ref, in_$i243: i8, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p248: ref, in_$i249: i8, in_$i250: i32, in_$i251: i1, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i1, in_$p259: ref, in_$i260: i8, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p276: ref, in_$i277: i8, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i64, in_$p283: ref, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p288: ref, in_$i289: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_224: i32) returns (out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i64, out_$p108: ref, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i119: i32, out_$i118: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i120: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$p131: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p210: ref, out_$i211: i8, out_$i212: i32, out_$i213: i1, out_$p215: ref, out_$i216: i8, out_$i217: i32, out_$i218: i1, out_$p220: ref, out_$i221: i8, out_$i222: i32, out_$i223: i1, out_$p208: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$p196: ref, out_$i233: i64, out_$i234: i64, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p224: ref, out_$p195: ref, out_$p231: ref, out_$i232: i32, out_$p238: ref, out_$i239: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i240: i1, out_$p242: ref, out_$i243: i8, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p248: ref, out_$i249: i8, out_$i250: i32, out_$i251: i1, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i1, out_$p259: ref, out_$i260: i8, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p276: ref, out_$i277: i8, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i64, out_$p283: ref, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p288: ref, out_$i289: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_224: i32)
{

  entry:
    out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i118, out_$p109, out_$i110, out_$i111, out_$i120, out_$p124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$p131, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p142, out_$p143, out_$p144, out_$p145, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i230, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_$p195, out_$p231, out_$i232, out_$p238, out_$i239, out_$p175, out_$p176, out_$i177, out_$i178, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$p253, out_$i254, out_$i255, out_$i256, out_$p259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p285, out_$i286, out_$i287, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p288, out_$i289, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_222, out_vslice_dummy_var_224 := in_$i101, in_$p102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p108, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i119, in_$i118, in_$p109, in_$i110, in_$i111, in_$i120, in_$p124, in_$i125, in_$i126, in_$i128, in_$i129, in_$i130, in_$p131, in_$p134, in_$p135, in_$i136, in_$i137, in_$i138, in_$p139, in_$p140, in_$p142, in_$p143, in_$p144, in_$p145, in_$p149, in_$i150, in_$i151, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$p163, in_$p164, in_$p165, in_$p166, in_$p167, in_$i168, in_$p169, in_$p170, in_$p171, in_$p172, in_$i173, in_$i174, in_$p179, in_$i180, in_$i181, in_$i182, in_$p183, in_$p184, in_$p185, in_$p186, in_$p187, in_$i188, in_$p189, in_$p190, in_$p191, in_$p192, in_$i193, in_$i194, in_$p197, in_$p198, in_$p199, in_$p200, in_$i201, in_$p202, in_$p204, in_$i205, in_$i206, in_$i207, in_$p210, in_$i211, in_$i212, in_$i213, in_$p215, in_$i216, in_$i217, in_$i218, in_$p220, in_$i221, in_$i222, in_$i223, in_$p208, in_$p225, in_$p226, in_$p227, in_$i228, in_$i229, in_$i230, in_$p196, in_$i233, in_$i234, in_$i235, in_$i236, in_$p237, in_$p224, in_$p195, in_$p231, in_$i232, in_$p238, in_$i239, in_$p175, in_$p176, in_$i177, in_$i178, in_$i240, in_$p242, in_$i243, in_$i244, in_$i245, in_$i246, in_$p248, in_$i249, in_$i250, in_$i251, in_$p253, in_$i254, in_$i255, in_$i256, in_$p259, in_$i260, in_$i261, in_$i262, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p270, in_$i271, in_$i272, in_$i273, in_$i274, in_$p276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$p283, in_$p285, in_$i286, in_$i287, in_$i96, in_$i97, in_$i98, in_$p99, in_$p100, in_$p288, in_$i289, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_222, in_vslice_dummy_var_224;
    goto $bb22, exit;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5451;

  $bb85:
    assume out_$i287 == 1;
    assume {:verifier.code 0} true;
    out_$i96, out_$i97, out_$i98, out_$p99, out_$p100 := out_$i286, out_$i137, out_$i177, out_$p285, out_$p175;
    goto $bb85_dummy;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$p288, out_$i289 := out_$p285, out_$i177;
    assume true;
    goto $bb85;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$i287 := $sgt.i32(in_$i92, out_$i286);
    goto corral_source_split_5675;

  $bb84:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5674;

  $bb75:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    out_$p285, out_$i286 := out_$p176, out_$i178;
    goto $bb84;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$p285, out_$i286 := out_$p283, out_$i280;
    goto $bb84;

  SeqInstr_243:
    goto corral_source_split_5672;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} out_vslice_dummy_var_224 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_242;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    out_$p283 := $add.ref(in_$p48, $mul.ref(out_$i282, 1));
    goto corral_source_split_5671;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i282 := $sext.i32.i64(out_$i281);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i281 := $mul.i32(out_$i280, 32768);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i280 := $sub.i32(out_$i279, out_$i137);
    call {:si_unique_call 686} {:cexpr "i"} boogie_si_record_i32(out_$i280);
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i279 := $or.i32(out_$i274, out_$i278);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i278 := $zext.i8.i32(out_$i277);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$i277 := $load.i8($M.6, out_$p276);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$p276 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(6, 1));
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i274 := $or.i32(out_$i268, out_$i273);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i273 := $shl.i32(out_$i272, 8);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$i272 := $zext.i8.i32(out_$i271);
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    out_$i271 := $load.i8($M.6, out_$p270);
    goto corral_source_split_5660;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(5, 1));
    goto corral_source_split_5659;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    out_$i268 := $or.i32(out_$i262, out_$i267);
    goto corral_source_split_5658;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    out_$i267 := $shl.i32(out_$i266, 16);
    goto corral_source_split_5657;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    out_$i266 := $zext.i8.i32(out_$i265);
    goto corral_source_split_5656;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    out_$i265 := $load.i8($M.6, out_$p264);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    out_$p264 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(4, 1));
    goto corral_source_split_5654;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    out_$i262 := $shl.i32(out_$i261, 24);
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    out_$i261 := $zext.i8.i32(out_$i260);
    goto corral_source_split_5652;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$i260 := $load.i8($M.6, out_$p259);
    goto corral_source_split_5651;

  $bb83:
    assume {:verifier.code 0} true;
    out_$p259 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(3, 1));
    goto corral_source_split_5650;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb77:
    assume {:verifier.code 0} true;
    assume !(out_$i246 == 1);
    goto $bb78;

  $bb80:
    assume {:verifier.code 0} true;
    assume !(out_$i251 == 1);
    goto $bb78;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i256 == 1);
    goto $bb78;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 2);
    goto corral_source_split_5644;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$i255 := $zext.i8.i32(out_$i254);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    out_$i254 := $load.i8($M.6, out_$p253);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5641;

  $bb79:
    assume out_$i251 == 1;
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 0);
    goto corral_source_split_5638;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    out_$i250 := $zext.i8.i32(out_$i249);
    goto corral_source_split_5637;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    out_$i249 := $load.i8($M.6, out_$p248);
    goto corral_source_split_5636;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    out_$p248 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5635;

  $bb76:
    assume out_$i246 == 1;
    goto corral_source_split_5634;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    out_$i246 := $eq.i32(out_$i245, 13);
    goto corral_source_split_5632;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    out_$i245 := $and.i32(out_$i244, 15);
    goto corral_source_split_5631;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    out_$i244 := $zext.i8.i32(out_$i243);
    goto corral_source_split_5630;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$i243 := $load.i8($M.6, out_$p242);
    goto corral_source_split_5629;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref($add.ref(out_$p175, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5628;

  $bb74:
    assume out_$i240 == 1;
    goto corral_source_split_5627;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    out_$i240 := $ne.i32(out_$i177, 0);
    goto corral_source_split_5549;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, in_$p1, out_$p175);
    goto corral_source_split_5548;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5547;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p175, out_$p176, out_$i177, out_$i178 := out_$p238, out_$p179, out_$i239, out_$i180;
    goto $bb45;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    out_$p175, out_$p176, out_$i177, out_$i178 := out_$p169, out_$p135, 1, out_$i138;
    goto $bb45;

  $bb43:
    assume out_$i174 == 1;
    goto corral_source_split_5539;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    out_$i174 := $ne.i32(out_$i173, 0);
    goto corral_source_split_5537;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.6, out_$p172);
    goto corral_source_split_5536;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p171, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5535;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    out_$p171 := $load.ref($M.6, out_$p170);
    goto corral_source_split_5534;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5533;

  SeqInstr_234:
    goto corral_source_split_5532;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} out_$p169 := osst_do_scsi(out_$p134, in_$p0, out_$p166, 33280, 1, out_$i168, 0, 1);
    goto SeqInstr_233;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    out_$i168 := $load.i32($M.6, out_$p167);
    goto corral_source_split_5531;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5530;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    out_$p166 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5529;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p165, 1);
    goto corral_source_split_5528;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5527;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p164, 1);
    goto corral_source_split_5526;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5525;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p163, 10);
    goto corral_source_split_5524;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$p163 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_30 := $M.39;
    call {:si_unique_call 675} out_cmdloc_dummy_var_31 := $memset.i8(out_cmdloc_dummy_var_30, out_$p162, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := out_cmdloc_dummy_var_31;
    goto corral_source_split_5522;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    out_$p162 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5521;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} osst_init_aux(in_$p0, out_$i158, out_$i159, out_$i161, out_$i151, in_$i21);
    goto corral_source_split_5520;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    out_$i161 := $add.i32(out_$i160, in_$i42);
    goto corral_source_split_5519;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    out_$i160 := $mul.i32(out_$i138, in_$i21);
    goto corral_source_split_5518;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    out_$i159 := $add.i32(in_$i31, out_$i138);
    goto corral_source_split_5517;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i8.i32(out_$i157);
    goto corral_source_split_5516;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i8($M.6, out_$p156);
    goto corral_source_split_5515;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p155, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5514;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.6, out_$p154);
    goto corral_source_split_5513;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p153, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5512;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    out_$p153 := $load.ref($M.6, out_$p152);
    goto corral_source_split_5511;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5510;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} out_$i151 := __fswab32(out_$i150);
    call {:si_unique_call 673} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_5509;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.6, out_$p149);
    goto corral_source_split_5508;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref($add.ref($add.ref($add.ref(out_$p145, $mul.ref(0, 512)), $mul.ref(56, 1)), $mul.ref(4, 1)), $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5507;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$p145 := $load.ref($M.6, out_$p144);
    goto corral_source_split_5506;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p143, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.6, out_$p142);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} out_vslice_dummy_var_222 := osst_copy_to_buffer(out_$p140, out_$p135);
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$p140 := $load.ref($M.6, out_$p139);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5500;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5499;

  $bb25:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    out_$p134, out_$p135, out_$i136, out_$i137, out_$i138 := out_$p100, out_$p99, out_$i98, out_$i97, out_$i96;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    out_$p134, out_$p135, out_$i136, out_$i137, out_$i138 := out_$p124, out_$p109, 0, out_$i110, out_$i111;
    goto $bb42;

  $bb39:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$i130, out_$p131 := out_$i98, out_$p109;
    assume true;
    goto $bb39;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i129 := $sle.i32(out_$i128, out_$i111);
    goto corral_source_split_5492;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i128 := $add.i32(in_$i8, in_$i4);
    goto corral_source_split_5491;

  $bb36:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$i126 := $ugt.i32(out_$i110, out_$i125);
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(in_$i2, 1000);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.6, in_$p1);
    goto corral_source_split_5474;

  SeqInstr_231:
    goto corral_source_split_5473;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} out_vslice_dummy_var_220 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_230;

  SeqInstr_228:
    goto corral_source_split_5472;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} out_vslice_dummy_var_219 := osst_wait_ready(in_$p0, in_$p1, 60, 1);
    goto SeqInstr_227;

  SeqInstr_225:
    goto corral_source_split_5471;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} out_vslice_dummy_var_218 := osst_set_frame_position(in_$p0, in_$p1, out_$i120, 0);
    goto SeqInstr_224;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i110, out_$i111);
    goto corral_source_split_5470;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5469;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p109, out_$i110, out_$i111 := out_$p99, out_$i118, out_$i96;
    goto $bb28;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    out_$p109, out_$i110, out_$i111 := out_$p108, out_$i97, out_$i105;
    goto $bb28;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref(out_$p99, $mul.ref(out_$i107, 1));
    goto corral_source_split_5464;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i32.i64(out_$i106);
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$i106 := $mul.i32(in_$i3, 32768);
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    out_$i105 := $add.i32(out_$i96, in_$i3);
    call {:si_unique_call 663} {:cexpr "i"} boogie_si_record_i32(out_$i105);
    goto corral_source_split_5461;

  $bb26:
    assume out_$i104 == 1;
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 4);
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.6, out_$p102);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(764, 1));
    goto corral_source_split_5456;

  $bb24:
    assume out_$i101 == 1;
    goto corral_source_split_5455;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i98, 0);
    goto corral_source_split_5453;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i97, in_$i3);
    call {:si_unique_call 667} {:cexpr "new_frame"} boogie_si_record_i32(out_$i119);
    assume {:verifier.code 0} true;
    out_$i118 := out_$i119;
    goto $bb34;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    out_$i118 := out_$i117;
    goto $bb34;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    out_$i117 := $sub.i32(3000, out_$i96);
    call {:si_unique_call 668} {:cexpr "new_frame"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_5485;

  $bb32:
    assume out_$i116 == 1;
    goto corral_source_split_5484;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    out_$i116 := $ugt.i32(out_$i115, 2989);
    goto corral_source_split_5482;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i115 := $add.i32(out_$i114, in_$i4);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i113, in_$i8);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i97, in_$i3);
    goto corral_source_split_5479;

  $bb29:
    assume out_$i112 == 1;
    goto corral_source_split_5478;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    out_$i112 := $sle.i32(out_$i97, 2989);
    goto corral_source_split_5467;

  $bb27:
    assume !(out_$i104 == 1);
    goto corral_source_split_5466;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i116 == 1);
    goto $bb31;

  $bb47:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    out_$p238, out_$i239 := out_$p169, out_$i136;
    goto $bb73;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$p238, out_$i239 := out_$p231, out_$i232;
    goto $bb73;

  $bb69:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5621;

  $bb72:
    assume {:verifier.code 0} true;
    out_$p231, out_$i232 := out_$p195, out_$i193;
    goto $bb69;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    out_$p231, out_$i232 := out_$p208, out_$i230;
    goto $bb69;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_5619;

  $bb67:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    out_$i230 := out_$i193;
    goto $bb68;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i230 := 1;
    goto $bb68;

  $bb66:
    assume out_$i229 == 1;
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i32(out_$i228, 0);
    goto corral_source_split_5615;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i228 := $load.i32($M.6, out_$p227);
    goto corral_source_split_5614;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$p227 := $add.ref($add.ref(out_$p226, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p226 := $load.ref($M.6, out_$p225);
    goto corral_source_split_5612;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5611;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb54:
    assume {:verifier.code 0} true;
    assume !(out_$i207 == 1);
    goto $bb55;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i213 == 1);
    goto $bb55;

  $bb62:
    assume {:verifier.code 0} true;
    assume !(out_$i223 == 1);
    goto $bb55;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 8);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    out_$i222 := $zext.i8.i32(out_$i221);
    goto corral_source_split_5606;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i8($M.6, out_$p220);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5604;

  $bb60:
    assume !(out_$i218 == 1);
    goto corral_source_split_5603;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb60;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$i217 := $zext.i8.i32(out_$i216);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i8($M.6, out_$p215);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$p215 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_5596;

  $bb56:
    assume out_$i213 == 1;
    goto corral_source_split_5595;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 4);
    goto corral_source_split_5593;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    out_$i212 := $zext.i8.i32(out_$i211);
    goto corral_source_split_5592;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    out_$i211 := $load.i8($M.6, out_$p210);
    goto corral_source_split_5591;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_5590;

  $bb53:
    assume out_$i207 == 1;
    goto corral_source_split_5589;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    out_$p208 := out_$p202;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 2);
    goto corral_source_split_5587;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    out_$i206 := $zext.i8.i32(out_$i205);
    goto corral_source_split_5586;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    out_$i205 := $load.i8($M.6, out_$p204);
    goto corral_source_split_5585;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref($add.ref(out_$p202, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_5584;

  SeqInstr_240:
    goto corral_source_split_5583;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} out_$p202 := osst_do_scsi(out_$p196, in_$p0, out_$p199, 0, 3, out_$i201, 0, 1);
    goto SeqInstr_239;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.6, out_$p200);
    goto corral_source_split_5582;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5581;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    out_$p199 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5580;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p198, 0);
    goto corral_source_split_5579;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    out_$p198 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5578;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_34 := $M.39;
    call {:si_unique_call 681} out_cmdloc_dummy_var_35 := $memset.i8(out_cmdloc_dummy_var_34, out_$p197, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := out_cmdloc_dummy_var_35;
    goto corral_source_split_5577;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p197 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5576;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb70:
    assume out_$i236 == 1;
    goto corral_source_split_5623;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    out_$p237 := out_$p196;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    out_$i236 := $slt.i64(out_$i235, 0);
    goto corral_source_split_5574;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    out_$i235 := $sub.i64(out_$i234, 15000);
    goto corral_source_split_5573;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    out_$i234 := $sub.i64(out_$i233, in_$i44);
    goto corral_source_split_5572;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i64($M.6, jiffies);
    goto corral_source_split_5571;

  $bb51:
    call out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := osst_read_back_buffer_and_rewrite_loop_$bb51(in_$p0, in_$p5, in_$i44, out_$i194, out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    goto $bb51_last;

  $bb51_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5570;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    out_$p196 := out_$p189;
    goto $bb51;

  $bb63:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$p196 := out_$p202;
    assume false;
    return;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p224 := out_$p202;
    assume true;
    goto $bb63, $bb64;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} msleep(100);
    goto corral_source_split_5601;

  $bb61:
    assume {:verifier.code 0} true;
    assume out_$i223 == 1;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    assume out_$i218 == 1;
    goto $bb59;

  $bb48:
    assume out_$i194 == 1;
    goto corral_source_split_5568;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    out_$p195 := out_$p189;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    out_$i194 := $eq.i32(out_$i193, 0);
    goto corral_source_split_5566;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.6, out_$p192);
    call {:si_unique_call 680} {:cexpr "flag"} boogie_si_record_i32(out_$i193);
    goto corral_source_split_5565;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p191, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5564;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.6, out_$p190);
    goto corral_source_split_5563;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5562;

  SeqInstr_237:
    goto corral_source_split_5561;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_$p189 := osst_do_scsi(out_$p169, in_$p0, out_$p186, 0, 3, out_$i188, 0, 1);
    goto SeqInstr_236;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    out_$i188 := $load.i32($M.6, out_$p187);
    goto corral_source_split_5560;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    out_$p187 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5559;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    out_$p186 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5558;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p185, 1);
    goto corral_source_split_5557;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5556;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p184, 16);
    goto corral_source_split_5555;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5554;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_32 := $M.39;
    call {:si_unique_call 678} out_cmdloc_dummy_var_33 := $memset.i8(out_cmdloc_dummy_var_32, out_$p183, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := out_cmdloc_dummy_var_33;
    goto corral_source_split_5553;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    out_$p183 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5552;

  $bb46:
    assume out_$i182 == 1;
    goto corral_source_split_5551;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, out_$i180);
    goto corral_source_split_5545;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(in_$i8, in_$i4);
    goto corral_source_split_5544;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i32(out_$i138, 1);
    call {:si_unique_call 677} {:cexpr "i"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_5543;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref(out_$p135, $mul.ref(32768, 1));
    goto corral_source_split_5542;

  $bb44:
    assume !(out_$i174 == 1);
    goto corral_source_split_5541;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i194 == 1);
    goto $bb50;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$p195 := out_$p237;
    goto $bb50;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p195 := out_$p224;
    goto $bb50;

  $bb64:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5609;

  $bb71:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_5625;

  $bb85_dummy:
    call {:si_unique_call 1} out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i118, out_$p109, out_$i110, out_$i111, out_$i120, out_$p124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$p131, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p142, out_$p143, out_$p144, out_$p145, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i230, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_$p195, out_$p231, out_$i232, out_$p238, out_$i239, out_$p175, out_$p176, out_$i177, out_$i178, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$p253, out_$i254, out_$i255, out_$i256, out_$p259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p285, out_$i286, out_$i287, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p288, out_$i289, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_222, out_vslice_dummy_var_224 := osst_read_back_buffer_and_rewrite_loop_$bb22(in_$p0, in_$p1, in_$i2, in_$i3, in_$i4, in_$p5, in_$i8, in_$i21, in_$i31, in_$i42, in_$i44, in_$p48, in_$i92, out_$i101, out_$p102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p108, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i118, out_$p109, out_$i110, out_$i111, out_$i120, out_$p124, out_$i125, out_$i126, out_$i128, out_$i129, out_$i130, out_$p131, out_$p134, out_$p135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$p142, out_$p143, out_$p144, out_$p145, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$p163, out_$p164, out_$p165, out_$p166, out_$p167, out_$i168, out_$p169, out_$p170, out_$p171, out_$p172, out_$i173, out_$i174, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$p185, out_$p186, out_$p187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$i193, out_$i194, out_$p197, out_$p198, out_$p199, out_$p200, out_$i201, out_$p202, out_$p204, out_$i205, out_$i206, out_$i207, out_$p210, out_$i211, out_$i212, out_$i213, out_$p215, out_$i216, out_$i217, out_$i218, out_$p220, out_$i221, out_$i222, out_$i223, out_$p208, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$i230, out_$p196, out_$i233, out_$i234, out_$i235, out_$i236, out_$p237, out_$p224, out_$p195, out_$p231, out_$i232, out_$p238, out_$i239, out_$p175, out_$p176, out_$i177, out_$i178, out_$i240, out_$p242, out_$i243, out_$i244, out_$i245, out_$i246, out_$p248, out_$i249, out_$i250, out_$i251, out_$p253, out_$i254, out_$i255, out_$i256, out_$p259, out_$i260, out_$i261, out_$i262, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p270, out_$i271, out_$i272, out_$i273, out_$i274, out_$p276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$p283, out_$p285, out_$i286, out_$i287, out_$i96, out_$i97, out_$i98, out_$p99, out_$p100, out_$p288, out_$i289, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_222, out_vslice_dummy_var_224);
    return;

  exit:
    return;
}



procedure osst_read_back_buffer_and_rewrite_loop_$bb22(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i4: i32, in_$p5: ref, in_$i8: i32, in_$i21: i32, in_$i31: i32, in_$i42: i32, in_$i44: i64, in_$p48: ref, in_$i92: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i32, in_$i107: i64, in_$p108: ref, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i32, in_$i116: i1, in_$i117: i32, in_$i119: i32, in_$i118: i32, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i120: i32, in_$p124: ref, in_$i125: i32, in_$i126: i1, in_$i128: i32, in_$i129: i1, in_$i130: i32, in_$p131: ref, in_$p134: ref, in_$p135: ref, in_$i136: i32, in_$i137: i32, in_$i138: i32, in_$p139: ref, in_$p140: ref, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$p145: ref, in_$p149: ref, in_$i150: i32, in_$i151: i32, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$i157: i8, in_$i158: i32, in_$i159: i32, in_$i160: i32, in_$i161: i32, in_$p162: ref, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$p167: ref, in_$i168: i32, in_$p169: ref, in_$p170: ref, in_$p171: ref, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p179: ref, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$p184: ref, in_$p185: ref, in_$p186: ref, in_$p187: ref, in_$i188: i32, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$i193: i32, in_$i194: i1, in_$p197: ref, in_$p198: ref, in_$p199: ref, in_$p200: ref, in_$i201: i32, in_$p202: ref, in_$p204: ref, in_$i205: i8, in_$i206: i32, in_$i207: i1, in_$p210: ref, in_$i211: i8, in_$i212: i32, in_$i213: i1, in_$p215: ref, in_$i216: i8, in_$i217: i32, in_$i218: i1, in_$p220: ref, in_$i221: i8, in_$i222: i32, in_$i223: i1, in_$p208: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$p196: ref, in_$i233: i64, in_$i234: i64, in_$i235: i64, in_$i236: i1, in_$p237: ref, in_$p224: ref, in_$p195: ref, in_$p231: ref, in_$i232: i32, in_$p238: ref, in_$i239: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i240: i1, in_$p242: ref, in_$i243: i8, in_$i244: i32, in_$i245: i32, in_$i246: i1, in_$p248: ref, in_$i249: i8, in_$i250: i32, in_$i251: i1, in_$p253: ref, in_$i254: i8, in_$i255: i32, in_$i256: i1, in_$p259: ref, in_$i260: i8, in_$i261: i32, in_$i262: i32, in_$p264: ref, in_$i265: i8, in_$i266: i32, in_$i267: i32, in_$i268: i32, in_$p270: ref, in_$i271: i8, in_$i272: i32, in_$i273: i32, in_$i274: i32, in_$p276: ref, in_$i277: i8, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i32, in_$i282: i64, in_$p283: ref, in_$p285: ref, in_$i286: i32, in_$i287: i1, in_$i96: i32, in_$i97: i32, in_$i98: i32, in_$p99: ref, in_$p100: ref, in_$p288: ref, in_$i289: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_224: i32) returns (out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i32, out_$i107: i64, out_$p108: ref, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i32, out_$i116: i1, out_$i117: i32, out_$i119: i32, out_$i118: i32, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i120: i32, out_$p124: ref, out_$i125: i32, out_$i126: i1, out_$i128: i32, out_$i129: i1, out_$i130: i32, out_$p131: ref, out_$p134: ref, out_$p135: ref, out_$i136: i32, out_$i137: i32, out_$i138: i32, out_$p139: ref, out_$p140: ref, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$p145: ref, out_$p149: ref, out_$i150: i32, out_$i151: i32, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$i157: i8, out_$i158: i32, out_$i159: i32, out_$i160: i32, out_$i161: i32, out_$p162: ref, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$p167: ref, out_$i168: i32, out_$p169: ref, out_$p170: ref, out_$p171: ref, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p179: ref, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$p184: ref, out_$p185: ref, out_$p186: ref, out_$p187: ref, out_$i188: i32, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$i193: i32, out_$i194: i1, out_$p197: ref, out_$p198: ref, out_$p199: ref, out_$p200: ref, out_$i201: i32, out_$p202: ref, out_$p204: ref, out_$i205: i8, out_$i206: i32, out_$i207: i1, out_$p210: ref, out_$i211: i8, out_$i212: i32, out_$i213: i1, out_$p215: ref, out_$i216: i8, out_$i217: i32, out_$i218: i1, out_$p220: ref, out_$i221: i8, out_$i222: i32, out_$i223: i1, out_$p208: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$p196: ref, out_$i233: i64, out_$i234: i64, out_$i235: i64, out_$i236: i1, out_$p237: ref, out_$p224: ref, out_$p195: ref, out_$p231: ref, out_$i232: i32, out_$p238: ref, out_$i239: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i240: i1, out_$p242: ref, out_$i243: i8, out_$i244: i32, out_$i245: i32, out_$i246: i1, out_$p248: ref, out_$i249: i8, out_$i250: i32, out_$i251: i1, out_$p253: ref, out_$i254: i8, out_$i255: i32, out_$i256: i1, out_$p259: ref, out_$i260: i8, out_$i261: i32, out_$i262: i32, out_$p264: ref, out_$i265: i8, out_$i266: i32, out_$i267: i32, out_$i268: i32, out_$p270: ref, out_$i271: i8, out_$i272: i32, out_$i273: i32, out_$i274: i32, out_$p276: ref, out_$i277: i8, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i32, out_$i282: i64, out_$p283: ref, out_$p285: ref, out_$i286: i32, out_$i287: i1, out_$i96: i32, out_$i97: i32, out_$i98: i32, out_$p99: ref, out_$p100: ref, out_$p288: ref, out_$i289: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_224: i32);
  modifies $M.6, $CurrAddr, assertsPassed, $M.39, $M.25, $M.26, $M.38;



implementation osst_read_back_buffer_and_rewrite_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i8: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i81: i64, in_$i82: i1, in_$p80: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$p88: ref, in_$i89: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p90: ref, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_vslice_dummy_var_216: i32) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i81: i64, out_$i82: i1, out_$p80: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$p88: ref, out_$i89: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p90: ref, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_vslice_dummy_var_216: i32)
{

  entry:
    out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p80, out_$p84, out_$p85, out_$i87, out_$p88, out_$i89, out_$i63, out_$p64, out_$p65, out_$p90, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_216 := in_$p66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i81, in_$i82, in_$p80, in_$p84, in_$p85, in_$i87, in_$p88, in_$i89, in_$i63, in_$p64, in_$p65, in_$p90, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_vslice_dummy_var_216;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  $bb16:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i63, out_$p64, out_$p65 := out_$i87, out_$p88, out_$p74;
    goto $bb16_dummy;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    out_$p90 := out_$p74;
    assume true;
    goto $bb16;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i87, in_$i8);
    goto corral_source_split_5440;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref(out_$p64, $mul.ref(32768, 1));
    goto corral_source_split_5439;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    out_$i87 := $add.i32(out_$i63, 1);
    call {:si_unique_call 660} {:cexpr "i"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_5438;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} out_vslice_dummy_var_216 := osst_copy_from_buffer(out_$p85, out_$p64);
    goto corral_source_split_5437;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    out_$p85 := $load.ref($M.6, out_$p84);
    goto corral_source_split_5436;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5435;

  $bb14:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    out_$p80 := out_$p74;
    assume true;
    goto $bb14;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i64(out_$i81, 0);
    goto corral_source_split_5433;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_5432;

  $bb12:
    assume !(out_$i79 == 1);
    goto corral_source_split_5431;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    out_$p80 := out_$p74;
    assume true;
    goto $bb12;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    out_$i79 := $ne.i32(out_$i78, 0);
    goto corral_source_split_5424;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.6, out_$p77);
    goto corral_source_split_5423;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_5422;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.6, out_$p75);
    goto corral_source_split_5421;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5420;

  SeqInstr_219:
    goto corral_source_split_5419;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} out_$p74 := osst_do_scsi(out_$p65, in_$p0, out_$p71, 33280, 2, out_$i73, 0, 1);
    goto SeqInstr_218;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.6, out_$p72);
    goto corral_source_split_5418;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_5417;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    out_$p71 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5416;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p70, 0);
    goto corral_source_split_5415;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5414;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p69, $sub.i8(0, 128));
    goto corral_source_split_5413;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p68, 6);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, out_$p67, 60);
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p5, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_28 := $M.39;
    call {:si_unique_call 655} out_cmdloc_dummy_var_29 := $memset.i8(out_cmdloc_dummy_var_28, out_$p66, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.39 := out_cmdloc_dummy_var_29;
    goto corral_source_split_5407;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p80, out_$p84, out_$p85, out_$i87, out_$p88, out_$i89, out_$i63, out_$p64, out_$p65, out_$p90, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_216 := osst_read_back_buffer_and_rewrite_loop_$bb8(in_$p0, in_$p5, in_$i8, out_$p66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i81, out_$i82, out_$p80, out_$p84, out_$p85, out_$i87, out_$p88, out_$i89, out_$i63, out_$p64, out_$p65, out_$p90, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_vslice_dummy_var_216);
    return;

  exit:
    return;
}



procedure osst_read_back_buffer_and_rewrite_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i8: i32, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i32, in_$i79: i1, in_$i81: i64, in_$i82: i1, in_$p80: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$p88: ref, in_$i89: i1, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$p90: ref, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_vslice_dummy_var_216: i32) returns (out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i32, out_$i79: i1, out_$i81: i64, out_$i82: i1, out_$p80: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$p88: ref, out_$i89: i1, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$p90: ref, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_vslice_dummy_var_216: i32);
  modifies $M.6, $CurrAddr, assertsPassed, $M.39;



implementation osst_copy_from_buffer_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i39: i32, in_$i40: i32, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i39: i32, out_$i40: i32, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8)
{

  entry:
    out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i8, in_$p9, in_$i10, in_$i39, in_$i40, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_cmdloc_dummy_var_38;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5722;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9, out_$i10 := out_$i30, out_$p32, out_$i33;
    goto $bb9_dummy;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i33, out_$i30;
    assume true;
    goto $bb9;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i1(out_$i36, out_$i37);
    goto corral_source_split_5753;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i30, 0);
    goto corral_source_split_5752;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_5751;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_5750;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.6, in_$p2);
    goto corral_source_split_5749;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i10, 1);
    call {:si_unique_call 702} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5748;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p9, $mul.ref(out_$i31, 1));
    goto corral_source_split_5747;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5746;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i8, out_$i22);
    call {:si_unique_call 701} {:cexpr "do_count"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5745;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_36 := $M.6;
    out_cmdloc_dummy_var_37 := $M.6;
    call {:si_unique_call 700} out_cmdloc_dummy_var_38 := $memcpy.i8(out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_$p9, out_$p28, out_$i29, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_38;
    goto corral_source_split_5744;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5743;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} out_$p28 := lowmem_page_address(out_$p27);
    goto corral_source_split_5742;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} out_$p27 := sg_page(out_$p26);
    goto corral_source_split_5741;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 40));
    goto corral_source_split_5740;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5739;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_5738;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_5737;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i8;
    goto $bb8;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb8;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.6, out_$p20);
    goto corral_source_split_5732;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i17, 40)), $mul.ref(20, 1));
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5730;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_5729;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i15, out_$i8);
    goto corral_source_split_5727;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.6, out_$p14);
    goto corral_source_split_5726;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_5725;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i16 == 1);
    goto corral_source_split_5734;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38 := osst_copy_from_buffer_loop_$bb4(in_$p0, in_$p2, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_cmdloc_dummy_var_38);
    return;

  exit:
    return;
}



procedure osst_copy_from_buffer_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i39: i32, in_$i40: i32, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_cmdloc_dummy_var_38: [ref]i8) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i39: i32, out_$i40: i32, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_cmdloc_dummy_var_38: [ref]i8);
  modifies $M.6;



implementation osst_copy_to_buffer_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i39: i32, in_$i40: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i39: i32, out_$i40: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8)
{

  entry:
    out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41 := in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i8, in_$p9, in_$i10, in_$i39, in_$i40, in_cmdloc_dummy_var_39, in_cmdloc_dummy_var_40, in_cmdloc_dummy_var_41;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5778;

  $bb9:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i8, out_$p9, out_$i10 := out_$i30, out_$p32, out_$i33;
    goto $bb9_dummy;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i33, out_$i30;
    assume true;
    goto $bb9;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    out_$i38 := $and.i1(out_$i36, out_$i37);
    goto corral_source_split_5809;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i30, 0);
    goto corral_source_split_5808;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i33);
    goto corral_source_split_5807;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i34);
    goto corral_source_split_5806;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i16($M.6, in_$p2);
    goto corral_source_split_5805;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i10, 1);
    call {:si_unique_call 708} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_5804;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref(out_$p9, $mul.ref(out_$i31, 1));
    goto corral_source_split_5803;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5802;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    out_$i30 := $sub.i32(out_$i8, out_$i22);
    call {:si_unique_call 707} {:cexpr "do_count"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_5801;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_39 := $M.6;
    out_cmdloc_dummy_var_40 := $M.6;
    call {:si_unique_call 706} out_cmdloc_dummy_var_41 := $memcpy.i8(out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_$p28, out_$p9, out_$i29, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_41;
    goto corral_source_split_5800;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i22);
    goto corral_source_split_5799;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} out_$p28 := lowmem_page_address(out_$p27);
    goto corral_source_split_5798;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} out_$p27 := sg_page(out_$p26);
    goto corral_source_split_5797;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p24, $mul.ref(out_$i25, 40));
    goto corral_source_split_5796;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5795;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_5794;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_5793;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5792;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i8;
    goto $bb8;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb8;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.6, out_$p20);
    goto corral_source_split_5788;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i17, 40)), $mul.ref(20, 1));
    goto corral_source_split_5787;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5786;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_5785;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    out_$i16 := $ult.i32(out_$i15, out_$i8);
    goto corral_source_split_5783;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.6, out_$p14);
    goto corral_source_split_5782;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_5781;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i10);
    goto corral_source_split_5780;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb7:
    assume !(out_$i16 == 1);
    goto corral_source_split_5790;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41 := osst_copy_to_buffer_loop_$bb4(in_$p0, in_$p2, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i8, out_$p9, out_$i10, out_$i39, out_$i40, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41);
    return;

  exit:
    return;
}



procedure osst_copy_to_buffer_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i1, in_$i17: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i32, in_$i31: i64, in_$p32: ref, in_$i33: i32, in_$i34: i16, in_$i35: i32, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i8: i32, in_$p9: ref, in_$i10: i32, in_$i39: i32, in_$i40: i32, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i1, out_$i17: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i32, out_$i31: i64, out_$p32: ref, out_$i33: i32, out_$i34: i16, out_$i35: i32, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i8: i32, out_$p9: ref, out_$i10: i32, out_$i39: i32, out_$i40: i32, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8);
  modifies $M.6;



implementation osst_space_over_filemarks_forward_slow_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1) returns (out_$i9: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1)
{

  entry:
    out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i38, out_$p39, out_$i40, out_$i41 := in_$i9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i38, in_$p39, in_$i40, in_$i41;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb24:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := out_$i19;
    goto $bb24_dummy;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 0);
    goto corral_source_split_6027;

  SeqInstr_258:
    call {:si_unique_call 762} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_6026;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} out_$i40 := osst_get_logical_frame(in_$p0, in_$p1, $sub.i32(0, 1), 0);
    goto SeqInstr_257;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p39, 0);
    goto corral_source_split_6025;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_6024;

  $bb21:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i38 := $eq.i32(out_$i19, in_$i3);
    goto corral_source_split_6018;

  $bb15:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 1);
    goto corral_source_split_6001;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_6000;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.6, out_$p24);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.6, out_$p22);
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.6, out_$p20);
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5994;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5993;

  $bb12:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := out_$i9;
    goto $bb13;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb13;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i9, 1);
    call {:si_unique_call 760} {:cexpr "cnt"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_5991;

  $bb11:
    assume out_$i17 == 1;
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 2);
    goto corral_source_split_5988;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i15);
    goto corral_source_split_5987;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i8($M.6, out_$p14);
    goto corral_source_split_5986;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.6, out_$p12);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.6, out_$p10);
    goto corral_source_split_5982;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_5981;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i38, out_$p39, out_$i40, out_$i41 := osst_space_over_filemarks_forward_slow_loop_$bb8(in_$p0, in_$p1, in_$i3, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i38, out_$p39, out_$i40, out_$i41);
    return;

  exit:
    return;
}



procedure osst_space_over_filemarks_forward_slow_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$i9: i32, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i38: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1) returns (out_$i9: i32, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i38: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_get_logical_frame_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i70: i32, in_$i71: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i102: i32, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i125: i32, in_$i126: i1, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i70: i32, out_$i71: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i102: i32, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i125: i32, out_$i126: i1, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i67, out_$i68, out_$i69, out_$i59, out_$i60, out_$i61, out_$i50, out_$i51, out_$i52, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i102, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i73, out_$i74, out_$i75, out_$i125, out_$i126, out_vslice_dummy_var_241, out_vslice_dummy_var_243, out_vslice_dummy_var_244 := in_$i20, in_$i21, in_$i22, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p53, in_$i54, in_$i55, in_$p56, in_$i57, in_$i58, in_$i62, in_$i63, in_$p64, in_$i65, in_$i66, in_$i70, in_$i71, in_$i67, in_$i68, in_$i69, in_$i59, in_$i60, in_$i61, in_$i50, in_$i51, in_$i52, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$p82, in_$p83, in_$p84, in_$p85, in_$i86, in_$i87, in_$p88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i103, in_$i104, in_$i105, in_$i106, in_$p107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i102, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i122, in_$i123, in_$p124, in_$i73, in_$i74, in_$i75, in_$i125, in_$i126, in_vslice_dummy_var_241, in_vslice_dummy_var_243, in_vslice_dummy_var_244;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb65:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i20, out_$i21, out_$i22 := out_$i125, out_$i75, out_$i74;
    goto $bb65_dummy;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i126 := $sgt.i32(out_$i73, 400);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i73, 1);
    call {:si_unique_call 848} {:cexpr "cnt"} boogie_si_record_i32(out_$i125);
    goto corral_source_split_7268;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7267;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$i73, out_$i74, out_$i75 := out_$i123, out_$i22, out_$i118;
    goto $bb36;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    out_$i73, out_$i74, out_$i75 := out_$i50, out_$i51, out_$i21;
    goto $bb36;

  SeqInstr_354:
    goto corral_source_split_7248;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} out_vslice_dummy_var_241 := osst_set_frame_position(in_$p0, in_$p1, out_$i52, 0);
    goto SeqInstr_353;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7247;

  $bb32:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i59, out_$i60, out_$i61;
    goto $bb29;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i20, out_$i22, 3000;
    goto $bb29;

  $bb27:
    assume out_$i49 == 1;
    goto corral_source_split_7245;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    out_$i49 := $sle.i32(out_$i47, 2999);
    goto corral_source_split_7239;

  $bb24:
    assume out_$i48 == 1;
    goto corral_source_split_7238;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    out_$i48 := $sgt.i32(out_$i47, 2989);
    goto corral_source_split_7236;

  SeqInstr_351:
    call {:si_unique_call 841} {:cexpr "position"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_7235;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_$i47 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_350;

  $bb22:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_7225;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_7224;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.6, out_$p43);
    goto corral_source_split_7223;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(668, 1));
    goto corral_source_split_7222;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb14:
    assume out_$i36 == 1;
    goto corral_source_split_7214;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 0);
    goto corral_source_split_7212;

  SeqInstr_345:
    call {:si_unique_call 837} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_7211;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$i35 := osst_initiate_read(in_$p0, in_$p1);
    goto SeqInstr_344;

  $bb19:
    assume out_$i42 == 1;
    goto corral_source_split_7231;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i41, 0);
    goto corral_source_split_7229;

  SeqInstr_348:
    call {:si_unique_call 839} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_7228;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} out_$i41 := osst_read_frame(in_$p0, in_$p1, 30);
    goto SeqInstr_347;

  $bb17:
    assume out_$i40 == 1;
    goto corral_source_split_7227;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    out_$i40 := $eq.i32(out_$i39, 0);
    goto corral_source_split_7220;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i8.i32(out_$i38);
    goto corral_source_split_7219;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i8($M.6, out_$p37);
    goto corral_source_split_7218;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7217;

  $bb15:
    assume !(out_$i36 == 1);
    goto corral_source_split_7216;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i59, out_$i60, out_$i61 := out_$i67, out_$i68, out_$i69;
    goto $bb32;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    out_$i59, out_$i60, out_$i61 := out_$i20, 0, out_$i58;
    goto $bb32;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, $sub.i32(0, 1));
    call {:si_unique_call 843} {:cexpr "position"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_7253;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.6, out_$p56);
    goto corral_source_split_7252;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7251;

  $bb30:
    assume out_$i55 == 1;
    goto corral_source_split_7250;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i54, out_$i47);
    goto corral_source_split_7243;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.6, out_$p53);
    goto corral_source_split_7242;

  $bb26:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_7241;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb26;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb26;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i71 := $add.i32(out_$i20, 19);
    call {:si_unique_call 847} {:cexpr "cnt"} boogie_si_record_i32(out_$i71);
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i71, out_$i62, out_$i70;
    goto $bb35;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$i67, out_$i68, out_$i69 := out_$i20, 0, out_$i66;
    goto $bb35;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i65, $sub.i32(0, 1));
    call {:si_unique_call 845} {:cexpr "position"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.6, out_$p64);
    goto corral_source_split_7261;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7260;

  $bb33:
    assume out_$i63 == 1;
    goto corral_source_split_7259;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 10);
    goto corral_source_split_7257;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i22, 1);
    call {:si_unique_call 844} {:cexpr "bad"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_7256;

  $bb31:
    assume !(out_$i55 == 1);
    goto corral_source_split_7255;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i47, 29);
    call {:si_unique_call 846} {:cexpr "position"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_7265;

  $bb34:
    assume !(out_$i63 == 1);
    goto corral_source_split_7264;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p124, 0);
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(670, 1));
    goto corral_source_split_7342;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;

  $bb63:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := out_$i117;
    goto $bb64;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$i123 := out_$i122;
    goto $bb64;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i122 := $sub.i32(out_$i117, 1);
    call {:si_unique_call 867} {:cexpr "cnt"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_7339;

  SeqInstr_366:
    goto corral_source_split_7338;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} out_vslice_dummy_var_244 := osst_set_frame_position(in_$p0, in_$p1, 3000, 0);
    goto SeqInstr_365;

  $bb62:
    assume out_$i120 == 1;
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 2991);
    goto corral_source_split_7335;

  SeqInstr_363:
    call {:si_unique_call 865} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_7334;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} out_$i119 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_362;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7333;

  $bb45:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    out_$i117, out_$i118 := out_$i20, out_$i21;
    goto $bb61;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i117, out_$i118 := out_$i115, out_$i116;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7331;

  $bb50:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i115, out_$i116 := out_$i20, 0;
    goto $bb60;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i115, out_$i116 := out_$i114, out_$i97;
    goto $bb60;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i20, 10);
    call {:si_unique_call 862} {:cexpr "cnt"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_7323;

  SeqInstr_360:
    goto corral_source_split_7322;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_vslice_dummy_var_243 := osst_set_frame_position(in_$p0, in_$p1, out_$i102, 0);
    goto SeqInstr_359;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_7321;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i102 := out_$i112;
    goto $bb53;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i102 := out_$i101;
    goto $bb53;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$i101 := $add.i32(out_$i100, $sub.i32(0, 1));
    call {:si_unique_call 857} {:cexpr "position"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.6, out_$p99);
    goto corral_source_split_7309;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(768, 1));
    goto corral_source_split_7308;

  $bb51:
    assume out_$i98 == 1;
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    out_$i98 := $sgt.i32(out_$i97, 3);
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    out_$i97 := $add.i32(out_$i21, 1);
    call {:si_unique_call 856} {:cexpr "past"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_7304;

  $bb49:
    assume out_$i96 == 1;
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i96 := $sgt.i32(out_$i87, in_$i2);
    goto corral_source_split_7301;

  $bb47:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$i92 := out_$i87;
    assume true;
    goto $bb47;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i8.i32(out_$i89);
    goto corral_source_split_7291;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i8($M.6, out_$p88);
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(701, 1));
    goto corral_source_split_7289;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} out_$i87 := __fswab32(out_$i86);
    call {:si_unique_call 854} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i87);
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.6, out_$p85);
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(out_$p84, $mul.ref(0, 512)), $mul.ref(44, 1));
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.6, out_$p83);
    goto corral_source_split_7285;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p82, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_7284;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.6, out_$p81);
    goto corral_source_split_7283;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7282;

  $bb44:
    assume out_$i80 == 1;
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_7279;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} out_$i79 := osst_verify_frame(in_$p0, $sub.i32(0, 1), in_$i3);
    call {:si_unique_call 852} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_7278;

  $bb41:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i20;
    assume true;
    goto $bb41;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_7272;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} out_$i76 := osst_verify_frame(in_$p0, in_$i2, in_$i3);
    call {:si_unique_call 850} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_7271;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb18:
    assume !(out_$i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb20:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i106;
    goto $bb59;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i112 := out_$i111;
    goto $bb59;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i106, $sub.i32(0, 10));
    call {:si_unique_call 863} {:cexpr "position"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_7329;

  $bb57:
    assume out_$i110 == 1;
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i110 := $sle.i32(out_$i106, 2999);
    goto corral_source_split_7326;

  $bb54:
    assume out_$i109 == 1;
    goto corral_source_split_7325;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    out_$i109 := $ugt.i32(out_$i108, 2999);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i32($M.6, out_$p107);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i32(out_$i105, $sub.i32(0, 1));
    call {:si_unique_call 860} {:cexpr "position"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$i105 := $sub.i32(out_$i104, out_$i87);
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i104 := $add.i32(out_$i103, in_$i2);
    goto corral_source_split_7314;

  SeqInstr_357:
    call {:si_unique_call 859} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i103);
    goto corral_source_split_7313;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} out_$i103 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_356;

  $bb52:
    assume !(out_$i98 == 1);
    goto corral_source_split_7312;

  $bb55:
    assume {:verifier.code 0} true;
    assume !(out_$i109 == 1);
    goto $bb56;

  $bb58:
    assume {:verifier.code 0} true;
    assume !(out_$i110 == 1);
    goto $bb56;

  $bb65_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i67, out_$i68, out_$i69, out_$i59, out_$i60, out_$i61, out_$i50, out_$i51, out_$i52, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i102, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i73, out_$i74, out_$i75, out_$i125, out_$i126, out_vslice_dummy_var_241, out_vslice_dummy_var_243, out_vslice_dummy_var_244 := osst_get_logical_frame_loop_$bb8(in_$p0, in_$p1, in_$i2, in_$i3, out_$i20, out_$i21, out_$i22, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p53, out_$i54, out_$i55, out_$p56, out_$i57, out_$i58, out_$i62, out_$i63, out_$p64, out_$i65, out_$i66, out_$i70, out_$i71, out_$i67, out_$i68, out_$i69, out_$i59, out_$i60, out_$i61, out_$i50, out_$i51, out_$i52, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$p82, out_$p83, out_$p84, out_$p85, out_$i86, out_$i87, out_$p88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i103, out_$i104, out_$i105, out_$i106, out_$p107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i102, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i73, out_$i74, out_$i75, out_$i125, out_$i126, out_vslice_dummy_var_241, out_vslice_dummy_var_243, out_vslice_dummy_var_244);
    return;

  exit:
    return;
}



procedure osst_get_logical_frame_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i35: i32, in_$i36: i1, in_$p37: ref, in_$i38: i8, in_$i39: i32, in_$i40: i1, in_$i41: i32, in_$i42: i1, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i1, in_$i47: i32, in_$i48: i1, in_$i49: i1, in_$p53: ref, in_$i54: i32, in_$i55: i1, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i62: i32, in_$i63: i1, in_$p64: ref, in_$i65: i32, in_$i66: i32, in_$i70: i32, in_$i71: i32, in_$i67: i32, in_$i68: i32, in_$i69: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i87: i32, in_$p88: ref, in_$i89: i8, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i103: i32, in_$i104: i32, in_$i105: i32, in_$i106: i32, in_$p107: ref, in_$i108: i32, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i32, in_$i102: i32, in_$i114: i32, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i32, in_$i119: i32, in_$i120: i1, in_$i122: i32, in_$i123: i32, in_$p124: ref, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i125: i32, in_$i126: i1, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32) returns (out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i35: i32, out_$i36: i1, out_$p37: ref, out_$i38: i8, out_$i39: i32, out_$i40: i1, out_$i41: i32, out_$i42: i1, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i1, out_$i47: i32, out_$i48: i1, out_$i49: i1, out_$p53: ref, out_$i54: i32, out_$i55: i1, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i62: i32, out_$i63: i1, out_$p64: ref, out_$i65: i32, out_$i66: i32, out_$i70: i32, out_$i71: i32, out_$i67: i32, out_$i68: i32, out_$i69: i32, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i87: i32, out_$p88: ref, out_$i89: i8, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i103: i32, out_$i104: i32, out_$i105: i32, out_$i106: i32, out_$p107: ref, out_$i108: i32, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i32, out_$i102: i32, out_$i114: i32, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i32, out_$i119: i32, out_$i120: i1, out_$i122: i32, out_$i123: i32, out_$p124: ref, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i125: i32, out_$i126: i1, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32);
  modifies $M.26, $M.6, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed, $M.24;



implementation osst_verify_frame_loop_$bb8(in_$p0: ref, in_$p24: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$i52: i1, in_$i30: i32, in_cmdloc_dummy_var_51: [ref]i8, in_cmdloc_dummy_var_52: [ref]i8) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$i52: i1, out_$i30: i32, out_cmdloc_dummy_var_51: [ref]i8, out_cmdloc_dummy_var_52: [ref]i8)
{

  entry:
    out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i30, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52 := in_$p31, in_$p32, in_$p33, in_$p34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i30, in_cmdloc_dummy_var_51, in_cmdloc_dummy_var_52;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7534;

  $bb10:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i47;
    goto $bb10_dummy;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$i52 := $sgt.i32(out_$i51, out_$i47);
    goto corral_source_split_7556;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i16($M.6, out_$p49);
    goto corral_source_split_7554;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p48, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.6, in_$p24);
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i30, 1);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_51 := $M.6;
    call {:si_unique_call 890} out_cmdloc_dummy_var_52 := $memset.i8(out_cmdloc_dummy_var_51, out_$p38, 0, out_$i46, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_52;
    goto corral_source_split_7550;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i32.i64(out_$i45);
    goto corral_source_split_7549;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.6, out_$p44);
    goto corral_source_split_7548;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref($add.ref($add.ref(out_$p41, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i39, 40)), $mul.ref(20, 1));
    goto corral_source_split_7547;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.6, out_$p40);
    goto corral_source_split_7546;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7545;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i30);
    goto corral_source_split_7544;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} out_$p38 := lowmem_page_address(out_$p37);
    goto corral_source_split_7543;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} out_$p37 := sg_page(out_$p36);
    goto corral_source_split_7542;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p34, $mul.ref(out_$i35, 40));
    goto corral_source_split_7541;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i30);
    goto corral_source_split_7540;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_7539;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_7538;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.6, out_$p31);
    goto corral_source_split_7537;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7536;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i30, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52 := osst_verify_frame_loop_$bb8(in_$p0, in_$p24, out_$p31, out_$p32, out_$p33, out_$p34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i30, out_cmdloc_dummy_var_51, out_cmdloc_dummy_var_52);
    return;

  exit:
    return;
}



procedure osst_verify_frame_loop_$bb8(in_$p0: ref, in_$p24: ref, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i64, in_$p40: ref, in_$p41: ref, in_$p44: ref, in_$i45: i32, in_$i46: i64, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i16, in_$i51: i32, in_$i52: i1, in_$i30: i32, in_cmdloc_dummy_var_51: [ref]i8, in_cmdloc_dummy_var_52: [ref]i8) returns (out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i64, out_$p40: ref, out_$p41: ref, out_$p44: ref, out_$i45: i32, out_$i46: i64, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i16, out_$i51: i32, out_$i52: i1, out_$i30: i32, out_cmdloc_dummy_var_51: [ref]i8, out_cmdloc_dummy_var_52: [ref]i8);
  modifies $M.6;



implementation osst_wait_frame_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i21: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i64, in_$i45: i64, in_$i46: i1) returns (out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i64, out_$i45: i64, out_$i46: i1)
{

  entry:
    out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := in_$i24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb39:
    assume {:verifier.code 0} true;
    assume out_$i46 == 1;
    goto $bb39_dummy;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i64(out_$i45, 0);
    goto corral_source_split_7916;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    out_$i45 := $sub.i64(out_$i44, in_$i21);
    goto corral_source_split_7915;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i64($M.6, jiffies);
    goto corral_source_split_7914;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} msleep(100);
    goto corral_source_split_7913;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb25;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb25;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i42 == 1);
    goto $bb25;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb25;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i43 := $sge.i32(out_$i29, 0);
    goto corral_source_split_7904;

  $bb34:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    assume out_$i38 == 1;
    goto $bb30;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb31;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i36, out_$i37);
    goto corral_source_split_7900;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(in_$i2, in_$i3);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.6, out_$p35);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(684, 1));
    goto corral_source_split_7897;

  $bb26:
    assume out_$i34 == 1;
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(in_$i3, 0);
    goto corral_source_split_7894;

  $bb23:
    assume out_$i33 == 1;
    goto corral_source_split_7893;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    out_$i33 := $eq.i32(out_$i32, in_$i2);
    goto corral_source_split_7891;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.6, out_$p31);
    goto corral_source_split_7890;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(680, 1));
    goto corral_source_split_7889;

  $bb20:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    out_$i30 := $slt.i32(out_$i29, 0);
    goto corral_source_split_7885;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7884;

  $bb13:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := out_$i24;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i26;
    goto $bb18;

  $bb15:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, 0);
    goto corral_source_split_7878;

  SeqInstr_390:
    call {:si_unique_call 929} {:cexpr "result"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7877;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i26 := osst_write_error_recovery(in_$p0, in_$p1, 0);
    goto SeqInstr_389;

  $bb12:
    assume out_$i25 == 1;
    goto corral_source_split_7876;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, $sub.i32(0, 5));
    goto corral_source_split_7874;

  SeqInstr_387:
    call {:si_unique_call 927} {:cexpr "result"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_7873;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} out_$i24 := osst_get_frame_position(in_$p0, in_$p1);
    goto SeqInstr_386;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    out_$i42 := $sgt.i32(out_$i41, in_$i3);
    goto corral_source_split_7909;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.6, out_$p40);
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(688, 1));
    goto corral_source_split_7907;

  $bb32:
    assume out_$i39 == 1;
    goto corral_source_split_7906;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i39 := $sge.i32(in_$i3, 0);
    goto corral_source_split_7902;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb28;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i38 == 1);
    goto $bb28;

  $bb39_dummy:
    call {:si_unique_call 1} out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46 := osst_wait_frame_loop_$bb10(in_$p0, in_$p1, in_$i2, in_$i3, in_$i21, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46);
    return;

  exit:
    return;
}



procedure osst_wait_frame_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i21: i64, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$i33: i1, in_$i34: i1, in_$p35: ref, in_$i36: i32, in_$i37: i32, in_$i38: i1, in_$i39: i1, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i43: i1, in_$i44: i64, in_$i45: i64, in_$i46: i1) returns (out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$i33: i1, out_$i34: i1, out_$p35: ref, out_$i36: i32, out_$i37: i32, out_$i38: i1, out_$i39: i1, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i43: i1, out_$i44: i64, out_$i45: i64, out_$i46: i1);
  modifies $M.6, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_recover_wait_frame_loop_$bb3(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p11: ref, in_$i15: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i58: i1, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i1, in_$i24: i32, in_$p25: ref, in_$i76: i64, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i75: i32, in_cmdloc_dummy_var_55: [ref]i8, in_cmdloc_dummy_var_56: [ref]i8, in_vslice_dummy_var_253: i64) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i58: i1, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i1, out_$i24: i32, out_$p25: ref, out_$i76: i64, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i75: i32, out_cmdloc_dummy_var_55: [ref]i8, out_cmdloc_dummy_var_56: [ref]i8, out_vslice_dummy_var_253: i64)
{

  entry:
    out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i24, out_$p25, out_$i76, out_$i77, out_$i78, out_$i79, out_$i75, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_vslice_dummy_var_253 := in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i58, in_$i67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$p73, in_$i74, in_$i24, in_$p25, in_$i76, in_$i77, in_$i78, in_$i79, in_$i75, in_cmdloc_dummy_var_55, in_cmdloc_dummy_var_56, in_vslice_dummy_var_253;
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7953;

  $bb15:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i24, out_$p25 := out_$i67, out_$p52;
    goto $bb15_dummy;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i67;
    assume true;
    goto $bb15;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i67, 0);
    goto corral_source_split_8012;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p73, in_$i15);
    goto corral_source_split_8011;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p72, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.6, out_$p71);
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8008;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p70, in_$p11);
    goto corral_source_split_8007;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p69, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8006;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.6, out_$p68);
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8004;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i1.i32(out_$i58);
    call {:si_unique_call 944} {:cexpr "retval"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_8003;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8002;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i58 := out_$i66;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume out_$i57 == 1;
    goto $bb13;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    out_$i58 := 1;
    assume true;
    goto $bb12, $bb14;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_8000;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i32($M.6, out_$p55);
    goto corral_source_split_7999;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7998;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.6, out_$p53);
    goto corral_source_split_7997;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7996;

  SeqInstr_399:
    goto corral_source_split_7995;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} out_$p52 := osst_do_scsi(out_$p25, in_$p0, out_$p49, 20, 2, out_$i51, 0, 1);
    goto SeqInstr_398;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i32($M.6, out_$p50);
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$p49 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7992;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p48, 52);
    goto corral_source_split_7991;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7990;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_55 := $M.6;
    call {:si_unique_call 942} out_cmdloc_dummy_var_56 := $memset.i8(out_cmdloc_dummy_var_55, out_$p47, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_56;
    goto corral_source_split_7989;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    out_$p47 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p46, 24);
    goto corral_source_split_7987;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_7986;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.6, out_$p44);
    goto corral_source_split_7985;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7984;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p43, in_$p4);
    goto corral_source_split_7983;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(out_$p42, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_7982;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.6, out_$p41);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    goto corral_source_split_7979;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} out_vslice_dummy_var_253 := schedule_timeout_interruptible(25);
    goto corral_source_split_7978;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb7;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb7;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i35, 2);
    goto corral_source_split_7970;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$i35 := $and.i32(out_$i34, 15);
    goto corral_source_split_7969;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i8.i32(out_$i33);
    goto corral_source_split_7968;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i8($M.6, out_$p32);
    goto corral_source_split_7967;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref($add.ref(out_$p25, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_7966;

  $bb5:
    assume out_$i30 == 1;
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_7963;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_7962;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p27, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.6, out_$p26);
    goto corral_source_split_7960;

  $bb4:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_7959;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb18:
    assume out_$i79 == 1;
    goto corral_source_split_8024;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i24;
    assume true;
    goto $bb18;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    out_$i79 := $slt.i64(out_$i78, 0);
    goto corral_source_split_7957;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i78 := $sub.i64(out_$i77, 75000);
    goto corral_source_split_7956;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    out_$i77 := $sub.i64(out_$i76, in_$i5);
    goto corral_source_split_7955;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i64($M.6, jiffies);
    goto corral_source_split_7954;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i66 := $ugt.i32(out_$i65, 25);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_8021;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.6, out_$p63);
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p62, $mul.ref(15, 1));
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.6, out_$p61);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p60, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8017;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.6, out_$p59);
    goto corral_source_split_8016;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8015;

  $bb14:
    assume !(out_$i57 == 1);
    goto corral_source_split_8014;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i24, out_$p25, out_$i76, out_$i77, out_$i78, out_$i79, out_$i75, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_vslice_dummy_var_253 := osst_recover_wait_frame_loop_$bb3(in_$p0, in_$p3, in_$p4, in_$i5, in_$p11, in_$i15, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i58, out_$i67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$p73, out_$i74, out_$i24, out_$p25, out_$i76, out_$i77, out_$i78, out_$i79, out_$i75, out_cmdloc_dummy_var_55, out_cmdloc_dummy_var_56, out_vslice_dummy_var_253);
    return;

  exit:
    return;
}



procedure osst_recover_wait_frame_loop_$bb3(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$i5: i64, in_$p11: ref, in_$i15: i32, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p32: ref, in_$i33: i8, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i32, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$i58: i1, in_$i67: i32, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i74: i1, in_$i24: i32, in_$p25: ref, in_$i76: i64, in_$i77: i64, in_$i78: i64, in_$i79: i1, in_$i75: i32, in_cmdloc_dummy_var_55: [ref]i8, in_cmdloc_dummy_var_56: [ref]i8, in_vslice_dummy_var_253: i64) returns (out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p32: ref, out_$i33: i8, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i32, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$i58: i1, out_$i67: i32, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i74: i1, out_$i24: i32, out_$p25: ref, out_$i76: i64, out_$i77: i64, out_$i78: i64, out_$i79: i1, out_$i75: i32, out_cmdloc_dummy_var_55: [ref]i8, out_cmdloc_dummy_var_56: [ref]i8, out_vslice_dummy_var_253: i64);
  modifies $M.6, $CurrAddr, assertsPassed;



implementation __osst_write_header_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i25: i32, in_$i26: i1, in_$i10: i32, in_vslice_dummy_var_263: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i25: i32, out_$i26: i1, out_$i10: i32, out_vslice_dummy_var_263: i32)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i25, out_$i26, out_$i10, out_vslice_dummy_var_263 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$i25, in_$i26, in_$i10, in_vslice_dummy_var_263;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8377;

  $bb10:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i25;
    goto $bb10_dummy;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    out_$i26 := $ne.i32(out_$i10, 0);
    goto corral_source_split_8400;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 1013} {:cexpr "count"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_8399;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i32(out_$i21, 0);
    goto corral_source_split_8392;

  SeqInstr_447:
    call {:si_unique_call 1011} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_8391;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_$i21 := osst_flush_write_buffer(in_$p0, in_$p1);
    goto SeqInstr_446;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p20, 1);
    goto corral_source_split_8390;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8389;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p19, 32768);
    goto corral_source_split_8388;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p18, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.6, out_$p17);
    goto corral_source_split_8386;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} out_vslice_dummy_var_263 := osst_copy_to_buffer(out_$p12, out_$p15);
    goto corral_source_split_8384;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(out_$p14);
    goto corral_source_split_8383;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.6, out_$p13);
    goto corral_source_split_8382;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.6, out_$p11);
    goto corral_source_split_8380;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8379;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i25, out_$i26, out_$i10, out_vslice_dummy_var_263 := __osst_write_header_loop_$bb4(in_$p0, in_$p1, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$i25, out_$i26, out_$i10, out_vslice_dummy_var_263);
    return;

  exit:
    return;
}



procedure __osst_write_header_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i25: i32, in_$i26: i1, in_$i10: i32, in_vslice_dummy_var_263: i32) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i25: i32, out_$i26: i1, out_$i10: i32, out_vslice_dummy_var_263: i32);
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_write_filler_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i23: i32, in_$i24: i1, in_$i10: i32, in_cmdloc_dummy_var_64: [ref]i8, in_cmdloc_dummy_var_65: [ref]i8, in_cmdloc_dummy_var_66: [ref]i8) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i23: i32, out_$i24: i1, out_$i10: i32, out_cmdloc_dummy_var_64: [ref]i8, out_cmdloc_dummy_var_65: [ref]i8, out_cmdloc_dummy_var_66: [ref]i8)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i10, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65, out_cmdloc_dummy_var_66 := in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i23, in_$i24, in_$i10, in_cmdloc_dummy_var_64, in_cmdloc_dummy_var_65, in_cmdloc_dummy_var_66;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8417;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i23;
    goto $bb10_dummy;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i10, 0);
    goto corral_source_split_8439;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i23 := $sub.i32(out_$i10, 1);
    call {:si_unique_call 1027} {:cexpr "count"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_8438;

  $bb7:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(out_$i19, 0);
    goto corral_source_split_8431;

  SeqInstr_459:
    call {:si_unique_call 1025} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_8430;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} out_$i19 := osst_flush_write_buffer(in_$p0, in_$p1);
    goto SeqInstr_458;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p18, 1);
    goto corral_source_split_8429;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(616, 1));
    goto corral_source_split_8428;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p17, 6);
    goto corral_source_split_8427;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_8426;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.6, out_$p15);
    goto corral_source_split_8425;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8424;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_64 := $M.6;
    out_cmdloc_dummy_var_65 := $M.6;
    call {:si_unique_call 1023} out_cmdloc_dummy_var_66 := $memcpy.i8(out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65, out_$p14, .str.96, 6, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_66;
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.6, out_$p13);
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 176)), $mul.ref(112, 1));
    goto corral_source_split_8421;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.6, out_$p11);
    goto corral_source_split_8420;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8419;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i10, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65, out_cmdloc_dummy_var_66 := osst_write_filler_loop_$bb4(in_$p0, in_$p1, out_$p11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i23, out_$i24, out_$i10, out_cmdloc_dummy_var_64, out_cmdloc_dummy_var_65, out_cmdloc_dummy_var_66);
    return;

  exit:
    return;
}



procedure osst_write_filler_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i23: i32, in_$i24: i1, in_$i10: i32, in_cmdloc_dummy_var_64: [ref]i8, in_cmdloc_dummy_var_65: [ref]i8, in_cmdloc_dummy_var_66: [ref]i8) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i23: i32, out_$i24: i1, out_$i10: i32, out_cmdloc_dummy_var_64: [ref]i8, out_cmdloc_dummy_var_65: [ref]i8, out_cmdloc_dummy_var_66: [ref]i8);
  modifies $M.24, $M.6, $M.26, $M.25, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_zero_buffer_tail_loop_$bb18(in_$p0: ref, in_$p40: ref, in_$i50: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i80: i32, in_cmdloc_dummy_var_67: [ref]i8, in_cmdloc_dummy_var_68: [ref]i8) returns (out_$i50: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i80: i32, out_cmdloc_dummy_var_67: [ref]i8, out_cmdloc_dummy_var_68: [ref]i8)
{

  entry:
    out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i47, out_$i48, out_$i49, out_$i80, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68 := in_$i50, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p60, in_$i61, in_$i62, in_$i63, in_$p64, in_$p65, in_$i66, in_$p67, in_$p68, in_$p69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i47, in_$i48, in_$i49, in_$i80, in_cmdloc_dummy_var_67, in_cmdloc_dummy_var_68;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8566;

  $bb23:
    assume out_$i79 == 1;
    assume {:verifier.code 0} true;
    out_$i47, out_$i48, out_$i49 := out_$i73, out_$i74, 0;
    goto $bb23_dummy;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$i80 := out_$i73;
    assume true;
    goto $bb23;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i1(out_$i77, out_$i78);
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i73, 0);
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, out_$i74);
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i16.i32(out_$i75);
    goto corral_source_split_8596;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i16($M.6, in_$p40);
    goto corral_source_split_8595;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i48, 1);
    call {:si_unique_call 1044} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_8594;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(out_$i47, out_$i63);
    call {:si_unique_call 1043} {:cexpr "do_count"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_8593;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_67 := $M.6;
    call {:si_unique_call 1042} out_cmdloc_dummy_var_68 := $memset.i8(out_cmdloc_dummy_var_67, out_$p71, 0, out_$i72, $zext.i32.i64(1), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_68;
    goto corral_source_split_8592;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i63);
    goto corral_source_split_8591;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p69, $mul.ref(out_$i70, 1));
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i49);
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} out_$p69 := lowmem_page_address(out_$p68);
    goto corral_source_split_8588;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} out_$p68 := sg_page(out_$p67);
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p65, $mul.ref(out_$i66, 40));
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i48);
    goto corral_source_split_8585;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_8584;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_8583;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i47;
    goto $bb22;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i62;
    goto $bb22;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i62 := $sub.i32(out_$i61, out_$i49);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.6, out_$p60);
    goto corral_source_split_8577;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i57, 40)), $mul.ref(20, 1));
    goto corral_source_split_8576;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    out_$i57 := $sext.i32.i64(out_$i48);
    goto corral_source_split_8575;

  $bb20:
    assume out_$i56 == 1;
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    out_$i56 := $ult.i32(out_$i55, out_$i47);
    goto corral_source_split_8572;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    out_$i55 := $sub.i32(out_$i54, out_$i49);
    goto corral_source_split_8571;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i32($M.6, out_$p53);
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i50, 40)), $mul.ref(20, 1));
    goto corral_source_split_8569;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i48);
    goto corral_source_split_8568;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb21:
    assume !(out_$i56 == 1);
    goto corral_source_split_8580;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i47, out_$i48, out_$i49, out_$i80, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68 := osst_zero_buffer_tail_loop_$bb18(in_$p0, in_$p40, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p60, out_$i61, out_$i62, out_$i63, out_$p64, out_$p65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i47, out_$i48, out_$i49, out_$i80, out_cmdloc_dummy_var_67, out_cmdloc_dummy_var_68);
    return;

  exit:
    return;
}



procedure osst_zero_buffer_tail_loop_$bb18(in_$p0: ref, in_$p40: ref, in_$i50: i64, in_$p53: ref, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i57: i64, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$i63: i32, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$i73: i32, in_$i74: i32, in_$i75: i16, in_$i76: i32, in_$i77: i1, in_$i78: i1, in_$i79: i1, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i80: i32, in_cmdloc_dummy_var_67: [ref]i8, in_cmdloc_dummy_var_68: [ref]i8) returns (out_$i50: i64, out_$p53: ref, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i57: i64, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$i63: i32, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$i73: i32, out_$i74: i32, out_$i75: i16, out_$i76: i32, out_$i77: i1, out_$i78: i1, out_$i79: i1, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i80: i32, out_cmdloc_dummy_var_67: [ref]i8, out_cmdloc_dummy_var_68: [ref]i8);
  modifies $M.6;



implementation osst_zero_buffer_tail_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$i9: i32, in_$i10: i32, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i21: i32, in_$i22: i32) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$i9: i32, out_$i10: i32, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i21: i32, out_$i22: i32)
{

  entry:
    out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i9, out_$i10, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i21, out_$i22 := in_$i11, in_$p14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i9, in_$i10, in_$i23, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8523;

  $bb6:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i17, out_$i16;
    goto $bb6_dummy;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i21, out_$i22 := out_$i16, out_$i17;
    assume true;
    goto $bb6;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    out_$i20 := $sgt.i32(out_$i19, out_$i17);
    goto corral_source_split_8536;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i16.i32(out_$i18);
    goto corral_source_split_8535;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i16($M.6, in_$p3);
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i9, 1);
    call {:si_unique_call 1037} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_8533;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    out_$i16 := $sub.i32(out_$i10, out_$i15);
    call {:si_unique_call 1036} {:cexpr "offset"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i32($M.6, out_$p14);
    goto corral_source_split_8531;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i11, 40)), $mul.ref(20, 1));
    goto corral_source_split_8530;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i9);
    goto corral_source_split_8529;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i28 == 1;
    goto corral_source_split_8540;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    out_$i29, out_$i30 := out_$i10, out_$i9;
    assume true;
    goto $bb8;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    out_$i28 := $uge.i32(out_$i10, out_$i27);
    goto corral_source_split_8527;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.6, out_$p26);
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i23, 40)), $mul.ref(20, 1));
    goto corral_source_split_8525;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i9);
    goto corral_source_split_8524;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i9, out_$i10, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i21, out_$i22 := osst_zero_buffer_tail_loop_$bb4(in_$p0, in_$p3, out_$i11, out_$p14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i9, out_$i10, out_$i23, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure osst_zero_buffer_tail_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i11: i64, in_$p14: ref, in_$i15: i32, in_$i16: i32, in_$i17: i32, in_$i18: i16, in_$i19: i32, in_$i20: i1, in_$i9: i32, in_$i10: i32, in_$i23: i64, in_$p26: ref, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i30: i32, in_$i21: i32, in_$i22: i32) returns (out_$i11: i64, out_$p14: ref, out_$i15: i32, out_$i16: i32, out_$i17: i32, out_$i18: i16, out_$i19: i32, out_$i20: i1, out_$i9: i32, out_$i10: i32, out_$i23: i64, out_$p26: ref, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i30: i32, out_$i21: i32, out_$i22: i32);



implementation __os_scsi_tape_open_loop_$bb38(in_$p22: ref, in_$p98: ref, in_$i108: i32, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$p117: ref, in_$p118: ref, in_$i119: i16, in_$i120: i32, in_$i121: i1, in_$i106: i32, in_$i107: i32, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i122: i32, in_$i123: i32) returns (out_$i108: i32, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$p117: ref, out_$p118: ref, out_$i119: i16, out_$i120: i32, out_$i121: i1, out_$i106: i32, out_$i107: i32, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i122: i32, out_$i123: i32)
{

  entry:
    out_$i108, out_$i109, out_$p110, out_$p111, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i107, out_$i124, out_$p125, out_$p126, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i122, out_$i123 := in_$i108, in_$i109, in_$p110, in_$p111, in_$p114, in_$i115, in_$i116, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$i106, in_$i107, in_$i124, in_$p125, in_$p126, in_$p129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i122, in_$i123;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8778;

  $bb40:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i106, out_$i107 := out_$i108, out_$i116;
    goto $bb40_dummy;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    out_$i122, out_$i123 := out_$i116, out_$i108;
    assume true;
    goto $bb40;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    out_$i121 := $sgt.i32(out_$i120, out_$i108);
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i16.i32(out_$i119);
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i16($M.6, out_$p118);
    goto corral_source_split_8796;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p117, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_8795;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.6, in_$p98);
    goto corral_source_split_8794;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, out_$i107);
    call {:si_unique_call 1077} {:cexpr "b_size"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_8793;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.6, out_$p114);
    goto corral_source_split_8792;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref($add.ref($add.ref(out_$p111, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i109, 40)), $mul.ref(20, 1));
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.6, out_$p110);
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i106);
    goto corral_source_split_8788;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i108 := $add.i32(out_$i106, 1);
    call {:si_unique_call 1076} {:cexpr "i"} boogie_si_record_i32(out_$i108);
    goto corral_source_split_8787;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb42:
    assume out_$i132 == 1;
    goto corral_source_split_8802;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    out_$i133, out_$i134 := out_$i107, out_$i106;
    assume true;
    goto $bb42;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    out_$i132 := $ule.i32(out_$i131, 32768);
    goto corral_source_split_8785;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    out_$i131 := $add.i32(out_$i130, out_$i107);
    goto corral_source_split_8784;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.6, out_$p129);
    goto corral_source_split_8783;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref($add.ref($add.ref(out_$p126, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i124, 40)), $mul.ref(20, 1));
    goto corral_source_split_8782;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.6, out_$p125);
    goto corral_source_split_8781;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p22, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_8780;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i106);
    goto corral_source_split_8779;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i108, out_$i109, out_$p110, out_$p111, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i107, out_$i124, out_$p125, out_$p126, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i122, out_$i123 := __os_scsi_tape_open_loop_$bb38(in_$p22, in_$p98, out_$i108, out_$i109, out_$p110, out_$p111, out_$p114, out_$i115, out_$i116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$i106, out_$i107, out_$i124, out_$p125, out_$p126, out_$p129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i122, out_$i123);
    return;

  exit:
    return;
}



procedure __os_scsi_tape_open_loop_$bb38(in_$p22: ref, in_$p98: ref, in_$i108: i32, in_$i109: i64, in_$p110: ref, in_$p111: ref, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$p117: ref, in_$p118: ref, in_$i119: i16, in_$i120: i32, in_$i121: i1, in_$i106: i32, in_$i107: i32, in_$i124: i64, in_$p125: ref, in_$p126: ref, in_$p129: ref, in_$i130: i32, in_$i131: i32, in_$i132: i1, in_$i133: i32, in_$i134: i32, in_$i122: i32, in_$i123: i32) returns (out_$i108: i32, out_$i109: i64, out_$p110: ref, out_$p111: ref, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$p117: ref, out_$p118: ref, out_$i119: i16, out_$i120: i32, out_$i121: i1, out_$i106: i32, out_$i107: i32, out_$i124: i64, out_$p125: ref, out_$p126: ref, out_$p129: ref, out_$i130: i32, out_$i131: i32, out_$i132: i1, out_$i133: i32, out_$i134: i32, out_$i122: i32, out_$i123: i32);



implementation enlarge_buffer_loop_$bb29(in_$p0: ref, in_$i13: i32, in_$i17: i32, in_$i31: i32, in_$i32: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$i72: i1, in_$i41: i32, in_$i42: i32, in_$i73: i1) returns (out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$i72: i1, out_$i41: i32, out_$i42: i32, out_$i73: i1)
{

  entry:
    out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i41, out_$i42, out_$i73 := in_$i43, in_$i44, in_$i45, in_$p46, in_$i47, in_$p50, in_$i51, in_$i52, in_$p54, in_$p55, in_$i56, in_$p57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i41, in_$i42, in_$i73;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10931;

  $bb40:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i41, out_$i42 := out_$i67, out_$i69;
    goto $bb40_dummy;

  corral_source_split_10977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i69, in_$i13);
    goto corral_source_split_10977;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $M.6 := $store.i16($M.6, out_$p71, out_$i70);
    goto corral_source_split_10976;

  corral_source_split_10974:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(130, 1));
    goto corral_source_split_10975;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i16(out_$i69);
    goto corral_source_split_10974;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i42, 1);
    call {:si_unique_call 1170} {:cexpr "segs"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p68, out_$i67);
    goto corral_source_split_10972;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i66, out_$i41);
    call {:si_unique_call 1169} {:cexpr "got"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_10970;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.6, out_$p65);
    goto corral_source_split_10969;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i62, 40)), $mul.ref(20, 1));
    goto corral_source_split_10968;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i42);
    goto corral_source_split_10967;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} sg_set_page(out_$p57, out_$p46, out_$i61, 0);
    goto corral_source_split_10966;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10965;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    out_$i61 := in_$i31;
    goto $bb39;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i60;
    goto $bb39;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(33280, out_$i41);
    goto corral_source_split_10961;

  $bb37:
    assume out_$i59 == 1;
    goto corral_source_split_10960;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    out_$i59 := $ule.i32(out_$i58, 2048);
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i58 := $sub.i32(33280, out_$i41);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref(out_$p55, $mul.ref(out_$i56, 40));
    goto corral_source_split_10956;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i32.i64(out_$i42);
    goto corral_source_split_10955;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(out_$p54);
    goto corral_source_split_10954;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_10953;

  $bb35:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i64(out_$i51, 0);
    goto corral_source_split_10947;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_10946;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p50, 0);
    goto corral_source_split_10945;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i47, 40)), $mul.ref(16, 1));
    goto corral_source_split_10944;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i42);
    goto corral_source_split_10943;

  SeqInstr_564:
    goto corral_source_split_10942;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} out_$p46 := alloc_pages(in_$i17, out_$i45);
    goto SeqInstr_563;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_10941;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    out_$i45 := 0;
    goto $bb33;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    out_$i45 := in_$i32;
    goto $bb33;

  $bb31:
    assume out_$i44 == 1;
    goto corral_source_split_10937;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    out_$i44 := $ugt.i32(out_$i43, 4096);
    goto corral_source_split_10935;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(33280, out_$i41);
    goto corral_source_split_10934;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb42:
    assume out_$i73 == 1;
    goto corral_source_split_10981;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_10931:
    assume {:verifier.code 0} true;
    out_$i73 := $sle.i32(out_$i41, 33279);
    goto corral_source_split_10932;

  $bb32:
    assume !(out_$i44 == 1);
    goto corral_source_split_10939;

  $bb38:
    assume !(out_$i59 == 1);
    goto corral_source_split_10963;

  $bb40_dummy:
    call {:si_unique_call 1} out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i41, out_$i42, out_$i73 := enlarge_buffer_loop_$bb29(in_$p0, in_$i13, in_$i17, in_$i31, in_$i32, out_$i43, out_$i44, out_$i45, out_$p46, out_$i47, out_$p50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$p57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i41, out_$i42, out_$i73);
    return;

  exit:
    return;
}



procedure enlarge_buffer_loop_$bb29(in_$p0: ref, in_$i13: i32, in_$i17: i32, in_$i31: i32, in_$i32: i32, in_$i43: i32, in_$i44: i1, in_$i45: i32, in_$p46: ref, in_$i47: i64, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$p57: ref, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$p68: ref, in_$i69: i32, in_$i70: i16, in_$p71: ref, in_$i72: i1, in_$i41: i32, in_$i42: i32, in_$i73: i1) returns (out_$i43: i32, out_$i44: i1, out_$i45: i32, out_$p46: ref, out_$i47: i64, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$p57: ref, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$p68: ref, out_$i69: i32, out_$i70: i16, out_$p71: ref, out_$i72: i1, out_$i41: i32, out_$i42: i32, out_$i73: i1);
  modifies $M.6, assertsPassed;



implementation {:SIextraRecBound 5} osst_analyze_headers_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i39: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i42: i32, in_$i43: i32, in_$i49: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i42: i32, out_$i43: i32, out_$i49: i32)
{

  entry:
    out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i42, out_$i43, out_$i49 := in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i42, in_$i43, in_$i49;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11378;

  $bb24:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i42, out_$i43 := out_$i46, out_$i47;
    goto $bb24_dummy;

  corral_source_split_11387:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i46;
    assume true;
    goto $bb24;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    out_$i48 := $slt.i32(out_$i47, in_$i39);
    goto corral_source_split_11387;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i43, 1);
    call {:si_unique_call 1210} {:cexpr "ppos"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_11386;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_11385;

  $bb22:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := out_$i42;
    goto $bb23;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    out_$i46 := 1;
    goto $bb23;

  $bb21:
    assume out_$i45 == 1;
    goto corral_source_split_11383;

  corral_source_split_11381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i44, 0);
    goto corral_source_split_11381;

  SeqInstr_594:
    call {:si_unique_call 1209} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_11380;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} out_$i44 := __osst_analyze_headers(in_$p0, in_$p1, out_$i43);
    goto SeqInstr_593;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i42, out_$i43, out_$i49 := osst_analyze_headers_loop_$bb19(in_$p0, in_$p1, in_$i39, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i42, out_$i43, out_$i49);
    return;

  exit:
    return;
}



procedure osst_analyze_headers_loop_$bb19(in_$p0: ref, in_$p1: ref, in_$i39: i32, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i42: i32, in_$i43: i32, in_$i49: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i42: i32, out_$i43: i32, out_$i49: i32);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation {:SIextraRecBound 5} osst_analyze_headers_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i25: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i28: i32, in_$i29: i32, in_$i35: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i28: i32, out_$i29: i32, out_$i35: i32)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i28, out_$i29, out_$i35 := in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i28, in_$i29, in_$i35;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_11357;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i32, out_$i33;
    goto $bb13_dummy;

  corral_source_split_11366:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i32;
    assume true;
    goto $bb13;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i33, in_$i25);
    goto corral_source_split_11366;

  corral_source_split_11364:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i29, 1);
    call {:si_unique_call 1205} {:cexpr "ppos"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_11365;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11364;

  $bb11:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i28;
    goto $bb12;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    out_$i32 := 1;
    goto $bb12;

  $bb10:
    assume out_$i31 == 1;
    goto corral_source_split_11362;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_11359:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_11360;

  SeqInstr_591:
    call {:si_unique_call 1204} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_11359;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} out_$i30 := __osst_analyze_headers(in_$p0, in_$p1, out_$i29);
    goto SeqInstr_590;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i28, out_$i29, out_$i35 := osst_analyze_headers_loop_$bb8(in_$p0, in_$p1, in_$i25, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i28, out_$i29, out_$i35);
    return;

  exit:
    return;
}



procedure osst_analyze_headers_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$i25: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i1, in_$i28: i32, in_$i29: i32, in_$i35: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i1, out_$i28: i32, out_$i29: i32, out_$i35: i32);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation sg_assign_page_loop_$bb11()
{

  entry:
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb11_dummy;

  $bb11_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb11();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb11();



implementation sg_assign_page_loop_$bb7()
{

  entry:
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb7_dummy;

  $bb7_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb7();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb7();



implementation sg_assign_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} sg_assign_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure sg_assign_page_loop_$bb3();



implementation osst_int_ioctl_loop_$bb119(in_$p0: ref, in_$i3: i64, in_$p5: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i64, in_$i178: i1, in_$i172: i32, in_$i173: i32, in_$i179: i32) returns (out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i64, out_$i178: i1, out_$i172: i32, out_$i173: i32, out_$i179: i32)
{

  entry:
    out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i172, out_$i173, out_$i179 := in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i172, in_$i173, in_$i179;
    goto $bb119, exit;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_12664;

  $bb121:
    assume out_$i178 == 1;
    assume {:verifier.code 0} true;
    out_$i172, out_$i173 := out_$i176, out_$i175;
    goto $bb121_dummy;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    out_$i179 := out_$i175;
    assume true;
    goto $bb121;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    out_$i178 := $ult.i64(out_$i177, in_$i3);
    goto corral_source_split_12670;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    out_$i177 := $sext.i32.i64(out_$i176);
    goto corral_source_split_12669;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i32(out_$i172, 1);
    call {:si_unique_call 1399} {:cexpr "i"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_12668;

  corral_source_split_12666:
    assume {:verifier.code 0} true;
    out_$i175 := $or.i32(out_$i174, out_$i173);
    call {:si_unique_call 1398} {:cexpr "ioctl_result"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_12667;

  SeqInstr_645:
    call {:si_unique_call 1397} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_12666;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  $bb120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} out_$i174 := osst_write_filemark(in_$p0, in_$p5);
    goto SeqInstr_644;

  corral_source_split_12664:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb121_dummy:
    call {:si_unique_call 1} out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i172, out_$i173, out_$i179 := osst_int_ioctl_loop_$bb119(in_$p0, in_$i3, in_$p5, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i172, out_$i173, out_$i179);
    return;

  exit:
    return;
}



procedure osst_int_ioctl_loop_$bb119(in_$p0: ref, in_$i3: i64, in_$p5: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i64, in_$i178: i1, in_$i172: i32, in_$i173: i32, in_$i179: i32) returns (out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i64, out_$i178: i1, out_$i172: i32, out_$i173: i32, out_$i179: i32);
  modifies $M.6, $M.24, $M.26, $M.25, $M.39, $M.38, $CurrAddr, assertsPassed;



implementation osst_space_over_filemarks_forward_fast_loop_$bb46(in_$p0: ref, in_$p1: ref, in_$p111: ref, in_$i121: i32, in_$i120: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$i155: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i159: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i32, in_$i169: i1, in_vslice_dummy_var_333: i32) returns (out_$i121: i32, out_$i120: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$i155: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i159: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i32, out_$i169: i1, out_vslice_dummy_var_333: i32)
{

  entry:
    out_$i121, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i160, out_$i161, out_$i162, out_$i159, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_vslice_dummy_var_333 := in_$i121, in_$i120, in_$p122, in_$p123, in_$p124, in_$p125, in_$p126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$p132, in_$p133, in_$p134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i140, in_$i141, in_$p143, in_$i144, in_$i146, in_$i147, in_$p148, in_$p149, in_$p150, in_$p151, in_$p152, in_$i153, in_$i154, in_$i155, in_$i160, in_$i161, in_$i162, in_$i159, in_$p163, in_$p164, in_$p165, in_$p166, in_$i167, in_$i168, in_$i169, in_vslice_dummy_var_333;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb68:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    out_$i120 := out_$i159;
    goto $bb68_dummy;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i159;
    assume true;
    goto $bb68;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 2);
    goto corral_source_split_13653;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i8.i32(out_$i167);
    goto corral_source_split_13652;

  corral_source_split_13650:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i8($M.6, out_$p166);
    goto corral_source_split_13651;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    out_$p166 := $add.ref($add.ref(out_$p165, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13650;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    out_$p165 := $load.ref($M.6, out_$p164);
    goto corral_source_split_13649;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p163, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13648;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    out_$p163 := $load.ref($M.6, in_$p111);
    goto corral_source_split_13647;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_13646;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i162 := $add.i32(out_$i120, 1);
    call {:si_unique_call 1512} {:cexpr "mt_count"} boogie_si_record_i32(out_$i162);
    assume {:verifier.code 0} true;
    out_$i159 := out_$i162;
    goto $bb64;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i120;
    goto $bb64;

  $bb62:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    out_$i155 := $ne.i32(out_$i154, 2);
    goto corral_source_split_13639;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    out_$i154 := $zext.i8.i32(out_$i153);
    goto corral_source_split_13638;

  corral_source_split_13636:
    assume {:verifier.code 0} true;
    out_$i153 := $load.i8($M.6, out_$p152);
    goto corral_source_split_13637;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13636;

  corral_source_split_13634:
    assume {:verifier.code 0} true;
    out_$p151 := $load.ref($M.6, out_$p150);
    goto corral_source_split_13635;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    out_$p150 := $add.ref($add.ref(out_$p149, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13634;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    out_$p149 := $load.ref($M.6, out_$p148);
    goto corral_source_split_13633;

  $bb60:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13632;

  $bb59:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    out_$i147 := $slt.i32(out_$i146, 0);
    goto corral_source_split_13628;

  SeqInstr_717:
    call {:si_unique_call 1510} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i146);
    goto corral_source_split_13627;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  corral_source_split_13626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_$i146 := osst_get_logical_frame(in_$p0, in_$p1, $sub.i32(0, 1), 0);
    goto SeqInstr_716;

  SeqInstr_714:
    goto corral_source_split_13626;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} out_vslice_dummy_var_333 := osst_position_tape_and_confirm(in_$p0, in_$p1, out_$i144);
    goto SeqInstr_713;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i32($M.6, out_$p143);
    goto corral_source_split_13625;

  $bb57:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13624;

  $bb56:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i120;
    assume true;
    goto $bb56;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, $sub.i32(0, 1));
    goto corral_source_split_13615;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i32($M.6, out_$p138);
    goto corral_source_split_13614;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(740, 1));
    goto corral_source_split_13613;

  $bb53:
    assume out_$i137 == 1;
    goto corral_source_split_13612;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 0);
    goto corral_source_split_13610;

  corral_source_split_13608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_$i136 := __fswab32(out_$i135);
    call {:si_unique_call 1503} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i136);
    goto corral_source_split_13609;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i32($M.6, out_$p134);
    goto corral_source_split_13608;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref(out_$p133, $mul.ref(0, 512)), $mul.ref(192, 1));
    goto corral_source_split_13607;

  corral_source_split_13605:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.6, out_$p132);
    goto corral_source_split_13606;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(out_$p131, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13605;

  corral_source_split_13603:
    assume {:verifier.code 0} true;
    out_$p131 := $load.ref($M.6, out_$p130);
    goto corral_source_split_13604;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13603;

  $bb51:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_13599;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_13598;

  corral_source_split_13596:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i8($M.6, out_$p126);
    goto corral_source_split_13597;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(out_$p125, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13596;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.6, out_$p124);
    goto corral_source_split_13595;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13594;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.6, out_$p122);
    goto corral_source_split_13593;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13592;

  $bb66:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_13618:
    assume {:verifier.code 0} true;
    out_$i161 := $slt.i32(out_$i160, 0);
    goto corral_source_split_13619;

  SeqInstr_708:
    call {:si_unique_call 1505} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i160);
    goto corral_source_split_13618;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_$i160 := osst_space_over_filemarks_backward(in_$p0, in_$p1, 2, 1);
    goto SeqInstr_707;

  $bb54:
    assume !(out_$i137 == 1);
    goto corral_source_split_13617;

  $bb68_dummy:
    call {:si_unique_call 1} out_$i121, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i160, out_$i161, out_$i162, out_$i159, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_vslice_dummy_var_333 := osst_space_over_filemarks_forward_fast_loop_$bb46(in_$p0, in_$p1, in_$p111, out_$i121, out_$i120, out_$p122, out_$p123, out_$p124, out_$p125, out_$p126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$p132, out_$p133, out_$p134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i140, out_$i141, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$p149, out_$p150, out_$p151, out_$p152, out_$i153, out_$i154, out_$i155, out_$i160, out_$i161, out_$i162, out_$i159, out_$p163, out_$p164, out_$p165, out_$p166, out_$i167, out_$i168, out_$i169, out_vslice_dummy_var_333);
    return;

  exit:
    return;
}



procedure osst_space_over_filemarks_forward_fast_loop_$bb46(in_$p0: ref, in_$p1: ref, in_$p111: ref, in_$i121: i32, in_$i120: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$i135: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i140: i1, in_$i141: i32, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$p149: ref, in_$p150: ref, in_$p151: ref, in_$p152: ref, in_$i153: i8, in_$i154: i32, in_$i155: i1, in_$i160: i32, in_$i161: i1, in_$i162: i32, in_$i159: i32, in_$p163: ref, in_$p164: ref, in_$p165: ref, in_$p166: ref, in_$i167: i8, in_$i168: i32, in_$i169: i1, in_vslice_dummy_var_333: i32) returns (out_$i121: i32, out_$i120: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$i135: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i140: i1, out_$i141: i32, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$p149: ref, out_$p150: ref, out_$p151: ref, out_$p152: ref, out_$i153: i8, out_$i154: i32, out_$i155: i1, out_$i160: i32, out_$i161: i1, out_$i162: i32, out_$i159: i32, out_$p163: ref, out_$p164: ref, out_$p165: ref, out_$p166: ref, out_$i167: i8, out_$i168: i32, out_$i169: i1, out_vslice_dummy_var_333: i32);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_space_over_filemarks_forward_fast_loop_$bb72(in_$p0: ref, in_$p1: ref, in_$i119: i32, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$i181: i32, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i8, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i201: i1, in_$i172: i32, in_vslice_dummy_var_335: i32) returns (out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$i181: i32, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i8, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i201: i1, out_$i172: i32, out_vslice_dummy_var_335: i32)
{

  entry:
    out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p182, out_$i183, out_$i184, out_$i181, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i172, out_vslice_dummy_var_335 := in_$p173, in_$p174, in_$p175, in_$p176, in_$p177, in_$i178, in_$i179, in_$i180, in_$p182, in_$i183, in_$i184, in_$i181, in_$i188, in_$i189, in_$i190, in_$p191, in_$p192, in_$p193, in_$p194, in_$p195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i201, in_$i172, in_vslice_dummy_var_335;
    goto $bb72, exit;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_13659;

  $bb86:
    assume out_$i201 == 1;
    assume {:verifier.code 0} true;
    out_$i172 := out_$i188;
    goto $bb86_dummy;

  corral_source_split_13698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i201 := $ne.i32(out_$i188, in_$i119);
    goto corral_source_split_13698;

  $bb84:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    out_$i199 := out_$i179;
    assume true;
    goto $bb84;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    out_$i198 := $ne.i32(out_$i197, 2);
    goto corral_source_split_13693;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    out_$i197 := $zext.i8.i32(out_$i196);
    goto corral_source_split_13692;

  corral_source_split_13690:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i8($M.6, out_$p195);
    goto corral_source_split_13691;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p194, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13690;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    out_$p194 := $load.ref($M.6, out_$p193);
    goto corral_source_split_13689;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p192, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13688;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    out_$p192 := $load.ref($M.6, out_$p191);
    goto corral_source_split_13687;

  $bb82:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13686;

  $bb81:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_13682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    out_$i190 := $slt.i32(out_$i189, 0);
    goto corral_source_split_13682;

  SeqInstr_726:
    call {:si_unique_call 1520} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_13681;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} out_$i189 := osst_get_logical_frame(in_$p0, in_$p1, $sub.i32(0, 1), 0);
    goto SeqInstr_725;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    out_$i188 := $add.i32(out_$i172, 1);
    call {:si_unique_call 1518} {:cexpr "cnt"} boogie_si_record_i32(out_$i188);
    goto corral_source_split_13680;

  SeqInstr_723:
    goto corral_source_split_13679;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  $bb79:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_vslice_dummy_var_335 := osst_position_tape_and_confirm(in_$p0, in_$p1, out_$i179);
    goto SeqInstr_722;

  $bb78:
    assume !(out_$i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    out_$i181 := out_$i172;
    assume true;
    goto $bb78;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    out_$i184 := $slt.i32(out_$i183, out_$i179);
    goto corral_source_split_13677;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    out_$i183 := $load.i32($M.6, out_$p182);
    goto corral_source_split_13676;

  corral_source_split_13674:
    assume {:verifier.code 0} true;
    out_$p182 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(756, 1));
    goto corral_source_split_13675;

  $bb76:
    assume !(out_$i180 == 1);
    goto corral_source_split_13674;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    out_$i181 := out_$i172;
    assume true;
    goto $bb76;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    out_$i180 := $eq.i32(out_$i179, 0);
    goto corral_source_split_13668;

  corral_source_split_13666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_$i179 := __fswab32(out_$i178);
    call {:si_unique_call 1514} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i179);
    goto corral_source_split_13667;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i32($M.6, out_$p177);
    goto corral_source_split_13666;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p176, $mul.ref(0, 512)), $mul.ref(224, 1));
    goto corral_source_split_13665;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.6, out_$p175);
    goto corral_source_split_13664;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(out_$p174, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13663;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    out_$p174 := $load.ref($M.6, out_$p173);
    goto corral_source_split_13662;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13661;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb86_dummy:
    call {:si_unique_call 1} out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p182, out_$i183, out_$i184, out_$i181, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i172, out_vslice_dummy_var_335 := osst_space_over_filemarks_forward_fast_loop_$bb72(in_$p0, in_$p1, in_$i119, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$i179, out_$i180, out_$p182, out_$i183, out_$i184, out_$i181, out_$i188, out_$i189, out_$i190, out_$p191, out_$p192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i201, out_$i172, out_vslice_dummy_var_335);
    return;

  exit:
    return;
}



procedure osst_space_over_filemarks_forward_fast_loop_$bb72(in_$p0: ref, in_$p1: ref, in_$i119: i32, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i32, in_$i179: i32, in_$i180: i1, in_$p182: ref, in_$i183: i32, in_$i184: i1, in_$i181: i32, in_$i188: i32, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i8, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i201: i1, in_$i172: i32, in_vslice_dummy_var_335: i32) returns (out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i32, out_$i179: i32, out_$i180: i1, out_$p182: ref, out_$i183: i32, out_$i184: i1, out_$i181: i32, out_$i188: i32, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i8, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i201: i1, out_$i172: i32, out_vslice_dummy_var_335: i32);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_space_over_filemarks_backward_loop_$bb38(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i98: i1, in_$i75: i32, in_vslice_dummy_var_339: i32) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i98: i1, out_$i75: i32, out_vslice_dummy_var_339: i32)
{

  entry:
    out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i75, out_vslice_dummy_var_339 := in_$p76, in_$p77, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i87, in_$p88, in_$p89, in_$p90, in_$p91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i98, in_$i75, in_vslice_dummy_var_339;
    goto $bb38, exit;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_13836;

  $bb49:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := out_$i85;
    goto $bb49_dummy;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i85, in_$i3);
    goto corral_source_split_13868;

  $bb47:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i82;
    assume true;
    goto $bb47;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    out_$i95 := $ne.i32(out_$i94, 2);
    goto corral_source_split_13863;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i8.i32(out_$i93);
    goto corral_source_split_13862;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i8($M.6, out_$p92);
    goto corral_source_split_13861;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p91, $mul.ref(0, 512)), $mul.ref(16, 1));
    goto corral_source_split_13860;

  corral_source_split_13858:
    assume {:verifier.code 0} true;
    out_$p91 := $load.ref($M.6, out_$p90);
    goto corral_source_split_13859;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p89, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13858;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.6, out_$p88);
    goto corral_source_split_13857;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13856;

  $bb44:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i86, 0);
    goto corral_source_split_13852;

  SeqInstr_741:
    call {:si_unique_call 1542} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_13851;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  corral_source_split_13850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} out_$i86 := osst_get_logical_frame(in_$p0, in_$p1, $sub.i32(0, 1), 0);
    goto SeqInstr_740;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i75, 1);
    call {:si_unique_call 1540} {:cexpr "cnt"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_13850;

  SeqInstr_738:
    goto corral_source_split_13849;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_339 := osst_position_tape_and_confirm(in_$p0, in_$p1, out_$i82);
    goto SeqInstr_737;

  $bb41:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, $sub.i32(0, 1));
    goto corral_source_split_13845;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} out_$i82 := __fswab32(out_$i81);
    call {:si_unique_call 1538} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_13844;

  corral_source_split_13842:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i32($M.6, out_$p80);
    goto corral_source_split_13843;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 512)), $mul.ref(200, 1));
    goto corral_source_split_13842;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.6, out_$p78);
    goto corral_source_split_13841;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p77, $mul.ref(0, 176)), $mul.ref(120, 1));
    goto corral_source_split_13840;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    out_$p77 := $load.ref($M.6, out_$p76);
    goto corral_source_split_13839;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_13838;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb49_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i75, out_vslice_dummy_var_339 := osst_space_over_filemarks_backward_loop_$bb38(in_$p0, in_$p1, in_$i3, out_$p76, out_$p77, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$p88, out_$p89, out_$p90, out_$p91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i98, out_$i75, out_vslice_dummy_var_339);
    return;

  exit:
    return;
}



procedure osst_space_over_filemarks_backward_loop_$bb38(in_$p0: ref, in_$p1: ref, in_$i3: i32, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$p90: ref, in_$p91: ref, in_$p92: ref, in_$i93: i8, in_$i94: i32, in_$i95: i1, in_$i96: i32, in_$i98: i1, in_$i75: i32, in_vslice_dummy_var_339: i32) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$p90: ref, out_$p91: ref, out_$p92: ref, out_$i93: i8, out_$i94: i32, out_$i95: i1, out_$i96: i32, out_$i98: i1, out_$i75: i32, out_vslice_dummy_var_339: i32);
  modifies $M.26, $M.6, $M.25, $M.24, $CurrAddr, $M.39, $M.38, assertsPassed;



implementation osst_wait_for_medium_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i64, in_$p15: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p21: ref, in_$i33: i64, in_$i34: i32, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p51: ref, in_$p45: ref, in_$p39: ref, in_$p32: ref, in_cmdloc_dummy_var_147: [ref]i8, in_cmdloc_dummy_var_148: [ref]i8) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p21: ref, out_$i33: i64, out_$i34: i32, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p51: ref, out_$p45: ref, out_$p39: ref, out_$p32: ref, out_cmdloc_dummy_var_147: [ref]i8, out_cmdloc_dummy_var_148: [ref]i8)
{

  entry:
    out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p51, out_$p45, out_$p39, out_$p32, out_cmdloc_dummy_var_147, out_cmdloc_dummy_var_148 := in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p21, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p41, in_$i42, in_$i43, in_$i44, in_$p47, in_$i48, in_$i49, in_$i50, in_$p53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p51, in_$p45, in_$p39, in_$p32, in_cmdloc_dummy_var_147, in_cmdloc_dummy_var_148;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_13963;

  $bb10:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$p21 := out_$p27;
    goto $bb10_dummy;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p27;
    assume true;
    goto $bb10;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i32(out_$i30, 0);
    goto corral_source_split_13983;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.6, out_$p29);
    goto corral_source_split_13982;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p28, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_13981;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.6, in_$p15);
    goto corral_source_split_13980;

  SeqInstr_750:
    goto corral_source_split_13979;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  corral_source_split_13978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_$p27 := osst_do_scsi(out_$p21, in_$p0, out_$p24, 0, 3, out_$i26, 0, 1);
    goto SeqInstr_749;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.6, out_$p25);
    goto corral_source_split_13978;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(304, 1));
    goto corral_source_split_13977;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_13976;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p23, 0);
    goto corral_source_split_13975;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_13974;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_147 := $M.6;
    call {:si_unique_call 1555} out_cmdloc_dummy_var_148 := $memset.i8(out_cmdloc_dummy_var_147, out_$p22, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.6 := out_cmdloc_dummy_var_148;
    goto corral_source_split_13973;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_13972;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} msleep(100);
    goto corral_source_split_13971;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume out_$i56 == 1;
    goto corral_source_split_14011;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    out_$p57 := out_$p21;
    assume true;
    goto $bb18;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i32(out_$i55, 0);
    goto corral_source_split_14007;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i8.i32(out_$i54);
    goto corral_source_split_14006;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    out_$i54 := $load.i8($M.6, out_$p53);
    goto corral_source_split_14005;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(13, 1));
    goto corral_source_split_14004;

  $bb16:
    assume out_$i50 == 1;
    goto corral_source_split_14003;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    out_$p51 := out_$p21;
    assume true;
    goto $bb16;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 58);
    goto corral_source_split_13999;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i8.i32(out_$i48);
    goto corral_source_split_13998;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i8($M.6, out_$p47);
    goto corral_source_split_13997;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(12, 1));
    goto corral_source_split_13996;

  $bb14:
    assume out_$i44 == 1;
    goto corral_source_split_13995;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p21;
    assume true;
    goto $bb14;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 2);
    goto corral_source_split_13991;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_13990;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i8($M.6, out_$p41);
    goto corral_source_split_13989;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p21, $mul.ref(0, 144)), $mul.ref(16, 1)), $mul.ref(2, 1));
    goto corral_source_split_13988;

  $bb12:
    assume out_$i38 == 1;
    goto corral_source_split_13987;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    out_$p39 := out_$p21;
    assume true;
    goto $bb12;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i64(out_$i37, 0);
    goto corral_source_split_13969;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i64(out_$i33, out_$i36);
    goto corral_source_split_13968;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    out_$i36 := $add.i64(out_$i35, in_$i4);
    goto corral_source_split_13967;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i32.i64(out_$i34);
    goto corral_source_split_13966;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    out_$i34 := $mul.i32(in_$i2, 250);
    goto corral_source_split_13965;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i64($M.6, jiffies);
    goto corral_source_split_13964;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p51, out_$p45, out_$p39, out_$p32, out_cmdloc_dummy_var_147, out_cmdloc_dummy_var_148 := osst_wait_for_medium_loop_$bb8(in_$p0, in_$i2, in_$p3, in_$i4, in_$p15, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p21, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p41, out_$i42, out_$i43, out_$i44, out_$p47, out_$i48, out_$i49, out_$i50, out_$p53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p51, out_$p45, out_$p39, out_$p32, out_cmdloc_dummy_var_147, out_cmdloc_dummy_var_148);
    return;

  exit:
    return;
}



procedure osst_wait_for_medium_loop_$bb8(in_$p0: ref, in_$i2: i32, in_$p3: ref, in_$i4: i64, in_$p15: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i32, in_$i31: i1, in_$p21: ref, in_$i33: i64, in_$i34: i32, in_$i35: i64, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p41: ref, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$p47: ref, in_$i48: i8, in_$i49: i32, in_$i50: i1, in_$p53: ref, in_$i54: i8, in_$i55: i32, in_$i56: i1, in_$p57: ref, in_$p51: ref, in_$p45: ref, in_$p39: ref, in_$p32: ref, in_cmdloc_dummy_var_147: [ref]i8, in_cmdloc_dummy_var_148: [ref]i8) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i32, out_$i31: i1, out_$p21: ref, out_$i33: i64, out_$i34: i32, out_$i35: i64, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p41: ref, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$p47: ref, out_$i48: i8, out_$i49: i32, out_$i50: i1, out_$p53: ref, out_$i54: i8, out_$i55: i32, out_$i56: i1, out_$p57: ref, out_$p51: ref, out_$p45: ref, out_$p39: ref, out_$p32: ref, out_cmdloc_dummy_var_147: [ref]i8, out_cmdloc_dummy_var_148: [ref]i8);
  modifies $M.6, $CurrAddr, assertsPassed;



implementation osst_verify_position_loop_$bb10(in_$p0: ref, in_$i3: i32, in_$p23: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i27: i32, in_$i28: i32, in_$i42: i32) returns (out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i27: i32, out_$i28: i32, out_$i42: i32)
{

  entry:
    out_$i29, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i27, out_$i28, out_$i42 := in_$i29, in_$p30, in_$p31, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i27, in_$i28, in_$i42;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14127;

  $bb15:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$i28 := out_$i39, out_$i38;
    goto $bb15_dummy;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i38;
    assume true;
    goto $bb15;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    out_$i41 := $sgt.i32(out_$i40, out_$i39);
    goto corral_source_split_14142;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.6, in_$p23);
    goto corral_source_split_14141;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    out_$i39 := $add.i32(out_$i27, 1);
    call {:si_unique_call 1575} {:cexpr "i"} boogie_si_record_i32(out_$i39);
    goto corral_source_split_14140;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_14139;

  $bb13:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := out_$i28;
    goto $bb14;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    out_$i38 := out_$i36;
    goto $bb14;

  $bb12:
    assume out_$i37 == 1;
    goto corral_source_split_14137;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i36, in_$i3);
    goto corral_source_split_14135;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1573} out_$i36 := __fswab32(out_$i35);
    call {:si_unique_call 1574} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_14134;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.6, out_$p34);
    goto corral_source_split_14133;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref($add.ref(out_$p31, $mul.ref(0, 32768)), $mul.ref(17736, 1)), $mul.ref(16, 1)), $mul.ref(out_$i29, 4));
    goto corral_source_split_14132;

  corral_source_split_14130:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.6, out_$p30);
    goto corral_source_split_14131;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_14130;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i27);
    goto corral_source_split_14129;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i29, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i27, out_$i28, out_$i42 := osst_verify_position_loop_$bb10(in_$p0, in_$i3, in_$p23, out_$i29, out_$p30, out_$p31, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i27, out_$i28, out_$i42);
    return;

  exit:
    return;
}



procedure osst_verify_position_loop_$bb10(in_$p0: ref, in_$i3: i32, in_$p23: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i27: i32, in_$i28: i32, in_$i42: i32) returns (out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i27: i32, out_$i28: i32, out_$i42: i32);



implementation append_to_buffer_loop_$bb18(in_$p1: ref, in_$p39: ref, in_$i48: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i86: i1, in_$i87: i32, in_$i85: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i86: i1, out_$i87: i32, out_$i85: i32)
{

  entry:
    out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p44, out_$i45, out_$i46, out_$i47, out_$i86, out_$i87, out_$i85 := in_$i48, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$p44, in_$i45, in_$i46, in_$i47, in_$i86, in_$i87, in_$i85;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14256;

  $bb26:
    assume out_$i84 == 1;
    assume {:verifier.code 0} true;
    out_$p44, out_$i45, out_$i46, out_$i47 := out_$p80, 0, out_$i74, out_$i81;
    goto $bb26_dummy;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    out_$i85 := out_$i74;
    assume true;
    goto $bb26;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    out_$i84 := $sgt.i32(out_$i83, out_$i81);
    goto corral_source_split_14300;

  corral_source_split_14298:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i82);
    goto corral_source_split_14299;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i16($M.6, in_$p39);
    goto corral_source_split_14298;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i47, 1);
    call {:si_unique_call 1591} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_14297;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(out_$p44, $mul.ref(out_$i79, 1));
    goto corral_source_split_14296;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    out_$i79 := $sext.i32.i64(out_$i61);
    goto corral_source_split_14295;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p78, out_$i77);
    goto corral_source_split_14294;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14293;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i76, out_$i61);
    goto corral_source_split_14292;

  corral_source_split_14290:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.6, out_$p75);
    goto corral_source_split_14291;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14290;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i46, out_$i61);
    call {:si_unique_call 1590} {:cexpr "do_count"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_14289;

  $bb24:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_14285;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i64.i32(out_$i71);
    call {:si_unique_call 1589} {:cexpr "res"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_14284;

  corral_source_split_14282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_$i71 := copy_from_user(out_$p69, out_$p44, out_$i70);
    call {:si_unique_call 1588} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_14283;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i61);
    goto corral_source_split_14282;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 1));
    goto corral_source_split_14281;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i45);
    goto corral_source_split_14280;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_$p67 := lowmem_page_address(out_$p66);
    goto corral_source_split_14279;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_$p66 := sg_page(out_$p65);
    goto corral_source_split_14278;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 40));
    goto corral_source_split_14277;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14276;

  corral_source_split_14274:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_14275;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_14274;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14273;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i46;
    goto $bb22;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i60;
    goto $bb22;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i59, out_$i45);
    goto corral_source_split_14269;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.6, out_$p58);
    goto corral_source_split_14268;

  corral_source_split_14266:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i55, 40)), $mul.ref(20, 1));
    goto corral_source_split_14267;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14266;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_14265;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i32(out_$i53, out_$i46);
    goto corral_source_split_14263;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i52, out_$i45);
    goto corral_source_split_14262;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, out_$p51);
    goto corral_source_split_14261;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i48, 40)), $mul.ref(20, 1));
    goto corral_source_split_14260;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14259;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume out_$i86 == 1;
    goto corral_source_split_14304;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    out_$i87 := out_$i46;
    assume true;
    goto $bb28;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    out_$i86 := $sgt.i32(out_$i46, 0);
    goto corral_source_split_14257;

  $bb21:
    assume !(out_$i54 == 1);
    goto corral_source_split_14271;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p44, out_$i45, out_$i46, out_$i47, out_$i86, out_$i87, out_$i85 := append_to_buffer_loop_$bb18(in_$p1, in_$p39, out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$p44, out_$i45, out_$i46, out_$i47, out_$i86, out_$i87, out_$i85);
    return;

  exit:
    return;
}



procedure append_to_buffer_loop_$bb18(in_$p1: ref, in_$p39: ref, in_$i48: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i16, in_$i83: i32, in_$i84: i1, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i86: i1, in_$i87: i32, in_$i85: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i16, out_$i83: i32, out_$i84: i1, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i86: i1, out_$i87: i32, out_$i85: i32);
  modifies $M.6;



implementation append_to_buffer_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i11: i32, in_$i12: i32, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i23: i32, in_$i24: i32) returns (out_$i13: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i11: i32, out_$i12: i32, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i23: i32, out_$i24: i32)
{

  entry:
    out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24 := in_$i13, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i11, in_$i12, in_$i25, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i23, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14218;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12 := out_$i18, out_$i19;
    goto $bb6_dummy;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i19, out_$i18;
    assume true;
    goto $bb6;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, out_$i19);
    goto corral_source_split_14231;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_14230;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.6, in_$p5);
    goto corral_source_split_14229;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1583} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_14228;

  corral_source_split_14226:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i11, out_$i17);
    call {:si_unique_call 1582} {:cexpr "offset"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_14227;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, out_$p16);
    goto corral_source_split_14226;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_14225;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_14224;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i30 == 1;
    goto corral_source_split_14235;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i12, out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    out_$i30 := $uge.i32(out_$i11, out_$i29);
    goto corral_source_split_14222;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_14221;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p1, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i25, 40)), $mul.ref(20, 1));
    goto corral_source_split_14220;

  corral_source_split_14218:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i12);
    goto corral_source_split_14219;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24 := append_to_buffer_loop_$bb4(in_$p1, in_$p5, out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure append_to_buffer_loop_$bb4(in_$p1: ref, in_$p5: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i11: i32, in_$i12: i32, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i23: i32, in_$i24: i32) returns (out_$i13: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i11: i32, out_$i12: i32, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i23: i32, out_$i24: i32);



implementation from_buffer_loop_$bb18(in_$p0: ref, in_$p39: ref, in_$i48: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i90: i1, in_$i91: i32, in_$i89: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i90: i1, out_$i91: i32, out_$i89: i32)
{

  entry:
    out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i44, out_$p45, out_$i46, out_$i47, out_$i90, out_$i91, out_$i89 := in_$i48, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p58, in_$i59, in_$i60, in_$i61, in_$p62, in_$p63, in_$i64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i44, in_$p45, in_$i46, in_$i47, in_$i90, in_$i91, in_$i89;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14498;

  $bb26:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i44, out_$p45, out_$i46, out_$i47 := 0, out_$p84, out_$i74, out_$i85;
    goto $bb26_dummy;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    out_$i89 := out_$i74;
    assume true;
    goto $bb26;

  corral_source_split_14546:
    assume {:verifier.code 0} true;
    out_$i88 := $sgt.i32(out_$i87, out_$i85);
    goto corral_source_split_14547;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_14546;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.6, in_$p39);
    goto corral_source_split_14545;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    out_$i85 := $add.i32(out_$i47, 1);
    call {:si_unique_call 1622} {:cexpr "i"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_14544;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref(out_$p45, $mul.ref(out_$i83, 1));
    goto corral_source_split_14543;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    out_$i83 := $sext.i32.i64(out_$i61);
    goto corral_source_split_14542;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p82, out_$i81);
    goto corral_source_split_14541;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14540;

  corral_source_split_14538:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i80, out_$i61);
    goto corral_source_split_14539;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.6, out_$p79);
    goto corral_source_split_14538;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_14537;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    $M.6 := $store.i32($M.6, out_$p78, out_$i77);
    goto corral_source_split_14536;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14535;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    out_$i77 := $sub.i32(out_$i76, out_$i61);
    goto corral_source_split_14534;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i32($M.6, out_$p75);
    goto corral_source_split_14533;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(12, 1));
    goto corral_source_split_14532;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i46, out_$i61);
    call {:si_unique_call 1621} {:cexpr "do_count"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_14531;

  $bb24:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_14527;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i64.i32(out_$i71);
    call {:si_unique_call 1620} {:cexpr "res"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_14526;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} out_$i71 := copy_to_user(out_$p45, out_$p69, out_$i70);
    call {:si_unique_call 1619} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_14525;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i61);
    goto corral_source_split_14524;

  corral_source_split_14522:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref(out_$p67, $mul.ref(out_$i68, 1));
    goto corral_source_split_14523;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i44);
    goto corral_source_split_14522;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_$p67 := lowmem_page_address(out_$p66);
    goto corral_source_split_14521;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_$p66 := sg_page(out_$p65);
    goto corral_source_split_14520;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p63, $mul.ref(out_$i64, 40));
    goto corral_source_split_14519;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14518;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    out_$p63 := $bitcast.ref.ref(out_$p62);
    goto corral_source_split_14517;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_14516;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_14515;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i46;
    goto $bb22;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i60;
    goto $bb22;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i59, out_$i44);
    goto corral_source_split_14511;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.6, out_$p58);
    goto corral_source_split_14510;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i55, 40)), $mul.ref(20, 1));
    goto corral_source_split_14509;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14508;

  $bb20:
    assume out_$i54 == 1;
    goto corral_source_split_14507;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i32(out_$i53, out_$i46);
    goto corral_source_split_14505;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    out_$i53 := $sub.i32(out_$i52, out_$i44);
    goto corral_source_split_14504;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.6, out_$p51);
    goto corral_source_split_14503;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i48, 40)), $mul.ref(20, 1));
    goto corral_source_split_14502;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_14501;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume out_$i90 == 1;
    goto corral_source_split_14551;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    out_$i91 := out_$i46;
    assume true;
    goto $bb28;

  corral_source_split_14498:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i46, 0);
    goto corral_source_split_14499;

  $bb21:
    assume !(out_$i54 == 1);
    goto corral_source_split_14513;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i44, out_$p45, out_$i46, out_$i47, out_$i90, out_$i91, out_$i89 := from_buffer_loop_$bb18(in_$p0, in_$p39, out_$i48, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p58, out_$i59, out_$i60, out_$i61, out_$p62, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i44, out_$p45, out_$i46, out_$i47, out_$i90, out_$i91, out_$i89);
    return;

  exit:
    return;
}



procedure from_buffer_loop_$bb18(in_$p0: ref, in_$p39: ref, in_$i48: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i55: i64, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$p62: ref, in_$p63: ref, in_$i64: i64, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i81: i32, in_$p82: ref, in_$i83: i64, in_$p84: ref, in_$i85: i32, in_$i86: i16, in_$i87: i32, in_$i88: i1, in_$i44: i32, in_$p45: ref, in_$i46: i32, in_$i47: i32, in_$i90: i1, in_$i91: i32, in_$i89: i32) returns (out_$i48: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i55: i64, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$p62: ref, out_$p63: ref, out_$i64: i64, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i81: i32, out_$p82: ref, out_$i83: i64, out_$p84: ref, out_$i85: i32, out_$i86: i16, out_$i87: i32, out_$i88: i1, out_$i44: i32, out_$p45: ref, out_$i46: i32, out_$i47: i32, out_$i90: i1, out_$i91: i32, out_$i89: i32);
  modifies $M.6;



implementation from_buffer_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i11: i32, in_$i12: i32, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i23: i32, in_$i24: i32) returns (out_$i13: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i11: i32, out_$i12: i32, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i23: i32, out_$i24: i32)
{

  entry:
    out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24 := in_$i13, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i11, in_$i12, in_$i25, in_$p28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i23, in_$i24;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_14460;

  $bb6:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i11, out_$i12 := out_$i18, out_$i19;
    goto $bb6_dummy;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i19, out_$i18;
    assume true;
    goto $bb6;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i21, out_$i19);
    goto corral_source_split_14473;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i20);
    goto corral_source_split_14472;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i16($M.6, in_$p5);
    goto corral_source_split_14471;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i12, 1);
    call {:si_unique_call 1614} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_14470;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    out_$i18 := $sub.i32(out_$i11, out_$i17);
    call {:si_unique_call 1613} {:cexpr "offset"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_14469;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.6, out_$p16);
    goto corral_source_split_14468;

  corral_source_split_14466:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_14467;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i13 := $sext.i32.i64(out_$i12);
    goto corral_source_split_14466;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i30 == 1;
    goto corral_source_split_14477;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i12, out_$i11;
    assume true;
    goto $bb8;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    out_$i30 := $uge.i32(out_$i11, out_$i29);
    goto corral_source_split_14464;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i32($M.6, out_$p28);
    goto corral_source_split_14463;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(136, 1)), $mul.ref(out_$i25, 40)), $mul.ref(20, 1));
    goto corral_source_split_14462;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i12);
    goto corral_source_split_14461;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24 := from_buffer_loop_$bb4(in_$p0, in_$p5, out_$i13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i11, out_$i12, out_$i25, out_$p28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i23, out_$i24);
    return;

  exit:
    return;
}



procedure from_buffer_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i13: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i16, in_$i21: i32, in_$i22: i1, in_$i11: i32, in_$i12: i32, in_$i25: i64, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i23: i32, in_$i24: i32) returns (out_$i13: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i16, out_$i21: i32, out_$i22: i1, out_$i11: i32, out_$i12: i32, out_$i25: i64, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i23: i32, out_$i24: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i64, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i64, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i64, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i64, in_$i185: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i64, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_vslice_dummy_var_360: i64, in_vslice_dummy_var_361: i64, in_vslice_dummy_var_362: i64, in_vslice_dummy_var_363: i32, in_vslice_dummy_var_364: i64, in_vslice_dummy_var_365: i64, in_vslice_dummy_var_366: i64, in_vslice_dummy_var_367: i64, in_vslice_dummy_var_368: i32, in_vslice_dummy_var_369: i32, in_vslice_dummy_var_370: i64, in_vslice_dummy_var_371: i32, in_vslice_dummy_var_372: i64, in_vslice_dummy_var_373: i64, in_vslice_dummy_var_374: i64, in_vslice_dummy_var_375: i64, in_vslice_dummy_var_376: i64) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i64, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i64, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i64, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i64, out_$i185: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i64, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_vslice_dummy_var_360: i64, out_vslice_dummy_var_361: i64, out_vslice_dummy_var_362: i64, out_vslice_dummy_var_363: i32, out_vslice_dummy_var_364: i64, out_vslice_dummy_var_365: i64, out_vslice_dummy_var_366: i64, out_vslice_dummy_var_367: i64, out_vslice_dummy_var_368: i32, out_vslice_dummy_var_369: i32, out_vslice_dummy_var_370: i64, out_vslice_dummy_var_371: i32, out_vslice_dummy_var_372: i64, out_vslice_dummy_var_373: i64, out_vslice_dummy_var_374: i64, out_vslice_dummy_var_375: i64, out_vslice_dummy_var_376: i64)
{

  entry:
    out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376 := in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$p138, in_$i139, in_$i141, in_$i142, in_$p143, in_$i144, in_$i146, in_$i147, in_$p148, in_$i149, in_$i151, in_$i152, in_$p153, in_$i155, in_$i156, in_$p157, in_$i159, in_$i160, in_$p161, in_$i162, in_$i163, in_$i165, in_$i166, in_$p167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$p176, in_$p177, in_$i179, in_$i180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$i187, in_$i188, in_$p189, in_$i190, in_$i191, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_vslice_dummy_var_360, in_vslice_dummy_var_361, in_vslice_dummy_var_362, in_vslice_dummy_var_363, in_vslice_dummy_var_364, in_vslice_dummy_var_365, in_vslice_dummy_var_366, in_vslice_dummy_var_367, in_vslice_dummy_var_368, in_vslice_dummy_var_369, in_vslice_dummy_var_370, in_vslice_dummy_var_371, in_vslice_dummy_var_372, in_vslice_dummy_var_373, in_vslice_dummy_var_374, in_vslice_dummy_var_375, in_vslice_dummy_var_376;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} out_$i64 := __VERIFIER_nondet_int();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i64);
    call {:si_unique_call 1691} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i64);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb38_dummy;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb27:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb32:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14703;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} out_vslice_dummy_var_360 := osst_adr_rev_show(in_$p10, in_$p12, in_$p8);
    goto corral_source_split_14702;

  $bb31:
    assume out_$i81 == 1;
    goto corral_source_split_14701;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_14698:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i32(out_$i80, 1);
    goto corral_source_split_14699;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    out_$i80 := $M.46;
    goto corral_source_split_14698;

  $bb29:
    assume out_$i79 == 1;
    goto corral_source_split_14697;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_14695:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} out_$i78 := __VERIFIER_nondet_int();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i78);
    call {:si_unique_call 1694} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i78);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb26:
    assume out_$i77 == 1;
    goto corral_source_split_14695;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i32(out_$i76, 0);
    goto corral_source_split_14693;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    out_$i76 := $M.46;
    goto corral_source_split_14692;

  $bb24:
    assume out_$i75 == 1;
    goto corral_source_split_14691;

  $bb22:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i64, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb16:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i74 := $slt.i32(out_$i64, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb3:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $slt.i32(out_$i64, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i64, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1697} ldv_stop();
    goto corral_source_split_14705;

  $bb30:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_14714:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1702} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14715;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} out_vslice_dummy_var_361 := osst_first_data_ppos_show(in_$p15, in_$p17, in_$p13);
    goto corral_source_split_14714;

  $bb44:
    assume out_$i88 == 1;
    goto corral_source_split_14713;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_14711;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    out_$i87 := $M.47;
    goto corral_source_split_14710;

  $bb42:
    assume out_$i86 == 1;
    goto corral_source_split_14709;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i32(out_$i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_14707:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} out_$i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i85);
    call {:si_unique_call 1700} {:cexpr "tmp___26"} boogie_si_record_i32(out_$i85);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume out_$i84 == 1;
    goto corral_source_split_14707;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_14689;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    out_$i83 := $M.47;
    goto corral_source_split_14688;

  $bb23:
    assume !(out_$i74 == 1);
    goto corral_source_split_14687;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1703} ldv_stop();
    goto corral_source_split_14717;

  $bb43:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb52:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1708} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14727;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} out_vslice_dummy_var_362 := osst_version_show(in_$p20, in_$p18);
    goto corral_source_split_14726;

  $bb56:
    assume out_$i95 == 1;
    goto corral_source_split_14725;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_14722:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_14723;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    out_$i94 := $M.48;
    goto corral_source_split_14722;

  $bb54:
    assume out_$i93 == 1;
    goto corral_source_split_14721;

  $bb53:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_14719:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} out_$i92 := __VERIFIER_nondet_int();
    call {:si_unique_call 1705} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i92);
    call {:si_unique_call 1706} {:cexpr "tmp___27"} boogie_si_record_i32(out_$i92);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume out_$i91 == 1;
    goto corral_source_split_14719;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    out_$i91 := $ne.i32(out_$i90, 0);
    goto corral_source_split_14677;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    out_$i90 := $M.48;
    goto corral_source_split_14676;

  $bb18:
    assume out_$i72 == 1;
    goto corral_source_split_14675;

  $bb17:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i64, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} ldv_stop();
    goto corral_source_split_14729;

  $bb55:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb76:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    $M.54 := out_$i110;
    call {:si_unique_call 1716} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i110);
    goto corral_source_split_14752;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    out_$i110 := $add.i32(out_$i109, 1);
    goto corral_source_split_14751;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    out_$i109 := $M.54;
    goto corral_source_split_14750;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_14749;

  $bb75:
    assume out_$i108 == 1;
    goto corral_source_split_14748;

  corral_source_split_14746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 0);
    goto corral_source_split_14746;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    out_$i107 := $M.57;
    goto corral_source_split_14745;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    $M.57 := out_$i106;
    call {:si_unique_call 1714} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i106);
    goto corral_source_split_14744;

  SeqInstr_783:
    goto corral_source_split_14743;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1713} out_$i106 := osst_probe(out_$p105);
    goto SeqInstr_782;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    out_$p105 := $M.43;
    goto corral_source_split_14742;

  $bb73:
    assume out_$i104 == 1;
    goto corral_source_split_14741;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_14738:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_14739;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    out_$i103 := $M.49;
    goto corral_source_split_14738;

  $bb71:
    assume out_$i102 == 1;
    goto corral_source_split_14737;

  $bb66:
    assume out_$i100 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i99, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_14731:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} out_$i99 := __VERIFIER_nondet_int();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i99);
    call {:si_unique_call 1712} {:cexpr "tmp___28"} boogie_si_record_i32(out_$i99);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i98 == 1;
    goto corral_source_split_14731;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i32(out_$i97, 0);
    goto corral_source_split_14681;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    out_$i97 := $M.49;
    goto corral_source_split_14680;

  $bb20:
    assume out_$i73 == 1;
    goto corral_source_split_14679;

  $bb19:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i64, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb81:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    $M.54 := out_$i116;
    call {:si_unique_call 1719} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_14760;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    out_$i116 := $sub.i32(out_$i115, 1);
    goto corral_source_split_14759;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    out_$i115 := $M.54;
    goto corral_source_split_14758;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1718} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14757;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} out_vslice_dummy_var_363 := osst_remove(out_$p113);
    goto corral_source_split_14756;

  corral_source_split_14754:
    assume {:verifier.code 0} true;
    out_$p113 := $M.43;
    goto corral_source_split_14755;

  $bb80:
    assume out_$i112 == 1;
    goto corral_source_split_14754;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 2);
    goto corral_source_split_14735;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    out_$i111 := $M.49;
    goto corral_source_split_14734;

  $bb68:
    assume out_$i101 == 1;
    goto corral_source_split_14733;

  $bb67:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i99, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_14762:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} ldv_stop();
    goto corral_source_split_14762;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i101 == 1);
    goto $bb70;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb70;

  $bb87:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb92:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1725} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14772;

  corral_source_split_14770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1724} out_vslice_dummy_var_364 := osst_eod_frame_ppos_show(in_$p22, in_$p24, in_$p25);
    goto corral_source_split_14771;

  $bb91:
    assume out_$i122 == 1;
    goto corral_source_split_14770;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    out_$i122 := $eq.i32(out_$i121, 1);
    goto corral_source_split_14768;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    out_$i121 := $M.50;
    goto corral_source_split_14767;

  $bb89:
    assume out_$i120 == 1;
    goto corral_source_split_14766;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_14764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1721} out_$i119 := __VERIFIER_nondet_int();
    call {:si_unique_call 1722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i119);
    call {:si_unique_call 1723} {:cexpr "tmp___29"} boogie_si_record_i32(out_$i119);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb86:
    assume out_$i118 == 1;
    goto corral_source_split_14764;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_14685;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    out_$i117 := $M.50;
    goto corral_source_split_14684;

  $bb21:
    assume !(out_$i73 == 1);
    goto corral_source_split_14683;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1726} ldv_stop();
    goto corral_source_split_14774;

  $bb90:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb99:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb124:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1733} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14823;

  SeqInstr_789:
    goto corral_source_split_14822;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_vslice_dummy_var_366 := osst_write(out_$p143, in_$p29, out_$i144, in_$p31);
    goto SeqInstr_788;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i64($M.42, in_$p6);
    goto corral_source_split_14821;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    out_$p143 := $M.45;
    goto corral_source_split_14820;

  $bb123:
    assume out_$i142 == 1;
    goto corral_source_split_14819;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_14817;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i141 := $M.51;
    goto corral_source_split_14816;

  $bb121:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1731} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14814;

  SeqInstr_786:
    goto corral_source_split_14813;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} out_vslice_dummy_var_365 := osst_write(out_$p138, in_$p29, out_$i139, in_$p31);
    goto SeqInstr_785;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    out_$i139 := $load.i64($M.42, in_$p6);
    goto corral_source_split_14812;

  corral_source_split_14810:
    assume {:verifier.code 0} true;
    out_$p138 := $M.45;
    goto corral_source_split_14811;

  $bb120:
    assume out_$i137 == 1;
    goto corral_source_split_14810;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 1);
    goto corral_source_split_14808;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    out_$i136 := $M.51;
    goto corral_source_split_14807;

  $bb118:
    assume out_$i135 == 1;
    goto corral_source_split_14806;

  $bb116:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i126, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb112:
    assume out_$i132 == 1;
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i126, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb101:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i126, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb100:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i126, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_14776:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1727} out_$i126 := __VERIFIER_nondet_int();
    call {:si_unique_call 1728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i126);
    call {:si_unique_call 1729} {:cexpr "tmp___30"} boogie_si_record_i32(out_$i126);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb98:
    assume out_$i125 == 1;
    goto corral_source_split_14776;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i32(out_$i124, 0);
    goto corral_source_split_14669;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    out_$i124 := $M.51;
    goto corral_source_split_14668;

  $bb14:
    assume out_$i70 == 1;
    goto corral_source_split_14667;

  $bb5:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i64, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i64, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb128:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1735} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14829;

  SeqInstr_792:
    goto corral_source_split_14828;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1734} out_vslice_dummy_var_367 := osst_read(out_$p148, in_$p28, out_$i149, in_$p27);
    goto SeqInstr_791;

  corral_source_split_14826:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i64($M.42, in_$p7);
    goto corral_source_split_14827;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    out_$p148 := $M.45;
    goto corral_source_split_14826;

  $bb127:
    assume out_$i147 == 1;
    goto corral_source_split_14825;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 2);
    goto corral_source_split_14804;

  corral_source_split_14802:
    assume {:verifier.code 0} true;
    out_$i146 := $M.51;
    goto corral_source_split_14803;

  $bb117:
    assume !(out_$i134 == 1);
    goto corral_source_split_14802;

  $bb134:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14842:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14842;

  SeqInstr_798:
    goto corral_source_split_14841;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} out_vslice_dummy_var_369 := os_scsi_tape_flush(out_$p157, in_$p32);
    goto SeqInstr_797;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    out_$p157 := $M.45;
    goto corral_source_split_14840;

  $bb133:
    assume out_$i156 == 1;
    goto corral_source_split_14839;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i155, 2);
    goto corral_source_split_14837;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i155 := $M.51;
    goto corral_source_split_14836;

  $bb131:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14834:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1737} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14834;

  SeqInstr_795:
    goto corral_source_split_14833;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} out_vslice_dummy_var_368 := os_scsi_tape_flush(out_$p153, in_$p32);
    goto SeqInstr_794;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    out_$p153 := $M.45;
    goto corral_source_split_14832;

  $bb130:
    assume out_$i152 == 1;
    goto corral_source_split_14831;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 1);
    goto corral_source_split_14796;

  corral_source_split_14794:
    assume {:verifier.code 0} true;
    out_$i151 := $M.51;
    goto corral_source_split_14795;

  $bb114:
    assume out_$i133 == 1;
    goto corral_source_split_14794;

  $bb113:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i126, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb137:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1741} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14849;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_vslice_dummy_var_370 := osst_compat_ioctl(out_$p161, out_$i162, out_$i163);
    goto corral_source_split_14848;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i64($M.42, in_$p3);
    goto corral_source_split_14847;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i32($M.42, in_$p2);
    goto corral_source_split_14846;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    out_$p161 := $M.45;
    goto corral_source_split_14845;

  $bb136:
    assume out_$i160 == 1;
    goto corral_source_split_14844;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 2);
    goto corral_source_split_14800;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    out_$i159 := $M.51;
    goto corral_source_split_14799;

  $bb115:
    assume !(out_$i133 == 1);
    goto corral_source_split_14798;

  $bb140:
    assume !(out_$i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb142:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $M.54 := out_$i173;
    call {:si_unique_call 1745} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i173);
    goto corral_source_split_14863;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    out_$i173 := $add.i32(out_$i172, 1);
    goto corral_source_split_14862;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    out_$i172 := $M.54;
    goto corral_source_split_14861;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14860;

  $bb141:
    assume out_$i171 == 1;
    goto corral_source_split_14859;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 0);
    goto corral_source_split_14857;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    out_$i170 := $M.58;
    goto corral_source_split_14856;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $M.58 := out_$i169;
    call {:si_unique_call 1743} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i169);
    goto corral_source_split_14855;

  SeqInstr_801:
    goto corral_source_split_14854;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} out_$i169 := os_scsi_tape_open(out_$p167, out_$p168);
    goto SeqInstr_800;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    out_$p168 := $M.45;
    goto corral_source_split_14853;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    out_$p167 := $M.44;
    goto corral_source_split_14852;

  $bb139:
    assume out_$i166 == 1;
    goto corral_source_split_14851;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    out_$i166 := $eq.i32(out_$i165, 1);
    goto corral_source_split_14788;

  corral_source_split_14786:
    assume {:verifier.code 0} true;
    out_$i165 := $M.51;
    goto corral_source_split_14787;

  $bb110:
    assume out_$i131 == 1;
    goto corral_source_split_14786;

  $bb103:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i126, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb102:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i126, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb146:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    $M.54 := out_$i180;
    call {:si_unique_call 1748} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_14872;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    out_$i180 := $sub.i32(out_$i179, 1);
    goto corral_source_split_14871;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    out_$i179 := $M.54;
    goto corral_source_split_14870;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $M.51 := 1;
    call {:si_unique_call 1747} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_14869;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} out_vslice_dummy_var_371 := os_scsi_tape_close(out_$p176, out_$p177);
    goto corral_source_split_14868;

  corral_source_split_14866:
    assume {:verifier.code 0} true;
    out_$p177 := $M.45;
    goto corral_source_split_14867;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    out_$p176 := $M.44;
    goto corral_source_split_14866;

  $bb145:
    assume out_$i175 == 1;
    goto corral_source_split_14865;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 2);
    goto corral_source_split_14792;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    out_$i174 := $M.51;
    goto corral_source_split_14791;

  $bb111:
    assume !(out_$i131 == 1);
    goto corral_source_split_14790;

  $bb149:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14879;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} out_vslice_dummy_var_372 := noop_llseek(out_$p183, out_$i184, out_$i185);
    goto corral_source_split_14878;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i32($M.42, in_$p5);
    goto corral_source_split_14877;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    out_$i184 := $load.i64($M.42, in_$p4);
    goto corral_source_split_14876;

  corral_source_split_14874:
    assume {:verifier.code 0} true;
    out_$p183 := $M.45;
    goto corral_source_split_14875;

  $bb148:
    assume out_$i182 == 1;
    goto corral_source_split_14874;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 2);
    goto corral_source_split_14780;

  corral_source_split_14778:
    assume {:verifier.code 0} true;
    out_$i181 := $M.51;
    goto corral_source_split_14779;

  $bb105:
    assume out_$i129 == 1;
    goto corral_source_split_14778;

  $bb104:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb152:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $M.51 := 2;
    call {:si_unique_call 1752} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(2);
    goto corral_source_split_14886;

  SeqInstr_804:
    goto corral_source_split_14885;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} out_vslice_dummy_var_373 := osst_ioctl(out_$p189, out_$i190, out_$i191);
    goto SeqInstr_803;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i64($M.42, in_$p0);
    goto corral_source_split_14884;

  corral_source_split_14882:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i32($M.42, in_$p1);
    goto corral_source_split_14883;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    out_$p189 := $M.45;
    goto corral_source_split_14882;

  $bb151:
    assume out_$i188 == 1;
    goto corral_source_split_14881;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 2);
    goto corral_source_split_14784;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    out_$i187 := $M.51;
    goto corral_source_split_14783;

  $bb107:
    assume out_$i130 == 1;
    goto corral_source_split_14782;

  $bb106:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i126, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} ldv_stop();
    goto corral_source_split_14888;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb109;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i135 == 1);
    goto $bb109;

  $bb158:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb163:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_14898:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1758} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14898;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1757} out_vslice_dummy_var_374 := osst_filemark_cnt_show(in_$p34, in_$p36, in_$p37);
    goto corral_source_split_14897;

  $bb162:
    assume out_$i198 == 1;
    goto corral_source_split_14896;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 1);
    goto corral_source_split_14894;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    out_$i197 := $M.52;
    goto corral_source_split_14893;

  $bb160:
    assume out_$i196 == 1;
    goto corral_source_split_14892;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_14890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1754} out_$i195 := __VERIFIER_nondet_int();
    call {:si_unique_call 1755} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i195);
    call {:si_unique_call 1756} {:cexpr "tmp___31"} boogie_si_record_i32(out_$i195);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb157:
    assume out_$i194 == 1;
    goto corral_source_split_14890;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    out_$i194 := $ne.i32(out_$i193, 0);
    goto corral_source_split_14673;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    out_$i193 := $M.52;
    goto corral_source_split_14672;

  $bb15:
    assume !(out_$i70 == 1);
    goto corral_source_split_14671;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} ldv_stop();
    goto corral_source_split_14900;

  $bb161:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb170:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb175:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1764} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14910;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1763} out_vslice_dummy_var_375 := osst_capacity_show(in_$p39, in_$p41, in_$p42);
    goto corral_source_split_14909;

  $bb174:
    assume out_$i205 == 1;
    goto corral_source_split_14908;

  corral_source_split_14906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_14906;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    out_$i204 := $M.53;
    goto corral_source_split_14905;

  $bb172:
    assume out_$i203 == 1;
    goto corral_source_split_14904;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_14902:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1760} out_$i202 := __VERIFIER_nondet_int();
    call {:si_unique_call 1761} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i202);
    call {:si_unique_call 1762} {:cexpr "tmp___32"} boogie_si_record_i32(out_$i202);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb169:
    assume out_$i201 == 1;
    goto corral_source_split_14902;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    out_$i201 := $ne.i32(out_$i200, 0);
    goto corral_source_split_14657;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    out_$i200 := $M.53;
    goto corral_source_split_14656;

  $bb7:
    assume out_$i67 == 1;
    goto corral_source_split_14655;

  $bb6:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i64, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} ldv_stop();
    goto corral_source_split_14912;

  $bb173:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb182:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i214 == 1);
    goto $bb193;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb193;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i215, 0);
    goto corral_source_split_14926;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    out_$i215 := $M.54;
    goto corral_source_split_14925;

  $bb191:
    assume out_$i214 == 1;
    goto corral_source_split_14924;

  corral_source_split_14922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 2);
    goto corral_source_split_14922;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    out_$i213 := $M.55;
    goto corral_source_split_14921;

  $bb189:
    assume out_$i212 == 1;
    goto corral_source_split_14920;

  $bb184:
    assume out_$i210 == 1;
    assume {:verifier.code 0} true;
    out_$i212 := $eq.i32(out_$i209, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i210 := $slt.i32(out_$i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_14914:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1766} out_$i209 := __VERIFIER_nondet_int();
    call {:si_unique_call 1767} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i209);
    call {:si_unique_call 1768} {:cexpr "tmp___33"} boogie_si_record_i32(out_$i209);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume out_$i208 == 1;
    goto corral_source_split_14914;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    out_$i208 := $ne.i32(out_$i207, 0);
    goto corral_source_split_14661;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    out_$i207 := $M.55;
    goto corral_source_split_14660;

  $bb9:
    assume out_$i68 == 1;
    goto corral_source_split_14659;

  $bb8:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb200:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb205:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_14956;

  corral_source_split_14954:
    assume {:verifier.code 0} true;
    $M.47 := 1;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_14955;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_14954;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1781} ldv_initialize_scsi_driver_9();
    goto corral_source_split_14953;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1780} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_14952;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_14951;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1778} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_14950;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_14949;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1776} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14948;

  corral_source_split_14946:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_14947;

  $bb204:
    assume out_$i223 == 1;
    goto corral_source_split_14946;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 0);
    goto corral_source_split_14944;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i222 := $M.59;
    goto corral_source_split_14943;

  $bb202:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_14938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    out_$i221 := $ne.i32(out_$i220, 0);
    goto corral_source_split_14938;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    out_$i220 := $M.59;
    goto corral_source_split_14937;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    $M.59 := out_$i219;
    call {:si_unique_call 1773} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i219);
    goto corral_source_split_14936;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} out_$i219 := init_osst();
    goto corral_source_split_14935;

  $bb199:
    assume out_$i218 == 1;
    goto corral_source_split_14934;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_14918;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    out_$i217 := $M.55;
    goto corral_source_split_14917;

  $bb186:
    assume out_$i211 == 1;
    goto corral_source_split_14916;

  $bb185:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i209, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} ldv_stop();
    goto corral_source_split_14958;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i211 == 1);
    goto $bb188;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i212 == 1);
    goto $bb188;

  $bb212:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb219:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb217:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_14968;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} out_vslice_dummy_var_376 := osst_linux_media_version_show(in_$p47, in_$p44, in_$p45);
    goto corral_source_split_14967;

  $bb216:
    assume out_$i229 == 1;
    goto corral_source_split_14966;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 1);
    goto corral_source_split_14964;

  corral_source_split_14962:
    assume {:verifier.code 0} true;
    out_$i228 := $M.56;
    goto corral_source_split_14963;

  $bb214:
    assume out_$i227 == 1;
    goto corral_source_split_14962;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_14960:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1786} out_$i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1787} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i226);
    call {:si_unique_call 1788} {:cexpr "tmp___34"} boogie_si_record_i32(out_$i226);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb211:
    assume out_$i225 == 1;
    goto corral_source_split_14960;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    out_$i225 := $ne.i32(out_$i224, 0);
    goto corral_source_split_14665;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    out_$i224 := $M.56;
    goto corral_source_split_14664;

  $bb11:
    assume out_$i69 == 1;
    goto corral_source_split_14663;

  $bb10:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i64, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_14970:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} ldv_stop();
    goto corral_source_split_14970;

  $bb215:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} ldv_stop();
    goto corral_source_split_14972;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb13;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb13;

  $bb38_dummy:
    call {:si_unique_call 1} out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p10, in_$p12, in_$p13, in_$p15, in_$p17, in_$p18, in_$p20, in_$p22, in_$p24, in_$p25, in_$p27, in_$p28, in_$p29, in_$p31, in_$p32, in_$p34, in_$p36, in_$p37, in_$p39, in_$p41, in_$p42, in_$p44, in_$p45, in_$p47, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i149, out_$i151, out_$i152, out_$p153, out_$i155, out_$i156, out_$p157, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i165, out_$i166, out_$p167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$p176, out_$p177, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$i187, out_$i188, out_$p189, out_$i190, out_$i191, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_vslice_dummy_var_360, out_vslice_dummy_var_361, out_vslice_dummy_var_362, out_vslice_dummy_var_363, out_vslice_dummy_var_364, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p13: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p39: ref, in_$p41: ref, in_$p42: ref, in_$p44: ref, in_$p45: ref, in_$p47: ref, in_$i64: i32, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i1, in_$i92: i32, in_$i93: i1, in_$i94: i32, in_$i95: i1, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$i108: i1, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$i122: i1, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i64, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i64, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i149: i64, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i64, in_$i165: i32, in_$i166: i1, in_$p167: ref, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$p177: ref, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$p183: ref, in_$i184: i64, in_$i185: i32, in_$i187: i32, in_$i188: i1, in_$p189: ref, in_$i190: i32, in_$i191: i64, in_$i193: i32, in_$i194: i1, in_$i195: i32, in_$i196: i1, in_$i197: i32, in_$i198: i1, in_$i200: i32, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$i204: i32, in_$i205: i1, in_$i207: i32, in_$i208: i1, in_$i209: i32, in_$i210: i1, in_$i211: i1, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i32, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$i219: i32, in_$i220: i32, in_$i221: i1, in_$i222: i32, in_$i223: i1, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i32, in_$i229: i1, in_vslice_dummy_var_360: i64, in_vslice_dummy_var_361: i64, in_vslice_dummy_var_362: i64, in_vslice_dummy_var_363: i32, in_vslice_dummy_var_364: i64, in_vslice_dummy_var_365: i64, in_vslice_dummy_var_366: i64, in_vslice_dummy_var_367: i64, in_vslice_dummy_var_368: i32, in_vslice_dummy_var_369: i32, in_vslice_dummy_var_370: i64, in_vslice_dummy_var_371: i32, in_vslice_dummy_var_372: i64, in_vslice_dummy_var_373: i64, in_vslice_dummy_var_374: i64, in_vslice_dummy_var_375: i64, in_vslice_dummy_var_376: i64) returns (out_$i64: i32, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i1, out_$i92: i32, out_$i93: i1, out_$i94: i32, out_$i95: i1, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$i108: i1, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$i122: i1, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i64, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i64, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i149: i64, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i64, out_$i165: i32, out_$i166: i1, out_$p167: ref, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$p177: ref, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$p183: ref, out_$i184: i64, out_$i185: i32, out_$i187: i32, out_$i188: i1, out_$p189: ref, out_$i190: i32, out_$i191: i64, out_$i193: i32, out_$i194: i1, out_$i195: i32, out_$i196: i1, out_$i197: i32, out_$i198: i1, out_$i200: i32, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$i204: i32, out_$i205: i1, out_$i207: i32, out_$i208: i1, out_$i209: i32, out_$i210: i1, out_$i211: i1, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i32, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$i219: i32, out_$i220: i32, out_$i221: i1, out_$i222: i32, out_$i223: i1, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i32, out_$i229: i1, out_vslice_dummy_var_360: i64, out_vslice_dummy_var_361: i64, out_vslice_dummy_var_362: i64, out_vslice_dummy_var_363: i32, out_vslice_dummy_var_364: i64, out_vslice_dummy_var_365: i64, out_vslice_dummy_var_366: i64, out_vslice_dummy_var_367: i64, out_vslice_dummy_var_368: i32, out_vslice_dummy_var_369: i32, out_vslice_dummy_var_370: i64, out_vslice_dummy_var_371: i32, out_vslice_dummy_var_372: i64, out_vslice_dummy_var_373: i64, out_vslice_dummy_var_374: i64, out_vslice_dummy_var_375: i64, out_vslice_dummy_var_376: i64);
  modifies $M.46, $M.47, $M.48, $M.54, $M.49, $M.57, $M.12, $M.6, $M.14, $M.18, $M.19, $M.20, $M.21, $CurrAddr, assertsPassed, $M.50, $M.51, $M.24, $M.26, $M.25, $M.39, $M.38, $M.58, $M.52, $M.53, $M.43, $M.56, $M.55, $M.59, $M.13, $M.16, $M.15, $M.17, $M.44, $M.45;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation exit_osst_loop_$bb6(in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i5: i32)
{

  entry:
    out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i5 := in_$p6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i5;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_14993;

  $bb15:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i27;
    goto $bb15_dummy;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_15006;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    out_$i28 := $M.13;
    goto corral_source_split_15005;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i5, 1);
    call {:si_unique_call 1797} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_15004;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_15002:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_15002;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i10, 0);
    goto corral_source_split_15000;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(out_$p9);
    goto corral_source_split_14999;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.6, out_$p8);
    goto corral_source_split_14998;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 8));
    goto corral_source_split_14997;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i5);
    goto corral_source_split_14996;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p6 := $M.12;
    goto corral_source_split_14995;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} kfree(out_$p26);
    goto corral_source_split_15030;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_15029;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} put_disk(out_$p25);
    goto corral_source_split_15028;

  corral_source_split_15026:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.6, out_$p24);
    goto corral_source_split_15027;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p9, $mul.ref(0, 800)), $mul.ref(792, 1));
    goto corral_source_split_15026;

  $bb13:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} kfree(out_$p23);
    goto corral_source_split_15024;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_15023;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.6, out_$p21);
    goto corral_source_split_15022;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15021;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1799} normalize_buffer(out_$p20);
    goto corral_source_split_15020;

  corral_source_split_15018:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.6, out_$p19);
    goto corral_source_split_15019;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15018;

  $bb12:
    assume out_$i18 == 1;
    goto corral_source_split_15017;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, 0);
    goto corral_source_split_15015;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_15014;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.6, out_$p15);
    goto corral_source_split_15013;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p9, $mul.ref(0, 800)), $mul.ref(280, 1));
    goto corral_source_split_15012;

  corral_source_split_15010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} vfree(out_$p14);
    goto corral_source_split_15011;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_15010;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.6, out_$p12);
    goto corral_source_split_15009;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(0, 800)), $mul.ref(728, 1));
    goto corral_source_split_15008;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i5 := exit_osst_loop_$bb6(out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i5);
    return;

  exit:
    return;
}



procedure exit_osst_loop_$bb6(in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$i11: i1, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i5: i32) returns (out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$i11: i1, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i5: i32);
  modifies $M.6;


