var $M.0: [ref]i8;

var $M.1: i32;

var $M.2: [ref]i8;

var $M.3: [ref]i8;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]i24;

var $M.9: [ref]i8;

var $M.10: i32;

var $M.11: [ref]i8;

var $M.12: [ref]i32;

var $M.14: [ref]ref;

var $M.15: [ref]i16;

var $M.16: [ref]i8;

var $M.17: i32;

var $M.18: i32;

var $M.19: [ref]i8;

var $M.20: [ref]i16;

var $M.21: [ref]i16;

var $M.22: [ref]i16;

var $M.23: [ref]ref;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: i32;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]i8;

var $M.31: i32;

var $M.32: [ref]i8;

var $M.33: i32;

var $M.34: i32;

var $M.35: i32;

var $M.36: i32;

var $M.37: i32;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: ref;

var $M.46: i32;

var $M.47: ref;

var $M.48: ref;

var $M.49: i32;

var $M.50: ref;

var $M.51: ref;

var $M.52: ref;

var $M.53: i32;

var $M.54: ref;

var $M.55: ref;

var $M.56: i32;

var $M.57: ref;

var $M.58: ref;

var $M.59: ref;

var $M.60: i32;

var $M.61: ref;

var $M.62: ref;

var $M.63: i32;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: i8;

var $M.68: i8;

var $M.69: ref;

var $M.70: i32;

var $M.71: ref;

var $M.72: i8;

var $M.73: ref;

var $M.74: ref;

var $M.75: i32;

var $M.76: ref;

var $M.77: ref;

var $M.78: i32;

var $M.79: ref;

var $M.80: ref;

var $M.81: ref;

var $M.82: ref;

var $M.83: i32;

var $M.84: ref;

var $M.85: ref;

var $M.86: i32;

var $M.87: i32;

var $M.88: i32;

var $M.89: i32;

var $M.90: i32;

var $M.91: i32;

var $M.92: ref;

var $M.93: i32;

var $M.94: ref;

var $M.95: ref;

var $M.96: i32;

var $M.97: ref;

var $M.98: ref;

var $M.99: i32;

var $M.100: ref;

var $M.101: i8;

var $M.102: i8;

var $M.103: ref;

var $M.104: i8;

var $M.105: ref;

var $M.106: ref;

var $M.107: i32;

var $M.108: ref;

var $M.109: ref;

var $M.110: i32;

var $M.111: ref;

var $M.112: ref;

var $M.113: i32;

var $M.114: i32;

var $M.115: i32;

var $M.116: [ref]i8;

var $M.132: [ref]i8;

var $M.160: [ref]i8;

var $M.206: [ref]i8;

var $M.213: [ref]i8;

var $M.217: [ref]i8;

var $M.221: [ref]i8;

var $M.225: [ref]i8;

var $M.226: [ref]i8;

var $M.227: [ref]i16;

var $M.228: [ref]i8;

var $M.229: [ref]i32;

var $M.230: [ref]i32;

var $M.231: [ref]i32;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 507941);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const dvb_usb_mxl111sf_rfswitch: ref;

axiom dvb_usb_mxl111sf_rfswitch == $sub.ref(0, 1028);

const dvb_usb_mxl111sf_debug: ref;

axiom dvb_usb_mxl111sf_debug == $sub.ref(0, 2056);

const mxl111sf_i2c_algo: ref;

axiom mxl111sf_i2c_algo == $sub.ref(0, 3104);

const __constr_expr_33: ref;

axiom __constr_expr_33 == $sub.ref(0, 4152);

const __constr_expr_32: ref;

axiom __constr_expr_32 == $sub.ref(0, 5200);

const __constr_expr_31: ref;

axiom __constr_expr_31 == $sub.ref(0, 6248);

const __constr_expr_30: ref;

axiom __constr_expr_30 == $sub.ref(0, 7296);

const __constr_expr_29: ref;

axiom __constr_expr_29 == $sub.ref(0, 8344);

const mxl111sf_props_mercury_mh: ref;

axiom mxl111sf_props_mercury_mh == $sub.ref(0, 9624);

const __constr_expr_28: ref;

axiom __constr_expr_28 == $sub.ref(0, 10672);

const __constr_expr_27: ref;

axiom __constr_expr_27 == $sub.ref(0, 11720);

const __constr_expr_26: ref;

axiom __constr_expr_26 == $sub.ref(0, 12768);

const __constr_expr_25: ref;

axiom __constr_expr_25 == $sub.ref(0, 13816);

const __constr_expr_24: ref;

axiom __constr_expr_24 == $sub.ref(0, 14864);

const __constr_expr_23: ref;

axiom __constr_expr_23 == $sub.ref(0, 15912);

const __constr_expr_22: ref;

axiom __constr_expr_22 == $sub.ref(0, 16960);

const __constr_expr_21: ref;

axiom __constr_expr_21 == $sub.ref(0, 18008);

const __constr_expr_20: ref;

axiom __constr_expr_20 == $sub.ref(0, 19056);

const mxl111sf_props_mercury: ref;

axiom mxl111sf_props_mercury == $sub.ref(0, 20336);

const __constr_expr_19: ref;

axiom __constr_expr_19 == $sub.ref(0, 21384);

const __constr_expr_18: ref;

axiom __constr_expr_18 == $sub.ref(0, 22432);

const __constr_expr_17: ref;

axiom __constr_expr_17 == $sub.ref(0, 23480);

const __constr_expr_16: ref;

axiom __constr_expr_16 == $sub.ref(0, 24528);

const __constr_expr_15: ref;

axiom __constr_expr_15 == $sub.ref(0, 25576);

const __constr_expr_14: ref;

axiom __constr_expr_14 == $sub.ref(0, 26624);

const __constr_expr_13: ref;

axiom __constr_expr_13 == $sub.ref(0, 27672);

const __constr_expr_12: ref;

axiom __constr_expr_12 == $sub.ref(0, 28720);

const __constr_expr_11: ref;

axiom __constr_expr_11 == $sub.ref(0, 29768);

const __constr_expr_10: ref;

axiom __constr_expr_10 == $sub.ref(0, 30816);

const __constr_expr_9: ref;

axiom __constr_expr_9 == $sub.ref(0, 31864);

const __constr_expr_8: ref;

axiom __constr_expr_8 == $sub.ref(0, 32912);

const __constr_expr_7: ref;

axiom __constr_expr_7 == $sub.ref(0, 33960);

const __constr_expr_6: ref;

axiom __constr_expr_6 == $sub.ref(0, 35008);

const __constr_expr_5: ref;

axiom __constr_expr_5 == $sub.ref(0, 36056);

const mxl111sf_props_dvbt: ref;

axiom mxl111sf_props_dvbt == $sub.ref(0, 37336);

const __constr_expr_4: ref;

axiom __constr_expr_4 == $sub.ref(0, 38384);

const __constr_expr_3: ref;

axiom __constr_expr_3 == $sub.ref(0, 39432);

const mxl111sf_props_mh: ref;

axiom mxl111sf_props_mh == $sub.ref(0, 40712);

const __constr_expr_2: ref;

axiom __constr_expr_2 == $sub.ref(0, 41760);

const mxl111sf_props_atsc: ref;

axiom mxl111sf_props_atsc == $sub.ref(0, 43040);

const __constr_expr_1: ref;

axiom __constr_expr_1 == $sub.ref(0, 44088);

const {:count 8} adapter_nr: ref;

axiom adapter_nr == $sub.ref(0, 45128);

const mxl111sf_props_atsc_mh: ref;

axiom mxl111sf_props_atsc_mh == $sub.ref(0, 46408);

const __constr_expr_0: ref;

axiom __constr_expr_0 == $sub.ref(0, 47456);

const {:count 35} mxl111sf_id_table: ref;

axiom mxl111sf_id_table == $sub.ref(0, 49600);

const mxl111sf_usb_driver: ref;

axiom mxl111sf_usb_driver == $sub.ref(0, 50928);

const hauppauge_lg2160_config: ref;

axiom hauppauge_lg2160_config == $sub.ref(0, 51972);

const hauppauge_lg2161_1019_config: ref;

axiom hauppauge_lg2161_1019_config == $sub.ref(0, 53016);

const hauppauge_lg2161_1040_config: ref;

axiom hauppauge_lg2161_1040_config == $sub.ref(0, 54060);

const hauppauge_lg2161_1019_ep6_config: ref;

axiom hauppauge_lg2161_1019_ep6_config == $sub.ref(0, 55104);

const hauppauge_lg2161_1040_ep6_config: ref;

axiom hauppauge_lg2161_1040_ep6_config == $sub.ref(0, 56148);

const mxl_demod_config: ref;

axiom mxl_demod_config == $sub.ref(0, 57196);

const hauppauge_lgdt3305_config: ref;

axiom hauppauge_lgdt3305_config == $sub.ref(0, 58252);

const mxl_tuner_config: ref;

axiom mxl_tuner_config == $sub.ref(0, 59324);

const ldv_mutex_mutex_of_device: ref;

axiom ldv_mutex_mutex_of_device == $sub.ref(0, 60352);

const ldv_mutex_lock: ref;

axiom ldv_mutex_lock == $sub.ref(0, 61380);

const ldv_mutex_i2c_mutex_of_dvb_usb_device: ref;

axiom ldv_mutex_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 62408);

const ldv_mutex_fe_lock_of_mxl111sf_state: ref;

axiom ldv_mutex_fe_lock_of_mxl111sf_state == $sub.ref(0, 63436);

const ldv_mutex_cred_guard_mutex_of_signal_struct: ref;

axiom ldv_mutex_cred_guard_mutex_of_signal_struct == $sub.ref(0, 64464);

const mxl_tuner_config_group0: ref;

axiom mxl_tuner_config_group0 == $sub.ref(0, 65496);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 66524);

const ldvarg22: ref;

axiom ldvarg22 == $sub.ref(0, 67556);

const ldvarg25: ref;

axiom ldvarg25 == $sub.ref(0, 68584);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 69612);

const ldvarg17: ref;

axiom ldvarg17 == $sub.ref(0, 70637);

const mxl111sf_props_mh_group0: ref;

axiom mxl111sf_props_mh_group0 == $sub.ref(0, 71669);

const ldvarg21: ref;

axiom ldvarg21 == $sub.ref(0, 72697);

const mxl111sf_props_mercury_mh_group0: ref;

axiom mxl111sf_props_mercury_mh_group0 == $sub.ref(0, 73729);

const ldvarg15: ref;

axiom ldvarg15 == $sub.ref(0, 74757);

const ldv_retval_9: ref;

axiom ldv_retval_9 == $sub.ref(0, 75785);

const ldv_retval_10: ref;

axiom ldv_retval_10 == $sub.ref(0, 76813);

const ldvarg26: ref;

axiom ldvarg26 == $sub.ref(0, 77845);

const ldvarg27: ref;

axiom ldvarg27 == $sub.ref(0, 78877);

const mxl111sf_props_mercury_mh_group1: ref;

axiom mxl111sf_props_mercury_mh_group1 == $sub.ref(0, 79909);

const ldvarg9: ref;

axiom ldvarg9 == $sub.ref(0, 80941);

const mxl111sf_props_mh_group1: ref;

axiom mxl111sf_props_mh_group1 == $sub.ref(0, 81973);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 83001);

const ldvarg8: ref;

axiom ldvarg8 == $sub.ref(0, 84033);

const mxl111sf_props_atsc_mh_group0: ref;

axiom mxl111sf_props_atsc_mh_group0 == $sub.ref(0, 85065);

const ldvarg39: ref;

axiom ldvarg39 == $sub.ref(0, 86097);

const ldvarg34: ref;

axiom ldvarg34 == $sub.ref(0, 87122);

const ldvarg14: ref;

axiom ldvarg14 == $sub.ref(0, 88154);

const mxl111sf_props_mercury_group1: ref;

axiom mxl111sf_props_mercury_group1 == $sub.ref(0, 89186);

const ldvarg38: ref;

axiom ldvarg38 == $sub.ref(0, 90214);

const ldvarg35: ref;

axiom ldvarg35 == $sub.ref(0, 91239);

const mxl111sf_props_atsc_group0: ref;

axiom mxl111sf_props_atsc_group0 == $sub.ref(0, 92271);

const ldvarg24: ref;

axiom ldvarg24 == $sub.ref(0, 93303);

const ldvarg29: ref;

axiom ldvarg29 == $sub.ref(0, 94331);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 95359);

const ldvarg37: ref;

axiom ldvarg37 == $sub.ref(0, 96391);

const ldvarg23: ref;

axiom ldvarg23 == $sub.ref(0, 97419);

const ldvarg11: ref;

axiom ldvarg11 == $sub.ref(0, 98451);

const ldvarg18: ref;

axiom ldvarg18 == $sub.ref(0, 99476);

const mxl111sf_props_atsc_mh_group1: ref;

axiom mxl111sf_props_atsc_mh_group1 == $sub.ref(0, 100508);

const ldvarg19: ref;

axiom ldvarg19 == $sub.ref(0, 101540);

const mxl_demod_config_group0: ref;

axiom mxl_demod_config_group0 == $sub.ref(0, 102572);

const ldvarg30: ref;

axiom ldvarg30 == $sub.ref(0, 103604);

const mxl111sf_i2c_algo_group0: ref;

axiom mxl111sf_i2c_algo_group0 == $sub.ref(0, 104636);

const ldvarg10: ref;

axiom ldvarg10 == $sub.ref(0, 105664);

const ldvarg36: ref;

axiom ldvarg36 == $sub.ref(0, 106696);

const ldvarg13: ref;

axiom ldvarg13 == $sub.ref(0, 107721);

const mxl111sf_props_dvbt_group0: ref;

axiom mxl111sf_props_dvbt_group0 == $sub.ref(0, 108753);

const ldvarg3: ref;

axiom ldvarg3 == $sub.ref(0, 109785);

const mxl111sf_props_dvbt_group1: ref;

axiom mxl111sf_props_dvbt_group1 == $sub.ref(0, 110817);

const ldvarg20: ref;

axiom ldvarg20 == $sub.ref(0, 111849);

const ldvarg31: ref;

axiom ldvarg31 == $sub.ref(0, 112881);

const mxl111sf_props_mercury_group0: ref;

axiom mxl111sf_props_mercury_group0 == $sub.ref(0, 113913);

const mxl111sf_usb_driver_group1: ref;

axiom mxl111sf_usb_driver_group1 == $sub.ref(0, 114945);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 115973);

const ldvarg2: ref;

axiom ldvarg2 == $sub.ref(0, 117001);

const ldvarg28: ref;

axiom ldvarg28 == $sub.ref(0, 118033);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 119061);

const ldvarg4: ref;

axiom ldvarg4 == $sub.ref(0, 120093);

const ldvarg6: ref;

axiom ldvarg6 == $sub.ref(0, 121121);

const ldvarg16: ref;

axiom ldvarg16 == $sub.ref(0, 122153);

const ldvarg33: ref;

axiom ldvarg33 == $sub.ref(0, 123185);

const ldvarg5: ref;

axiom ldvarg5 == $sub.ref(0, 124217);

const mxl111sf_props_atsc_group1: ref;

axiom mxl111sf_props_atsc_group1 == $sub.ref(0, 125249);

const ldvarg0: ref;

axiom ldvarg0 == $sub.ref(0, 126281);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 127309);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 128337);

const ldvarg1: ref;

axiom ldvarg1 == $sub.ref(0, 129369);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 130397);

const ldvarg12: ref;

axiom ldvarg12 == $sub.ref(0, 131429);

const ldvarg7: ref;

axiom ldvarg7 == $sub.ref(0, 132461);

const ldvarg32: ref;

axiom ldvarg32 == $sub.ref(0, 133486);

const __mod_usb_device_table: ref;

axiom __mod_usb_device_table == $sub.ref(0, 134542);

const dvb_usb_mxl111sf_spi: ref;

axiom dvb_usb_mxl111sf_spi == $sub.ref(0, 135570);

const dvb_usb_mxl111sf_isoc: ref;

axiom dvb_usb_mxl111sf_isoc == $sub.ref(0, 136598);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 137626);

const ldv_state_variable_9: ref;

axiom ldv_state_variable_9 == $sub.ref(0, 138654);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 139682);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 140710);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 141738);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 142766);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 143794);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 144822);

const ldv_state_variable_10: ref;

axiom ldv_state_variable_10 == $sub.ref(0, 145850);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 146878);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 147906);

const ldv_state_variable_8: ref;

axiom ldv_state_variable_8 == $sub.ref(0, 148934);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 149962);

const {:count 49} .str.96: ref;

axiom .str.96 == $sub.ref(0, 151035);

const {:count 18} .str.97: ref;

axiom .str.97 == $sub.ref(0, 152077);

const {:count 9} .str.98: ref;

axiom .str.98 == $sub.ref(0, 153110);

const {:count 9} .str.99: ref;

axiom .str.99 == $sub.ref(0, 154143);

const {:count 26} .str.4: ref;

axiom .str.4 == $sub.ref(0, 155193);

const {:count 21} .str.35: ref;

axiom .str.35 == $sub.ref(0, 156238);

const {:count 11} .str.23: ref;

axiom .str.23 == $sub.ref(0, 157273);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 158322);

const {:count 27} .str.14: ref;

axiom .str.14 == $sub.ref(0, 159373);

const {:count 28} .str.15: ref;

axiom .str.15 == $sub.ref(0, 160425);

const {:count 24} .str.12: ref;

axiom .str.12 == $sub.ref(0, 161473);

const {:count 69} .str.13: ref;

axiom .str.13 == $sub.ref(0, 162566);

const .str: ref;

axiom .str == $sub.ref(0, 163607);

const {:count 19} .str.9: ref;

axiom .str.9 == $sub.ref(0, 164650);

const {:count 261} .str.2: ref;

axiom .str.2 == $sub.ref(0, 165935);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 166980);

const {:count 40} .str.11: ref;

axiom .str.11 == $sub.ref(0, 168044);

const {:count 18} .str.1: ref;

axiom .str.1 == $sub.ref(0, 169086);

const {:count 26} .str.3: ref;

axiom .str.3 == $sub.ref(0, 170136);

const {:count 18} .str.5: ref;

axiom .str.5 == $sub.ref(0, 171178);

const {:count 32} .str.6: ref;

axiom .str.6 == $sub.ref(0, 172234);

const {:count 56} .str.7: ref;

axiom .str.7 == $sub.ref(0, 173314);

const {:count 21} .str.8: ref;

axiom .str.8 == $sub.ref(0, 174359);

const {:count 23} .str.108: ref;

axiom .str.108 == $sub.ref(0, 175406);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 35} .str.107: ref;

axiom .str.107 == $sub.ref(0, 176465);

const {:count 11} .str.76: ref;

axiom .str.76 == $sub.ref(0, 177500);

const {:count 28} .str.79: ref;

axiom .str.79 == $sub.ref(0, 178552);

const {:count 27} .str.80: ref;

axiom .str.80 == $sub.ref(0, 179603);

const {:count 28} .str.77: ref;

axiom .str.77 == $sub.ref(0, 180655);

const {:count 25} .str.78: ref;

axiom .str.78 == $sub.ref(0, 181704);

const {:count 14} .str.46: ref;

axiom .str.46 == $sub.ref(0, 182742);

const {:count 53} .str.47: ref;

axiom .str.47 == $sub.ref(0, 183819);

const {:count 38} .str.48: ref;

axiom .str.48 == $sub.ref(0, 184881);

const {:count 48} .str.49: ref;

axiom .str.49 == $sub.ref(0, 185953);

const {:count 16} .str.50: ref;

axiom .str.50 == $sub.ref(0, 186993);

const {:count 30} .str.40: ref;

axiom .str.40 == $sub.ref(0, 188047);

const {:count 23} .str.51: ref;

axiom .str.51 == $sub.ref(0, 189094);

const {:count 9} .str.52: ref;

axiom .str.52 == $sub.ref(0, 190127);

const {:count 9} .str.53: ref;

axiom .str.53 == $sub.ref(0, 191160);

const {:count 15} .str.54: ref;

axiom .str.54 == $sub.ref(0, 192199);

const {:count 3} .str.55: ref;

axiom .str.55 == $sub.ref(0, 193226);

const {:count 7} .str.56: ref;

axiom .str.56 == $sub.ref(0, 194257);

const {:count 7} .str.57: ref;

axiom .str.57 == $sub.ref(0, 195288);

const {:count 17} .str.58: ref;

axiom .str.58 == $sub.ref(0, 196329);

const {:count 24} .str.59: ref;

axiom .str.59 == $sub.ref(0, 197377);

const {:count 32} .str.104: ref;

axiom .str.104 == $sub.ref(0, 198433);

const {:count 20} .str.82: ref;

axiom .str.82 == $sub.ref(0, 199477);

const {:count 28} .str.119: ref;

axiom .str.119 == $sub.ref(0, 200529);

const {:count 8} .str.66: ref;

axiom .str.66 == $sub.ref(0, 201561);

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 202605);

const {:count 9} .str.16: ref;

axiom .str.16 == $sub.ref(0, 203638);

const {:count 26} .str.31: ref;

axiom .str.31 == $sub.ref(0, 204688);

const {:count 23} .str.32: ref;

axiom .str.32 == $sub.ref(0, 205735);

const {:count 20} .str.33: ref;

axiom .str.33 == $sub.ref(0, 206779);

const {:count 15} .str.29: ref;

axiom .str.29 == $sub.ref(0, 207818);

const {:count 23} .str.30: ref;

axiom .str.30 == $sub.ref(0, 208865);

const {:count 27} .str.26: ref;

axiom .str.26 == $sub.ref(0, 209916);

const {:count 28} .str.94: ref;

axiom .str.94 == $sub.ref(0, 210968);

const {:count 28} .str.65: ref;

axiom .str.65 == $sub.ref(0, 212020);

const {:count 23} .str.27: ref;

axiom .str.27 == $sub.ref(0, 213067);

const {:count 24} .str.28: ref;

axiom .str.28 == $sub.ref(0, 214115);

const {:count 22} .str.60: ref;

axiom .str.60 == $sub.ref(0, 215161);

const {:count 6} .str.61: ref;

axiom .str.61 == $sub.ref(0, 216191);

const {:count 22} .str.62: ref;

axiom .str.62 == $sub.ref(0, 217237);

const {:count 29} .str.63: ref;

axiom .str.63 == $sub.ref(0, 218290);

const {:count 53} .str.64: ref;

axiom .str.64 == $sub.ref(0, 219367);

const {:count 33} .str.105: ref;

axiom .str.105 == $sub.ref(0, 220424);

const {:count 4} .str.84: ref;

axiom .str.84 == $sub.ref(0, 221452);

const {:count 32} .str.106: ref;

axiom .str.106 == $sub.ref(0, 222508);

const {:count 22} .str.68: ref;

axiom .str.68 == $sub.ref(0, 223554);

const {:count 14} .str.90: ref;

axiom .str.90 == $sub.ref(0, 224592);

const {:count 21} .str.91: ref;

axiom .str.91 == $sub.ref(0, 225637);

const {:count 45} .str.92: ref;

axiom .str.92 == $sub.ref(0, 226706);

const {:count 40} .str.72: ref;

axiom .str.72 == $sub.ref(0, 227770);

const {:count 23} .str.74: ref;

axiom .str.74 == $sub.ref(0, 228817);

const {:count 22} .str.73: ref;

axiom .str.73 == $sub.ref(0, 229863);

const {:count 26} .str.45: ref;

axiom .str.45 == $sub.ref(0, 230913);

const {:count 15} .str.41: ref;

axiom .str.41 == $sub.ref(0, 231952);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 232994);

const {:count 53} .str.43: ref;

axiom .str.43 == $sub.ref(0, 234071);

const {:count 19} .str.149: ref;

axiom .str.149 == $sub.ref(0, 235114);

const {:count 24} .str.150: ref;

axiom .str.150 == $sub.ref(0, 236162);

const {:count 26} .str.151: ref;

axiom .str.151 == $sub.ref(0, 237212);

const {:count 23} .str.153: ref;

axiom .str.153 == $sub.ref(0, 238259);

const {:count 23} .str.152: ref;

axiom .str.152 == $sub.ref(0, 239306);

const {:count 17} .str.148: ref;

axiom .str.148 == $sub.ref(0, 240347);

const {:count 28} .str.44: ref;

axiom .str.44 == $sub.ref(0, 241399);

const {:count 28} .str.158: ref;

axiom .str.158 == $sub.ref(0, 242451);

const {:count 27} .str.157: ref;

axiom .str.157 == $sub.ref(0, 243502);

const {:count 29} .str.154: ref;

axiom .str.154 == $sub.ref(0, 244555);

const {:count 36} .str.155: ref;

axiom .str.155 == $sub.ref(0, 245615);

const {:count 26} .str.156: ref;

axiom .str.156 == $sub.ref(0, 246665);

const {:count 13} .str.19: ref;

axiom .str.19 == $sub.ref(0, 247702);

const {:count 15} .str.20: ref;

axiom .str.20 == $sub.ref(0, 248741);

const {:count 11} .str.21: ref;

axiom .str.21 == $sub.ref(0, 249776);

const {:count 25} .str.22: ref;

axiom .str.22 == $sub.ref(0, 250825);

const {:count 26} .str.17: ref;

axiom .str.17 == $sub.ref(0, 251875);

const {:count 20} .str.18: ref;

axiom .str.18 == $sub.ref(0, 252919);

const {:count 22} .str.85: ref;

axiom .str.85 == $sub.ref(0, 253965);

const {:count 22} .str.86: ref;

axiom .str.86 == $sub.ref(0, 255011);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 256064);

const {:count 53} .str.88: ref;

axiom .str.88 == $sub.ref(0, 257141);

const {:count 34} .str.67: ref;

axiom .str.67 == $sub.ref(0, 258199);

const {:count 16} .str.69: ref;

axiom .str.69 == $sub.ref(0, 259239);

const {:count 23} .str.70: ref;

axiom .str.70 == $sub.ref(0, 260286);

const {:count 47} .str.71: ref;

axiom .str.71 == $sub.ref(0, 261357);

const {:count 22} .str.109: ref;

axiom .str.109 == $sub.ref(0, 262403);

const {:count 32} .str.75: ref;

axiom .str.75 == $sub.ref(0, 263459);

const {:count 11} .str.110: ref;

axiom .str.110 == $sub.ref(0, 264494);

const {:count 30} .str.120: ref;

axiom .str.120 == $sub.ref(0, 265548);

const {:count 22} .str.111: ref;

axiom .str.111 == $sub.ref(0, 266594);

const {:count 32} .str.95: ref;

axiom .str.95 == $sub.ref(0, 267650);

const {:count 23} .str.112: ref;

axiom .str.112 == $sub.ref(0, 268697);

const {:count 11} .str.113: ref;

axiom .str.113 == $sub.ref(0, 269732);

const {:count 22} .str.114: ref;

axiom .str.114 == $sub.ref(0, 270778);

const {:count 18} .str.115: ref;

axiom .str.115 == $sub.ref(0, 271820);

const {:count 35} .str.93: ref;

axiom .str.93 == $sub.ref(0, 272879);

const {:count 32} .str.81: ref;

axiom .str.81 == $sub.ref(0, 273935);

const {:count 33} .str.83: ref;

axiom .str.83 == $sub.ref(0, 274992);

const {:count 36} .str.89: ref;

axiom .str.89 == $sub.ref(0, 276052);

const {:count 22} .str.116: ref;

axiom .str.116 == $sub.ref(0, 277098);

const {:count 17} .str.117: ref;

axiom .str.117 == $sub.ref(0, 278139);

const {:count 38} .str.103: ref;

axiom .str.103 == $sub.ref(0, 279201);

const {:count 35} .str.100: ref;

axiom .str.100 == $sub.ref(0, 280260);

const {:count 36} .str.101: ref;

axiom .str.101 == $sub.ref(0, 281320);

const {:count 32} .str.102: ref;

axiom .str.102 == $sub.ref(0, 282376);

const {:count 23} .str.118: ref;

axiom .str.118 == $sub.ref(0, 283423);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 284465);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 285494);

const {:count 5} .str.38: ref;

axiom .str.38 == $sub.ref(0, 286523);

const {:count 86} .str.39: ref;

axiom .str.39 == $sub.ref(0, 287633);

const {:count 25} .str.141: ref;

axiom .str.141 == $sub.ref(0, 288682);

const {:count 18} .str.147: ref;

axiom .str.147 == $sub.ref(0, 289724);

const {:count 17} .str.146: ref;

axiom .str.146 == $sub.ref(0, 290765);

const {:count 30} .str.145: ref;

axiom .str.145 == $sub.ref(0, 291819);

const {:count 18} .str.144: ref;

axiom .str.144 == $sub.ref(0, 292861);

const {:count 30} .str.143: ref;

axiom .str.143 == $sub.ref(0, 293915);

const {:count 19} .str.142: ref;

axiom .str.142 == $sub.ref(0, 294958);

const {:count 58} .str.121: ref;

axiom .str.121 == $sub.ref(0, 296040);

const {:count 25} .str.122: ref;

axiom .str.122 == $sub.ref(0, 297089);

const {:count 14} .str.123: ref;

axiom .str.123 == $sub.ref(0, 298127);

const {:count 38} .str.124: ref;

axiom .str.124 == $sub.ref(0, 299189);

const {:count 37} .str.125: ref;

axiom .str.125 == $sub.ref(0, 300250);

const {:count 28} .str.126: ref;

axiom .str.126 == $sub.ref(0, 301302);

const {:count 22} .str.127: ref;

axiom .str.127 == $sub.ref(0, 302348);

const {:count 38} .str.128: ref;

axiom .str.128 == $sub.ref(0, 303410);

const {:count 27} .str.129: ref;

axiom .str.129 == $sub.ref(0, 304461);

const {:count 28} .str.130: ref;

axiom .str.130 == $sub.ref(0, 305513);

const {:count 23} .str.131: ref;

axiom .str.131 == $sub.ref(0, 306560);

const {:count 20} .str.135: ref;

axiom .str.135 == $sub.ref(0, 307604);

const {:count 23} .str.136: ref;

axiom .str.136 == $sub.ref(0, 308651);

const {:count 13} .str.137: ref;

axiom .str.137 == $sub.ref(0, 309688);

const {:count 17} .str.138: ref;

axiom .str.138 == $sub.ref(0, 310729);

const {:count 24} .str.139: ref;

axiom .str.139 == $sub.ref(0, 311777);

const {:count 30} .str.140: ref;

axiom .str.140 == $sub.ref(0, 312831);

const {:count 22} .str.134: ref;

axiom .str.134 == $sub.ref(0, 313877);

const {:count 26} .str.133: ref;

axiom .str.133 == $sub.ref(0, 314927);

const {:count 23} .str.132: ref;

axiom .str.132 == $sub.ref(0, 315974);

const {:count 26} .str.25: ref;

axiom .str.25 == $sub.ref(0, 317024);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 318056);

const {:count 3} .str.1.324: ref;

axiom .str.1.324 == $sub.ref(0, 319083);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 320121);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 321149);

const mxl111sf_i2c_xfer: ref;

axiom mxl111sf_i2c_xfer == $sub.ref(0, 322181);

procedure mxl111sf_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.31, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.30, $M.3, assertsPassed, $CurrAddr;



implementation mxl111sf_i2c_xfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i24: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i64;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i64;
  var $p52: ref;
  var $i53: i16;
  var $i54: i32;
  var $i55: i64;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i62: i32;
  var $i63: i1;
  var $i19: i32;
  var $i64: i32;
  var $i18: i32;
  var $i61: i32;
  var $p65: ref;
  var $i66: i1;
  var $i67: i32;
  var $i16: i32;
  var vslice_dummy_var_5: i32;
  var vslice_dummy_var_6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "mxl111sf_i2c_xfer:arg:num"} boogie_si_record_i32($i2);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p3 := i2c_get_adapdata($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 2} {:cexpr "hwi2c"} boogie_si_record_i32($i12);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 7312)), $mul.ref(344, 1));
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i14 := ldv_mutex_lock_interruptible_44($p13);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 4} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32(0, $i2);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i18 := 0;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $i61 := $i18;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 7312)), $mul.ref(344, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} ldv_mutex_unlock_45($p65);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i61, $i2);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $sub.i32(0, 121);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i16 := $i67;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb31:
    assume $i66 == 1;
    call {:si_unique_call 14} {:cexpr "mxl111sf_i2c_xfer:arg:tmp___4"} boogie_si_record_i32($i2);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i67 := $i2;
    goto $bb33;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb8;

  $bb8:
    call $i20, $i21, $p22, $i23, $i25, $p26, $i27, $i24, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i62, $i63, $i19, $i64, vslice_dummy_var_5 := mxl111sf_i2c_xfer_loop_$bb8($p1, $i2, $p7, $i12, $i20, $i21, $p22, $i23, $i25, $p26, $i27, $i24, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i62, $i63, $i19, $i64, vslice_dummy_var_5);
    goto $bb8_last;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i12, 0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i19);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p1, $mul.ref($i25, 16));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $i27 := mxl111sf_i2c_sw_xfer_msg($p7, $p26);
    call {:si_unique_call 8} {:cexpr "tmp___2"} boogie_si_record_i32($i27);
    assume {:verifier.code 0} true;
    $i24 := $i27;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i24, 0);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    call {:si_unique_call 9} {:cexpr "__ret"} boogie_si_record_i32($i29);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i29, 0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i36, $i37 := $i19, $i24;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i19, 1);
    call {:si_unique_call 13} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, $i2);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i64 := $i62;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i18 := $i64;
    goto $bb7;

  $bb29:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i19 := $i62;
    goto $bb29_dummy;

  $bb19:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i61 := $i36;
    goto $bb27;

  $bb21:
    assume $i40 == 1;
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i36);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($i41, 16)), $mul.ref(2, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i44 := $load.i16($M.0, $p43);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 1);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $p48 := .str.38;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i36, 1);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i36);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref($i50, 16)), $mul.ref(4, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i53 := $load.i16($M.0, $p52);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i53);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i36);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref($i55, 16)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_6 := printk.ref.ref.i32.i32.i32.ref.i32.i32(.str.39, .str.36, $i37, $i49, $i2, $p48, $i54, $i59);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p48 := .str.37;
    goto $bb25;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $i31 := $M.1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} vslice_dummy_var_5 := printk.ref.ref.i32.i32(.str.4, .str.36, $i24, 891);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i19);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref($i21, 16));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i23 := mxl111sf_i2c_hw_xfer_msg($p7, $p22);
    call {:si_unique_call 6} {:cexpr "tmp___1"} boogie_si_record_i32($i23);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb12;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb29_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;
}



const mxl111sf_i2c_func: ref;

axiom mxl111sf_i2c_func == $sub.ref(0, 323213);

procedure mxl111sf_i2c_func($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mxl111sf_i2c_func($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 324245);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const mxl111sf_read_reg: ref;

axiom mxl111sf_read_reg == $sub.ref(0, 325277);

procedure mxl111sf_read_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_read_reg($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var $i21: i32;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i8;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i32: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i23: i32;
  var vslice_dummy_var_7: i32;
  var vslice_dummy_var_8: i32;
  var vslice_dummy_var_9: i32;
  var vslice_dummy_var_10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i1);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $i9 := mxl111sf_ctrl_msg($p7, $sub.i8(0, 86), $p3, 1, $p8, 2);
    call {:si_unique_call 19} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 20} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.2, $p24);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p3);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, $i28);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i29 == 1);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p3);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.2, $p35);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.2, $p38);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} vslice_dummy_var_9 := printk.ref.i32.i32.i32(.str.7, $i34, $i37, $i40);
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 22);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p42, .str);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p43, .str.5);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p44, .str.2);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p45, .str.8);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.8, $p47);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 169);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p47, $i50);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p51, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.9, $p52);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 25} {:cexpr "tmp"} boogie_si_record_i64($i56);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $i32;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb17:
    assume $i57 == 1;
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p3);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.3, $p2);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} vslice_dummy_var_10 := __dynamic_pr_debug.ref.ref.i32.i32($p5, .str.8, $i59, $i61);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.2, $p30);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i31);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i32 := $i9;
    goto $bb16;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $i9;
    goto $bb12;

  $bb9:
    assume $i19 == 1;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p3);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} vslice_dummy_var_8 := printk.ref.ref.i32(.str.6, .str.5, $i21);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} vslice_dummy_var_7 := printk.ref.ref.i32.i32(.str.4, .str.5, $i9, 156);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_write_reg: ref;

axiom mxl111sf_write_reg == $sub.ref(0, 326309);

procedure mxl111sf_write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_write_reg($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var vslice_dummy_var_11: i32;
  var vslice_dummy_var_12: i32;
  var vslice_dummy_var_13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 29} {:cexpr "mxl111sf_write_reg:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 30} {:cexpr "mxl111sf_write_reg:arg:data"} boogie_si_record_i8($i2);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $i2);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p8, .str.9);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, .str.2);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, .str.10);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.8, $p12);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 179);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p12, $i15);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p16, 0);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.9, $p17);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 32} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i29 := mxl111sf_ctrl_msg($p27, 85, $p28, 2, $0.ref, 0);
    call {:si_unique_call 35} {:cexpr "ret"} boogie_si_record_i32($i29);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 0);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    call {:si_unique_call 36} {:cexpr "__ret"} boogie_si_record_i32($i31);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i31, 0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb10:
    assume $i37 == 1;
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i1);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i2);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} vslice_dummy_var_13 := printk.ref.i32.i32(.str.11, $i38, $i39);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i33 := $M.1;
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 16);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb6;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} vslice_dummy_var_12 := printk.ref.ref.i32.i32(.str.4, .str.9, $i29, 182);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} vslice_dummy_var_11 := __dynamic_pr_debug.ref.ref.i32.i32($p4, .str.10, $i23, $i24);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ctrl_program_regs: ref;

axiom mxl111sf_ctrl_program_regs == $sub.ref(0, 327341);

procedure mxl111sf_ctrl_program_regs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_ctrl_program_regs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i4: i64;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i64;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $i16: i64;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i40: i32;
  var $i2: i32;
  var $i3: i32;
  var $i41: i64;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i64;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i39: i32;
  var vslice_dummy_var_14: i32;
  var vslice_dummy_var_15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i2, $i3 := 0, 0;
    goto $bb1;

  $bb1:
    call $i4, $p6, $i7, $i8, $i9, $i10, $p12, $i13, $i14, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i40, $i2, $i3, $i41, $p43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, vslice_dummy_var_14 := mxl111sf_ctrl_program_regs_loop_$bb1($p0, $p1, $i4, $p6, $i7, $i8, $i9, $i10, $p12, $i13, $i14, $i15, $i16, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i30, $i31, $i32, $i40, $i2, $i3, $i41, $p43, $i44, $i45, $i46, $p48, $i49, $i50, $i51, $i52, $p54, $i55, $i56, $i57, $i58, $i59, vslice_dummy_var_14);
    goto $bb1_last;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i2);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($i41, 3)), $mul.ref(0, 1));
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i46 := $sext.i32.i64($i2);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref($i46, 3)), $mul.ref(1, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i45, $i50);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i2);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref($i52, 3)), $mul.ref(2, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i51, $i56);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i59 := $i3;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i39 := $i59;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb13:
    assume $i58 == 1;
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i2);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref($i4, 3)), $mul.ref(0, 1));
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i2);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref($i10, 3)), $mul.ref(1, 1));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i2);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref($i16, 3)), $mul.ref(2, 1));
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $i22 := mxl111sf_write_reg_mask($p0, $i9, $i15, $i21);
    call {:si_unique_call 40} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 41} {:cexpr "__ret"} boogie_si_record_i32($i24);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i24, 0);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i31, $i32 := $i2, $i22;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i2, 1);
    call {:si_unique_call 44} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i2, $i3 := $i40, $i22;
    goto corral_source_split_304_dummy;

  $bb9:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i31);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref($i33, 3)), $mul.ref(0, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} vslice_dummy_var_15 := printk.ref.i32.i32(.str.15, $i31, $i37);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i39 := $i32;
    goto $bb11;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb5;

  $bb6:
    assume $i28 == 1;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} vslice_dummy_var_14 := printk.ref.ref.i32.i32(.str.4, .str.14, $i22, 232);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_304_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_241;
}



const mxl1x1sf_top_master_ctrl: ref;

axiom mxl1x1sf_top_master_ctrl == $sub.ref(0, 328373);

procedure mxl1x1sf_top_master_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl1x1sf_top_master_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var vslice_dummy_var_16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "mxl1x1sf_top_master_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i1, 0);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i8 := mxl111sf_write_reg($p0, 1, $i7);
    call {:si_unique_call 48} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} vslice_dummy_var_16 := printk.ref.ref.i32(.str.23, .str.24, $i1);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ant_hunt: ref;

axiom mxl111sf_ant_hunt == $sub.ref(0, 329405);

procedure mxl111sf_ant_hunt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11;



implementation mxl111sf_ant_hunt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i30: i1;
  var $p33: ref;
  var $p34: ref;
  var $p39: ref;
  var $p40: ref;
  var $p45: ref;
  var $p46: ref;
  var $p51: ref;
  var $p52: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $i67: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i16;
  var $i76: i32;
  var vslice_dummy_var_17: i32;
  var vslice_dummy_var_18: i32;
  var vslice_dummy_var_19: i32;
  var vslice_dummy_var_20: i32;
  var vslice_dummy_var_21: i32;
  var vslice_dummy_var_22: i32;
  var vslice_dummy_var_23: i32;
  var vslice_dummy_var_24: i32;
  var vslice_dummy_var_25: i32;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i19 := $mul.i64($i18, 2424);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i20 := $add.i64($i19, 2160);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $i21 := $sub.i64(0, $i20);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i21, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i26 := $M.10;
    call {:si_unique_call 53} {:cexpr "antctrl"} boogie_si_record_i32($i26);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} vslice_dummy_var_17 := mxl111sf_set_ant_path($p25, $i28);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, 0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    call {:si_unique_call 55} vslice_dummy_var_18 := devirtbounce($p34, $p0, $p1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_19 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} msleep(90);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    call {:si_unique_call 58} vslice_dummy_var_20 := devirtbounce($p40, $p0, $p2);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_21 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} msleep(90);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    call {:si_unique_call 61} vslice_dummy_var_22 := devirtbounce($p46, $p0, $p3);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} vslice_dummy_var_23 := mxl111sf_set_ant_path($p25, 2);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} msleep(90);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    call {:si_unique_call 64} vslice_dummy_var_24 := devirtbounce($p52, $p0, $p4);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p3);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p4);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i58 := $sge.i32($i55, $i57);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i58 == 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p1);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p2);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p3);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p4);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vslice_dummy_var_27 := printk.ref.ref.i32.ref.i32.i32.i32.i32(.str.96, .str.97, 913, .str.99, $i70, $i72, $i74, $i76);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i58 == 1;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} vslice_dummy_var_25 := mxl111sf_set_ant_path($p25, 1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p1);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p2);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p3);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p4);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_26 := printk.ref.ref.i32.ref.i32.i32.i32.i32(.str.96, .str.97, 909, .str.98, $i61, $i63, $i65, $i67);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    goto $bb3;
}



const mxl111sf_set_ant_path: ref;

axiom mxl111sf_set_ant_path == $sub.ref(0, 330437);

procedure mxl111sf_set_ant_path($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_set_ant_path($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i8;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "mxl111sf_set_ant_path:arg:antpath"} boogie_si_record_i32($i1);
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i5 := mxl111sf_idac_config($p0, 1, 1, $i4, 0);
    call {:si_unique_call 70} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i3 := 63;
    goto $bb3;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 331469);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 332501);

procedure printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 1} true;
    call {:si_unique_call 72} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 73} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 1} true;
    call {:si_unique_call 74} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 75} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32($p0: ref, p.1: ref, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 1} true;
    call {:si_unique_call 76} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 77} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 78} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 79} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.ref.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb4:
    assume {:verifier.code 1} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 80} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 81} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb5:
    assume {:verifier.code 1} true;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 1} true;
    call {:si_unique_call 82} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 83} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb6:
    assume {:verifier.code 1} true;
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 1} true;
    call {:si_unique_call 84} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 85} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb7:
    assume {:verifier.code 1} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 1} true;
    call {:si_unique_call 86} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 87} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref.i32($p0: ref, p.1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 1} true;
    call {:si_unique_call 88} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 89} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32.i32($p0: ref, p.1: i32, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb9:
    assume {:verifier.code 1} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 1} true;
    call {:si_unique_call 90} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 91} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32.i32($p0: ref, p.1: i32, p.2: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb10:
    assume {:verifier.code 1} true;
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 92} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 93} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.i32.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.i32.ref.i32.i32.i32.i32($p0: ref, p.1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb11:
    assume {:verifier.code 1} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 1} true;
    call {:si_unique_call 94} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 95} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_idac_config: ref;

axiom mxl111sf_idac_config == $sub.ref(0, 333533);

procedure mxl111sf_idac_config($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_idac_config($p0: ref, $i1: i8, $i2: i8, $i3: i8, $i4: i8) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i15: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i19: i8;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var vslice_dummy_var_28: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} {:cexpr "mxl111sf_idac_config:arg:control_mode"} boogie_si_record_i8($i1);
    call {:si_unique_call 97} {:cexpr "mxl111sf_idac_config:arg:current_setting"} boogie_si_record_i8($i2);
    call {:si_unique_call 98} {:cexpr "mxl111sf_idac_config:arg:current_value"} boogie_si_record_i8($i3);
    call {:si_unique_call 99} {:cexpr "mxl111sf_idac_config:arg:hysteresis_value"} boogie_si_record_i8($i4);
    call {:si_unique_call 100} {:cexpr "mxl111sf_idac_config:arg:val"} boogie_si_record_i8($i3);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i3);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 127);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    call {:si_unique_call 102} {:cexpr "val"} boogie_si_record_i8($i22);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i4);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 63);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i26 := mxl111sf_write_reg($p0, 11, $i25);
    call {:si_unique_call 104} {:cexpr "ret"} boogie_si_record_i32($i26);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, 0);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i28 := $zext.i1.i32($i27);
    call {:si_unique_call 105} {:cexpr "__ret"} boogie_si_record_i32($i28);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i19);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i36 := mxl111sf_write_reg($p0, 12, $i35);
    call {:si_unique_call 109} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    call {:si_unique_call 110} {:cexpr "__ret___0"} boogie_si_record_i32($i38);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i40 := $M.1;
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 16);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb15;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_29 := printk.ref.ref.i32.i32(.str.4, .str.35, $i36, 396);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i30 := $M.1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 16);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} vslice_dummy_var_28 := printk.ref.ref.i32.i32(.str.4, .str.35, $i26, 392);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i3);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 128);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 101} {:cexpr "val"} boogie_si_record_i8($i9);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i9);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 191);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    call {:si_unique_call 107} {:cexpr "val"} boogie_si_record_i8($i18);
    assume {:verifier.code 0} true;
    $i15 := $i18;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i19 := $i15;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i9);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 64);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 106} {:cexpr "val"} boogie_si_record_i8($i14);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb5;
}



const mxl111sf_write_reg_mask: ref;

axiom mxl111sf_write_reg_mask == $sub.ref(0, 334565);

procedure mxl111sf_write_reg_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_write_reg_mask($p0: ref, $i1: i8, $i2: i8, $i3: i8) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i33: i32;
  var vslice_dummy_var_30: i32;
  var vslice_dummy_var_31: i32;
  var vslice_dummy_var_32: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 114} {:cexpr "mxl111sf_write_reg_mask:arg:addr"} boogie_si_record_i8($i1);
    call {:si_unique_call 115} {:cexpr "mxl111sf_write_reg_mask:arg:mask"} boogie_si_record_i8($i2);
    call {:si_unique_call 116} {:cexpr "mxl111sf_write_reg_mask:arg:data"} boogie_si_record_i8($i3);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 255);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i34 := $sext.i8.i32($i2);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i35 := $xor.i32($i34, $sub.i32(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.3, $p4);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i37 := $sext.i8.i32($i36);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i35, $i37);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i39);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.3, $p4);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i3);
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i41, $i42);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i44);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.3, $p4);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i50 := mxl111sf_write_reg($p0, $i46, $i49);
    call {:si_unique_call 127} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 128} {:cexpr "__ret___1"} boogie_si_record_i32($i52);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $i50;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb23:
    assume $i53 == 1;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb25;

  $bb26:
    assume $i56 == 1;
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} vslice_dummy_var_33 := printk.ref.ref.i32.i32(.str.4, .str.12, $i50, 212);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i9 := mxl111sf_read_reg($p0, $i8, $p4);
    call {:si_unique_call 118} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 119} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i24 := mxl111sf_read_reg($p0, $i23, $p4);
    call {:si_unique_call 123} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 124} {:cexpr "__ret___0"} boogie_si_record_i32($i26);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb18:
    assume $i32 == 1;
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i33 := $i24;
    goto $bb20;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb14;

  $bb15:
    assume $i30 == 1;
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} vslice_dummy_var_32 := printk.ref.ref.i32.i32(.str.4, .str.12, $i24, 205);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i2);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i3);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vslice_dummy_var_31 := printk.ref.i32.i32.i32(.str.13, $i18, $i19, $i20);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb5;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_30 := printk.ref.ref.i32.i32(.str.4, .str.12, $i9, 199);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 335597);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 131} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 336629);

procedure __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 1} true;
    call {:si_unique_call 132} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 133} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 135} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mxl111sf_ctrl_msg: ref;

axiom mxl111sf_ctrl_msg == $sub.ref(0, 337661);

procedure mxl111sf_ctrl_msg($p0: ref, $i1: i8, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_ctrl_msg($p0: ref, $i1: i8, $p2: ref, $i3: i32, $p4: ref, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i11: i1;
  var $i10: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $i55: i16;
  var $i56: i32;
  var $i57: i16;
  var $i58: i32;
  var $i49: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var vslice_dummy_var_34: i32;
  var vslice_dummy_var_35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 142} {:cexpr "mxl111sf_ctrl_msg:arg:cmd"} boogie_si_record_i8($i1);
    call {:si_unique_call 143} {:cexpr "mxl111sf_ctrl_msg:arg:wlen"} boogie_si_record_i32($i3);
    call {:si_unique_call 144} {:cexpr "mxl111sf_ctrl_msg:arg:rlen"} boogie_si_record_i32($i5);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p4);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $i10 := 1;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i5, 0);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i10 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i10);
    call {:si_unique_call 145} {:cexpr "wo"} boogie_si_record_i32($i12);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i3, 1);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    call {:si_unique_call 146} {:cexpr "__lengthofsndbuf"} boogie_si_record_i64($i14);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i15 := $mul.i64(1, $i14);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $p16 := $alloc($mul.ref(1, $i15));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p16);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, .str.1);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p19, .str.2);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p20, .str.3);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.8, $p22);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 131);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p22, $i25);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p26, 0);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.9, $p27);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 149} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p6);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i3, 1);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 151} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p34, 0, $i36, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p6);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(0, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p38, $i1);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i3);
    call {:si_unique_call 152} {:cexpr "__len"} boogie_si_record_i64($i39);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p6);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(1, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    cmdloc_dummy_var_3 := $M.0;
    call {:si_unique_call 153} cmdloc_dummy_var_4 := $memcpy.i8(cmdloc_dummy_var_2, cmdloc_dummy_var_3, $p41, $p2, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_4;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i12, 0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p6);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i3);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i5);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i58 := dvb_usbv2_generic_rw($p0, $p50, $i54, $p4, $i57);
    call {:si_unique_call 157} {:cexpr "tmp___2"} boogie_si_record_i32($i58);
    assume {:verifier.code 0} true;
    $i49 := $i58;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i49, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 158} {:cexpr "__ret___0"} boogie_si_record_i32($i60);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $r := $i49;
    return;

  $bb10:
    assume $i61 == 1;
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb12;

  $bb13:
    assume $i64 == 1;
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} vslice_dummy_var_35 := printk.ref.ref.i32.i32(.str.4, .str.1, $i49, 140);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p6);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i3);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i44);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i45, 1);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $i48 := dvb_usbv2_generic_write($p0, $p43, $i47);
    call {:si_unique_call 155} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i49 := $i48;
    goto $bb9;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_34 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p7, .str.3, .str.1, $i3, $i5);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 338693);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 339725);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const dvb_usbv2_generic_write: ref;

axiom dvb_usbv2_generic_write == $sub.ref(0, 340757);

procedure dvb_usbv2_generic_write($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_generic_write($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 160} {:cexpr "dvb_usbv2_generic_write:arg:arg2"} boogie_si_record_i16($i2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 1} true;
    call {:si_unique_call 161} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 162} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const dvb_usbv2_generic_rw: ref;

axiom dvb_usbv2_generic_rw == $sub.ref(0, 341789);

procedure dvb_usbv2_generic_rw($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_generic_rw($p0: ref, $p1: ref, $i2: i16, $p3: ref, $i4: i16) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} {:cexpr "dvb_usbv2_generic_rw:arg:arg2"} boogie_si_record_i16($i2);
    call {:si_unique_call 164} {:cexpr "dvb_usbv2_generic_rw:arg:arg4"} boogie_si_record_i16($i4);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 1} true;
    call {:si_unique_call 165} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 166} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const dvb_usbv2_probe: ref;

axiom dvb_usbv2_probe == $sub.ref(0, 342821);

procedure dvb_usbv2_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 167} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 168} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dvb_usbv2_disconnect: ref;

axiom dvb_usbv2_disconnect == $sub.ref(0, 343853);

procedure dvb_usbv2_disconnect($p0: ref);
  free requires assertsPassed;



implementation dvb_usbv2_disconnect($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    return;
}



const dvb_usbv2_suspend: ref;

axiom dvb_usbv2_suspend == $sub.ref(0, 344885);

procedure dvb_usbv2_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.12, $CurrAddr;



implementation dvb_usbv2_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.12 := $store.i32($M.12, $p3, $i1);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dvb_usbv2_resume: ref;

axiom dvb_usbv2_resume == $sub.ref(0, 345917);

procedure dvb_usbv2_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dvb_usbv2_resume($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 172} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 173} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_frontend_attach_atsc_mh: ref;

axiom mxl111sf_frontend_attach_atsc_mh == $sub.ref(0, 346949);

procedure mxl111sf_frontend_attach_atsc_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_atsc_mh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i21: i32;
  var vslice_dummy_var_36: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.105);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.84);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1016);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 176} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $i19 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 179} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $i22 := mxl111sf_attach_demod($p0, 1);
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i24 := mxl111sf_lg2160_frontend_attach($p0, 2);
    call {:si_unique_call 183} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb6;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} vslice_dummy_var_36 := __dynamic_pr_debug.ref.ref.ref($p1, .str.84, .str.105);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_attach_tuner: ref;

axiom mxl111sf_attach_tuner == $sub.ref(0, 347981);

procedure mxl111sf_attach_tuner($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_attach_tuner($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p43: ref;
  var $p41: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i64;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $i57: i64;
  var $i58: i1;
  var $i60: i64;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p70: ref;
  var $p71: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i34: i32;
  var $i59: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i64($i4);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i6 := $mul.i64($i5, 2424);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 2160);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64(0, $i7);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($i8, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.60);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str.2);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.61);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.8, $p18);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 934);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p18, $i21);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p22, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.9, $p23);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 186} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i33 := $sgt.i32($i32, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb4:
    assume $i33 == 1;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb7;

  $bb7:
    call $p35, $p36, $i37, $i38, $p39, $p43, $p41, $i45, $i46, $i47, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $i57, $i58, $i60, $p62, $p63, $p66, $p67, $i68, $p70, $p71, $p73, $i74, $i75, $i76, $i77, $i34, vslice_dummy_var_38, vslice_dummy_var_39 := mxl111sf_attach_tuner_loop_$bb7($p0, $p12, $p30, $p35, $p36, $i37, $i38, $p39, $p43, $p41, $i45, $i46, $i47, $p49, $p50, $p51, $p52, $i53, $i54, $p55, $i57, $i58, $i60, $p62, $p63, $p66, $p67, $i68, $p70, $p71, $p73, $i74, $i75, $i76, $i77, $i34, vslice_dummy_var_38, vslice_dummy_var_39);
    goto $bb7_last;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p35 := __symbol_get(.str.62);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} vslice_dummy_var_38 := __request_module.i1.ref(1, .str.63);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p43 := __symbol_get(.str.62);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p41 := $p43;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p41);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} vslice_dummy_var_39 := printk.ref(.str.64);
    assume {:verifier.code 0} true;
    $p55 := $0.ref;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p55);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i34);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i60, 8));
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p63, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i34);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i68, 8));
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p71, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p73, $p67);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i34, 1);
    call {:si_unique_call 195} {:cexpr "i"} boogie_si_record_i32($i74);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p30);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i77 := $sgt.i32($i76, $i74);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i77 == 1);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb22:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i74;
    goto $bb22_dummy;

  $bb18:
    assume $i58 == 1;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 5);
    goto $bb20;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i34);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i47, 8));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    call {:si_unique_call 192} $p51 := devirtbounce.1($p41, $p50, $p12, mxl_tuner_config);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $i53 := $p2i.ref.i64($p52);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $i54 := $eq.i64($i53, 0);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p55 := $p51;
    goto $bb17;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __symbol_put(.str.62);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p39 := __symbol_get(.str.62);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p41 := $p39;
    goto $bb11;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} vslice_dummy_var_37 := __dynamic_pr_debug.ref.ref.ref($p1, .str.61, .str.60);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;
}



const mxl111sf_streaming_ctrl_atsc_mh: ref;

axiom mxl111sf_streaming_ctrl_atsc_mh == $sub.ref(0, 349013);

procedure mxl111sf_streaming_ctrl_atsc_mh($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.0, $M.3, $M.11;



implementation mxl111sf_streaming_ctrl_atsc_mh($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i26: i32;
  var vslice_dummy_var_40: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 197} {:cexpr "mxl111sf_streaming_ctrl_atsc_mh:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.104);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.82);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1250);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 0);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 199} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i34 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 206} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i26 := $i34;
    goto $bb6;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i30 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 204} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i25 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 202} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} vslice_dummy_var_40 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.82, .str.104, $i20, $i1);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init: ref;

axiom mxl111sf_init == $sub.ref(0, 350045);

procedure mxl111sf_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i1;
  var $i29: i32;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i60: i1;
  var $p61: ref;
  var $i62: i8;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $p69: ref;
  var $p67: ref;
  var $p70: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $p2 := $alloc($mul.ref(1208, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i7 := mxl1x1sf_get_chip_info($p6);
    call {:si_unique_call 211} {:cexpr "___ret"} boogie_si_record_i32($i7);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 212} {:cexpr "__ret___0"} boogie_si_record_i32($i9);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i7;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 221} {:cexpr "__ret___1"} boogie_si_record_i32($i34);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i34, 0);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p6, $mul.ref(0, 376)), $mul.ref(104, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} __mutex_init($p42, .str.50, $p3);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i46 := $ugt.i32($i45, 1);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 1208)), $mul.ref(24, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $M.14 := $store.ref($M.14, $p49, $p48);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 1208)), $mul.ref(2, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.15 := $store.i16($M.15, $p50, 80);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p1);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i52 := tveeprom_read($p2, $p51, 256);
    call {:si_unique_call 227} {:cexpr "ret"} boogie_si_record_i32($i52);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i52, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i54 := $zext.i1.i32($i53);
    call {:si_unique_call 228} {:cexpr "__ret___2"} boogie_si_record_i32($i54);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i54, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 256)), $mul.ref(160, 1));
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.16, $p61);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i32($i62);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 132);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i64 == 1);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p68, $mul.ref(128, 1));
    assume {:verifier.code 0} true;
    $p67 := $p69;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 376)), $mul.ref(28, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} tveeprom_hauppauge_analog($p2, $p70, $p67);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb47:
    assume $i64 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p1);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(160, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p67 := $p66;
    goto $bb49;

  $bb43:
    assume $i60 == 1;
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i55 == 1;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i56 := $M.1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 16);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb39;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} vslice_dummy_var_49 := printk.ref.ref.i32.i32(.str.4, .str.46, $i52, 979);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i46 == 1;
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} vslice_dummy_var_48 := mxl111sf_config_pin_mux_modes($p6, 7);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i40 == 1;
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} vslice_dummy_var_47 := printk.ref(.str.48);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i35 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb27;

  $bb28:
    assume $i38 == 1;
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} vslice_dummy_var_46 := printk.ref.ref.i32.i32(.str.4, .str.46, $i32, 967);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} $i19 := mxl1x1sf_get_chip_info($p6);
    call {:si_unique_call 216} {:cexpr "___ret"} boogie_si_record_i32($i19);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i32($i20);
    call {:si_unique_call 217} {:cexpr "__ret"} boogie_si_record_i32($i21);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i21, 0);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i32 := $i19;
    goto $bb24;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} vslice_dummy_var_45 := printk.ref.ref(.str.49, .str.46);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} vslice_dummy_var_44 := printk.ref(.str.48);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i23 := $M.1;
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb14;

  $bb15:
    assume $i25 == 1;
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} vslice_dummy_var_43 := printk.ref.ref.i32.i32(.str.4, .str.46, $i19, 966);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_42 := printk.ref.ref(.str.47, .str.46);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} vslice_dummy_var_41 := printk.ref.ref.i32.i32(.str.4, .str.46, $i7, 966);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_get_stream_config_atsc_mh: ref;

axiom mxl111sf_get_stream_config_atsc_mh == $sub.ref(0, 351077);

procedure mxl111sf_get_stream_config_atsc_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_atsc_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var vslice_dummy_var_50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.107);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1224);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 233} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i31 := $M.17;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i26 := $M.17;
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} vslice_dummy_var_50 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.107, $i21);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_stream_config_isoc: ref;

axiom mxl111sf_stream_config_isoc == $sub.ref(0, 352109);

procedure mxl111sf_stream_config_isoc($p0: ref, $i1: i8, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_stream_config_isoc($p0: ref, $i1: i8, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var vslice_dummy_var_51: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 242} {:cexpr "mxl111sf_stream_config_isoc:arg:endpoint"} boogie_si_record_i8($i1);
    call {:si_unique_call 243} {:cexpr "mxl111sf_stream_config_isoc:arg:framesperurb"} boogie_si_record_i32($i2);
    call {:si_unique_call 244} {:cexpr "mxl111sf_stream_config_isoc:arg:framesize"} boogie_si_record_i32($i3);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.77);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str.2);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.78);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.8, $p10);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1083);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p10, $i13);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p14, 0);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.9, $p15);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 246} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 2);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 5);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i1);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 12)), $mul.ref(0, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i2);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 12)), $mul.ref(4, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i3);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 12)), $mul.ref(8, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 1);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i22 := $mul.i32($i2, $i3);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} vslice_dummy_var_51 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p4, .str.78, .str.77, $i21, $i22);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_stream_config_bulk: ref;

axiom mxl111sf_stream_config_bulk == $sub.ref(0, 353141);

procedure mxl111sf_stream_config_bulk($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_stream_config_bulk($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var vslice_dummy_var_52: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 249} {:cexpr "mxl111sf_stream_config_bulk:arg:endpoint"} boogie_si_record_i8($i1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.79);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.80);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1072);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 5);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, 8192);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i1);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} vslice_dummy_var_52 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.80, .str.79, $i19);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl1x1sf_get_chip_info: ref;

axiom mxl1x1sf_get_chip_info == $sub.ref(0, 354173);

procedure mxl1x1sf_get_chip_info($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl1x1sf_get_chip_info($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i22: i8;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p49: ref;
  var $i53: i8;
  var $i54: i32;
  var $i21: i32;
  var $i11: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(13, 1));
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i12 := mxl111sf_read_reg($p0, $sub.i8(0, 4), $p1);
    call {:si_unique_call 256} {:cexpr "ret"} boogie_si_record_i32($i12);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    call {:si_unique_call 257} {:cexpr "__ret"} boogie_si_record_i32($i14);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i14, 0);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.3, $p1);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(13, 1));
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $i22);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $i24 := mxl111sf_read_reg($p0, $sub.i8(0, 6), $p2);
    call {:si_unique_call 260} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 261} {:cexpr "__ret___0"} boogie_si_record_i32($i26);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.3, $p2);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(14, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.3, $p1);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 99);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 99);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p40 := .str.54;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.3, $p2);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i42, 54);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i42, 54);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p49 := .str.58;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.3, $p2);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} vslice_dummy_var_55 := printk.ref.ref.ref.i32(.str.59, $p40, $p49, $i54);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i11 := $i21;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb42:
    assume $i45 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 1);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $p49 := .str.55;
    goto $bb49;

  $bb40:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i42, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb44;

  $bb45:
    assume $i46 == 1;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 3);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p49 := .str.57;
    goto $bb49;

  $bb38:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i42, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb44;

  $bb47:
    assume $i47 == 1;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 2);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p49 := .str.56;
    goto $bb49;

  $bb30:
    assume $i38 == 1;
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p40 := .str.53;
    goto $bb35;

  $bb28:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 97);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb32;

  $bb33:
    assume $i39 == 1;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p40 := .str.52;
    goto $bb35;

  $bb24:
    assume $i32 == 1;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb16;

  $bb18:
    assume $i27 == 1;
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb21:
    assume $i30 == 1;
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} vslice_dummy_var_54 := printk.ref.ref.i32.i32(.str.4, .str.51, $i24, 258);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i21 := $i12;
    goto $bb16;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i16 := $M.1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 16);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} vslice_dummy_var_53 := printk.ref.ref.i32.i32(.str.4, .str.51, $i12, 253);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(14, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 355205);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_config_pin_mux_modes: ref;

axiom mxl111sf_config_pin_mux_modes == $sub.ref(0, 356237);

procedure mxl111sf_config_pin_mux_modes($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_config_pin_mux_modes($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i21: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i8;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i8;
  var $i126: i32;
  var $i127: i32;
  var $i128: i8;
  var $i129: i8;
  var $i130: i32;
  var $i131: i32;
  var $i132: i8;
  var $i133: i8;
  var $i134: i32;
  var $i135: i32;
  var $i136: i8;
  var $i137: i8;
  var $i138: i32;
  var $i139: i32;
  var $i140: i8;
  var $i141: i8;
  var $i142: i32;
  var $i143: i32;
  var $i144: i8;
  var $i145: i8;
  var $i146: i32;
  var $i147: i32;
  var $i148: i8;
  var $i149: i8;
  var $i150: i32;
  var $i151: i32;
  var $i152: i8;
  var $i153: i8;
  var $i154: i32;
  var $i155: i32;
  var $i156: i8;
  var $i157: i8;
  var $i158: i32;
  var $i159: i32;
  var $i160: i8;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i8;
  var $i165: i8;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i169: i8;
  var $i170: i32;
  var $i171: i32;
  var $i172: i8;
  var $i173: i8;
  var $i174: i32;
  var $i175: i32;
  var $i176: i8;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i8;
  var $i181: i8;
  var $i182: i32;
  var $i183: i32;
  var $i184: i8;
  var $i185: i8;
  var $i186: i32;
  var $i187: i32;
  var $i188: i8;
  var $i189: i8;
  var $i190: i32;
  var $i191: i32;
  var $i192: i8;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i8;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i8;
  var $i201: i8;
  var $i202: i32;
  var $i203: i32;
  var $i204: i8;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i8;
  var $i209: i8;
  var $i210: i32;
  var $i211: i32;
  var $i212: i8;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i8;
  var $i217: i8;
  var $i218: i32;
  var $i219: i32;
  var $i220: i8;
  var $i221: i8;
  var $i222: i32;
  var $i223: i32;
  var $i224: i8;
  var $i225: i8;
  var $i226: i32;
  var $i227: i32;
  var $i228: i8;
  var $i229: i8;
  var $i230: i32;
  var $i231: i32;
  var $i232: i8;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $i237: i8;
  var $i238: i32;
  var $i239: i32;
  var $i240: i8;
  var $i241: i8;
  var $i242: i32;
  var $i243: i32;
  var $i244: i8;
  var $i245: i8;
  var $i246: i32;
  var $i247: i32;
  var $i248: i8;
  var $i249: i8;
  var $i250: i32;
  var $i251: i32;
  var $i252: i8;
  var $i253: i8;
  var $i254: i32;
  var $i255: i32;
  var $i256: i8;
  var $i257: i8;
  var $i258: i32;
  var $i259: i32;
  var $i260: i8;
  var $i261: i8;
  var $i262: i32;
  var $i263: i32;
  var $i264: i8;
  var $i265: i8;
  var $i266: i32;
  var $i267: i32;
  var $i268: i8;
  var $i269: i8;
  var $i270: i32;
  var $i271: i32;
  var $i272: i8;
  var $i273: i8;
  var $i274: i32;
  var $i275: i32;
  var $i276: i8;
  var $i277: i8;
  var $i278: i32;
  var $i279: i32;
  var $i280: i8;
  var $i281: i8;
  var $i282: i32;
  var $i283: i32;
  var $i284: i8;
  var $i285: i8;
  var $i286: i32;
  var $i287: i32;
  var $i288: i8;
  var $i289: i8;
  var $i290: i32;
  var $i291: i32;
  var $i292: i8;
  var $i293: i8;
  var $i294: i32;
  var $i295: i32;
  var $i296: i8;
  var $i297: i8;
  var $i298: i32;
  var $i299: i32;
  var $i300: i8;
  var $i301: i8;
  var $i302: i32;
  var $i303: i32;
  var $i304: i8;
  var $i305: i8;
  var $i306: i32;
  var $i307: i32;
  var $i308: i8;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i8;
  var $i313: i8;
  var $i314: i32;
  var $i315: i32;
  var $i316: i8;
  var $i317: i8;
  var $i318: i32;
  var $i319: i32;
  var $i320: i8;
  var $i321: i8;
  var $i322: i32;
  var $i323: i32;
  var $i324: i8;
  var $i325: i8;
  var $i326: i32;
  var $i327: i32;
  var $i328: i8;
  var $i329: i8;
  var $i330: i32;
  var $i331: i32;
  var $i332: i8;
  var $i333: i8;
  var $i334: i32;
  var $i335: i32;
  var $i336: i8;
  var $i337: i8;
  var $i338: i32;
  var $i339: i32;
  var $i340: i8;
  var $i341: i8;
  var $i342: i32;
  var $i343: i32;
  var $i344: i8;
  var $i345: i8;
  var $i346: i32;
  var $i347: i32;
  var $i348: i8;
  var $i349: i8;
  var $i350: i32;
  var $i351: i32;
  var $i352: i8;
  var $i353: i8;
  var $i354: i32;
  var $i355: i32;
  var $i356: i8;
  var $i357: i8;
  var $i358: i32;
  var $i359: i32;
  var $i360: i8;
  var $i361: i8;
  var $i362: i32;
  var $i363: i32;
  var $i364: i8;
  var $i365: i8;
  var $i366: i32;
  var $i367: i32;
  var $i368: i8;
  var $i369: i8;
  var $i370: i32;
  var $i371: i32;
  var $i372: i8;
  var $i373: i8;
  var $i374: i32;
  var $i375: i32;
  var $i376: i8;
  var $i377: i8;
  var $i378: i32;
  var $i379: i32;
  var $i380: i8;
  var $i381: i8;
  var $i382: i32;
  var $i383: i32;
  var $i384: i8;
  var $i385: i8;
  var $i386: i32;
  var $i387: i32;
  var $i388: i8;
  var $i389: i8;
  var $i390: i32;
  var $i391: i32;
  var $i392: i8;
  var $i393: i8;
  var $i394: i32;
  var $i395: i32;
  var $i396: i8;
  var $i397: i8;
  var $i398: i32;
  var $i399: i32;
  var $i400: i8;
  var $i401: i8;
  var $i402: i32;
  var $i403: i32;
  var $i404: i8;
  var $i405: i8;
  var $i406: i32;
  var $i407: i32;
  var $i408: i8;
  var $i409: i8;
  var $i410: i32;
  var $i411: i32;
  var $i412: i8;
  var $i413: i8;
  var $i414: i32;
  var $i415: i32;
  var $i416: i8;
  var $i417: i8;
  var $i418: i32;
  var $i419: i32;
  var $i420: i8;
  var $i421: i8;
  var $i422: i32;
  var $i423: i32;
  var $i424: i8;
  var $i425: i8;
  var $i426: i32;
  var $i427: i32;
  var $i428: i8;
  var $i429: i8;
  var $i430: i32;
  var $i431: i32;
  var $i432: i8;
  var $i433: i8;
  var $i434: i32;
  var $i435: i32;
  var $i436: i8;
  var $i437: i8;
  var $i438: i32;
  var $i439: i32;
  var $i440: i8;
  var $i441: i8;
  var $i442: i32;
  var $i443: i32;
  var $i444: i8;
  var $i445: i8;
  var $i446: i32;
  var $i447: i32;
  var $i448: i8;
  var $i449: i8;
  var $i450: i32;
  var $i451: i32;
  var $i452: i8;
  var $i453: i8;
  var $i454: i32;
  var $i455: i32;
  var $i456: i8;
  var $i457: i8;
  var $i458: i32;
  var $i459: i32;
  var $i460: i8;
  var $i461: i8;
  var $i462: i32;
  var $i463: i32;
  var $i464: i8;
  var $i465: i8;
  var $i466: i32;
  var $i467: i32;
  var $i468: i8;
  var $i469: i8;
  var $i470: i32;
  var $i471: i32;
  var $i472: i8;
  var $i473: i8;
  var $i474: i32;
  var $i475: i32;
  var $i476: i8;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i8;
  var $i481: i8;
  var $i482: i32;
  var $i483: i32;
  var $i484: i8;
  var $i485: i8;
  var $i486: i32;
  var $i487: i32;
  var $i488: i8;
  var $i489: i8;
  var $i490: i32;
  var $i491: i32;
  var $i492: i8;
  var $i493: i8;
  var $i494: i32;
  var $i495: i32;
  var $i496: i8;
  var $i497: i8;
  var $i498: i32;
  var $i499: i32;
  var $i500: i8;
  var $i501: i8;
  var $i502: i32;
  var $i503: i32;
  var $i504: i8;
  var $i505: i8;
  var $i506: i32;
  var $i507: i32;
  var $i508: i8;
  var $i509: i8;
  var $i510: i32;
  var $i511: i32;
  var $i512: i8;
  var $i513: i8;
  var $i514: i32;
  var $i515: i32;
  var $i516: i8;
  var $i517: i8;
  var $i518: i32;
  var $i519: i32;
  var $i520: i8;
  var $i521: i8;
  var $i522: i32;
  var $i523: i32;
  var $i524: i8;
  var $i525: i8;
  var $i526: i32;
  var $i527: i32;
  var $i528: i8;
  var $i529: i8;
  var $i530: i32;
  var $i531: i32;
  var $i532: i8;
  var $i533: i8;
  var $i534: i32;
  var $i535: i32;
  var $i536: i8;
  var $i537: i8;
  var $i538: i32;
  var $i539: i32;
  var $i540: i8;
  var $i541: i8;
  var $i542: i32;
  var $i543: i32;
  var $i544: i8;
  var $i545: i8;
  var $i546: i32;
  var $i547: i32;
  var $i548: i8;
  var $i549: i8;
  var $i550: i32;
  var $i551: i32;
  var $i552: i8;
  var $i553: i8;
  var $i554: i32;
  var $i555: i32;
  var $i556: i8;
  var $i557: i8;
  var $i558: i32;
  var $i559: i32;
  var $i560: i8;
  var $i561: i8;
  var $i562: i32;
  var $i563: i32;
  var $i564: i8;
  var $i565: i8;
  var $i566: i32;
  var $i567: i32;
  var $i568: i8;
  var $i569: i8;
  var $i570: i32;
  var $i571: i32;
  var $i572: i8;
  var $i573: i8;
  var $i574: i32;
  var $i575: i32;
  var $i576: i8;
  var $i577: i8;
  var $i578: i32;
  var $i579: i32;
  var $i580: i8;
  var $i581: i8;
  var $i582: i32;
  var $i583: i32;
  var $i584: i8;
  var $i585: i8;
  var $i586: i32;
  var $i587: i32;
  var $i588: i8;
  var $i589: i8;
  var $i590: i32;
  var $i591: i32;
  var $i592: i8;
  var $i593: i8;
  var $i594: i32;
  var $i595: i32;
  var $i596: i8;
  var $i597: i8;
  var $i598: i32;
  var $i599: i32;
  var $i600: i8;
  var $i601: i8;
  var $i602: i32;
  var $i603: i32;
  var $i604: i8;
  var $i605: i8;
  var $i606: i32;
  var $i607: i32;
  var $i608: i8;
  var $i609: i8;
  var $i610: i32;
  var $i611: i32;
  var $i612: i8;
  var $i613: i8;
  var $i614: i32;
  var $i615: i32;
  var $i616: i8;
  var $i617: i8;
  var $i618: i32;
  var $i619: i8;
  var $i620: i32;
  var $i621: i1;
  var $i622: i32;
  var $i623: i1;
  var $i624: i32;
  var $i625: i32;
  var $i626: i1;
  var $i628: i1;
  var $i629: i8;
  var $i630: i32;
  var $i631: i8;
  var $i632: i32;
  var $i633: i1;
  var $i634: i32;
  var $i635: i1;
  var $i636: i32;
  var $i637: i32;
  var $i638: i1;
  var $i640: i1;
  var $i641: i8;
  var $i642: i32;
  var $i643: i8;
  var $i644: i32;
  var $i645: i1;
  var $i646: i32;
  var $i647: i1;
  var $i648: i32;
  var $i649: i32;
  var $i650: i1;
  var $i652: i1;
  var $i653: i8;
  var $i654: i32;
  var $i655: i8;
  var $i656: i32;
  var $i657: i1;
  var $i658: i32;
  var $i659: i1;
  var $i660: i32;
  var $i661: i32;
  var $i662: i1;
  var $i664: i1;
  var $i665: i8;
  var $i666: i32;
  var $i667: i8;
  var $i668: i32;
  var $i669: i1;
  var $i670: i32;
  var $i671: i1;
  var $i672: i32;
  var $i673: i32;
  var $i674: i1;
  var $i676: i1;
  var $i677: i8;
  var $i678: i32;
  var $i679: i8;
  var $i680: i32;
  var $i681: i1;
  var $i682: i32;
  var $i683: i1;
  var $i684: i32;
  var $i685: i32;
  var $i686: i1;
  var $i688: i1;
  var $i689: i8;
  var $i690: i32;
  var $i691: i8;
  var $i692: i32;
  var $i693: i1;
  var $i694: i32;
  var $i695: i1;
  var $i696: i32;
  var $i697: i32;
  var $i698: i1;
  var $i700: i1;
  var $i701: i8;
  var $i702: i32;
  var $i703: i8;
  var $i704: i32;
  var $i705: i1;
  var $i706: i32;
  var $i707: i1;
  var $i708: i32;
  var $i709: i32;
  var $i710: i1;
  var $i712: i1;
  var $i22: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $p5 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p8 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p9 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 272} {:cexpr "mxl111sf_config_pin_mux_modes:arg:pin_mux_config"} boogie_si_record_i32($i1);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i13 := mxl111sf_read_reg($p0, 23, $p4);
    call {:si_unique_call 275} {:cexpr "ret"} boogie_si_record_i32($i13);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    call {:si_unique_call 276} {:cexpr "__ret"} boogie_si_record_i32($i15);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i15, 0);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i23 := mxl111sf_read_reg($p0, 24, $p5);
    call {:si_unique_call 279} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 280} {:cexpr "__ret___0"} boogie_si_record_i32($i25);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $i32 := mxl111sf_read_reg($p0, 18, $p2);
    call {:si_unique_call 283} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 284} {:cexpr "__ret___1"} boogie_si_record_i32($i34);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i34, 0);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i41 := mxl111sf_read_reg($p0, 21, $p3);
    call {:si_unique_call 287} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 288} {:cexpr "__ret___2"} boogie_si_record_i32($i43);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i43, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i50 := mxl111sf_read_reg($p0, $sub.i8(0, 126), $p7);
    call {:si_unique_call 291} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 292} {:cexpr "__ret___3"} boogie_si_record_i32($i52);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} $i59 := mxl111sf_read_reg($p0, $sub.i8(0, 124), $p8);
    call {:si_unique_call 295} {:cexpr "ret"} boogie_si_record_i32($i59);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i59, 0);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i61 := $zext.i1.i32($i60);
    call {:si_unique_call 296} {:cexpr "__ret___4"} boogie_si_record_i32($i61);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i61, 0);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} $i68 := mxl111sf_read_reg($p0, $sub.i8(0, 119), $p9);
    call {:si_unique_call 299} {:cexpr "ret"} boogie_si_record_i32($i68);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i32($i69);
    call {:si_unique_call 300} {:cexpr "__ret___5"} boogie_si_record_i32($i70);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i70, 0);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} $i77 := mxl111sf_read_reg($p0, 61, $p6);
    call {:si_unique_call 303} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 304} {:cexpr "__ret___6"} boogie_si_record_i32($i79);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i565 := $load.i8($M.3, $p4);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $i566 := $zext.i8.i32($i565);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i567 := $or.i32($i566, 64);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i568 := $trunc.i32.i8($i567);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i568);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i569 := $load.i8($M.3, $p5);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i570 := $zext.i8.i32($i569);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $i571 := $and.i32($i570, 254);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i572 := $trunc.i32.i8($i571);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i572);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $i573 := $load.i8($M.3, $p5);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i574 := $zext.i8.i32($i573);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i575 := $and.i32($i574, 253);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i576 := $trunc.i32.i8($i575);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i576);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i577 := $load.i8($M.3, $p6);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i578 := $zext.i8.i32($i577);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i579 := $and.i32($i578, 127);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i580 := $trunc.i32.i8($i579);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i580);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.3, $p2);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i583 := $and.i32($i582, 251);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i584 := $trunc.i32.i8($i583);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i584);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i585 := $load.i8($M.3, $p3);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $i586 := $zext.i8.i32($i585);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i587 := $and.i32($i586, 191);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i588 := $trunc.i32.i8($i587);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i588);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $i589 := $load.i8($M.3, $p6);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i590 := $zext.i8.i32($i589);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i591 := $and.i32($i590, 239);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i592 := $trunc.i32.i8($i591);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i592);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i593 := $load.i8($M.3, $p7);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $i594 := $zext.i8.i32($i593);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i595 := $and.i32($i594, 239);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i596 := $trunc.i32.i8($i595);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i596);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i597 := $load.i8($M.3, $p7);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i598 := $zext.i8.i32($i597);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i599 := $and.i32($i598, 127);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i600 := $trunc.i32.i8($i599);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i600);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i601 := $load.i8($M.3, $p7);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i602 := $zext.i8.i32($i601);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i603 := $and.i32($i602, 191);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $i604 := $trunc.i32.i8($i603);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i604);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i605 := $load.i8($M.3, $p7);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i606 := $zext.i8.i32($i605);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i607 := $and.i32($i606, 223);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $i608 := $trunc.i32.i8($i607);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i608);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.3, $p8);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i610 := $zext.i8.i32($i609);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i611 := $and.i32($i610, 15);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i612 := $trunc.i32.i8($i611);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i612);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i613 := $load.i8($M.3, $p9);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $i614 := $zext.i8.i32($i613);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i615 := $and.i32($i614, 15);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i616 := $trunc.i32.i8($i615);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i616);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i617 := $load.i8($M.3, $p4);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $i618 := $zext.i8.i32($i617);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $i619 := $trunc.i32.i8($i618);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} $i620 := mxl111sf_write_reg($p0, 23, $i619);
    call {:si_unique_call 307} {:cexpr "ret"} boogie_si_record_i32($i620);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i621 := $slt.i32($i620, 0);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i622 := $zext.i1.i32($i621);
    call {:si_unique_call 308} {:cexpr "__ret___7"} boogie_si_record_i32($i622);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i623 := $ne.i32($i622, 0);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i623 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i628 := $ne.i32($i622, 0);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i629 := $load.i8($M.3, $p5);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i630 := $zext.i8.i32($i629);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i631 := $trunc.i32.i8($i630);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $i632 := mxl111sf_write_reg($p0, 24, $i631);
    call {:si_unique_call 311} {:cexpr "ret"} boogie_si_record_i32($i632);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i633 := $slt.i32($i632, 0);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i634 := $zext.i1.i32($i633);
    call {:si_unique_call 312} {:cexpr "__ret___8"} boogie_si_record_i32($i634);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i635 := $ne.i32($i634, 0);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i635} true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i635 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i640 := $ne.i32($i634, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i640} true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i641 := $load.i8($M.3, $p2);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i642 := $zext.i8.i32($i641);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i643 := $trunc.i32.i8($i642);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i644 := mxl111sf_write_reg($p0, 18, $i643);
    call {:si_unique_call 315} {:cexpr "ret"} boogie_si_record_i32($i644);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i645 := $slt.i32($i644, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i646 := $zext.i1.i32($i645);
    call {:si_unique_call 316} {:cexpr "__ret___9"} boogie_si_record_i32($i646);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i647 := $ne.i32($i646, 0);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i647} true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i647 == 1);
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i652 := $ne.i32($i646, 0);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    assume {:branchcond $i652} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i652 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.3, $p3);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i654 := $zext.i8.i32($i653);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i655 := $trunc.i32.i8($i654);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i656 := mxl111sf_write_reg($p0, 21, $i655);
    call {:si_unique_call 319} {:cexpr "ret"} boogie_si_record_i32($i656);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i657 := $slt.i32($i656, 0);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i658 := $zext.i1.i32($i657);
    call {:si_unique_call 320} {:cexpr "__ret___10"} boogie_si_record_i32($i658);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i659 := $ne.i32($i658, 0);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i659 == 1);
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i664 := $ne.i32($i658, 0);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i665 := $load.i8($M.3, $p7);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i666 := $zext.i8.i32($i665);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i667 := $trunc.i32.i8($i666);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i668 := mxl111sf_write_reg($p0, $sub.i8(0, 126), $i667);
    call {:si_unique_call 323} {:cexpr "ret"} boogie_si_record_i32($i668);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i669 := $slt.i32($i668, 0);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i670 := $zext.i1.i32($i669);
    call {:si_unique_call 324} {:cexpr "__ret___11"} boogie_si_record_i32($i670);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i671 := $ne.i32($i670, 0);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i671 == 1);
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i676 := $ne.i32($i670, 0);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    assume {:branchcond $i676} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i676 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i677 := $load.i8($M.3, $p8);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i678 := $zext.i8.i32($i677);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i679 := $trunc.i32.i8($i678);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} $i680 := mxl111sf_write_reg($p0, $sub.i8(0, 124), $i679);
    call {:si_unique_call 327} {:cexpr "ret"} boogie_si_record_i32($i680);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i681 := $slt.i32($i680, 0);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i682 := $zext.i1.i32($i681);
    call {:si_unique_call 328} {:cexpr "__ret___12"} boogie_si_record_i32($i682);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i683 := $ne.i32($i682, 0);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i683} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i683 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i688 := $ne.i32($i682, 0);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $i689 := $load.i8($M.3, $p9);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i690 := $zext.i8.i32($i689);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i691 := $trunc.i32.i8($i690);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i692 := mxl111sf_write_reg($p0, $sub.i8(0, 119), $i691);
    call {:si_unique_call 331} {:cexpr "ret"} boogie_si_record_i32($i692);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i693 := $slt.i32($i692, 0);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i694 := $zext.i1.i32($i693);
    call {:si_unique_call 332} {:cexpr "__ret___13"} boogie_si_record_i32($i694);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i695 := $ne.i32($i694, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    assume !($i695 == 1);
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i700 := $ne.i32($i694, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.3, $p6);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i703 := $trunc.i32.i8($i702);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i704 := mxl111sf_write_reg($p0, 61, $i703);
    call {:si_unique_call 335} {:cexpr "ret"} boogie_si_record_i32($i704);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i705 := $slt.i32($i704, 0);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i706 := $zext.i1.i32($i705);
    call {:si_unique_call 336} {:cexpr "__ret___14"} boogie_si_record_i32($i706);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i707 := $ne.i32($i706, 0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i707 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i712 := $ne.i32($i706, 0);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $i22 := $i704;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb172:
    assume $i712 == 1;
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i22 := $i704;
    goto $bb12;

  $bb166:
    assume $i707 == 1;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i708 := $M.1;
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i709 := $and.i32($i708, 16);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i710 := $ne.i32($i709, 0);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i710} true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i710 == 1);
    goto $bb168;

  $bb169:
    assume $i710 == 1;
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} vslice_dummy_var_72 := printk.ref.ref.i32.i32(.str.4, .str.40, $i704, 616);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb163:
    assume $i700 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i22 := $i692;
    goto $bb12;

  $bb157:
    assume $i695 == 1;
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i696 := $M.1;
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i697 := $and.i32($i696, 16);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i698 := $ne.i32($i697, 0);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    assume {:branchcond $i698} true;
    goto $bb160, $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    assume !($i698 == 1);
    goto $bb159;

  $bb160:
    assume $i698 == 1;
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} vslice_dummy_var_71 := printk.ref.ref.i32.i32(.str.4, .str.40, $i692, 613);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb154:
    assume $i688 == 1;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i22 := $i680;
    goto $bb12;

  $bb148:
    assume $i683 == 1;
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i684 := $M.1;
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i685 := $and.i32($i684, 16);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i686 := $ne.i32($i685, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i686 == 1);
    goto $bb150;

  $bb151:
    assume $i686 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} vslice_dummy_var_70 := printk.ref.ref.i32.i32(.str.4, .str.40, $i680, 610);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb145:
    assume $i676 == 1;
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i22 := $i668;
    goto $bb12;

  $bb139:
    assume $i671 == 1;
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i672 := $M.1;
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i673 := $and.i32($i672, 16);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $i674 := $ne.i32($i673, 0);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i674} true;
    goto $bb142, $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    assume !($i674 == 1);
    goto $bb141;

  $bb142:
    assume $i674 == 1;
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_69 := printk.ref.ref.i32.i32(.str.4, .str.40, $i668, 607);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb136:
    assume $i664 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i22 := $i656;
    goto $bb12;

  $bb130:
    assume $i659 == 1;
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i660 := $M.1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i661 := $and.i32($i660, 16);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i662 := $ne.i32($i661, 0);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    assume !($i662 == 1);
    goto $bb132;

  $bb133:
    assume $i662 == 1;
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} vslice_dummy_var_68 := printk.ref.ref.i32.i32(.str.4, .str.40, $i656, 604);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb127:
    assume $i652 == 1;
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i22 := $i644;
    goto $bb12;

  $bb121:
    assume $i647 == 1;
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i648 := $M.1;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i649 := $and.i32($i648, 16);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i650 := $ne.i32($i649, 0);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i650} true;
    goto $bb124, $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    assume !($i650 == 1);
    goto $bb123;

  $bb124:
    assume $i650 == 1;
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} vslice_dummy_var_67 := printk.ref.ref.i32.i32(.str.4, .str.40, $i644, 601);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb118:
    assume $i640 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i22 := $i632;
    goto $bb12;

  $bb112:
    assume $i635 == 1;
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i636 := $M.1;
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i637 := $and.i32($i636, 16);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i638 := $ne.i32($i637, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    assume !($i638 == 1);
    goto $bb114;

  $bb115:
    assume $i638 == 1;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} vslice_dummy_var_66 := printk.ref.ref.i32.i32(.str.4, .str.40, $i632, 598);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb109:
    assume $i628 == 1;
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i22 := $i620;
    goto $bb12;

  $bb103:
    assume $i623 == 1;
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i624 := $M.1;
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i625 := $and.i32($i624, 16);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i626 := $ne.i32($i625, 0);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i626} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i626 == 1);
    goto $bb105;

  $bb106:
    assume $i626 == 1;
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_65 := printk.ref.ref.i32.i32(.str.4, .str.40, $i620, 595);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb86:
    assume $i90 == 1;
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i513 := $load.i8($M.3, $p4);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i514 := $zext.i8.i32($i513);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i515 := $and.i32($i514, 191);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i516 := $trunc.i32.i8($i515);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i516);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i517 := $load.i8($M.3, $p5);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i518 := $zext.i8.i32($i517);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i519 := $and.i32($i518, 254);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i520 := $trunc.i32.i8($i519);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i520);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i521 := $load.i8($M.3, $p5);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i522 := $zext.i8.i32($i521);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i523 := $and.i32($i522, 253);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i524 := $trunc.i32.i8($i523);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i524);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.3, $p6);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $i527 := $and.i32($i526, 127);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $i528 := $trunc.i32.i8($i527);
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i528);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i529 := $load.i8($M.3, $p2);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i530 := $zext.i8.i32($i529);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $i531 := $or.i32($i530, 4);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i532 := $trunc.i32.i8($i531);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i532);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $i533 := $load.i8($M.3, $p3);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i534 := $zext.i8.i32($i533);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i535 := $or.i32($i534, 64);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i536 := $trunc.i32.i8($i535);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i536);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.3, $p6);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i538 := $zext.i8.i32($i537);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i539 := $and.i32($i538, 239);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i540 := $trunc.i32.i8($i539);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i540);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i541 := $load.i8($M.3, $p7);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i542 := $zext.i8.i32($i541);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i543 := $and.i32($i542, 239);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i544 := $trunc.i32.i8($i543);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i544);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i545 := $load.i8($M.3, $p7);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $i546 := $zext.i8.i32($i545);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $i547 := $and.i32($i546, 127);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i548 := $trunc.i32.i8($i547);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i548);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i549 := $load.i8($M.3, $p7);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i550 := $zext.i8.i32($i549);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i551 := $and.i32($i550, 191);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i552 := $trunc.i32.i8($i551);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i552);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.3, $p7);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i554 := $zext.i8.i32($i553);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i555 := $and.i32($i554, 223);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i556 := $trunc.i32.i8($i555);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i556);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i557 := $load.i8($M.3, $p8);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i558 := $zext.i8.i32($i557);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i559 := $and.i32($i558, 15);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i560 := $trunc.i32.i8($i559);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i560);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i561 := $load.i8($M.3, $p9);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i562 := $zext.i8.i32($i561);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i563 := $and.i32($i562, 15);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i564 := $trunc.i32.i8($i563);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i564);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb84:
    assume $i89 == 1;
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.3, $p4);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i32($i461);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i463 := $and.i32($i462, 191);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i464 := $trunc.i32.i8($i463);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i464);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i465 := $load.i8($M.3, $p5);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i466 := $zext.i8.i32($i465);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i467 := $or.i32($i466, 1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i468 := $trunc.i32.i8($i467);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i468);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i469 := $load.i8($M.3, $p5);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i471 := $and.i32($i470, 253);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i472 := $trunc.i32.i8($i471);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i472);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.3, $p6);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i474 := $zext.i8.i32($i473);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i475 := $and.i32($i474, 127);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i476 := $trunc.i32.i8($i475);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i476);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.3, $p2);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i479 := $and.i32($i478, 251);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i480 := $trunc.i32.i8($i479);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i480);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i481 := $load.i8($M.3, $p3);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $i482 := $zext.i8.i32($i481);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i483 := $and.i32($i482, 191);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i484 := $trunc.i32.i8($i483);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i484);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i485 := $load.i8($M.3, $p6);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i486 := $zext.i8.i32($i485);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i487 := $and.i32($i486, 239);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i488 := $trunc.i32.i8($i487);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i488);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i489 := $load.i8($M.3, $p7);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i490 := $zext.i8.i32($i489);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i491 := $and.i32($i490, 239);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $i492 := $trunc.i32.i8($i491);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i492);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $i493 := $load.i8($M.3, $p7);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $i494 := $zext.i8.i32($i493);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i495 := $and.i32($i494, 127);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i32.i8($i495);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i496);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.3, $p7);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i498 := $zext.i8.i32($i497);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i499 := $and.i32($i498, 191);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i500 := $trunc.i32.i8($i499);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i500);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.3, $p7);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $i502 := $zext.i8.i32($i501);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i503 := $and.i32($i502, 223);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i504 := $trunc.i32.i8($i503);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i504);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i505 := $load.i8($M.3, $p8);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i506 := $zext.i8.i32($i505);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i507 := $and.i32($i506, 15);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i508 := $trunc.i32.i8($i507);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i508);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $i509 := $load.i8($M.3, $p9);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i510 := $zext.i8.i32($i509);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i511 := $and.i32($i510, 15);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i512 := $trunc.i32.i8($i511);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i512);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb82:
    assume $i88 == 1;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i357 := $load.i8($M.3, $p4);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i357);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i359 := $and.i32($i358, 191);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i360 := $trunc.i32.i8($i359);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i360);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i361 := $load.i8($M.3, $p5);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i362 := $zext.i8.i32($i361);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i363 := $and.i32($i362, 254);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i364 := $trunc.i32.i8($i363);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i364);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $i365 := $load.i8($M.3, $p5);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i366 := $zext.i8.i32($i365);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i367 := $or.i32($i366, 2);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i368 := $trunc.i32.i8($i367);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i368);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.3, $p6);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i370 := $zext.i8.i32($i369);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i371 := $or.i32($i370, 128);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i372 := $trunc.i32.i8($i371);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i372);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i373 := $load.i8($M.3, $p2);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $i374 := $zext.i8.i32($i373);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $i375 := $and.i32($i374, 251);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i376 := $trunc.i32.i8($i375);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i376);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.3, $p3);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i378 := $zext.i8.i32($i377);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i379 := $or.i32($i378, 64);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i380 := $trunc.i32.i8($i379);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i380);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i381 := $load.i8($M.3, $p6);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i382 := $zext.i8.i32($i381);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i383 := $or.i32($i382, 16);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i384 := $trunc.i32.i8($i383);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i384);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.3, $p7);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i387 := $and.i32($i386, 239);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i388 := $trunc.i32.i8($i387);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i388);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.3, $p7);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i391 := $and.i32($i390, 127);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i392 := $trunc.i32.i8($i391);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i392);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.3, $p7);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i394 := $zext.i8.i32($i393);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i395 := $and.i32($i394, 191);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i396 := $trunc.i32.i8($i395);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i396);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.3, $p7);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $i399 := $and.i32($i398, 223);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i400 := $trunc.i32.i8($i399);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i400);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i401 := $load.i8($M.3, $p8);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i402 := $zext.i8.i32($i401);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i403 := $and.i32($i402, 15);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    $i404 := $trunc.i32.i8($i403);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i404);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i405 := $load.i8($M.3, $p9);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i406 := $zext.i8.i32($i405);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i407 := $and.i32($i406, 15);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $i408 := $trunc.i32.i8($i407);
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i408);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb80:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i91 == 1);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.3, $p4);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i410 := $zext.i8.i32($i409);
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $i411 := $and.i32($i410, 191);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i412 := $trunc.i32.i8($i411);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i412);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.3, $p5);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i415 := $and.i32($i414, 254);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i416 := $trunc.i32.i8($i415);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i416);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.3, $p5);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i418 := $zext.i8.i32($i417);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i419 := $or.i32($i418, 2);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i420 := $trunc.i32.i8($i419);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i420);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.3, $p6);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i423 := $and.i32($i422, 127);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i32.i8($i423);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i424);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $i425 := $load.i8($M.3, $p2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $i426 := $zext.i8.i32($i425);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i427 := $and.i32($i426, 251);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i428 := $trunc.i32.i8($i427);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i428);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.3, $p3);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i431 := $or.i32($i430, 64);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i432 := $trunc.i32.i8($i431);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i432);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.3, $p6);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i434 := $zext.i8.i32($i433);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i435 := $or.i32($i434, 16);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i436 := $trunc.i32.i8($i435);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i436);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i437 := $load.i8($M.3, $p7);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i438 := $zext.i8.i32($i437);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i439 := $and.i32($i438, 239);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i8($i439);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i440);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i441 := $load.i8($M.3, $p7);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i32($i441);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $i443 := $and.i32($i442, 127);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $i444 := $trunc.i32.i8($i443);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i444);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.3, $p7);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i445);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i447 := $and.i32($i446, 191);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i448 := $trunc.i32.i8($i447);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i448);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i449 := $load.i8($M.3, $p7);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i450 := $zext.i8.i32($i449);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i451 := $and.i32($i450, 223);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i452 := $trunc.i32.i8($i451);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i452);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.3, $p8);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $i454 := $zext.i8.i32($i453);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i455 := $and.i32($i454, 15);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i8($i455);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i456);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i457 := $load.i8($M.3, $p9);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i458 := $zext.i8.i32($i457);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i459 := $and.i32($i458, 15);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i460 := $trunc.i32.i8($i459);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i460);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb89:
    assume $i91 == 1;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.3, $p4);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i307 := $and.i32($i306, 191);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i8($i307);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i308);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.3, $p5);
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i311 := $and.i32($i310, 254);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i32.i8($i311);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i312);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i313 := $load.i8($M.3, $p5);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i314 := $zext.i8.i32($i313);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i315 := $or.i32($i314, 2);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i316 := $trunc.i32.i8($i315);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i316);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i317 := $load.i8($M.3, $p6);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i318 := $zext.i8.i32($i317);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $i319 := $or.i32($i318, 128);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $i320 := $trunc.i32.i8($i319);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i320);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.3, $p2);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i323 := $and.i32($i322, 251);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i324 := $trunc.i32.i8($i323);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i324);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i325 := $load.i8($M.3, $p3);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i326 := $zext.i8.i32($i325);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i327 := $and.i32($i326, 191);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i328);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i329 := $load.i8($M.3, $p6);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i329);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i330, 239);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i8($i331);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i332);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i333 := $load.i8($M.3, $p7);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i334 := $zext.i8.i32($i333);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i335 := $and.i32($i334, 239);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i32.i8($i335);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i336);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.3, $p7);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i339 := $and.i32($i338, 127);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i339);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i340);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $i341 := $load.i8($M.3, $p7);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i342 := $zext.i8.i32($i341);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i343 := $and.i32($i342, 191);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i344 := $trunc.i32.i8($i343);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i344);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.3, $p7);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i346 := $zext.i8.i32($i345);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i347 := $and.i32($i346, 223);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $i348 := $trunc.i32.i8($i347);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i348);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.3, $p8);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $i351 := $and.i32($i350, 15);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i352 := $trunc.i32.i8($i351);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i352);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.3, $p9);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i355 := $and.i32($i354, 15);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i356 := $trunc.i32.i8($i355);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i356);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb78:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i94 == 1);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.3, $p4);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i254, 191);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i8($i255);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i256);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.3, $p5);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i258, 254);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i260);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i261 := $load.i8($M.3, $p5);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i262 := $zext.i8.i32($i261);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i263 := $or.i32($i262, 2);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i264 := $trunc.i32.i8($i263);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i264);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i265 := $load.i8($M.3, $p6);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i266 := $zext.i8.i32($i265);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i266, 127);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i8($i267);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i268);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.3, $p2);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i270, 251);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i272 := $trunc.i32.i8($i271);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i272);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i273 := $load.i8($M.3, $p3);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i274 := $zext.i8.i32($i273);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i274, 191);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i276 := $trunc.i32.i8($i275);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i276);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.3, $p6);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i279 := $and.i32($i278, 239);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i280 := $trunc.i32.i8($i279);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i280);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.3, $p7);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 239);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $i284 := $trunc.i32.i8($i283);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i284);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.3, $p7);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i287 := $and.i32($i286, 127);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i288 := $trunc.i32.i8($i287);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i288);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.3, $p7);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i32($i289);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i291 := $and.i32($i290, 191);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i292 := $trunc.i32.i8($i291);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i292);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.3, $p7);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i295 := $and.i32($i294, 223);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i8($i295);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i296);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i297 := $load.i8($M.3, $p8);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i32($i297);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i299 := $and.i32($i298, 15);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i32.i8($i299);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i300);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i301 := $load.i8($M.3, $p9);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i302 := $zext.i8.i32($i301);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i303 := $and.i32($i302, 15);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i32.i8($i303);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i304);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb95:
    assume $i94 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.3, $p4);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i203 := $and.i32($i202, 191);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i204 := $trunc.i32.i8($i203);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i204);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.3, $p5);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 254);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i8($i207);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i208);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i209 := $load.i8($M.3, $p5);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i210 := $zext.i8.i32($i209);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i211 := $and.i32($i210, 253);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i8($i211);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i212);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.3, $p6);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 127);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $i216 := $trunc.i32.i8($i215);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i216);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.3, $p2);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i219 := $and.i32($i218, 251);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i220 := $trunc.i32.i8($i219);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i220);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.3, $p3);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i32($i221);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i223 := $and.i32($i222, 191);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i8($i223);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i224);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $i225 := $load.i8($M.3, $p6);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i225);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i226, 239);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i228 := $trunc.i32.i8($i227);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i228);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.3, $p7);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i229);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 239);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i232 := $trunc.i32.i8($i231);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i232);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.3, $p7);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 127);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i236);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.3, $p7);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i32($i237);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i239 := $and.i32($i238, 191);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i8($i239);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i240);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.3, $p7);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i243 := $and.i32($i242, 223);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i32.i8($i243);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i244);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.3, $p8);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i247 := $and.i32($i246, 15);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i248 := $trunc.i32.i8($i247);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i248);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.3, $p9);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i251 := $and.i32($i250, 15);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i8($i251);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i252);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb93:
    assume $i93 == 1;
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.3, $p4);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i149);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i150, 64);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i152 := $trunc.i32.i8($i151);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i152);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i153 := $load.i8($M.3, $p5);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i154 := $zext.i8.i32($i153);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 254);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i156 := $trunc.i32.i8($i155);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i156);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.3, $p5);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 2);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i160);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.3, $p6);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 127);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i8($i163);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i164);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i165 := $load.i8($M.3, $p2);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i165);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, 251);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i168);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i169 := $load.i8($M.3, $p3);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i169);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i171 := $and.i32($i170, 191);
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i8($i171);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i172);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.3, $p6);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i32($i173);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i175 := $and.i32($i174, 239);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i8($i175);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i176);
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.3, $p7);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i179 := $or.i32($i178, 16);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i180);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.3, $p7);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i182, 128);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i32.i8($i183);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i184);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.3, $p7);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i185);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i187 := $or.i32($i186, 64);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i188 := $trunc.i32.i8($i187);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i188);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.3, $p7);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i190, 32);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i32.i8($i191);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i192);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.3, $p8);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i195 := $or.i32($i194, 240);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i32.i8($i195);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i196);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.3, $p9);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i199 := $or.i32($i198, 240);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i200 := $trunc.i32.i8($i199);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i200);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb91:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i95 == 1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.3, $p4);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, 64);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p4, $i100);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.3, $p5);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 1);
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i104);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.3, $p5);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 253);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p5, $i108);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.3, $p6);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 127);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i8($i111);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i112);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.3, $p2);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i32($i113);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 251);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i116);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.3, $p3);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 191);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i120);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.3, $p6);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 239);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i124);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.3, $p7);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i32($i125);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i127 := $or.i32($i126, 16);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i8($i127);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i128);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.3, $p7);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i131 := $or.i32($i130, 128);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i32.i8($i131);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i132);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.3, $p7);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i32($i133);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i134, 64);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i8($i135);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i136);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.3, $p7);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i139 := $or.i32($i138, 32);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i8($i139);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i140);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.3, $p8);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i142, 240);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i32.i8($i143);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p8, $i144);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.3, $p9);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i146 := $zext.i8.i32($i145);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i146, 240);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i148 := $trunc.i32.i8($i147);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p9, $i148);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb97:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb88;

  $bb99:
    assume $i96 == 1;
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb74:
    assume $i85 == 1;
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i22 := $i77;
    goto $bb12;

  $bb68:
    assume $i80 == 1;
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb70;

  $bb71:
    assume $i83 == 1;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_64 := printk.ref.ref.i32.i32(.str.4, .str.40, $i77, 307);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb65:
    assume $i76 == 1;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $i22 := $i68;
    goto $bb12;

  $bb59:
    assume $i71 == 1;
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $i72 := $M.1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 16);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb61;

  $bb62:
    assume $i74 == 1;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} vslice_dummy_var_63 := printk.ref.ref.i32.i32(.str.4, .str.40, $i68, 304);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i67 == 1;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i22 := $i59;
    goto $bb12;

  $bb50:
    assume $i62 == 1;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i63 := $M.1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 16);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb52;

  $bb53:
    assume $i65 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} vslice_dummy_var_62 := printk.ref.ref.i32.i32(.str.4, .str.40, $i59, 301);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb47:
    assume $i58 == 1;
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $i22 := $i50;
    goto $bb12;

  $bb41:
    assume $i53 == 1;
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb43;

  $bb44:
    assume $i56 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} vslice_dummy_var_61 := printk.ref.ref.i32.i32(.str.4, .str.40, $i50, 298);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i49 == 1;
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i22 := $i41;
    goto $bb12;

  $bb32:
    assume $i44 == 1;
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb34;

  $bb35:
    assume $i47 == 1;
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} vslice_dummy_var_60 := printk.ref.ref.i32.i32(.str.4, .str.40, $i41, 295);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i40 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i22 := $i32;
    goto $bb12;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} vslice_dummy_var_59 := printk.ref.ref.i32.i32(.str.4, .str.40, $i32, 292);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i31 == 1;
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i22 := $i23;
    goto $bb12;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} vslice_dummy_var_58 := printk.ref.ref.i32.i32(.str.4, .str.40, $i23, 289);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i22 := $i13;
    goto $bb12;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i17 := $M.1;
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb6;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_57 := printk.ref.ref.i32.i32(.str.4, .str.40, $i13, 286);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vslice_dummy_var_56 := printk.ref.ref.i32(.str.23, .str.40, $i1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tveeprom_read: ref;

axiom tveeprom_read == $sub.ref(0, 357269);

procedure tveeprom_read($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation tveeprom_read($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 338} {:cexpr "tveeprom_read:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 339} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 340} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tveeprom_hauppauge_analog: ref;

axiom tveeprom_hauppauge_analog == $sub.ref(0, 358301);

procedure tveeprom_hauppauge_analog($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tveeprom_hauppauge_analog($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_ep6_streaming_ctrl: ref;

axiom mxl111sf_ep6_streaming_ctrl == $sub.ref(0, 359333);

procedure mxl111sf_ep6_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11;



implementation mxl111sf_ep6_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i66: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 342} {:cexpr "mxl111sf_ep6_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2424);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2160);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p31, .str.65);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p32, .str.2);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p33, .str.66);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.8, $p35);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 410);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p35, $i38);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p39, 0);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.9, $p40);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 344} {:cexpr "tmp"} boogie_si_record_i64($i44);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i1, 0);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $r := $i66;
    return;

  $bb4:
    assume $i47 == 1;
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i48 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 347} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i50 := $zext.i1.i32($i49);
    call {:si_unique_call 348} {:cexpr "__ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p25, $mul.ref($i28, 32)), $mul.ref(12, 1));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $i58 := mxl111sf_config_mpeg_in($p23, 1, 1, $i57, 0, 0);
    call {:si_unique_call 351} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 352} {:cexpr "__ret___0"} boogie_si_record_i32($i60);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i66 := $i58;
    goto $bb18;

  $bb12:
    assume $i61 == 1;
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb14;

  $bb15:
    assume $i64 == 1;
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} vslice_dummy_var_75 := printk.ref.ref.i32.i32(.str.4, .str.65, $i58, 418);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i51 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i52 := $M.1;
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 16);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb8;

  $bb9:
    assume $i54 == 1;
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} vslice_dummy_var_74 := printk.ref.ref.i32.i32(.str.4, .str.65, $i48, 414);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i45 == 1;
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_73 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.66, .str.65, $i1);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ep4_streaming_ctrl: ref;

axiom mxl111sf_ep4_streaming_ctrl == $sub.ref(0, 360365);

procedure mxl111sf_ep4_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11;



implementation mxl111sf_ep4_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 355} {:cexpr "mxl111sf_ep4_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2424);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2160);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p25, .str.94);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.2);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p27, .str.66);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.8, $p29);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 460);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p29, $i32);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p33, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.9, $p34);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 357} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i1, 0);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $i42 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 360} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 361} {:cexpr "__ret"} boogie_si_record_i32($i44);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i50 := $i42;
    goto $bb12;

  $bb6:
    assume $i45 == 1;
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 16);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb8;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} vslice_dummy_var_77 := printk.ref.ref.i32.i32(.str.4, .str.94, $i42, 464);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} vslice_dummy_var_76 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.66, .str.94, $i1);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_ep5_streaming_ctrl: ref;

axiom mxl111sf_ep5_streaming_ctrl == $sub.ref(0, 361397);

procedure mxl111sf_ep5_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11;



implementation mxl111sf_ep5_streaming_ctrl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i66: i32;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 364} {:cexpr "mxl111sf_ep5_streaming_ctrl:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(768, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i17 := $mul.i64($i16, 2424);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, 2160);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i19 := $sub.i64(0, $i18);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p8, $mul.ref($i19, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p25, .str.119);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p26, .str.2);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p27, .str.66);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.8, $p29);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 434);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p29, $i32);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p33, 0);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.9, $p34);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 366} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i1, 0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i67 := mxl111sf_disable_i2s_port($p23);
    call {:si_unique_call 372} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 373} {:cexpr "__ret___2"} boogie_si_record_i32($i69);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i66 := $i67;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p23, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    $i80 := $i66;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i80, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i82 := $zext.i1.i32($i81);
    call {:si_unique_call 386} {:cexpr "__ret___3"} boogie_si_record_i32($i82);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $r := $i80;
    return;

  $bb34:
    assume $i83 == 1;
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i84 := $M.1;
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 16);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb36;

  $bb37:
    assume $i86 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} vslice_dummy_var_83 := printk.ref.ref.i32.i32(.str.4, .str.119, $i80, 450);
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i78 == 1;
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i79 := mxl111sf_config_spi($p23, $i1);
    call {:si_unique_call 385} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i80 := $i79;
    goto $bb33;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 16);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb27;

  $bb28:
    assume $i73 == 1;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} vslice_dummy_var_82 := printk.ref.ref.i32.i32(.str.4, .str.119, $i67, 446);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i42 := mxl111sf_enable_usb_output($p23);
    call {:si_unique_call 369} {:cexpr "ret"} boogie_si_record_i32($i42);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i42, 0);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i44 := $zext.i1.i32($i43);
    call {:si_unique_call 370} {:cexpr "__ret"} boogie_si_record_i32($i44);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i50 := mxl111sf_init_i2s_port($p23, $sub.i8(0, 56));
    call {:si_unique_call 376} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 377} {:cexpr "__ret___0"} boogie_si_record_i32($i52);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $i58 := mxl111sf_config_i2s($p23, 0, 15);
    call {:si_unique_call 380} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 381} {:cexpr "__ret___1"} boogie_si_record_i32($i60);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $i58;
    goto $bb24;

  $bb18:
    assume $i61 == 1;
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb20;

  $bb21:
    assume $i64 == 1;
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_81 := printk.ref.ref.i32.i32(.str.4, .str.119, $i58, 443);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb14;

  $bb15:
    assume $i56 == 1;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} vslice_dummy_var_80 := printk.ref.ref.i32.i32(.str.4, .str.119, $i50, 441);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i45 == 1;
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i46 := $M.1;
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 16);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb8;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_79 := printk.ref.ref.i32.i32(.str.4, .str.119, $i42, 438);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} vslice_dummy_var_78 := __dynamic_pr_debug.ref.ref.ref.i32($p2, .str.66, .str.119, $i1);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_enable_usb_output: ref;

axiom mxl111sf_enable_usb_output == $sub.ref(0, 362429);

procedure mxl111sf_enable_usb_output($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_enable_usb_output($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i4 := mxl111sf_write_reg_mask($p0, 23, 64, 0);
    call {:si_unique_call 390} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_84 := printk.ref.ref(.str.16, .str.26);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init_i2s_port: ref;

axiom mxl111sf_init_i2s_port == $sub.ref(0, 363461);

procedure mxl111sf_init_i2s_port($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr;



implementation mxl111sf_init_i2s_port($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i60: i32;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i59: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} $p2 := $alloc($mul.ref(21, $zext.i32.i64(1)));
    call {:si_unique_call 392} {:cexpr "mxl111sf_init_i2s_port:arg:sample_size"} boogie_si_record_i8($i1);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 27);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 30);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 21);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 96);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 96);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(0, 1));
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 23);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(1, 1));
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $sub.i8(0, 32));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(2, 3)), $mul.ref(2, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 32);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(0, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(1, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, $sub.i8(0, 1));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(3, 3)), $mul.ref(2, 1));
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 2);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(0, 1));
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 38);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(1, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 13);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(4, 3)), $mul.ref(2, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 13);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(0, 1));
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(1, 1));
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $sub.i8(0, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(5, 3)), $mul.ref(2, 1));
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(0, 1));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 0);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(1, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 21)), $mul.ref(6, 3)), $mul.ref(2, 1));
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p2);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i50 := mxl111sf_ctrl_program_regs($p0, $p49);
    call {:si_unique_call 395} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 396} {:cexpr "__ret"} boogie_si_record_i32($i52);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i60 := $zext.i8.i32($i1);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i8($i60);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i62 := mxl111sf_write_reg($p0, 22, $i61);
    call {:si_unique_call 399} {:cexpr "ret"} boogie_si_record_i32($i62);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i62, 0);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i64 := $zext.i1.i32($i63);
    call {:si_unique_call 400} {:cexpr "__ret___0"} boogie_si_record_i32($i64);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i59 := $i62;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb14:
    assume $i65 == 1;
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i66 := $M.1;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 16);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb16;

  $bb17:
    assume $i68 == 1;
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vslice_dummy_var_87 := printk.ref.ref.i32.i32(.str.4, .str.30, $i62, 289);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i58 == 1;
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i59 := $i50;
    goto $bb12;

  $bb4:
    assume $i53 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb6;

  $bb7:
    assume $i56 == 1;
    goto corral_source_split_2593;

  corral_source_split_2593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} vslice_dummy_var_86 := printk.ref.ref.i32.i32(.str.4, .str.30, $i50, 285);
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i46 == 1;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i1);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} vslice_dummy_var_85 := printk.ref.ref.i32(.str.29, .str.30, $i47);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_i2s: ref;

axiom mxl111sf_config_i2s == $sub.ref(0, 364493);

procedure mxl111sf_config_i2s($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_config_i2s($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i17: i1;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i8;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i1;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i18: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 403} {:cexpr "mxl111sf_config_i2s:arg:msb_start_pos"} boogie_si_record_i8($i1);
    call {:si_unique_call 404} {:cexpr "mxl111sf_config_i2s:arg:data_width"} boogie_si_record_i8($i2);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $i9 := mxl111sf_read_reg($p0, 20, $p3);
    call {:si_unique_call 407} {:cexpr "ret"} boogie_si_record_i32($i9);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 408} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i11, 0);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.3, $p3);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 224);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i22);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.3, $p3);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i24, $i25);
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i27);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.3, $p3);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i31 := mxl111sf_write_reg($p0, 20, $i30);
    call {:si_unique_call 411} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 412} {:cexpr "__ret___0"} boogie_si_record_i32($i33);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i40 := mxl111sf_read_reg($p0, 21, $p3);
    call {:si_unique_call 415} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 416} {:cexpr "__ret___1"} boogie_si_record_i32($i42);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i42, 0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.3, $p3);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 224);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i52);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.3, $p3);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i2);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i54, $i55);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i57);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.3, $p3);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $i61 := mxl111sf_write_reg($p0, 21, $i60);
    call {:si_unique_call 419} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i61, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i63 := $zext.i1.i32($i62);
    call {:si_unique_call 420} {:cexpr "__ret___2"} boogie_si_record_i32($i63);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i18 := $i61;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb32:
    assume $i64 == 1;
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i65 := $M.1;
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 16);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb34;

  $bb35:
    assume $i67 == 1;
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vslice_dummy_var_92 := printk.ref.ref.i32.i32(.str.4, .str.33, $i61, 331);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i48 == 1;
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i18 := $i40;
    goto $bb12;

  $bb23:
    assume $i43 == 1;
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb25;

  $bb26:
    assume $i46 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} vslice_dummy_var_91 := printk.ref.ref.i32.i32(.str.4, .str.33, $i40, 325);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i39 == 1;
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i18 := $i31;
    goto $bb12;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 16);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb16;

  $bb17:
    assume $i37 == 1;
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_90 := printk.ref.ref.i32.i32(.str.4, .str.33, $i31, 321);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i18 := $i9;
    goto $bb12;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb6;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_89 := printk.ref.ref.i32.i32(.str.4, .str.33, $i9, 315);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i2);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vslice_dummy_var_88 := printk.ref.ref.i32.i32(.str.32, .str.33, $i6, $i7);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_disable_i2s_port: ref;

axiom mxl111sf_disable_i2s_port == $sub.ref(0, 365525);

procedure mxl111sf_disable_i2s_port($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_disable_i2s_port($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} $p1 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 21);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 64);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 0);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 6)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i18 := mxl111sf_ctrl_program_regs($p0, $p17);
    call {:si_unique_call 425} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_93 := printk.ref.ref(.str.16, .str.31);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_spi: ref;

axiom mxl111sf_config_spi == $sub.ref(0, 366557);

procedure mxl111sf_config_spi($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr;



implementation mxl111sf_config_spi($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i8;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i45: i1;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $i15: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 427} {:cexpr "mxl111sf_config_spi:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $i6 := mxl111sf_write_reg($p0, 0, 2);
    call {:si_unique_call 430} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 431} {:cexpr "__ret"} boogie_si_record_i32($i8);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} $i16 := mxl111sf_read_reg($p0, $sub.i8(0, 23), $p2);
    call {:si_unique_call 434} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 435} {:cexpr "__ret___0"} boogie_si_record_i32($i18);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i1, 0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i25 == 1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.3, $p2);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 251);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i33);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.3, $p2);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i37 := mxl111sf_write_reg($p0, $sub.i8(0, 23), $i36);
    call {:si_unique_call 438} {:cexpr "ret"} boogie_si_record_i32($i37);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    call {:si_unique_call 439} {:cexpr "__ret___1"} boogie_si_record_i32($i39);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i39, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i46 := mxl111sf_write_reg($p0, 0, 0);
    call {:si_unique_call 442} {:cexpr "ret"} boogie_si_record_i32($i46);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i46, 0);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i32($i47);
    call {:si_unique_call 443} {:cexpr "__ret___2"} boogie_si_record_i32($i48);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i15 := $i46;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb35:
    assume $i49 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i50 := $M.1;
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 16);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb37;

  $bb38:
    assume $i52 == 1;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_98 := printk.ref.ref.i32.i32(.str.4, .str.34, $i46, 361);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume $i45 == 1;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i15 := $i37;
    goto $bb12;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i41 := $M.1;
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 16);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb28;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} vslice_dummy_var_97 := printk.ref.ref.i32.i32(.str.4, .str.34, $i37, 357);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb23:
    assume $i25 == 1;
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.3, $p2);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i29);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb12;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} vslice_dummy_var_96 := printk.ref.ref.i32.i32(.str.4, .str.34, $i16, 348);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 16);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_95 := printk.ref.ref.i32.i32(.str.4, .str.34, $i6, 344);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_94 := printk.ref.ref.i32(.str.23, .str.34, $i1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_mpeg_in: ref;

axiom mxl111sf_config_mpeg_in == $sub.ref(0, 367589);

procedure mxl111sf_config_mpeg_in($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr;



implementation mxl111sf_config_mpeg_in($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32, $i5: i32) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i48: i1;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i8;
  var $i61: i8;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $i74: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i8;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $i93: i1;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $i102: i1;
  var $i103: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i8;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p6 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 447} {:cexpr "mxl111sf_config_mpeg_in:arg:parallel_serial"} boogie_si_record_i32($i1);
    call {:si_unique_call 448} {:cexpr "mxl111sf_config_mpeg_in:arg:msb_lsb_1st"} boogie_si_record_i32($i2);
    call {:si_unique_call 449} {:cexpr "mxl111sf_config_mpeg_in:arg:clock_phase"} boogie_si_record_i32($i3);
    call {:si_unique_call 450} {:cexpr "mxl111sf_config_mpeg_in:arg:mpeg_valid_pol"} boogie_si_record_i32($i4);
    call {:si_unique_call 451} {:cexpr "mxl111sf_config_mpeg_in:arg:mpeg_sync_pol"} boogie_si_record_i32($i5);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i11 := mxl111sf_write_reg($p0, 27, 30);
    call {:si_unique_call 454} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 455} {:cexpr "__ret"} boogie_si_record_i32($i13);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} vslice_dummy_var_101 := mxl111sf_read_reg($p0, 23, $p6);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i3, 0);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.3, $p6);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 32);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i28);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.3, $p6);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} $i32 := mxl111sf_write_reg($p0, 23, $i31);
    call {:si_unique_call 459} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i32, 0);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    call {:si_unique_call 460} {:cexpr "__ret___0"} boogie_si_record_i32($i34);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} $i40 := mxl111sf_read_reg($p0, 24, $p6);
    call {:si_unique_call 463} {:cexpr "ret"} boogie_si_record_i32($i40);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i42 := $zext.i1.i32($i41);
    call {:si_unique_call 464} {:cexpr "__ret___1"} boogie_si_record_i32($i42);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i1, 0);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.3, $p6);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 254);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i60);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.3, $p6);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 2);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i64);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i65 := mxl111sf_read_reg($p0, 25, $p7);
    call {:si_unique_call 467} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 468} {:cexpr "__ret___2"} boogie_si_record_i32($i67);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i2, 1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i73 == 1);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.3, $p7);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 127);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i8($i80);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i81);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.3, $p7);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} $i85 := mxl111sf_write_reg($p0, 25, $i84);
    call {:si_unique_call 471} {:cexpr "ret"} boogie_si_record_i32($i85);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i87 := $zext.i1.i32($i86);
    call {:si_unique_call 472} {:cexpr "__ret___3"} boogie_si_record_i32($i87);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i5, 0);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i93 == 1);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.3, $p6);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 4);
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i101);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i4, 0);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i102 == 1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.3, $p6);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i109 := $or.i32($i108, 8);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i8($i109);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i110);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.3, $p6);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i114 := mxl111sf_write_reg($p0, 24, $i113);
    call {:si_unique_call 475} {:cexpr "ret"} boogie_si_record_i32($i114);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    call {:si_unique_call 476} {:cexpr "__ret___4"} boogie_si_record_i32($i116);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $r := $i114;
    return;

  $bb49:
    assume $i117 == 1;
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i118 := $M.1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 16);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb51;

  $bb52:
    assume $i120 == 1;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} vslice_dummy_var_106 := printk.ref.ref.i32.i32(.str.4, .str.28, $i114, 259);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i102 == 1;
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i103 := $load.i8($M.3, $p6);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $i104 := $zext.i8.i32($i103);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 247);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i8($i105);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i106);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i93 == 1;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.3, $p6);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 251);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i97);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb37:
    assume $i88 == 1;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i89 := $M.1;
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 16);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb39;

  $bb40:
    assume $i91 == 1;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} vslice_dummy_var_105 := printk.ref.ref.i32.i32(.str.4, .str.28, $i85, 243);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34:
    assume $i73 == 1;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.3, $p7);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i32($i74);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i76 := $or.i32($i75, 128);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p7, $i77);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i69 := $M.1;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb30;

  $bb31:
    assume $i71 == 1;
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} vslice_dummy_var_104 := printk.ref.ref.i32.i32(.str.4, .str.28, $i65, 233);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i48 == 1;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.3, $p6);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 253);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i8($i51);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i52);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.3, $p6);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i56);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume $i43 == 1;
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i44 := $M.1;
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 16);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb21;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_103 := printk.ref.ref.i32.i32(.str.4, .str.28, $i40, 212);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i36 := $M.1;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 16);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb15;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} vslice_dummy_var_102 := printk.ref.ref.i32.i32(.str.4, .str.28, $i32, 207);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.3, $p6);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 223);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p6, $i24);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_100 := printk.ref.ref.i32.i32(.str.4, .str.28, $i11, 196);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} vslice_dummy_var_99 := printk.ref.ref.i32.i32.i32.i32.i32(.str.27, .str.28, $i1, $i2, $i3, $i4, $i5);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __symbol_get: ref;

axiom __symbol_get == $sub.ref(0, 368621);

procedure __symbol_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __symbol_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p1 := external_alloc();
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const __request_module: ref;

axiom __request_module == $sub.ref(0, 369653);

procedure __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __request_module.i1.ref($i0: i1, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 479} {:cexpr "__request_module:arg:arg0"} boogie_si_record_i1($i0);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 1} true;
    call {:si_unique_call 480} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 481} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __symbol_put: ref;

axiom __symbol_put == $sub.ref(0, 370685);

procedure __symbol_put($p0: ref);
  free requires assertsPassed;



implementation __symbol_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 371717);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 1} true;
    call {:si_unique_call 482} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 483} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const mxl111sf_lgdt3305_frontend_attach: ref;

axiom mxl111sf_lgdt3305_frontend_attach == $sub.ref(0, 372749);

procedure mxl111sf_lgdt3305_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_lgdt3305_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i1;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $p132: ref;
  var $p130: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $i144: i32;
  var $i145: i64;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $p151: ref;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i32;
  var $i159: i8;
  var $p160: ref;
  var $i161: i32;
  var $i162: i64;
  var $p164: ref;
  var $p165: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i32;
  var $i171: i64;
  var $p173: ref;
  var $p174: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i64;
  var $p180: ref;
  var $p181: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i64;
  var $p189: ref;
  var $p190: ref;
  var $p192: ref;
  var $i65: i32;
  var $i193: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 485} {:cexpr "mxl111sf_lgdt3305_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2424);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2160);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7312));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.67);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.61);
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 490);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 487} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p10);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(24, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $i47 := usb_set_interface($p44, 0, $i46);
    call {:si_unique_call 490} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 2);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i56 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 493} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 494} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} $i66 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 497} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 498} {:cexpr "__ret___0"} boogie_si_record_i32($i68);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} $i77 := mxl1x1sf_set_device_mode($p13, $i76);
    call {:si_unique_call 501} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 502} {:cexpr "__ret___1"} boogie_si_record_i32($i79);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} $i86 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 505} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 506} {:cexpr "__ret___2"} boogie_si_record_i32($i88);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i95 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 509} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 510} {:cexpr "__ret___3"} boogie_si_record_i32($i97);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i97, 0);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i104 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 513} {:cexpr "ret"} boogie_si_record_i32($i104);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    call {:si_unique_call 514} {:cexpr "__ret___4"} boogie_si_record_i32($i106);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i106, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i115 := mxl111sf_gpio_mode_switch($p13, $i114);
    call {:si_unique_call 517} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    call {:si_unique_call 518} {:cexpr "__ret___5"} boogie_si_record_i32($i117);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i117, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p124 := __symbol_get(.str.69);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i127 := $ne.i64($i126, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i127 == 1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_116 := __request_module.i1.ref(1, .str.70);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p132 := __symbol_get(.str.69);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p130 := $p132;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p130);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i135 == 1);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} vslice_dummy_var_117 := printk.ref(.str.71);
    assume {:verifier.code 0} true;
    $p141 := $0.ref;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i1);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i144);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i145, 8));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p147, $p141);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i1);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i149 := $sext.i32.i64($i148);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i149, 8));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i193 := $i65;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $r := $i193;
    return;

  $bb83:
    assume $i154 == 1;
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $i158 := $add.i32($i157, 1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i8($i158);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, $i159);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i1);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i162, 8));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p165, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p169, $p168);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i1);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i171 := $sext.i32.i64($i170);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i171, 8));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($add.ref($p174, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p176, mxl111sf_adap_fe_init);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i178 := $sext.i32.i64($i177);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i178, 8));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p181 := $load.ref($M.0, $p180);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p181, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p185, $p184);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i1);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i186);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i187, 8));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($add.ref($p190, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p192, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i193 := 0;
    goto $bb85;

  $bb77:
    assume $i135 == 1;
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(512, 1));
    call {:si_unique_call 524} $p137 := devirtbounce.2($p130, hauppauge_lgdt3305_config, $p136);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i139 := $p2i.ref.i64($p138);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i140 := $eq.i64($i139, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p141 := $p137;
    goto $bb82;

  $bb79:
    assume $i140 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} __symbol_put(.str.69);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb74:
    assume $i127 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} $p128 := __symbol_get(.str.69);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p130 := $p128;
    goto $bb76;

  $bb71:
    assume $i123 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb18;

  $bb65:
    assume $i118 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i119 := $M.1;
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb67;

  $bb68:
    assume $i121 == 1;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} vslice_dummy_var_115 := printk.ref.ref.i32.i32(.str.4, .str.67, $i115, 527);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i65 := $i104;
    goto $bb18;

  $bb56:
    assume $i107 == 1;
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i108 := $M.1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 16);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb58;

  $bb59:
    assume $i110 == 1;
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} vslice_dummy_var_114 := printk.ref.ref.i32.i32(.str.4, .str.67, $i104, 524);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i65 := $i95;
    goto $bb18;

  $bb47:
    assume $i98 == 1;
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb49;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vslice_dummy_var_113 := printk.ref.ref.i32.i32(.str.4, .str.67, $i95, 520);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i65 := $i86;
    goto $bb18;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i90 := $M.1;
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb40;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vslice_dummy_var_112 := printk.ref.ref.i32.i32(.str.4, .str.67, $i86, 517);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i65 := $i77;
    goto $bb18;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb31;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_111 := printk.ref.ref.i32.i32(.str.4, .str.67, $i77, 513);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb18;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_110 := printk.ref.ref.i32.i32(.str.4, .str.67, $i66, 509);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $i65 := $i56;
    goto $bb18;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} vslice_dummy_var_109 := printk.ref.ref.i32.i32(.str.4, .str.67, $i56, 506);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} vslice_dummy_var_108 := printk.ref(.str.68);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 2);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} vslice_dummy_var_107 := __dynamic_pr_debug.ref.ref.ref($p2, .str.61, .str.67);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_attach_demod: ref;

axiom mxl111sf_attach_demod == $sub.ref(0, 373781);

procedure mxl111sf_attach_demod($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_attach_demod($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i1;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p113: ref;
  var $p111: ref;
  var $i115: i64;
  var $i116: i1;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $i124: i32;
  var $i125: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i64;
  var $p131: ref;
  var $p132: ref;
  var $i133: i64;
  var $i134: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p144: ref;
  var $p145: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $p153: ref;
  var $p154: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $p160: ref;
  var $p161: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i64;
  var $p169: ref;
  var $p170: ref;
  var $p172: ref;
  var $i65: i32;
  var $i173: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 528} {:cexpr "mxl111sf_attach_demod:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2424);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2160);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7312));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.85);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.61);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 808);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 530} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p10);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 2);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(24, 1));
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i47 := usb_set_interface($p44, 0, $i46);
    call {:si_unique_call 533} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 0);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 1);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} $i56 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 536} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 537} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $i66 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 540} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 541} {:cexpr "__ret___0"} boogie_si_record_i32($i68);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $i77 := mxl1x1sf_set_device_mode($p13, $i76);
    call {:si_unique_call 544} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 545} {:cexpr "__ret___1"} boogie_si_record_i32($i79);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $i86 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 548} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 549} {:cexpr "__ret___2"} boogie_si_record_i32($i88);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i95 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 552} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 553} {:cexpr "__ret___3"} boogie_si_record_i32($i97);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i97, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_125 := mxl111sf_init_port_expander($p13);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p105 := __symbol_get(.str.86);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_126 := __request_module.i1.ref(1, .str.87);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} $p113 := __symbol_get(.str.86);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p111 := $p113;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i115 := $p2i.ref.i64($p111);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i116 := $ne.i64($i115, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i116 == 1);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_127 := printk.ref(.str.88);
    assume {:verifier.code 0} true;
    $p121 := $0.ref;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i1);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i125, 8));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p127, $p121);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i129, 8));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i133 := $p2i.ref.i64($p132);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i173 := $i65;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $r := $i173;
    return;

  $bb65:
    assume $i134 == 1;
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i137, 1);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i32.i8($i138);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p140, $i139);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i141 := $zext.i8.i32($i1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i141);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i142, 8));
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p145, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p149, $p148);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i32($i1);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i151 := $sext.i32.i64($i150);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i151, 8));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p154, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p156, mxl111sf_adap_fe_init);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i1);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i158, 8));
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p161, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.0, $p163);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, $p164);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i166 := $zext.i8.i32($i1);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i167 := $sext.i32.i64($i166);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i167, 8));
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($add.ref($p170, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p172, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $i173 := 0;
    goto $bb67;

  $bb59:
    assume $i116 == 1;
    call {:si_unique_call 560} $p117 := devirtbounce.3($p111, $p13, mxl_demod_config);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i120 := $eq.i64($i119, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p121 := $p117;
    goto $bb64;

  $bb61:
    assume $i120 == 1;
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} __symbol_put(.str.86);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb56:
    assume $i108 == 1;
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p109 := __symbol_get(.str.86);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p111 := $p109;
    goto $bb58;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i65 := $i95;
    goto $bb18;

  $bb47:
    assume $i98 == 1;
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb49;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_124 := printk.ref.ref.i32.i32(.str.4, .str.85, $i95, 838);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i65 := $i86;
    goto $bb18;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i90 := $M.1;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb40;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} vslice_dummy_var_123 := printk.ref.ref.i32.i32(.str.4, .str.85, $i86, 835);
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i65 := $i77;
    goto $bb18;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb31;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_122 := printk.ref.ref.i32.i32(.str.4, .str.85, $i77, 831);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb18;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} vslice_dummy_var_121 := printk.ref.ref.i32.i32(.str.4, .str.85, $i66, 827);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i65 := $i56;
    goto $bb18;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} vslice_dummy_var_120 := printk.ref.ref.i32.i32(.str.4, .str.85, $i56, 824);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_119 := printk.ref(.str.68);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 1);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_118 := __dynamic_pr_debug.ref.ref.ref($p2, .str.61, .str.85);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2160_frontend_attach: ref;

axiom mxl111sf_lg2160_frontend_attach == $sub.ref(0, 374813);

procedure mxl111sf_lg2160_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_lg2160_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i144: i1;
  var $i146: i32;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p166: ref;
  var $p164: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i64;
  var $i174: i1;
  var $p175: ref;
  var $i178: i32;
  var $i179: i64;
  var $p181: ref;
  var $i182: i32;
  var $i183: i64;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $i190: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i8;
  var $p194: ref;
  var $i195: i32;
  var $i196: i64;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i64;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i64;
  var $p214: ref;
  var $p215: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $i220: i32;
  var $i221: i64;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i65: i32;
  var $i227: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 564} {:cexpr "mxl111sf_lg2160_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2424);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2160);
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7312));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.106);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.61);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 561);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 566} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p10);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(24, 1));
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i47 := usb_set_interface($p44, 0, $i46);
    call {:si_unique_call 569} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $i56 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 572} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 573} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i66 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 576} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 577} {:cexpr "__ret___0"} boogie_si_record_i32($i68);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i77 := mxl1x1sf_set_device_mode($p13, $i76);
    call {:si_unique_call 580} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 581} {:cexpr "__ret___1"} boogie_si_record_i32($i79);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i86 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 584} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 585} {:cexpr "__ret___2"} boogie_si_record_i32($i88);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i95 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 588} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 589} {:cexpr "__ret___3"} boogie_si_record_i32($i97);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i97, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i104 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 592} {:cexpr "ret"} boogie_si_record_i32($i104);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    call {:si_unique_call 593} {:cexpr "__ret___4"} boogie_si_record_i32($i106);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i106, 0);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $i115 := mxl111sf_gpio_mode_switch($p13, $i114);
    call {:si_unique_call 596} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    call {:si_unique_call 597} {:cexpr "__ret___5"} boogie_si_record_i32($i117);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i117, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i124 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 600} {:cexpr "___ret"} boogie_si_record_i32($i124);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    call {:si_unique_call 601} {:cexpr "__ret___7"} boogie_si_record_i32($i126);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i126, 0);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i149 := $i124;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    call {:si_unique_call 610} {:cexpr "__ret___8"} boogie_si_record_i32($i151);
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i151, 0);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} $p158 := __symbol_get(.str.90);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i161 == 1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vslice_dummy_var_143 := __request_module.i1.ref(1, .str.91);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p166 := __symbol_get(.str.90);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p164 := $p166;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p164);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i169 == 1);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vslice_dummy_var_144 := printk.ref(.str.92);
    assume {:verifier.code 0} true;
    $p175 := $0.ref;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i1);
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $i179 := $sext.i32.i64($i178);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i179, 8));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p181, $p175);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i183 := $sext.i32.i64($i182);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i183, 8));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i227 := $i65;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $r := $i227;
    return;

  $bb116:
    assume $i188 == 1;
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.0, $p189);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i32($i190);
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i191, 1);
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i193 := $trunc.i32.i8($i192);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p194, $i193);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i1);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i196, 8));
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($add.ref($p199, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p203, $p202);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i1);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i205 := $sext.i32.i64($i204);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i205, 8));
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p208, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p210, mxl111sf_adap_fe_init);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i1);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i212 := $sext.i32.i64($i211);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i212, 8));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.0, $p214);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($add.ref($p215, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.0, $p217);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p219, $p218);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i1);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $i221 := $sext.i32.i64($i220);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i221, 8));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p224, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p226, mxl111sf_adap_fe_sleep);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $i227 := 0;
    goto $bb118;

  $bb110:
    assume $i169 == 1;
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(512, 1));
    call {:si_unique_call 616} $p171 := devirtbounce.4($p164, hauppauge_lg2160_config, $p170);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p171);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p172);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i174 := $eq.i64($i173, 0);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p175 := $p171;
    goto $bb115;

  $bb112:
    assume $i174 == 1;
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} __symbol_put(.str.90);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb107:
    assume $i161 == 1;
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p162 := __symbol_get(.str.90);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p164 := $p162;
    goto $bb109;

  $bb104:
    assume $i157 == 1;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $i65 := $i149;
    goto $bb18;

  $bb98:
    assume $i152 == 1;
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i153 := $M.1;
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 16);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb100;

  $bb101:
    assume $i155 == 1;
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} vslice_dummy_var_142 := printk.ref.ref.i32.i32(.str.4, .str.106, $i149, 602);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb80:
    assume $i132 == 1;
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i133 := $M.1;
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i136 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 605} {:cexpr "___ret"} boogie_si_record_i32($i136);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    call {:si_unique_call 606} {:cexpr "__ret___6"} boogie_si_record_i32($i138);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i138, 0);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i144 == 1);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i146 := $M.1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i149 := $i136;
    goto $bb97;

  $bb94:
    assume $i147 == 1;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vslice_dummy_var_141 := printk.ref.ref(.str.49, .str.106);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i144 == 1;
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vslice_dummy_var_140 := printk.ref(.str.48);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb85:
    assume $i139 == 1;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 16);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb87;

  $bb88:
    assume $i142 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vslice_dummy_var_139 := printk.ref.ref.i32.i32(.str.4, .str.106, $i136, 601);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i134 == 1;
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_138 := printk.ref.ref(.str.47, .str.106);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb74:
    assume $i127 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i128 := $M.1;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 16);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb76;

  $bb77:
    assume $i130 == 1;
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} vslice_dummy_var_137 := printk.ref.ref.i32.i32(.str.4, .str.106, $i124, 601);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb71:
    assume $i123 == 1;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb18;

  $bb65:
    assume $i118 == 1;
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $i119 := $M.1;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb67;

  $bb68:
    assume $i121 == 1;
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} vslice_dummy_var_136 := printk.ref.ref.i32.i32(.str.4, .str.106, $i115, 598);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i65 := $i104;
    goto $bb18;

  $bb56:
    assume $i107 == 1;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i108 := $M.1;
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 16);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb58;

  $bb59:
    assume $i110 == 1;
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_135 := printk.ref.ref.i32.i32(.str.4, .str.106, $i104, 595);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i65 := $i95;
    goto $bb18;

  $bb47:
    assume $i98 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb49;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} vslice_dummy_var_134 := printk.ref.ref.i32.i32(.str.4, .str.106, $i95, 591);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i65 := $i86;
    goto $bb18;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i90 := $M.1;
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb40;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} vslice_dummy_var_133 := printk.ref.ref.i32.i32(.str.4, .str.106, $i86, 588);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i65 := $i77;
    goto $bb18;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb31;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_132 := printk.ref.ref.i32.i32(.str.4, .str.106, $i77, 584);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb18;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} vslice_dummy_var_131 := printk.ref.ref.i32.i32(.str.4, .str.106, $i66, 580);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i65 := $i56;
    goto $bb18;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} vslice_dummy_var_130 := printk.ref.ref.i32.i32(.str.4, .str.106, $i56, 577);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_129 := printk.ref(.str.68);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 2);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} vslice_dummy_var_128 := __dynamic_pr_debug.ref.ref.ref($p2, .str.61, .str.106);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_set_interface: ref;

axiom usb_set_interface == $sub.ref(0, 375845);

procedure usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_set_interface($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 619} {:cexpr "usb_set_interface:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 620} {:cexpr "usb_set_interface:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 621} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 622} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl1x1sf_soft_reset: ref;

axiom mxl1x1sf_soft_reset == $sub.ref(0, 376877);

procedure mxl1x1sf_soft_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl1x1sf_soft_reset($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i12: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i13: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $i4 := mxl111sf_write_reg($p0, $sub.i8(0, 1), 0);
    call {:si_unique_call 625} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    call {:si_unique_call 626} {:cexpr "__ret"} boogie_si_record_i32($i6);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i6, 0);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} $i14 := mxl111sf_write_reg($p0, 2, 1);
    call {:si_unique_call 629} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 630} {:cexpr "__ret___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb14:
    assume $i17 == 1;
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb16;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vslice_dummy_var_147 := printk.ref.ref.i32.i32(.str.4, .str.18, $i14, 126);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $i13 := $i4;
    goto $bb12;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i8 := $M.1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 16);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vslice_dummy_var_146 := printk.ref.ref.i32.i32(.str.4, .str.18, $i4, 123);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vslice_dummy_var_145 := printk.ref.ref(.str.16, .str.18);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_init_tuner_demod: ref;

axiom mxl111sf_init_tuner_demod == $sub.ref(0, 377909);

procedure mxl111sf_init_tuner_demod($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_init_tuner_demod($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $p21: ref;
  var $p23: ref;
  var $p25: ref;
  var $p27: ref;
  var $p29: ref;
  var $p31: ref;
  var $p33: ref;
  var $p35: ref;
  var $p37: ref;
  var $p39: ref;
  var $p41: ref;
  var $p43: ref;
  var $p45: ref;
  var $p47: ref;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p55: ref;
  var $p57: ref;
  var $p59: ref;
  var $p61: ref;
  var $p63: ref;
  var $p65: ref;
  var $p67: ref;
  var $p69: ref;
  var $p71: ref;
  var $p73: ref;
  var $p75: ref;
  var $p77: ref;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $p131: ref;
  var $i132: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $p1 := $alloc($mul.ref(63, $zext.i32.i64(1)));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 7);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $sub.i8(0, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 12);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(0, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 88);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(1, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(1, 3)), $mul.ref(2, 1));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $sub.i8(0, 99));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(0, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 9);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(1, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $sub.i8(0, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(2, 3)), $mul.ref(2, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, 0);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(0, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, 6);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(1, 1));
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, $sub.i8(0, 1));
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(3, 3)), $mul.ref(2, 1));
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 6);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(0, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, $sub.i8(0, 56));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(1, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $sub.i8(0, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(4, 3)), $mul.ref(2, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, 64);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(0, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $sub.i8(0, 115));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(1, 1));
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, 1);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(5, 3)), $mul.ref(2, 1));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 1);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(0, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 50);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(1, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $sub.i8(0, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(6, 3)), $mul.ref(2, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $sub.i8(0, 84));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(0, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 66);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(1, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $sub.i8(0, 1));
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(7, 3)), $mul.ref(2, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 67);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(0, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 116);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(1, 1));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $sub.i8(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(8, 3)), $mul.ref(2, 1));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $sub.i8(0, 60));
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(0, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, 113);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(1, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $sub.i8(0, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(9, 3)), $mul.ref(2, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $sub.i8(0, 26));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(0, 1));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $sub.i8(0, 125));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(1, 1));
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $sub.i8(0, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(10, 3)), $mul.ref(2, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, 100);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(0, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $sub.i8(0, 123));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(1, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, $sub.i8(0, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(11, 3)), $mul.ref(2, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, 100);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(0, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $sub.i8(0, 120));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(1, 1));
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $sub.i8(0, 1));
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(12, 3)), $mul.ref(2, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $sub.i8(0, 16));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(0, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 111);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(1, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, $sub.i8(0, 16));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(13, 3)), $mul.ref(2, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $sub.i8(0, 80));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(1, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $sub.i8(0, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(14, 3)), $mul.ref(2, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(0, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $sub.i8(0, 127));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(1, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $sub.i8(0, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(15, 3)), $mul.ref(2, 1));
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 17);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(0, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $sub.i8(0, 12));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(1, 1));
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, $sub.i8(0, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(16, 3)), $mul.ref(2, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 7);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(0, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $sub.i8(0, 44));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(1, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 31);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(17, 3)), $mul.ref(2, 1));
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 15);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(0, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, $sub.i8(0, 42));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(1, 1));
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, $sub.i8(0, 1));
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(18, 3)), $mul.ref(2, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 12);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(1, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, $sub.i8(0, 1));
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(19, 3)), $mul.ref(2, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 0);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(0, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(1, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 63)), $mul.ref(20, 3)), $mul.ref(2, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i128 := $M.1;
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i132 := mxl111sf_ctrl_program_regs($p0, $p131);
    call {:si_unique_call 635} {:cexpr "tmp"} boogie_si_record_i32($i132);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $r := $i132;
    return;

  $bb1:
    assume $i129 == 1;
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_148 := printk.ref.ref(.str.16, .str.17);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl1x1sf_set_device_mode: ref;

axiom mxl1x1sf_set_device_mode == $sub.ref(0, 378941);

procedure mxl1x1sf_set_device_mode($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr;



implementation mxl1x1sf_set_device_mode($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $p5: ref;
  var $i7: i1;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i1;
  var $p32: ref;
  var $i19: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "mxl1x1sf_set_device_mode:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i10 := mxl111sf_write_reg($p0, 3, $i9);
    call {:si_unique_call 639} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 640} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, 1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := 64;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $i23 := mxl111sf_write_reg_mask($p0, 125, 64, $i22);
    call {:si_unique_call 643} {:cexpr "ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i23, 0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 644} {:cexpr "__ret___0"} boogie_si_record_i32($i25);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(16, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i1);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i19 := $i23;
    goto $bb15;

  $bb20:
    assume $i26 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb22;

  $bb23:
    assume $i29 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vslice_dummy_var_151 := printk.ref.ref.i32.i32(.str.4, .str.22, $i23, 150);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb17:
    assume $i20 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb19;

  $bb13:
    assume $i18 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    $i19 := $i10;
    goto $bb15;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb9;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} vslice_dummy_var_150 := printk.ref.ref.i32.i32(.str.4, .str.22, $i10, 141);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i1, 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p5 := .str.20;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vslice_dummy_var_149 := printk.ref.ref.ref(.str.21, .str.22, $p5);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $p5 := .str.19;
    goto $bb5;
}



const mxl111sf_init_port_expander: ref;

axiom mxl111sf_init_port_expander == $sub.ref(0, 379973);

procedure mxl111sf_init_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.0, $M.24, $M.25, $M.26, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11;



implementation mxl111sf_init_port_expander($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i15: i32;
  var $i17: i32;
  var $i16: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i10, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vslice_dummy_var_154 := printk.ref.ref(.str.43, .str.44);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i15 := pca9534_init_port_expander($p0);
    call {:si_unique_call 649} {:cexpr "tmp"} boogie_si_record_i32($i15);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i10, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb13;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i17 := mxl111sf_hw_gpio_initialize($p0);
    call {:si_unique_call 651} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb17;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} vslice_dummy_var_153 := mxl111sf_probe_port_expander($p0);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} vslice_dummy_var_152 := printk.ref.ref(.str.16, .str.44);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_gpio_mode_switch: ref;

axiom mxl111sf_gpio_mode_switch == $sub.ref(0, 381005);

procedure mxl111sf_gpio_mode_switch($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.0, $M.24, $M.25, $M.26, $CurrAddr, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11;



implementation mxl111sf_gpio_mode_switch($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} {:cexpr "mxl111sf_gpio_mode_switch:arg:mode"} boogie_si_record_i32($i1);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} vslice_dummy_var_166 := mxl111sf_init_port_expander($p0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb7:
    assume $i6 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vslice_dummy_var_156 := mxl111sf_set_gpio($p0, 6, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_157 := mxl111sf_set_gpio($p0, 7, 0);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} msleep(50);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_158 := mxl111sf_set_gpio($p0, 5, 1);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} msleep(50);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_159 := mxl111sf_set_gpio($p0, 4, 1);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} msleep(50);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vslice_dummy_var_160 := mxl111sf_set_gpio($p0, 3, 1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb9;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} vslice_dummy_var_161 := mxl111sf_set_gpio($p0, 4, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} vslice_dummy_var_162 := mxl111sf_set_gpio($p0, 5, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} msleep(50);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_163 := mxl111sf_set_gpio($p0, 7, 1);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} msleep(50);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} vslice_dummy_var_164 := mxl111sf_set_gpio($p0, 6, 1);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} msleep(50);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} vslice_dummy_var_165 := mxl111sf_set_gpio($p0, 3, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_155 := printk.ref.ref.i32(.str.23, .str.45, $i1);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_adap_fe_init: ref;

axiom mxl111sf_adap_fe_init == $sub.ref(0, 382037);

procedure mxl111sf_adap_fe_init($p0: ref) returns ($r: i32);



const mxl111sf_adap_fe_sleep: ref;

axiom mxl111sf_adap_fe_sleep == $sub.ref(0, 383069);

procedure mxl111sf_adap_fe_sleep($p0: ref) returns ($r: i32);



const ldv_mutex_unlock_9: ref;

axiom ldv_mutex_unlock_9 == $sub.ref(0, 384101);

procedure ldv_mutex_unlock_9($p0: ref);



const ldv_mutex_unlock_fe_lock_of_mxl111sf_state: ref;

axiom ldv_mutex_unlock_fe_lock_of_mxl111sf_state == $sub.ref(0, 385133);

procedure ldv_mutex_unlock_fe_lock_of_mxl111sf_state($p0: ref);



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 386165);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 387197);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 672} __VERIFIER_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_mutex_lock_8: ref;

axiom ldv_mutex_lock_8 == $sub.ref(0, 388229);

procedure ldv_mutex_lock_8($p0: ref);



const ldv_mutex_lock_fe_lock_of_mxl111sf_state: ref;

axiom ldv_mutex_lock_fe_lock_of_mxl111sf_state == $sub.ref(0, 389261);

procedure ldv_mutex_lock_fe_lock_of_mxl111sf_state($p0: ref);



const mutex_lock: ref;

axiom mutex_lock == $sub.ref(0, 390293);

procedure mutex_lock($p0: ref);



const mxl111sf_set_gpio: ref;

axiom mxl111sf_set_gpio == $sub.ref(0, 391325);

procedure mxl111sf_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $CurrAddr, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11;



implementation mxl111sf_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i12: i32;
  var $i14: i32;
  var $i13: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "mxl111sf_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 674} {:cexpr "mxl111sf_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vslice_dummy_var_168 := printk.ref.ref(.str.43, .str.42);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i12 := pca9534_set_gpio($p0, $i1, $i2);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb8;

  $bb5:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i14 := mxl111sf_hw_set_gpio($p0, $i1, $i2);
    call {:si_unique_call 679} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i13 := $i14;
    goto $bb14;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} vslice_dummy_var_167 := printk.ref.ref.i32.i32(.str.41, .str.42, $i1, $i2);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pca9534_set_gpio: ref;

axiom pca9534_set_gpio == $sub.ref(0, 392357);

procedure pca9534_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr;



implementation pca9534_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p34: ref;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $p5 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    call {:si_unique_call 684} {:cexpr "pca9534_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 685} {:cexpr "pca9534_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p6, 1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p7, 0);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p4, 0);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p9, 32);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p11, 0);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p13, 1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p16, $p3);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p18, 32);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p20, 1);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p22, 1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p24, $p4);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p5);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} vslice_dummy_var_170 := i2c_transfer($p30, $p31, 2);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p34, 2);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.19, $p4);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p36, $i35);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.19, $p37);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32(1, $i1);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i42 := $sext.i8.i32($i41);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i43 := $xor.i32($i42, $sub.i32(0, 1));
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i39, $i43);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p46, $i45);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.19, $p47);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i49 := $sext.i8.i32($i48);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i2, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i51 := $zext.i1.i32($i50);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32($i51, $i1);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i54 := $sext.i8.i32($i53);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i49, $i54);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p57, $i56);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p5);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} vslice_dummy_var_171 := i2c_transfer($p60, $p61, 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} vslice_dummy_var_169 := printk.ref.ref.i32.i32(.str.41, .str.148, $i1, $i2);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_hw_set_gpio: ref;

axiom mxl111sf_hw_set_gpio == $sub.ref(0, 393389);

procedure mxl111sf_hw_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_hw_set_gpio($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "mxl111sf_hw_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 690} {:cexpr "mxl111sf_hw_set_gpio:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $i3 := mxl111sf_hw_do_set_gpio($p0, $i1, 1, $i2);
    call {:si_unique_call 692} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl111sf_hw_do_set_gpio: ref;

axiom mxl111sf_hw_do_set_gpio == $sub.ref(0, 394421);

procedure mxl111sf_hw_do_set_gpio($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_hw_do_set_gpio($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $i9: i8;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p4 := $alloc($mul.ref(3, $zext.i32.i64(1)));
    call {:si_unique_call 694} {:cexpr "mxl111sf_hw_do_set_gpio:arg:gpio"} boogie_si_record_i32($i1);
    call {:si_unique_call 695} {:cexpr "mxl111sf_hw_do_set_gpio:arg:direction"} boogie_si_record_i32($i2);
    call {:si_unique_call 696} {:cexpr "mxl111sf_hw_do_set_gpio:arg:val"} boogie_si_record_i32($i3);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i8($i1);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.24 := $store.i8($M.24, $p6, $i5);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i2);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $M.25 := $store.i8($M.25, $p8, $i7);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i3);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p10, $i9);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i14 := mxl111sf_config_gpio_pins($p0, $p4);
    call {:si_unique_call 699} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vslice_dummy_var_172 := printk.ref.ref.i32.i32.i32(.str.149, .str.150, $i1, $i2, $i3);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_config_gpio_pins: ref;

axiom mxl111sf_config_gpio_pins == $sub.ref(0, 395453);

procedure mxl111sf_config_gpio_pins($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.26, $CurrAddr;



implementation mxl111sf_config_gpio_pins($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i36: i1;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i84: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i8;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i104: i32;
  var $i105: i8;
  var $i106: i32;
  var $i107: i32;
  var $i108: i8;
  var $i109: i8;
  var $i110: i32;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i120: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i1;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $i139: i32;
  var $i140: i32;
  var $i141: i8;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $i151: i32;
  var $i152: i8;
  var $i153: i32;
  var $i154: i32;
  var $i155: i8;
  var $i156: i8;
  var $i157: i32;
  var $i158: i8;
  var $i159: i32;
  var $i160: i1;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $i167: i1;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i174: i8;
  var $i175: i32;
  var $i176: i8;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i8;
  var $i181: i32;
  var $p183: ref;
  var $i184: i8;
  var $i185: i32;
  var $i186: i8;
  var $p187: ref;
  var $i188: i32;
  var $i182: i32;
  var $i189: i1;
  var $i190: i32;
  var $i191: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i1;
  var $i37: i32;
  var $i168: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 16);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.24, $p13);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i15, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i15, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i168 := $sub.i32(0, 22);
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $r := $i168;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i121 := mxl111sf_read_reg($p0, $sub.i8(0, 126), $p2);
    call {:si_unique_call 703} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 0);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    call {:si_unique_call 704} {:cexpr "__ret___3"} boogie_si_record_i32($i123);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i123, 0);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.24, $p130);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i133 := $add.i32($i132, $sub.i32(0, 3));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i134 := $shl.i32(1, $i133);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i135 := $trunc.i32.i8($i134);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i136 := $sext.i8.i32($i135);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i137 := $xor.i32($i136, $sub.i32(0, 1));
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.3, $p2);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i139 := $sext.i8.i32($i138);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i140 := $and.i32($i137, $i139);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i32.i8($i140);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i141);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.25, $p142);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.24, $p145);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i148 := $add.i32($i147, $sub.i32(0, 3));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i149 := $shl.i32($i144, $i148);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i150 := $trunc.i32.i8($i149);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i151 := $sext.i8.i32($i150);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.3, $p2);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i153 := $sext.i8.i32($i152);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i151, $i153);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $i155 := $trunc.i32.i8($i154);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i155);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.3, $p2);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i158 := $trunc.i32.i8($i157);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i159 := mxl111sf_write_reg($p0, $sub.i8(0, 126), $i158);
    call {:si_unique_call 723} {:cexpr "ret"} boogie_si_record_i32($i159);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i160 := $slt.i32($i159, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i161 := $zext.i1.i32($i160);
    call {:si_unique_call 724} {:cexpr "__ret___4"} boogie_si_record_i32($i161);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i161, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i167} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.25, $p169);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 1);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i172 == 1);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.24, $p183);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i32($i184);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i32.i8($i185);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $i188 := mxl111sf_get_gpi_state($p0, $i186, $p187);
    call {:si_unique_call 729} {:cexpr "tmp___1"} boogie_si_record_i32($i188);
    assume {:verifier.code 0} true;
    $i182 := $i188;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i182, 0);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i190 := $zext.i1.i32($i189);
    call {:si_unique_call 730} {:cexpr "__ret___5"} boogie_si_record_i32($i190);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $i191 := $ne.i32($i190, 0);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i37 := $i182;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i168 := $i37;
    goto $bb95;

  $bb99:
    assume $i191 == 1;
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i192 := $M.1;
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i193 := $and.i32($i192, 16);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i193, 0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume !($i194 == 1);
    goto $bb101;

  $bb102:
    assume $i194 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vslice_dummy_var_180 := printk.ref.ref.i32.i32(.str.4, .str.151, $i182, 236);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb96:
    assume $i172 == 1;
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.24, $p173);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i32($i174);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i8($i175);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(2, 1));
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.26, $p177);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i181 := mxl111sf_set_gpo_state($p0, $i176, $i180);
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i32($i181);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i182 := $i181;
    goto $bb98;

  $bb91:
    assume $i167 == 1;
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i37 := $i159;
    goto $bb46;

  $bb85:
    assume $i162 == 1;
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i163 := $M.1;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i164 := $and.i32($i163, 16);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i165 := $ne.i32($i164, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb87;

  $bb88:
    assume $i165 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_179 := printk.ref.ref.i32.i32(.str.4, .str.151, $i159, 224);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i129 == 1;
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i37 := $i121;
    goto $bb46;

  $bb76:
    assume $i124 == 1;
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    $i125 := $M.1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb78;

  $bb79:
    assume $i127 == 1;
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} vslice_dummy_var_178 := printk.ref.ref.i32.i32(.str.4, .str.151, $i121, 219);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i15, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $i76 := mxl111sf_read_reg($p0, $sub.i8(0, 119), $p2);
    call {:si_unique_call 706} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i76, 0);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i78 := $zext.i1.i32($i77);
    call {:si_unique_call 707} {:cexpr "__ret___1"} boogie_si_record_i32($i78);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i78, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.24, $p85);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i88 := $shl.i32(1, $i87);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i8($i88);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i90 := $sext.i8.i32($i89);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i91 := $xor.i32($i90, $sub.i32(0, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.3, $p2);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i93 := $sext.i8.i32($i92);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i91, $i93);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i95);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.25, $p96);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.24, $p99);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32($i98, $i101);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i8($i102);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i104 := $sext.i8.i32($i103);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.3, $p2);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i106 := $sext.i8.i32($i105);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i104, $i106);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i108);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.3, $p2);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i112 := mxl111sf_write_reg($p0, $sub.i8(0, 119), $i111);
    call {:si_unique_call 718} {:cexpr "ret"} boogie_si_record_i32($i112);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i113 := $slt.i32($i112, 0);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i114 := $zext.i1.i32($i113);
    call {:si_unique_call 719} {:cexpr "__ret___2"} boogie_si_record_i32($i114);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i115} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i115 == 1);
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i114, 0);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb73:
    assume $i120 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i37 := $i112;
    goto $bb46;

  $bb67:
    assume $i115 == 1;
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i116 := $M.1;
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i117 := $and.i32($i116, 16);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb69;

  $bb70:
    assume $i118 == 1;
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} vslice_dummy_var_177 := printk.ref.ref.i32.i32(.str.4, .str.151, $i112, 212);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb64:
    assume $i84 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i37 := $i76;
    goto $bb46;

  $bb58:
    assume $i79 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i80 := $M.1;
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 16);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb60;

  $bb61:
    assume $i82 == 1;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} vslice_dummy_var_176 := printk.ref.ref.i32.i32(.str.4, .str.151, $i76, 207);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i25 == 1);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $i28 := mxl111sf_read_reg($p0, $sub.i8(0, 124), $p2);
    call {:si_unique_call 709} {:cexpr "ret"} boogie_si_record_i32($i28);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i30 := $zext.i1.i32($i29);
    call {:si_unique_call 710} {:cexpr "__ret"} boogie_si_record_i32($i30);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i30, 0);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.24, $p38);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 4);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32(1, $i41);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i44 := $sext.i8.i32($i43);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i45 := $xor.i32($i44, $sub.i32(0, 1));
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.3, $p2);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i45, $i47);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i49);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.25, $p50);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.24, $p53);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i56 := $add.i32($i55, 4);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i57 := $shl.i32($i52, $i56);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i59 := $sext.i8.i32($i58);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.3, $p2);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i61 := $sext.i8.i32($i60);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i59, $i61);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, $i63);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.3, $p2);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i67 := mxl111sf_write_reg($p0, $sub.i8(0, 124), $i66);
    call {:si_unique_call 713} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 0);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    call {:si_unique_call 714} {:cexpr "__ret___0"} boogie_si_record_i32($i69);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i69, 0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i75 == 1;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i37 := $i67;
    goto $bb46;

  $bb48:
    assume $i70 == 1;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i71 := $M.1;
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 16);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb50;

  $bb51:
    assume $i73 == 1;
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} vslice_dummy_var_175 := printk.ref.ref.i32.i32(.str.4, .str.151, $i67, 199);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i37 := $i28;
    goto $bb46;

  $bb38:
    assume $i31 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb40;

  $bb41:
    assume $i34 == 1;
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} vslice_dummy_var_174 := printk.ref.ref.i32.i32(.str.4, .str.151, $i28, 194);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb17;

  $bb36:
    assume $i27 == 1;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(0, 1));
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.24, $p6);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 3)), $mul.ref(1, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.25, $p9);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} vslice_dummy_var_173 := printk.ref.ref.i32.i32(.str.41, .str.151, $i8, $i11);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_set_gpo_state: ref;

axiom mxl111sf_set_gpo_state == $sub.ref(0, 396485);

procedure mxl111sf_set_gpo_state($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_set_gpo_state($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i22: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i8;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i43: i8;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i55: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i8;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $i94: i8;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i105: i1;
  var $i106: i32;
  var $i56: i32;
  var $i23: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 733} {:cexpr "mxl111sf_set_gpo_state:arg:pin"} boogie_si_record_i8($i1);
    call {:si_unique_call 734} {:cexpr "mxl111sf_set_gpo_state:arg:val"} boogie_si_record_i8($i2);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i1);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i57, 10);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i106 := $sub.i32(0, 22);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i56 := $i106;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i23 := $i56;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb29:
    assume $i58 == 1;
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i1);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i59, 0);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i65 := mxl111sf_read_reg($p0, 48, $p3);
    call {:si_unique_call 746} {:cexpr "ret"} boogie_si_record_i32($i65);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    call {:si_unique_call 747} {:cexpr "__ret___1"} boogie_si_record_i32($i67);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i67, 0);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i73} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i64);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, $sub.i32(0, 3));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i76 := $shl.i32(1, $i75);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i78 := $sext.i8.i32($i77);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i79 := $xor.i32($i78, $sub.i32(0, 1));
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i80 := $load.i8($M.3, $p3);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $i81 := $sext.i8.i32($i80);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i79, $i81);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i82);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i83);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i2);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i64);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, $sub.i32(0, 3));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i87 := $shl.i32($i84, $i86);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i8($i87);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i89 := $sext.i8.i32($i88);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.3, $p3);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i91 := $sext.i8.i32($i90);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i89, $i91);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i93);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.3, $p3);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i97 := mxl111sf_write_reg($p0, 48, $i96);
    call {:si_unique_call 750} {:cexpr "ret"} boogie_si_record_i32($i97);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i99 := $zext.i1.i32($i98);
    call {:si_unique_call 751} {:cexpr "__ret___2"} boogie_si_record_i32($i99);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i99, 0);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i106 := $i97;
    goto $bb52;

  $bb49:
    assume $i105 == 1;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i23 := $i97;
    goto $bb17;

  $bb43:
    assume $i100 == 1;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i101 := $M.1;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 16);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb45;

  $bb46:
    assume $i103 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} vslice_dummy_var_185 := printk.ref.ref.i32.i32(.str.4, .str.152, $i97, 123);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb40:
    assume $i73 == 1;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i23 := $i65;
    goto $bb17;

  $bb34:
    assume $i68 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $i69 := $M.1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i69, 16);
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb36;

  $bb37:
    assume $i71 == 1;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_184 := printk.ref.ref.i32.i32(.str.4, .str.152, $i65, 118);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb31:
    assume $i60 == 1;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i1);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, 7);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    call {:si_unique_call 744} {:cexpr "pin"} boogie_si_record_i8($i63);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb33;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 7);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i14 := mxl111sf_read_reg($p0, 25, $p3);
    call {:si_unique_call 737} {:cexpr "ret"} boogie_si_record_i32($i14);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    call {:si_unique_call 738} {:cexpr "__ret"} boogie_si_record_i32($i16);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i16, 0);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, $sub.i32(0, 1));
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, $i25);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i8($i26);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i28 := $sext.i8.i32($i27);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i29 := $xor.i32($i28, $sub.i32(0, 1));
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.3, $p3);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i31 := $sext.i8.i32($i30);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i29, $i31);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i33);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i36 := $add.i32($i35, $sub.i32(0, 1));
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i37 := $shl.i32($i34, $i36);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $i39 := $sext.i8.i32($i38);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.3, $p3);
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i41 := $sext.i8.i32($i40);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i39, $i41);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p3, $i43);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.3, $p3);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i47 := mxl111sf_write_reg($p0, 25, $i46);
    call {:si_unique_call 741} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    call {:si_unique_call 742} {:cexpr "__ret___0"} boogie_si_record_i32($i49);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i49, 0);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i56 := $i47;
    goto $bb28;

  $bb25:
    assume $i55 == 1;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i23 := $i47;
    goto $bb17;

  $bb19:
    assume $i50 == 1;
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $i51 := $M.1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 16);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb21;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_183 := printk.ref.ref.i32.i32(.str.4, .str.152, $i47, 112);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i22 == 1;
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i23 := $i14;
    goto $bb17;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i18 := $M.1;
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 16);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb11;

  $bb12:
    assume $i20 == 1;
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} vslice_dummy_var_182 := printk.ref.ref.i32.i32(.str.4, .str.152, $i14, 107);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i2);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} vslice_dummy_var_181 := printk.ref.ref.i32.i32(.str.41, .str.152, $i7, $i8);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_gpi_state: ref;

axiom mxl111sf_get_gpi_state == $sub.ref(0, 397517);

procedure mxl111sf_get_gpi_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.26, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_get_gpi_state($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i1;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i1;
  var $i49: i1;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i66: i1;
  var $i67: i8;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i40: i32;
  var $i30: i32;
  var $i76: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $p3 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 754} {:cexpr "mxl111sf_get_gpi_state:arg:pin"} boogie_si_record_i8($i1);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i4 := $M.1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p2, 0);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i76 := $sub.i32(0, 22);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $r := $i76;
    return;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i58 := mxl111sf_read_reg($p0, 34, $p3);
    call {:si_unique_call 757} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    call {:si_unique_call 758} {:cexpr "__ret___1"} boogie_si_record_i32($i60);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i60, 0);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.3, $p3);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i1);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i69, $sub.i32(0, 3));
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i71 := $ashr.i32($i68, $i70);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i71);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 1);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p2, $i75);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i40 := $i58;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i30 := $i40;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $i76 := $i30;
    goto $bb68;

  $bb64:
    assume $i66 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i30 := $i58;
    goto $bb46;

  $bb58:
    assume $i61 == 1;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i62 := $M.1;
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, 16);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb61, $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb60;

  $bb61:
    assume $i64 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} vslice_dummy_var_189 := printk.ref.ref.i32.i32(.str.4, .str.153, $i58, 163);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} $i41 := mxl111sf_read_reg($p0, 47, $p3);
    call {:si_unique_call 760} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, 0);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    call {:si_unique_call 761} {:cexpr "__ret___0"} boogie_si_record_i32($i43);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i43, 0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.3, $p3);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i1);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i53 := $ashr.i32($i51, $i52);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 1);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p2, $i57);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i40 := $i41;
    goto $bb48;

  $bb55:
    assume $i49 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i30 := $i41;
    goto $bb46;

  $bb49:
    assume $i44 == 1;
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $i45 := $M.1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 16);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 0);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i47 == 1);
    goto $bb51;

  $bb52:
    assume $i47 == 1;
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} vslice_dummy_var_188 := printk.ref.ref.i32.i32(.str.4, .str.153, $i41, 155);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i18 == 1);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i21 := mxl111sf_read_reg($p0, 35, $p3);
    call {:si_unique_call 763} {:cexpr "ret"} boogie_si_record_i32($i21);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 0);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    call {:si_unique_call 764} {:cexpr "__ret"} boogie_si_record_i32($i23);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i23, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.3, $p3);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 4);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i32, $i34);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i8($i38);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.26 := $store.i8($M.26, $p2, $i39);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i40 := $i21;
    goto $bb48;

  $bb44:
    assume $i29 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i30 := $i21;
    goto $bb46;

  $bb38:
    assume $i24 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i25 := $M.1;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 16);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb40;

  $bb41:
    assume $i27 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_187 := printk.ref.ref.i32.i32(.str.4, .str.153, $i21, 146);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb25:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb33:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb17;

  $bb36:
    assume $i20 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} vslice_dummy_var_186 := printk.ref.ref.i32(.str.29, .str.153, $i6);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_transfer: ref;

axiom i2c_transfer == $sub.ref(0, 398549);

procedure i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i2c_transfer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 768} {:cexpr "i2c_transfer:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 1} true;
    call {:si_unique_call 769} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 770} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const mxl111sf_probe_port_expander: ref;

axiom mxl111sf_probe_port_expander == $sub.ref(0, 399581);

procedure mxl111sf_probe_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $M.0, $CurrAddr;



implementation mxl111sf_probe_port_expander($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p7: ref;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p15: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p24: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p1, 1);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p2, 0);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p5, 0);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p7, 0);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p9, 1);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p11, $p1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p13, 0);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(2, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p15, 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(4, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p17, 1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(8, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p19, $p2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p24, 56);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p26, 56);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p3);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i31 := i2c_transfer($p29, $p30, 2);
    call {:si_unique_call 776} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 2);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p46, 32);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(1, 16)), $mul.ref(0, 1));
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p48, 32);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p3);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i53 := i2c_transfer($p51, $p52, 2);
    call {:si_unique_call 779} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 2);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p67, $sub.i8(0, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p68, 0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i69 := $M.1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb17:
    assume $i70 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} vslice_dummy_var_193 := printk.ref.ref(.str.156, .str.154);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.20, $p56);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i16.i8($i57);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 1);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i61 := $M.1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} vslice_dummy_var_192 := printk.ref.ref.i32(.str.155, .str.154, $i65);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.20, $p34);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i16.i8($i35);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(8, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i39 := $M.1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(12, 1));
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vslice_dummy_var_191 := printk.ref.ref.i32(.str.155, .str.154, $i43);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vslice_dummy_var_190 := printk.ref.ref(.str.16, .str.154);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pca9534_init_port_expander: ref;

axiom pca9534_init_port_expander == $sub.ref(0, 400613);

procedure pca9534_init_port_expander($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr;



implementation pca9534_init_port_expander($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p3, 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p4, 7);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.20 := $store.i16($M.20, $p5, 32);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $M.21 := $store.i16($M.21, $p6, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.22 := $store.i16($M.22, $p7, 2);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p9, $p1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vslice_dummy_var_195 := i2c_transfer($p15, $p2, 1);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p17, 3);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $M.19 := $store.i8($M.19, $p18, 0);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 7312)), $mul.ref(512, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_196 := i2c_transfer($p21, $p2, 1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vslice_dummy_var_194 := printk.ref.ref(.str.16, .str.157);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_hw_gpio_initialize: ref;

axiom mxl111sf_hw_gpio_initialize == $sub.ref(0, 401645);

procedure mxl111sf_hw_gpio_initialize($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.26, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11;



implementation mxl111sf_hw_gpio_initialize($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i4 := mxl111sf_hw_set_gpio($p0, 3, 0);
    call {:si_unique_call 789} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i10 := $i4;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i12 := mxl111sf_hw_set_gpio($p0, 4, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $i18 := mxl111sf_hw_set_gpio($p0, 5, 0);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i10 := $i18;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} $i24 := mxl111sf_hw_set_gpio($p0, 6, 0);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i10 := $i24;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i30 := mxl111sf_hw_set_gpio($p0, 7, 0);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i10 := $i30;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i11 := $i30;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb54:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb15;

  $bb48:
    assume $i31 == 1;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i32 := $M.1;
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 16);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb50;

  $bb51:
    assume $i34 == 1;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} vslice_dummy_var_202 := printk.ref.ref.i32.i32(.str.4, .str.158, $i30, 638);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb13;

  $bb38:
    assume $i25 == 1;
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb40;

  $bb41:
    assume $i28 == 1;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} vslice_dummy_var_201 := printk.ref.ref.i32.i32(.str.4, .str.158, $i24, 638);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb13;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb30;

  $bb31:
    assume $i22 == 1;
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} vslice_dummy_var_200 := printk.ref.ref.i32.i32(.str.4, .str.158, $i18, 638);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb13;

  $bb18:
    assume $i13 == 1;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb20;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} vslice_dummy_var_199 := printk.ref.ref.i32.i32(.str.4, .str.158, $i12, 638);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb13;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 16);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb9:
    assume $i8 == 1;
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} vslice_dummy_var_198 := printk.ref.ref.i32.i32(.str.4, .str.158, $i4, 638);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} vslice_dummy_var_197 := printk.ref.ref(.str.16, .str.158);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_atsc: ref;

axiom mxl111sf_frontend_attach_atsc == $sub.ref(0, 402677);

procedure mxl111sf_frontend_attach_atsc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_atsc($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i1 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 800} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_atsc: ref;

axiom mxl111sf_get_stream_config_atsc == $sub.ref(0, 403709);

procedure mxl111sf_get_stream_config_atsc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_atsc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.75);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1142);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 803} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i23 := $M.17;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} vslice_dummy_var_203 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.75, $i21);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mh: ref;

axiom mxl111sf_frontend_attach_mh == $sub.ref(0, 404741);

procedure mxl111sf_frontend_attach_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_mh($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i1 := mxl111sf_lg2160_frontend_attach($p0, 0);
    call {:si_unique_call 808} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_mh: ref;

axiom mxl111sf_get_stream_config_mh == $sub.ref(0, 405773);

procedure mxl111sf_get_stream_config_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_204: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.120);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1183);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 811} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $i23 := $M.17;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} vslice_dummy_var_204 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.120, $i21);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_dvbt: ref;

axiom mxl111sf_frontend_attach_dvbt == $sub.ref(0, 406805);

procedure mxl111sf_frontend_attach_dvbt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_dvbt($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i1 := mxl111sf_attach_demod($p0, 0);
    call {:si_unique_call 816} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const mxl111sf_get_stream_config_dvbt: ref;

axiom mxl111sf_get_stream_config_dvbt == $sub.ref(0, 407837);

procedure mxl111sf_get_stream_config_dvbt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_dvbt($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i23: i32;
  var $i24: i1;
  var vslice_dummy_var_205: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.95);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1101);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 819} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $i23 := $M.17;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_205 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.95, $i21);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mercury: ref;

axiom mxl111sf_frontend_attach_mercury == $sub.ref(0, 408869);

procedure mxl111sf_frontend_attach_mercury($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $CurrAddr, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_mercury($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i21: i32;
  var vslice_dummy_var_206: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.83);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.84);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1036);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 825} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i19 := mxl111sf_lgdt3305_frontend_attach($p0, 0);
    call {:si_unique_call 828} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i22 := mxl111sf_attach_demod($p0, 1);
    call {:si_unique_call 830} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i24 := mxl111sf_lg2161_ep6_frontend_attach($p0, 2);
    call {:si_unique_call 832} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $i21 := $i24;
    goto $bb6;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i21 := $i22;
    goto $bb6;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vslice_dummy_var_206 := __dynamic_pr_debug.ref.ref.ref($p1, .str.84, .str.83);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_streaming_ctrl_mercury: ref;

axiom mxl111sf_streaming_ctrl_mercury == $sub.ref(0, 409901);

procedure mxl111sf_streaming_ctrl_mercury($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11;



implementation mxl111sf_streaming_ctrl_mercury($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i26: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 834} {:cexpr "mxl111sf_streaming_ctrl_mercury:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.81);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.82);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1326);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 0);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 836} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb14:
    assume $i39 == 1;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i40 := $M.27;
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 0);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb16;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $i42 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 845} {:cexpr "tmp___3"} boogie_si_record_i32($i42);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i26 := $i42;
    goto $bb6;

  $bb9:
    assume $i33 == 1;
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i34 := $M.27;
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $i36 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 843} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i26 := $i36;
    goto $bb6;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i30 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 841} {:cexpr "tmp___1"} boogie_si_record_i32($i30);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i26 := $i30;
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i25 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 839} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vslice_dummy_var_207 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.82, .str.81, $i20, $i1);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_stream_config_mercury: ref;

axiom mxl111sf_get_stream_config_mercury == $sub.ref(0, 410933);

procedure mxl111sf_get_stream_config_mercury($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_mercury($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i1;
  var vslice_dummy_var_208: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.93);
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1294);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 848} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i30 == 1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 2);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb25:
    assume $i42 == 1;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i43 := $M.27;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb28:
    assume $i44 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i45 := $M.17;
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i46 == 1);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i46 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb16:
    assume $i35 == 1;
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i36 := $M.27;
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i38 := $M.17;
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i39 == 1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i39 == 1;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i31 := $M.17;
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i32 == 1);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i26 := $M.17;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} vslice_dummy_var_208 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.93, $i21);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2161_ep6_frontend_attach: ref;

axiom mxl111sf_lg2161_ep6_frontend_attach == $sub.ref(0, 411965);

procedure mxl111sf_lg2161_ep6_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.25, $M.26;



implementation mxl111sf_lg2161_ep6_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i144: i1;
  var $i146: i32;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p166: ref;
  var $p164: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $i198: i8;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i64;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i64;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $i65: i32;
  var $i232: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 859} {:cexpr "mxl111sf_lg2161_ep6_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2424);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2160);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7312));
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.89);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.61);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 733);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 861} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p10);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(24, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i47 := usb_set_interface($p44, 0, $i46);
    call {:si_unique_call 864} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i56 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 867} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 868} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i66 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 871} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 872} {:cexpr "__ret___0"} boogie_si_record_i32($i68);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i77 := mxl1x1sf_set_device_mode($p13, $i76);
    call {:si_unique_call 875} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 876} {:cexpr "__ret___1"} boogie_si_record_i32($i79);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i86 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 879} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 880} {:cexpr "__ret___2"} boogie_si_record_i32($i88);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i95 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 883} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 884} {:cexpr "__ret___3"} boogie_si_record_i32($i97);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i97, 0);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $i104 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 887} {:cexpr "ret"} boogie_si_record_i32($i104);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    call {:si_unique_call 888} {:cexpr "__ret___4"} boogie_si_record_i32($i106);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i106, 0);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i115 := mxl111sf_gpio_mode_switch($p13, $i114);
    call {:si_unique_call 891} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    call {:si_unique_call 892} {:cexpr "__ret___5"} boogie_si_record_i32($i117);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i117, 0);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i124 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 895} {:cexpr "___ret"} boogie_si_record_i32($i124);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    call {:si_unique_call 896} {:cexpr "__ret___7"} boogie_si_record_i32($i126);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i126, 0);
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i149 := $i124;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    call {:si_unique_call 905} {:cexpr "__ret___8"} boogie_si_record_i32($i151);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i151, 0);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p158 := __symbol_get(.str.90);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i161 == 1);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_224 := __request_module.i1.ref(1, .str.91);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p166 := __symbol_get(.str.90);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p164 := $p166;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p164);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i169 == 1);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_225 := printk.ref(.str.92);
    assume {:verifier.code 0} true;
    $p180 := $0.ref;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i1);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i183);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i184, 8));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, $p180);
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i1);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i188, 8));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i232 := $i65;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $r := $i232;
    return;

  $bb119:
    assume $i193 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i196, 1);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i8($i197);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p199, $i198);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i1);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i201, 8));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p204, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $p207);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i1);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i209);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i210, 8));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p213, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p215, mxl111sf_adap_fe_init);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i217, 8));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p220, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p223);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i1);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i225);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i226, 8));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p229, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p231, mxl111sf_adap_fe_sleep);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i232 := 0;
    goto $bb121;

  $bb110:
    assume $i169 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 3);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $p174 := hauppauge_lg2161_1019_ep6_config;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(512, 1));
    call {:si_unique_call 912} $p176 := devirtbounce.4($p164, $p174, $p175);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i179 := $eq.i64($i178, 0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p180 := $p176;
    goto $bb118;

  $bb115:
    assume $i179 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} __symbol_put(.str.90);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i173 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p174 := hauppauge_lg2161_1040_ep6_config;
    goto $bb114;

  $bb107:
    assume $i161 == 1;
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p162 := __symbol_get(.str.90);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $p164 := $p162;
    goto $bb109;

  $bb104:
    assume $i157 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i65 := $i149;
    goto $bb18;

  $bb98:
    assume $i152 == 1;
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i153 := $M.1;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 16);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb100;

  $bb101:
    assume $i155 == 1;
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} vslice_dummy_var_223 := printk.ref.ref.i32.i32(.str.4, .str.89, $i149, 774);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb80:
    assume $i132 == 1;
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i133 := $M.1;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i136 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 900} {:cexpr "___ret"} boogie_si_record_i32($i136);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    call {:si_unique_call 901} {:cexpr "__ret___6"} boogie_si_record_i32($i138);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i138, 0);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i144 == 1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i146 := $M.1;
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i149 := $i136;
    goto $bb97;

  $bb94:
    assume $i147 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} vslice_dummy_var_222 := printk.ref.ref(.str.49, .str.89);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i144 == 1;
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} vslice_dummy_var_221 := printk.ref(.str.48);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb85:
    assume $i139 == 1;
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 16);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb87;

  $bb88:
    assume $i142 == 1;
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_220 := printk.ref.ref.i32.i32(.str.4, .str.89, $i136, 773);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i134 == 1;
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_219 := printk.ref.ref(.str.47, .str.89);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb74:
    assume $i127 == 1;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i128 := $M.1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 16);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb76;

  $bb77:
    assume $i130 == 1;
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} vslice_dummy_var_218 := printk.ref.ref.i32.i32(.str.4, .str.89, $i124, 773);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb71:
    assume $i123 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb18;

  $bb65:
    assume $i118 == 1;
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i119 := $M.1;
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb67;

  $bb68:
    assume $i121 == 1;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} vslice_dummy_var_217 := printk.ref.ref.i32.i32(.str.4, .str.89, $i115, 770);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i65 := $i104;
    goto $bb18;

  $bb56:
    assume $i107 == 1;
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i108 := $M.1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 16);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb58;

  $bb59:
    assume $i110 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_216 := printk.ref.ref.i32.i32(.str.4, .str.89, $i104, 767);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i65 := $i95;
    goto $bb18;

  $bb47:
    assume $i98 == 1;
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb49;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_215 := printk.ref.ref.i32.i32(.str.4, .str.89, $i95, 763);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i65 := $i86;
    goto $bb18;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i90 := $M.1;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb40;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} vslice_dummy_var_214 := printk.ref.ref.i32.i32(.str.4, .str.89, $i86, 760);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i65 := $i77;
    goto $bb18;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb31;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} vslice_dummy_var_213 := printk.ref.ref.i32.i32(.str.4, .str.89, $i77, 756);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb18;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_212 := printk.ref.ref.i32.i32(.str.4, .str.89, $i66, 752);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i65 := $i56;
    goto $bb18;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} vslice_dummy_var_211 := printk.ref.ref.i32.i32(.str.4, .str.89, $i56, 749);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} vslice_dummy_var_210 := printk.ref(.str.68);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 2);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vslice_dummy_var_209 := __dynamic_pr_debug.ref.ref.ref($p2, .str.61, .str.89);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_frontend_attach_mercury_mh: ref;

axiom mxl111sf_frontend_attach_mercury_mh == $sub.ref(0, 412997);

procedure mxl111sf_frontend_attach_mercury_mh($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.25, $M.26;



implementation mxl111sf_frontend_attach_mercury_mh($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i19: i32;
  var $i20: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i26: i32;
  var $i25: i32;
  var $i21: i32;
  var vslice_dummy_var_226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p2, .str);
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p3, .str.101);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p4, .str.2);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p5, .str.84);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.8, $p7);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1056);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p7, $i10);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p11, 0);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.9, $p12);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 916} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i19 := mxl111sf_attach_demod($p0, 0);
    call {:si_unique_call 919} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i22 := $M.27;
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i26 := mxl111sf_lg2161_ep6_frontend_attach($p0, 1);
    call {:si_unique_call 923} {:cexpr "ret"} boogie_si_record_i32($i26);
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i21 := $i25;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i24 := mxl111sf_lg2161_frontend_attach($p0, 1);
    call {:si_unique_call 921} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i25 := $i24;
    goto $bb10;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i21 := $i19;
    goto $bb6;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vslice_dummy_var_226 := __dynamic_pr_debug.ref.ref.ref($p1, .str.84, .str.101);
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_streaming_ctrl_mercury_mh: ref;

axiom mxl111sf_streaming_ctrl_mercury_mh == $sub.ref(0, 414029);

procedure mxl111sf_streaming_ctrl_mercury_mh($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $CurrAddr, $M.11;



implementation mxl111sf_streaming_ctrl_mercury_mh($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i26: i32;
  var vslice_dummy_var_227: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 925} {:cexpr "mxl111sf_streaming_ctrl_mercury_mh:arg:onoff"} boogie_si_record_i32($i1);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p3, .str);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p4, .str.100);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p5, .str.2);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p6, .str.82);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.8, $p8);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 1398);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p8, $i11);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p12, 0);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.9, $p13);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 927} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 1);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 1);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i36 := $M.27;
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb14;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} $i38 := mxl111sf_ep6_streaming_ctrl($p0, $i1);
    call {:si_unique_call 934} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i26 := $i38;
    goto $bb6;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $i30 := $M.27;
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb9;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i32 := mxl111sf_ep5_streaming_ctrl($p0, $i1);
    call {:si_unique_call 932} {:cexpr "tmp___1"} boogie_si_record_i32($i32);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i26 := $i32;
    goto $bb6;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i25 := mxl111sf_ep4_streaming_ctrl($p0, $i1);
    call {:si_unique_call 930} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_227 := __dynamic_pr_debug.ref.ref.ref.i32.i32($p2, .str.82, .str.100, $i20, $i1);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_get_stream_config_mercury_mh: ref;

axiom mxl111sf_get_stream_config_mercury_mh == $sub.ref(0, 415061);

procedure mxl111sf_get_stream_config_mercury_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $CurrAddr;



implementation mxl111sf_get_stream_config_mercury_mh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var vslice_dummy_var_228: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p4, .str);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p5, .str.103);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str.2);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.76);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.8, $p9);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 1372);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p9, $i12);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p13, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.9, $p14);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 937} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 1);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i38 := $M.27;
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb21;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i40 := $M.17;
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i41 == 1);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} mxl111sf_stream_config_bulk($p2, 6);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i41 == 1;
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} mxl111sf_stream_config_isoc($p2, 6, 24, 3072);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb10:
    assume $i30 == 1;
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i31 := $M.27;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb12;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 2);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i33 := $M.17;
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} mxl111sf_stream_config_bulk($p2, 5);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} mxl111sf_stream_config_isoc($p2, 5, 96, 200);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i26 := $M.17;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} mxl111sf_stream_config_bulk($p2, 4);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} mxl111sf_stream_config_isoc($p2, 4, 96, 564);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 992)), $mul.ref(984, 1));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vslice_dummy_var_228 := __dynamic_pr_debug.ref.ref.ref.i32($p3, .str.76, .str.103, $i21);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_lg2161_frontend_attach: ref;

axiom mxl111sf_lg2161_frontend_attach == $sub.ref(0, 416093);

procedure mxl111sf_lg2161_frontend_attach($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $CurrAddr, $M.24, $M.25, $M.26;



implementation mxl111sf_lg2161_frontend_attach($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i64: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i1;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i110: i1;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i1;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i1;
  var $i136: i32;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i144: i1;
  var $i146: i32;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p166: ref;
  var $p164: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $i183: i32;
  var $i184: i64;
  var $p186: ref;
  var $i187: i32;
  var $i188: i64;
  var $p190: ref;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $i195: i8;
  var $i196: i32;
  var $i197: i32;
  var $i198: i8;
  var $p199: ref;
  var $i200: i32;
  var $i201: i64;
  var $p203: ref;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i64;
  var $p212: ref;
  var $p213: ref;
  var $p215: ref;
  var $i216: i32;
  var $i217: i64;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $i225: i32;
  var $i226: i64;
  var $p228: ref;
  var $p229: ref;
  var $p231: ref;
  var $i65: i32;
  var $i232: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 946} {:cexpr "mxl111sf_lg2161_frontend_attach:arg:fe_id"} boogie_si_record_i8($i1);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(320, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i64($i5);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i6, 2424);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i8 := $add.i64($i7, 2160);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, $i8);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p3, $mul.ref($i9, 7312));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(7304, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(280, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i1);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p19, .str.102);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p20, .str.2);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p21, .str.61);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.8, $p23);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 646);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $M.8 := $store.i24($M.8, $p23, $i26);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.9 := $store.i8($M.9, $p27, 0);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.9, $p28);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 948} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p10);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i36 := $M.17;
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i37 == 1);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(24, 1));
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(20, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i47 := usb_set_interface($p44, 0, $i46);
    call {:si_unique_call 951} {:cexpr "tmp___0"} boogie_si_record_i32($i47);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, 1);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(4, 1));
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(12, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 1);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i56 := mxl1x1sf_soft_reset($p13);
    call {:si_unique_call 954} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 0);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i58 := $zext.i1.i32($i57);
    call {:si_unique_call 955} {:cexpr "__ret"} boogie_si_record_i32($i58);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i58, 0);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i66 := mxl111sf_init_tuner_demod($p13);
    call {:si_unique_call 958} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 959} {:cexpr "__ret___0"} boogie_si_record_i32($i68);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(8, 1));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i77 := mxl1x1sf_set_device_mode($p13, $i76);
    call {:si_unique_call 962} {:cexpr "ret"} boogie_si_record_i32($i77);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i32($i78);
    call {:si_unique_call 963} {:cexpr "__ret___1"} boogie_si_record_i32($i79);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i79, 0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i86 := mxl111sf_enable_usb_output($p13);
    call {:si_unique_call 966} {:cexpr "ret"} boogie_si_record_i32($i86);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i86, 0);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    call {:si_unique_call 967} {:cexpr "__ret___2"} boogie_si_record_i32($i88);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i88, 0);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i95 := mxl1x1sf_top_master_ctrl($p13, 1);
    call {:si_unique_call 970} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, 0);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i32($i96);
    call {:si_unique_call 971} {:cexpr "__ret___3"} boogie_si_record_i32($i97);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i97, 0);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i104 := mxl111sf_init_port_expander($p13);
    call {:si_unique_call 974} {:cexpr "ret"} boogie_si_record_i32($i104);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    call {:si_unique_call 975} {:cexpr "__ret___4"} boogie_si_record_i32($i106);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i106, 0);
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(24, 1));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i115 := mxl111sf_gpio_mode_switch($p13, $i114);
    call {:si_unique_call 978} {:cexpr "ret"} boogie_si_record_i32($i115);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i116);
    call {:si_unique_call 979} {:cexpr "__ret___5"} boogie_si_record_i32($i117);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i117, 0);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i124 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 982} {:cexpr "___ret"} boogie_si_record_i32($i124);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i124, 0);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    call {:si_unique_call 983} {:cexpr "__ret___7"} boogie_si_record_i32($i126);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i126, 0);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    $i149 := $i124;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    call {:si_unique_call 992} {:cexpr "__ret___8"} boogie_si_record_i32($i151);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i157 := $ne.i32($i151, 0);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p158 := __symbol_get(.str.90);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i161 == 1);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_244 := __request_module.i1.ref(1, .str.91);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p166 := __symbol_get(.str.90);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p164 := $p166;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p164);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i169 := $ne.i64($i168, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i169 == 1);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} vslice_dummy_var_245 := printk.ref(.str.92);
    assume {:verifier.code 0} true;
    $p180 := $0.ref;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i1);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i184 := $sext.i32.i64($i183);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i184, 8));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p186, $p180);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i187 := $zext.i8.i32($i1);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i188 := $sext.i32.i64($i187);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i188, 8));
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i193} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i232 := $i65;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $r := $i232;
    return;

  $bb119:
    assume $i193 == 1;
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.0, $p194);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i32($i195);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i196, 1);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i32.i8($i197);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(272, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p199, $i198);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i32($i1);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i201, 8));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p204, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(16, 1));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p208, $p207);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i209 := $zext.i8.i32($i1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i210 := $sext.i32.i64($i209);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i210, 8));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p213 := $load.ref($M.0, $p212);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($add.ref($p213, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(192, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p215, mxl111sf_adap_fe_init);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i216 := $zext.i8.i32($i1);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i217 := $sext.i32.i64($i216);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i217, 8));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p220, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $p223 := $load.ref($M.0, $p222);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(24, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p224, $p223);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i1);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i226 := $sext.i32.i64($i225);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref($i226, 8));
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p229 := $load.ref($M.0, $p228);
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($add.ref($p229, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(200, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p231, mxl111sf_adap_fe_sleep);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i232 := 0;
    goto $bb121;

  $bb110:
    assume $i169 == 1;
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p13, $mul.ref(0, 376)), $mul.ref(15, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 3);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    $p174 := hauppauge_lg2161_1019_config;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p3, $mul.ref($i9, 7312)), $mul.ref(512, 1));
    call {:si_unique_call 999} $p176 := devirtbounce.4($p164, $p174, $p175);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i179 := $eq.i64($i178, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $p180 := $p176;
    goto $bb118;

  $bb115:
    assume $i179 == 1;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __symbol_put(.str.90);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i173 == 1;
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p174 := hauppauge_lg2161_1040_config;
    goto $bb114;

  $bb107:
    assume $i161 == 1;
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $p162 := __symbol_get(.str.90);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p164 := $p162;
    goto $bb109;

  $bb104:
    assume $i157 == 1;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $i65 := $i149;
    goto $bb18;

  $bb98:
    assume $i152 == 1;
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $i153 := $M.1;
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 16);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    assume !($i155 == 1);
    goto $bb100;

  $bb101:
    assume $i155 == 1;
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} vslice_dummy_var_243 := printk.ref.ref.i32.i32(.str.4, .str.102, $i149, 687);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb80:
    assume $i132 == 1;
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i133 := $M.1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i134} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i136 := mxl1x1sf_get_chip_info($p13);
    call {:si_unique_call 987} {:cexpr "___ret"} boogie_si_record_i32($i136);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i136, 0);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i138 := $zext.i1.i32($i137);
    call {:si_unique_call 988} {:cexpr "__ret___6"} boogie_si_record_i32($i138);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i138, 0);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i144 == 1);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i146 := $M.1;
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i149 := $i136;
    goto $bb97;

  $bb94:
    assume $i147 == 1;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} vslice_dummy_var_242 := printk.ref.ref(.str.49, .str.102);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb91:
    assume $i144 == 1;
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_241 := printk.ref(.str.48);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb85:
    assume $i139 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 16);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb87;

  $bb88:
    assume $i142 == 1;
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} vslice_dummy_var_240 := printk.ref.ref.i32.i32(.str.4, .str.102, $i136, 686);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb82:
    assume $i134 == 1;
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} vslice_dummy_var_239 := printk.ref.ref(.str.47, .str.102);
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb74:
    assume $i127 == 1;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i128 := $M.1;
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 16);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb76;

  $bb77:
    assume $i130 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_238 := printk.ref.ref.i32.i32(.str.4, .str.102, $i124, 686);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb71:
    assume $i123 == 1;
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i65 := $i115;
    goto $bb18;

  $bb65:
    assume $i118 == 1;
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $i119 := $M.1;
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb67;

  $bb68:
    assume $i121 == 1;
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_237 := printk.ref.ref.i32.i32(.str.4, .str.102, $i115, 683);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb62:
    assume $i112 == 1;
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i65 := $i104;
    goto $bb18;

  $bb56:
    assume $i107 == 1;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i108 := $M.1;
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 16);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i110 := $ne.i32($i109, 0);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb58;

  $bb59:
    assume $i110 == 1;
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} vslice_dummy_var_236 := printk.ref.ref.i32.i32(.str.4, .str.102, $i104, 680);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb53:
    assume $i103 == 1;
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i65 := $i95;
    goto $bb18;

  $bb47:
    assume $i98 == 1;
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb49;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_235 := printk.ref.ref.i32.i32(.str.4, .str.102, $i95, 676);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb44:
    assume $i94 == 1;
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i65 := $i86;
    goto $bb18;

  $bb38:
    assume $i89 == 1;
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i90 := $M.1;
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i90, 16);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb40;

  $bb41:
    assume $i92 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_234 := printk.ref.ref.i32.i32(.str.4, .str.102, $i86, 673);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i85 == 1;
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i65 := $i77;
    goto $bb18;

  $bb29:
    assume $i80 == 1;
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i81 := $M.1;
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 16);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb31;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_233 := printk.ref.ref.i32.i32(.str.4, .str.102, $i77, 669);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i65 := $i66;
    goto $bb18;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb22;

  $bb23:
    assume $i72 == 1;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_232 := printk.ref.ref.i32.i32(.str.4, .str.102, $i66, 665);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $i65 := $i56;
    goto $bb18;

  $bb10:
    assume $i59 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i60 := $M.1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 16);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb12;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} vslice_dummy_var_231 := printk.ref.ref.i32.i32(.str.4, .str.102, $i56, 662);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} vslice_dummy_var_230 := printk.ref(.str.68);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p15, $mul.ref($i16, 32)), $mul.ref(0, 1));
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 2);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_229 := __dynamic_pr_debug.ref.ref.ref($p2, .str.61, .str.102);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i2c_get_adapdata: ref;

axiom i2c_get_adapdata == $sub.ref(0, 417125);

procedure i2c_get_adapdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i2c_get_adapdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1656)), $mul.ref(176, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_mutex_lock_interruptible_44: ref;

axiom ldv_mutex_lock_interruptible_44 == $sub.ref(0, 418157);

procedure ldv_mutex_lock_interruptible_44($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_44($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $i1 := mutex_lock_interruptible($p0);
    call {:si_unique_call 1003} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i2 := ldv_mutex_lock_interruptible_i2c_mutex_of_dvb_usb_device($p0);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 1005} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const mxl111sf_i2c_hw_xfer_msg: ref;

axiom mxl111sf_i2c_hw_xfer_msg == $sub.ref(0, 419189);

procedure mxl111sf_i2c_hw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.30, $CurrAddr;



implementation mxl111sf_i2c_hw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i8;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i8;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i32;
  var $i85: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i16;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i110: i32;
  var $i111: i1;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i64;
  var $p121: ref;
  var $i122: i8;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i32;
  var $i127: i8;
  var $i128: i32;
  var $i129: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i16;
  var $i135: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i1;
  var $i114: i16;
  var $i145: i16;
  var $i146: i32;
  var $i112: i16;
  var $i113: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i1;
  var $i155: i32;
  var $i156: i32;
  var $i157: i64;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i64;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i32;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i174: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i64;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i64;
  var $p188: ref;
  var $i189: i32;
  var $i190: i1;
  var $i154: i32;
  var $p191: ref;
  var $i192: i32;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i16;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i16;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i16;
  var $i225: i32;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i16;
  var $i233: i8;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i16;
  var $i239: i8;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i16;
  var $i253: i32;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i16;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $p263: ref;
  var $i264: i16;
  var $i265: i32;
  var $i266: i32;
  var $i267: i16;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i32;
  var $p274: ref;
  var $p275: ref;
  var $i276: i32;
  var $i277: i1;
  var $p279: ref;
  var $p280: ref;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $i284: i32;
  var $i285: i8;
  var $i286: i32;
  var $i287: i1;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i16;
  var $i293: i32;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i299: i32;
  var $i300: i32;
  var $i301: i64;
  var $p302: ref;
  var $i303: i8;
  var $i304: i64;
  var $p305: ref;
  var $i306: i64;
  var $p307: ref;
  var $i308: i8;
  var $i309: i32;
  var $i310: i1;
  var $i311: i1;
  var $i312: i32;
  var $i313: i32;
  var $i314: i1;
  var $i316: i32;
  var $i317: i32;
  var $i318: i64;
  var $p319: ref;
  var $i320: i8;
  var $p321: ref;
  var $p322: ref;
  var $i323: i32;
  var $i324: i32;
  var $i325: i32;
  var $i326: i64;
  var $p327: ref;
  var $i328: i8;
  var $i329: i32;
  var $i330: i32;
  var $i331: i32;
  var $i332: i8;
  var $p333: ref;
  var $i334: i32;
  var $i335: i8;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i32;
  var $i340: i32;
  var $i341: i1;
  var $i343: i64;
  var $p344: ref;
  var $i345: i8;
  var $p346: ref;
  var $p347: ref;
  var $i348: i32;
  var $i349: i32;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i64;
  var $p354: ref;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i32;
  var $i364: i64;
  var $p365: ref;
  var $i366: i8;
  var $i367: i32;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i32;
  var $i373: i32;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i32;
  var $i383: i64;
  var $p384: ref;
  var $i385: i8;
  var $i386: i32;
  var $i387: i64;
  var $p388: ref;
  var $i389: i8;
  var $i390: i32;
  var $i392: i32;
  var $i393: i1;
  var $i342: i32;
  var $i395: i32;
  var $i396: i32;
  var $i397: i1;
  var $i400: i32;
  var $i401: i32;
  var $i402: i64;
  var $p403: ref;
  var $i404: i8;
  var $p405: ref;
  var $p406: ref;
  var $i407: i32;
  var $i408: i32;
  var $i409: i32;
  var $i410: i64;
  var $p411: ref;
  var $i399: i32;
  var $i413: i32;
  var $i414: i32;
  var $i415: i64;
  var $p416: ref;
  var $i417: i8;
  var $p418: ref;
  var $p419: ref;
  var $i420: i32;
  var $i421: i32;
  var $i422: i32;
  var $i423: i64;
  var $p424: ref;
  var $i412: i32;
  var $i425: i32;
  var $i426: i1;
  var $i298: i32;
  var $i394: i16;
  var $i427: i32;
  var $i428: i32;
  var $i429: i16;
  var $i430: i32;
  var $i431: i1;
  var $i278: i16;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $i437: i32;
  var $i438: i1;
  var $i440: i32;
  var $i441: i32;
  var $i442: i64;
  var $p443: ref;
  var $i444: i32;
  var $i445: i32;
  var $i446: i64;
  var $p447: ref;
  var $i448: i32;
  var $i449: i32;
  var $i450: i64;
  var $p451: ref;
  var $i452: i32;
  var $i453: i1;
  var $i439: i32;
  var $p454: ref;
  var $p455: ref;
  var $i456: i32;
  var $i457: i8;
  var $i458: i32;
  var $i459: i1;
  var $i460: i32;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $i464: i16;
  var $i465: i32;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i32;
  var $i471: i1;
  var $i473: i32;
  var $i474: i32;
  var $i475: i64;
  var $p476: ref;
  var $i477: i8;
  var $p478: ref;
  var $p479: ref;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i64;
  var $p484: ref;
  var $i485: i32;
  var $i486: i32;
  var $i487: i1;
  var $i488: i32;
  var $i489: i32;
  var $i490: i64;
  var $p491: ref;
  var $i492: i8;
  var $i493: i32;
  var $i494: i32;
  var $i495: i32;
  var $i496: i64;
  var $p497: ref;
  var $i498: i8;
  var $i499: i32;
  var $i501: i32;
  var $i502: i1;
  var $i472: i32;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $i510: i32;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $i514: i32;
  var $i93: i32;
  var $p515: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p520: ref;
  var $p521: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $p527: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $p534: ref;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $p538: ref;
  var $p539: ref;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $p557: ref;
  var $p558: ref;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $p581: ref;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $p600: ref;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $p604: ref;
  var $p605: ref;
  var $p606: ref;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $p614: ref;
  var $i615: i32;
  var $i616: i32;
  var $i617: i32;
  var $i618: i64;
  var $p619: ref;
  var $i620: i8;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $i626: i32;
  var $i627: i32;
  var $i628: i32;
  var $i629: i64;
  var $p630: ref;
  var $i631: i8;
  var $p632: ref;
  var $p633: ref;
  var $p634: ref;
  var $p635: ref;
  var $p636: ref;
  var $i637: i32;
  var $i638: i32;
  var $i639: i32;
  var $i640: i64;
  var $p641: ref;
  var $i642: i8;
  var $p643: ref;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i32;
  var $i649: i32;
  var $i650: i32;
  var $i651: i64;
  var $p652: ref;
  var $i653: i8;
  var $p654: ref;
  var $p655: ref;
  var $p656: ref;
  var $p657: ref;
  var $p658: ref;
  var $i659: i32;
  var $i660: i32;
  var $i661: i32;
  var $i662: i64;
  var $p663: ref;
  var $i664: i8;
  var $p665: ref;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $i670: i32;
  var $i671: i32;
  var $i672: i32;
  var $i673: i64;
  var $p674: ref;
  var $i675: i8;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $i681: i32;
  var $i682: i32;
  var $i683: i32;
  var $i684: i64;
  var $p685: ref;
  var $i686: i8;
  var $p687: ref;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $p703: ref;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var vslice_dummy_var_246: i32;
  var vslice_dummy_var_247: i32;
  var vslice_dummy_var_248: i32;
  var vslice_dummy_var_249: i32;
  var vslice_dummy_var_250: i32;
  var vslice_dummy_var_251: i32;
  var vslice_dummy_var_252: i32;
  var vslice_dummy_var_253: i32;
  var vslice_dummy_var_254: i32;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;
  var vslice_dummy_var_260: i32;
  var vslice_dummy_var_261: i32;
  var vslice_dummy_var_262: i32;
  var vslice_dummy_var_263: i32;
  var vslice_dummy_var_264: i32;
  var vslice_dummy_var_265: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $p2 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p3 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p5 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i6 := $M.1;
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 4);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p31, $sub.i8(0, 2));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p689, $sub.i8(0, 2));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p690, $sub.i8(0, 2));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p691, $sub.i8(0, 2));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p692, $sub.i8(0, 2));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p693, $sub.i8(0, 2));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p694, $sub.i8(0, 2));
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p695, $sub.i8(0, 2));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p696, $sub.i8(0, 2));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p697 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p697, $sub.i8(0, 2));
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p698, $sub.i8(0, 2));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p699, $sub.i8(0, 2));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p700, $sub.i8(0, 2));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p701, $sub.i8(0, 2));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p702, $sub.i8(0, 2));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p703, $sub.i8(0, 2));
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p704, $sub.i8(0, 2));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p705, $sub.i8(0, 2));
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p706, $sub.i8(0, 2));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p707, $sub.i8(0, 2));
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $p708 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p708, $sub.i8(0, 2));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p709, $sub.i8(0, 2));
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p710, $sub.i8(0, 2));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p711, $sub.i8(0, 2));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p712, $sub.i8(0, 2));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p713, $sub.i8(0, 2));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $sub.i8(0, 103));
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 48);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $sub.i8(0, 128));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, 48);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $sub.i8(0, 127));
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 20);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $sub.i8(0, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, 36);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $sub.i8(0, 9));
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p2);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i47 := mxl111sf_i2c_send_data($p0, 0, $p46);
    call {:si_unique_call 1014} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 1);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i210 := $i47;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i212 := $load.i16($M.0, $p211);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i213 := $zext.i16.i32($i212);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i213, 1);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i514 := $i210;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i93 := $i514;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p515, $sub.i8(0, 103));
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p516, 0);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p517, $sub.i8(0, 2));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p518 := $bitcast.ref.ref($p2);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} vslice_dummy_var_249 := mxl111sf_i2c_send_data($p0, 0, $p518);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $p520 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p520, 0);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $p521 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p521, $sub.i8(0, 33));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p522, 3);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p523, 48);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p524, 0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p525 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p525, 0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p526, $sub.i8(0, 2));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $p527 := $bitcast.ref.ref($p2);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} vslice_dummy_var_250 := mxl111sf_i2c_send_data($p0, 0, $p527);
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p529, 48);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p530, $sub.i8(0, 127));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p531, 0);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $p532 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p532, 48);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p533, 0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p534 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p534, 0);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p535, 48);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p536, 0);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p537 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p537, 0);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p538, $sub.i8(0, 2));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p539 := $bitcast.ref.ref($p2);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} vslice_dummy_var_251 := mxl111sf_i2c_send_data($p0, 0, $p539);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $r := $i93;
    return;

  $bb75:
    assume $i215 == 1;
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i217 := $load.i16($M.0, $p216);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i218 := $zext.i16.i32($i217);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i219 == 1);
    goto $bb77;

  $bb78:
    assume $i219 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i220 := $M.1;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $i221 := $and.i32($i220, 4);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i222 := $ne.i32($i221, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i222} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p227, 0);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p228, $sub.i8(0, 33));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p229, 3);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p230, 20);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.0, $p231);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i16.i8($i232);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, $i233);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p235, 0);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p236, 8);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.0, $p237);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i239 := $trunc.i16.i8($i238);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p240, $i239);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p241, 0);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p242, $sub.i8(0, 2));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p2);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $i244 := mxl111sf_i2c_send_data($p0, 0, $p243);
    call {:si_unique_call 1042} {:cexpr "ret"} boogie_si_record_i32($i244);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i245 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1044} {:cexpr "tmp___4"} boogie_si_record_i8($i245);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i259 := $load.i16($M.0, $p258);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i260 := $zext.i16.i32($i259);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i261 := $udiv.i32($i260, 8);
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i262 := $trunc.i32.i16($i261);
    call {:si_unique_call 1046} {:cexpr "block_len"} boogie_si_record_i16($i262);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.0, $p263);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $i265 := $zext.i16.i32($i264);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $i266 := $and.i32($i265, 7);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i267 := $trunc.i32.i16($i266);
    call {:si_unique_call 1047} {:cexpr "left_over_len"} boogie_si_record_i16($i267);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i268 := $M.1;
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i269 := $and.i32($i268, 4);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i270 := $ne.i32($i269, 0);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p274, $sub.i8(0, 35));
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p275, 0);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i276 := $zext.i16.i32($i262);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i277 := $slt.i32(0, $i276);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i277 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i432 := $zext.i16.i32($i267);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i433 := $ne.i32($i432, 0);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i433} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p503, $sub.i8(0, 103));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p504, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p505, 0);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p506, 23);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p507, 3);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p508, $sub.i8(0, 2));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p2);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $i510 := mxl111sf_i2c_send_data($p0, 0, $p509);
    call {:si_unique_call 1073} {:cexpr "ret"} boogie_si_record_i32($i510);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p511, 0);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p512, $sub.i8(0, 57));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p513, 3);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i514 := $i510;
    goto $bb177;

  $bb145:
    assume $i433 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p434, $sub.i8(0, 2));
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p541 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p541, $sub.i8(0, 2));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p542, $sub.i8(0, 2));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p543, $sub.i8(0, 2));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p544, $sub.i8(0, 2));
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p545, $sub.i8(0, 2));
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p546 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p546, $sub.i8(0, 2));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p547, $sub.i8(0, 2));
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    $p548 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p548, $sub.i8(0, 2));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p549, $sub.i8(0, 2));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p550, $sub.i8(0, 2));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p551, $sub.i8(0, 2));
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p552, $sub.i8(0, 2));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p553, $sub.i8(0, 2));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p554, $sub.i8(0, 2));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p555, $sub.i8(0, 2));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p556, $sub.i8(0, 2));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p557, $sub.i8(0, 2));
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p558, $sub.i8(0, 2));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p559, $sub.i8(0, 2));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p560, $sub.i8(0, 2));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p561, $sub.i8(0, 2));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p562, $sub.i8(0, 2));
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p563, $sub.i8(0, 2));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p564, $sub.i8(0, 2));
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p565, $sub.i8(0, 2));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p435, $sub.i8(0, 35));
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p436, 0);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i437 := $zext.i16.i32($i267);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i438 := $sgt.i32($i437, 0);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p454 := $bitcast.ref.ref($p2);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p3);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i456 := mxl111sf_i2c_get_data($p0, 0, $p454, $p455);
    call {:si_unique_call 1066} {:cexpr "ret"} boogie_si_record_i32($i456);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i457 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1068} {:cexpr "tmp___7"} boogie_si_record_i8($i457);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i458 := $zext.i8.i32($i457);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i459 := $eq.i32($i458, 1);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i459 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i470 := $zext.i16.i32($i267);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i471 := $sgt.i32($i470, 0);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb165:
    assume $i471 == 1;
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i472 := 0;
    goto $bb168;

  $bb168:
    call $i473, $i474, $i475, $p476, $i477, $p478, $p479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $i490, $p491, $i492, $i493, $i494, $i495, $i496, $p497, $i498, $i499, $i501, $i502, $i472, vslice_dummy_var_265 := mxl111sf_i2c_hw_xfer_msg_loop_$bb168($p1, $p3, $i262, $i470, $i473, $i474, $i475, $p476, $i477, $p478, $p479, $i480, $i481, $i482, $i483, $p484, $i485, $i486, $i487, $i488, $i489, $i490, $p491, $i492, $i493, $i494, $i495, $i496, $p497, $i498, $i499, $i501, $i502, $i472, vslice_dummy_var_265);
    goto $bb168_last;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $i473 := $mul.i32($i472, 3);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i474 := $add.i32($i473, 1);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i475 := $sext.i32.i64($i474);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i475, 1));
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.28, $p476);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p478 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.0, $p478);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i480 := $zext.i16.i32($i262);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i481 := $mul.i32($i480, 8);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i482 := $add.i32($i481, $i472);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i483 := $sext.i32.i64($i482);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($p479, $mul.ref($i483, 1));
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p484, $i477);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i485 := $M.1;
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i486 := $and.i32($i485, 4);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i501 := $add.i32($i472, 1);
    call {:si_unique_call 1071} {:cexpr "i"} boogie_si_record_i32($i501);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i502 := $sgt.i32($i470, $i501);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i502 == 1);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb173:
    assume $i502 == 1;
    assume {:verifier.code 0} true;
    $i472 := $i501;
    goto $bb173_dummy;

  $bb170:
    assume $i487 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i488 := $mul.i32($i472, 3);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i489 := $add.i32($i488, 1);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i490 := $sext.i32.i64($i489);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i490, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.28, $p491);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i493 := $zext.i8.i32($i492);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i494 := $mul.i32($i472, 3);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i495 := $add.i32($i494, 2);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i496 := $sext.i32.i64($i495);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i496, 1));
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i498 := $load.i8($M.28, $p497);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i499 := $zext.i8.i32($i498);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} vslice_dummy_var_265 := printk.ref.ref.i32.i32(.str.130, .str.122, $i493, $i499);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb159:
    assume $i459 == 1;
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i460 := $M.1;
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i461 := $and.i32($i460, 4);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p467, 0);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p468, $sub.i8(0, 57));
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p469, 3);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb161:
    assume $i462 == 1;
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i464 := $load.i16($M.0, $p463);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i465 := $zext.i16.i32($i464);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} vslice_dummy_var_264 := printk.ref.ref.i32(.str.128, .str.122, $i465);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb151:
    assume $i438 == 1;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i439 := 0;
    goto $bb154;

  $bb154:
    call $i440, $i441, $i442, $p443, $i444, $i445, $i446, $p447, $i448, $i449, $i450, $p451, $i452, $i453, $i439 := mxl111sf_i2c_hw_xfer_msg_loop_$bb154($p2, $i437, $i440, $i441, $i442, $p443, $i444, $i445, $i446, $p447, $i448, $i449, $i450, $p451, $i452, $i453, $i439);
    goto $bb154_last;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i440 := $mul.i32($i439, 3);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i441 := $add.i32($i440, 2);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i442 := $sext.i32.i64($i441);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i442, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p443, 12);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i444 := $add.i32($i439, 1);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i445 := $mul.i32($i444, 3);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i446 := $sext.i32.i64($i445);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i446, 1));
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p447, 0);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i448 := $mul.i32($i439, 3);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i449 := $add.i32($i448, 4);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i450 := $sext.i32.i64($i449);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i450, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p451, 0);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i452 := $add.i32($i439, 1);
    call {:si_unique_call 1064} {:cexpr "i"} boogie_si_record_i32($i452);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i453 := $sgt.i32($i437, $i452);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i453 == 1);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb156:
    assume $i453 == 1;
    assume {:verifier.code 0} true;
    $i439 := $i452;
    goto $bb156_dummy;

  $bb92:
    assume $i277 == 1;
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i278 := 0;
    goto $bb95;

  $bb95:
    call $p279, $p280, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i394, $i427, $i428, $i429, $i430, $i431, $i278, $p566, $p567, $p568, $p569, $p570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $p579, $p580, $p581, $p582, $p583, $p584, $p585, $p586, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263 := mxl111sf_i2c_hw_xfer_msg_loop_$bb95($p0, $p1, $p2, $p3, $p4, $p5, $i276, $p279, $p280, $p281, $p282, $p283, $i284, $i285, $i286, $i287, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i339, $i340, $i341, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i394, $i427, $i428, $i429, $i430, $i431, $i278, $p566, $p567, $p568, $p569, $p570, $p571, $p572, $p573, $p574, $p575, $p576, $p577, $p578, $p579, $p580, $p581, $p582, $p583, $p584, $p585, $p586, vslice_dummy_var_260, vslice_dummy_var_261, vslice_dummy_var_262, vslice_dummy_var_263);
    goto $bb95_last;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p279, 12);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p280, 0);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p281, 0);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p566, 12);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p567, 0);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p568, 0);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p569, 12);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p570, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p571, 0);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p572, 12);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p573, 0);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p574 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p574, 0);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p575, 12);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p576, 0);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p577, 0);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p578, 12);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p579, 0);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p580, 0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p581, 12);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p582, 0);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p583, 0);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p584, 12);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p585, 0);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p586, 0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p282 := $bitcast.ref.ref($p2);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p283 := $bitcast.ref.ref($p3);
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} $i284 := mxl111sf_i2c_get_data($p0, 0, $p282, $p283);
    call {:si_unique_call 1050} {:cexpr "ret"} boogie_si_record_i32($i284);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i285 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1052} {:cexpr "tmp___5"} boogie_si_record_i8($i285);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i287 := $eq.i32($i286, 1);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $i298 := 0;
    goto $bb107;

  $bb107:
    call $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, vslice_dummy_var_260, vslice_dummy_var_263 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107($p0, $p1, $p3, $p4, $p5, $i299, $i300, $i301, $p302, $i303, $i304, $p305, $i306, $p307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, $i316, $i317, $i318, $p319, $i320, $p321, $p322, $i323, $i324, $i325, $i326, $p327, $i328, $i329, $i330, $i331, $i332, $p333, $i334, $i335, $i336, $i337, $i338, $i395, $i396, $i397, $i400, $i401, $i402, $p403, $i404, $p405, $p406, $i407, $i408, $i409, $i410, $p411, $i399, $i413, $i414, $i415, $p416, $i417, $p418, $p419, $i420, $i421, $i422, $i423, $p424, $i412, $i425, $i426, $i298, $i278, vslice_dummy_var_260, vslice_dummy_var_263);
    goto $bb107_last;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i299 := $mul.i32($i298, 3);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i300 := $add.i32($i299, 2);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i301 := $sext.i32.i64($i300);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i301, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i303 := $load.i8($M.28, $p302);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i304 := $sext.i32.i64($i298);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref($i304, 1));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p305, $i303);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i306 := $sext.i32.i64($i298);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref($i306, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.29, $p307);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i32($i308);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 4);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i310 == 1);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i413 := $mul.i32($i298, 3);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i414 := $add.i32($i413, 1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i415 := $sext.i32.i64($i414);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i415, 1));
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.28, $p416);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i278);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i421 := $mul.i32($i420, 8);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i422 := $add.i32($i421, $i298);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i423 := $sext.i32.i64($i422);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($p419, $mul.ref($i423, 1));
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p424, $i417);
    assume {:verifier.code 0} true;
    $i412 := $i298;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i425 := $add.i32($i412, 1);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32($i425);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i426 := $sle.i32($i425, 7);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i426 == 1);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i394 := $i278;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i427 := $zext.i16.i32($i394);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i428 := $add.i32($i427, 1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i429 := $trunc.i32.i16($i428);
    call {:si_unique_call 1061} {:cexpr "index"} boogie_si_record_i16($i429);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i430 := $zext.i16.i32($i429);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i431 := $slt.i32($i430, $i276);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i431 == 1);
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb142:
    assume $i431 == 1;
    assume {:verifier.code 0} true;
    $i278 := $i429;
    goto $bb142_dummy;

  $bb139:
    assume $i426 == 1;
    assume {:verifier.code 0} true;
    $i298 := $i425;
    goto $bb139_dummy;

  $bb109:
    assume $i310 == 1;
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i311 := $sle.i32($i298, 6);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i311 == 1);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i400 := $mul.i32($i298, 3);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i401 := $add.i32($i400, 1);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i402 := $sext.i32.i64($i401);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i402, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i404 := $load.i8($M.28, $p403);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p406 := $load.ref($M.0, $p405);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i407 := $zext.i16.i32($i278);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i408 := $mul.i32($i407, 8);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i409 := $add.i32($i408, $i298);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i410 := $sext.i32.i64($i409);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($p406, $mul.ref($i410, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p411, $i404);
    assume {:verifier.code 0} true;
    $i399 := $i298;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i412 := $i399;
    goto $bb138;

  $bb111:
    assume $i311 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i312 := $M.1;
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i313 := $and.i32($i312, 4);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i314 := $ne.i32($i313, 0);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i316 := $mul.i32($i298, 3);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i317 := $add.i32($i316, 1);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i318 := $sext.i32.i64($i317);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref($i318, 1));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.28, $p319);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p322 := $load.ref($M.0, $p321);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i323 := $zext.i16.i32($i278);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i324 := $mul.i32($i323, 8);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i325 := $add.i32($i324, $i298);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i326 := $sext.i32.i64($i325);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($p322, $mul.ref($i326, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p327, $i320);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i298);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i330 := $xor.i32($i329, $sub.i32(0, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i331 := $add.i32($i330, 8);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i332 := $trunc.i32.i8($i331);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p333 := $bitcast.ref.ref($p5);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $i334 := mxl111sf_i2c_readagain($p0, $i332, $p333);
    call {:si_unique_call 1056} {:cexpr "tmp___6"} boogie_si_record_i32($i334);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i335 := $trunc.i32.i8($i334);
    call {:si_unique_call 1057} {:cexpr "ret_status"} boogie_si_record_i8($i335);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i337 := $eq.i32($i336, 1);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i338 := $i298;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i337 == 1);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i395 := $M.1;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i396 := $and.i32($i395, 4);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i397 := $ne.i32($i396, 0);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    $i399 := $i298;
    goto $bb137;

  $bb133:
    assume $i397 == 1;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} vslice_dummy_var_263 := printk.ref.ref(.str.131, .str.122);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb116:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i339 := $xor.i32($i338, $sub.i32(0, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i340 := $add.i32($i339, 8);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i341 := $sgt.i32($i340, 0);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume !($i341 == 1);
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i394 := $i278;
    goto $bb132;

  $bb118:
    assume $i341 == 1;
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i342 := 0;
    goto $bb121;

  $bb121:
    call $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, vslice_dummy_var_261, vslice_dummy_var_262 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121($p1, $p5, $i338, $i340, $i343, $p344, $i345, $p346, $p347, $i348, $i349, $i350, $i351, $i352, $i353, $p354, $i355, $i356, $i357, $p358, $p359, $i360, $i361, $i362, $i363, $i364, $p365, $i366, $i367, $i368, $i369, $i370, $i371, $i373, $i374, $i375, $p376, $p377, $i378, $i379, $i380, $i381, $i382, $i383, $p384, $i385, $i386, $i387, $p388, $i389, $i390, $i392, $i393, $i342, $i278, vslice_dummy_var_261, vslice_dummy_var_262);
    goto $bb121_last;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $i343 := $sext.i32.i64($i342);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p5, $mul.ref(0, 26)), $mul.ref($i343, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i345 := $load.i8($M.30, $p344);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.0, $p346);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i348 := $zext.i16.i32($i278);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i349 := $mul.i32($i348, 8);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i350 := $add.i32($i342, $i338);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i351 := $add.i32($i350, 1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i352 := $add.i32($i349, $i351);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i353 := $sext.i32.i64($i352);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($p347, $mul.ref($i353, 1));
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p354, $i345);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i355 := $M.1;
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 4);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i373 := $M.1;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i374 := $and.i32($i373, 4);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i392 := $add.i32($i342, 1);
    call {:si_unique_call 1060} {:cexpr "k"} boogie_si_record_i32($i392);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $i393 := $sgt.i32($i340, $i392);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i393 == 1);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb129:
    assume $i393 == 1;
    assume {:verifier.code 0} true;
    $i342 := $i392;
    goto $bb129_dummy;

  $bb126:
    assume $i375 == 1;
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.0, $p376);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i378 := $zext.i16.i32($i278);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i379 := $mul.i32($i378, 8);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i380 := $add.i32($i342, $i338);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i381 := $add.i32($i380, 1);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i382 := $add.i32($i379, $i381);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($p377, $mul.ref($i383, 1));
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.0, $p384);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i387 := $sext.i32.i64($i342);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p5, $mul.ref(0, 26)), $mul.ref($i387, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.30, $p388);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $i390 := $zext.i8.i32($i389);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} vslice_dummy_var_262 := printk.ref.ref.i32.i32(.str.130, .str.122, $i386, $i390);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i357 == 1;
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i360 := $zext.i16.i32($i278);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i361 := $mul.i32($i360, 8);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i362 := $add.i32($i342, $i338);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i363 := $add.i32($i361, $i362);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i364 := $sext.i32.i64($i363);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($p359, $mul.ref($i364, 1));
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i366 := $load.i8($M.0, $p365);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $i367 := $zext.i8.i32($i366);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i368 := $zext.i16.i32($i278);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i369 := $mul.i32($i368, 8);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i370 := $add.i32($i342, $i338);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i371 := $add.i32($i369, $i370);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} vslice_dummy_var_261 := printk.ref.ref.i32.i32(.str.130, .str.122, $i367, $i371);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb113:
    assume $i314 == 1;
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_260 := printk.ref.ref.i32(.str.129, .str.122, $i298);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb101:
    assume $i287 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i288 := $M.1;
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i289 := $and.i32($i288, 4);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i290 := $ne.i32($i289, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p295, 0);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p296, $sub.i8(0, 57));
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p297, 3);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb103:
    assume $i290 == 1;
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i292 := $load.i16($M.0, $p291);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i293 := $zext.i16.i32($i292);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} vslice_dummy_var_259 := printk.ref.ref.i32(.str.128, .str.122, $i293);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb89:
    assume $i270 == 1;
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $i271 := $zext.i16.i32($i262);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i272 := $zext.i16.i32($i267);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} vslice_dummy_var_258 := printk.ref.ref.i32.i32(.str.125, .str.122, $i271, $i272);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb83:
    assume $i247 == 1;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i248 := $M.1;
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 4);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p255, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p256, $sub.i8(0, 57));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p257, 3);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb85:
    assume $i250 == 1;
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i252 := $load.i16($M.0, $p251);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i253 := $zext.i16.i32($i252);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_257 := printk.ref.ref.i32(.str.128, .str.122, $i253);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb80:
    assume $i222 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i224 := $load.i16($M.0, $p223);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i225 := $zext.i16.i32($i224);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_256 := printk.ref.ref.i32(.str.127, .str.122, $i225);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i54);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i57 := $M.1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 4);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, 94);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, 3);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 8);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i16.i8($i73);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, $i74);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $sub.i8(0, 2));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} $i79 := mxl111sf_i2c_send_data($p0, 0, $p78);
    call {:si_unique_call 1017} {:cexpr "ret"} boogie_si_record_i32($i79);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i80 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1019} {:cexpr "tmp___1"} boogie_si_record_i8($i80);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i80);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i97 := $udiv.i32($i96, 8);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i16($i97);
    call {:si_unique_call 1024} {:cexpr "block_len"} boogie_si_record_i16($i98);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 7);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    call {:si_unique_call 1025} {:cexpr "left_over_len"} boogie_si_record_i16($i103);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i104 := $M.1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i105 := $and.i32($i104, 4);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i98);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i111 := $slt.i32(0, $i110);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i112, $i113 := 0, $i79;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i147 := $zext.i16.i32($i103);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    $i206 := $i113;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p207, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p208, 78);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p209, 3);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i210 := $i206;
    goto $bb74;

  $bb50:
    assume $i148 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, $sub.i8(0, 2));
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p587, $sub.i8(0, 2));
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    $p588 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p588, $sub.i8(0, 2));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p589, $sub.i8(0, 2));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p590, $sub.i8(0, 2));
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p591, $sub.i8(0, 2));
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p592, $sub.i8(0, 2));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p593, $sub.i8(0, 2));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p594, $sub.i8(0, 2));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p595, $sub.i8(0, 2));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p596, $sub.i8(0, 2));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p597 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p597, $sub.i8(0, 2));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p598, $sub.i8(0, 2));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p599, $sub.i8(0, 2));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p600 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p600, $sub.i8(0, 2));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p601, $sub.i8(0, 2));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p602, $sub.i8(0, 2));
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p603, $sub.i8(0, 2));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $p604 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p604, $sub.i8(0, 2));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p605 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p605, $sub.i8(0, 2));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p606, $sub.i8(0, 2));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p607, $sub.i8(0, 2));
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p608, $sub.i8(0, 2));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p609, $sub.i8(0, 2));
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p610, $sub.i8(0, 2));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p611, $sub.i8(0, 2));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p150, $sub.i8(0, 103));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 0);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i103);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i153 := $sgt.i32($i152, 0);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p2);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i192 := mxl111sf_i2c_send_data($p0, 0, $p191);
    call {:si_unique_call 1036} {:cexpr "ret"} boogie_si_record_i32($i192);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i193 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1038} {:cexpr "tmp___3"} boogie_si_record_i8($i193);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i206 := $i192;
    goto $bb73;

  $bb67:
    assume $i195 == 1;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i196 := $M.1;
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 4);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $i198 := $ne.i32($i197, 0);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p203, 0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p204, 78);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, 3);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb69:
    assume $i198 == 1;
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_255 := printk.ref.ref.i32(.str.124, .str.122, $i201);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb56:
    assume $i153 == 1;
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i154 := 0;
    goto $bb59;

  $bb59:
    call $i155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $i187, $p188, $i189, $i190, $i154, vslice_dummy_var_254 := mxl111sf_i2c_hw_xfer_msg_loop_$bb59($p1, $p2, $i112, $i152, $i155, $i156, $i157, $p158, $p159, $p160, $i161, $i162, $i163, $i164, $p165, $i166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $p181, $i182, $i183, $i185, $i186, $i187, $p188, $i189, $i190, $i154, vslice_dummy_var_254);
    goto $bb59_last;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i155 := $mul.i32($i154, 3);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, 2);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i157 := $sext.i32.i64($i156);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i157, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p158, 12);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i112);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i162 := $mul.i32($i161, 8);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i162, $i154);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $i164 := $sext.i32.i64($i163);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($p160, $mul.ref($i164, 1));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i154, 1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i168 := $mul.i32($i167, 3);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $i169 := $sext.i32.i64($i168);
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i169, 1));
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p170, $i166);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i171 := $M.1;
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 4);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i185 := $mul.i32($i154, 3);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 4);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i186);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref($i187, 1));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p188, 0);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i189 := $add.i32($i154, 1);
    call {:si_unique_call 1034} {:cexpr "i"} boogie_si_record_i32($i189);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i190 := $sgt.i32($i152, $i189);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i190 == 1);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb64:
    assume $i190 == 1;
    assume {:verifier.code 0} true;
    $i154 := $i189;
    goto $bb64_dummy;

  $bb61:
    assume $i173 == 1;
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i112);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.0, $p175);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i177 := $zext.i16.i32($i112);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i178 := $mul.i32($i177, 8);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i179 := $add.i32($i178, $i154);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p176, $mul.ref($i180, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} vslice_dummy_var_254 := printk.ref.ref.i32.i32.i32(.str.126, .str.122, $i174, $i154, $i183);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb32:
    assume $i111 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb35;

  $bb35:
    call $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $i140, $i141, $i142, $i143, $i144, $i114, $i145, $i146, $p612, $p613, $p614, $i615, $i616, $i617, $i618, $p619, $i620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $p630, $i631, $p632, $p633, $p634, $p635, $p636, $i637, $i638, $i639, $i640, $p641, $i642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $p658, $i659, $i660, $i661, $i662, $p663, $i664, $p665, $p666, $p667, $p668, $p669, $i670, $i671, $i672, $i673, $p674, $i675, $p676, $p677, $p678, $p679, $p680, $i681, $i682, $i683, $i684, $p685, $i686, $p687, $p688 := mxl111sf_i2c_hw_xfer_msg_loop_$bb35($p0, $p1, $p2, $i110, $p115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $i140, $i141, $i142, $i143, $i144, $i114, $i145, $i146, $p612, $p613, $p614, $i615, $i616, $i617, $i618, $p619, $i620, $p621, $p622, $p623, $p624, $p625, $i626, $i627, $i628, $i629, $p630, $i631, $p632, $p633, $p634, $p635, $p636, $i637, $i638, $i639, $i640, $p641, $i642, $p643, $p644, $p645, $p646, $p647, $i648, $i649, $i650, $i651, $p652, $i653, $p654, $p655, $p656, $p657, $p658, $i659, $i660, $i661, $i662, $p663, $i664, $p665, $p666, $p667, $p668, $p669, $i670, $i671, $i672, $i673, $p674, $i675, $p676, $p677, $p678, $p679, $p680, $i681, $i682, $i683, $i684, $p685, $i686, $p687, $p688);
    goto $bb35_last;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 12);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i114);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i119 := $mul.i32($i118, 8);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($p117, $mul.ref($i120, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $i122 := $load.i8($M.0, $p121);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, $i122);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, 0);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p612, 12);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.0, $p613);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i615 := $zext.i16.i32($i114);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i616 := $mul.i32($i615, 8);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i617 := $add.i32($i616, 1);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i618 := $sext.i32.i64($i617);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($p614, $mul.ref($i618, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i620 := $load.i8($M.0, $p619);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p621, $i620);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p622, 0);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p623, 12);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p624 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p625 := $load.ref($M.0, $p624);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i626 := $zext.i16.i32($i114);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i627 := $mul.i32($i626, 8);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i628 := $add.i32($i627, 2);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i629 := $sext.i32.i64($i628);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($p625, $mul.ref($i629, 1));
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i631 := $load.i8($M.0, $p630);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p632, $i631);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p633, 0);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p634, 12);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p636 := $load.ref($M.0, $p635);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i637 := $zext.i16.i32($i114);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i638 := $mul.i32($i637, 8);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i639 := $add.i32($i638, 3);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i640 := $sext.i32.i64($i639);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($p636, $mul.ref($i640, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i642 := $load.i8($M.0, $p641);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p643, $i642);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p644, 0);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p645, 12);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p646 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.0, $p646);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i648 := $zext.i16.i32($i114);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i649 := $mul.i32($i648, 8);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i650 := $add.i32($i649, 4);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i651 := $sext.i32.i64($i650);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($p647, $mul.ref($i651, 1));
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $i653 := $load.i8($M.0, $p652);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p654, $i653);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p655 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p655, 0);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p656, 12);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $p658 := $load.ref($M.0, $p657);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i659 := $zext.i16.i32($i114);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i660 := $mul.i32($i659, 8);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i661 := $add.i32($i660, 5);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i662 := $sext.i32.i64($i661);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($p658, $mul.ref($i662, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i664 := $load.i8($M.0, $p663);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p665, $i664);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p666, 0);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p667, 12);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p669 := $load.ref($M.0, $p668);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i670 := $zext.i16.i32($i114);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i671 := $mul.i32($i670, 8);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i672 := $add.i32($i671, 6);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i673 := $sext.i32.i64($i672);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($p669, $mul.ref($i673, 1));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i675 := $load.i8($M.0, $p674);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p676, $i675);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p677, 0);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p678, 12);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.0, $p679);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i681 := $zext.i16.i32($i114);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i682 := $mul.i32($i681, 8);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i683 := $add.i32($i682, 7);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i683);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($p680, $mul.ref($i684, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i686 := $load.i8($M.0, $p685);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p687, $i686);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p688 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p688, 0);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p2);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i126 := mxl111sf_i2c_send_data($p0, 0, $p125);
    call {:si_unique_call 1028} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i127 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1030} {:cexpr "tmp___2"} boogie_si_record_i8($i127);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i128, 1);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i32($i114);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i141 := $add.i32($i140, 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    call {:si_unique_call 1032} {:cexpr "index"} boogie_si_record_i16($i142);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i143 := $zext.i16.i32($i142);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, $i110);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i145, $i146 := $i142, $i126;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $i112, $i113 := $i145, $i146;
    goto $bb34;

  $bb47:
    assume $i144 == 1;
    assume {:verifier.code 0} true;
    $i114 := $i142;
    goto $bb47_dummy;

  $bb41:
    assume $i129 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i130 := $M.1;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 4);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 0);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p138, 78);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, 3);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb43:
    assume $i132 == 1;
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $i134 := $load.i16($M.0, $p133);
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $i135 := $zext.i16.i32($i134);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} vslice_dummy_var_253 := printk.ref.ref.i32(.str.124, .str.122, $i135);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb29:
    assume $i106 == 1;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i98);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i103);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} vslice_dummy_var_252 := printk.ref.ref.i32.i32(.str.125, .str.122, $i107, $i108);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i83 := $M.1;
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 4);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, 0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 78);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 3);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32(0, 5);
    goto $bb27;

  $bb24:
    assume $i85 == 1;
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} vslice_dummy_var_248 := printk.ref.ref.i32(.str.124, .str.122, $i88);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} vslice_dummy_var_247 := printk.ref.ref.i32.i32(.str.123, .str.122, $i62, $i66);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i17 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} vslice_dummy_var_246 := printk.ref.ref.i32.i32.i32(.str.121, .str.122, $i29, $i26, $i17);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    call {:si_unique_call 1011} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb8;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    call {:si_unique_call 1010} {:cexpr "tmp"} boogie_si_record_i32($i16);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb5;

  $bb173_dummy:
    assume false;
    return;

  $bb168_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  $bb156_dummy:
    assume false;
    return;

  $bb154_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6960;

  $bb129_dummy:
    assume false;
    return;

  $bb121_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6857;

  $bb139_dummy:
    assume false;
    return;

  $bb107_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  $bb142_dummy:
    assume false;
    return;

  $bb95_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  $bb64_dummy:
    assume false;
    return;

  $bb59_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6544;

  $bb47_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6461;
}



const mxl111sf_i2c_sw_xfer_msg: ref;

axiom mxl111sf_i2c_sw_xfer_msg == $sub.ref(0, 420221);

procedure mxl111sf_i2c_sw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i19: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i39: i1;
  var $p41: ref;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i58: i1;
  var $i59: i32;
  var $p61: ref;
  var $i62: i16;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $i45: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i80: i1;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i32;
  var $i88: i1;
  var $i90: i1;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $i98: i32;
  var $i99: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i32;
  var $i103: i32;
  var $i104: i1;
  var $i106: i1;
  var $p108: ref;
  var $i109: i16;
  var $i110: i32;
  var $i111: i1;
  var $p114: ref;
  var $p115: ref;
  var $i116: i64;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $i120: i8;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i1;
  var $i130: i32;
  var $i132: i32;
  var $i133: i16;
  var $i134: i32;
  var $i135: i1;
  var $i113: i32;
  var $i136: i32;
  var $i112: i32;
  var $i81: i32;
  var $i20: i32;
  var vslice_dummy_var_266: i32;
  var vslice_dummy_var_267: i32;
  var vslice_dummy_var_268: i32;
  var vslice_dummy_var_269: i32;
  var vslice_dummy_var_270: i32;
  var vslice_dummy_var_271: i32;
  var vslice_dummy_var_272: i32;
  var vslice_dummy_var_273: i32;
  var vslice_dummy_var_274: i32;
  var vslice_dummy_var_275: i32;
  var vslice_dummy_var_276: i32;
  var vslice_dummy_var_277: i32;
  var vslice_dummy_var_278: i32;
  var vslice_dummy_var_279: i32;
  var vslice_dummy_var_280: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i82 := mxl111sf_i2c_start($p0);
    call {:si_unique_call 1079} {:cexpr "ret"} boogie_si_record_i32($i82);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i82, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    call {:si_unique_call 1080} {:cexpr "__ret___3"} boogie_si_record_i32($i84);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i84, 0);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i94 := $shl.i32($i93, 1);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i98 := mxl111sf_i2c_bitbang_sendbyte($p0, $i97);
    call {:si_unique_call 1101} {:cexpr "ret"} boogie_si_record_i32($i98);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i98, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    call {:si_unique_call 1102} {:cexpr "__ret___4"} boogie_si_record_i32($i100);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i100, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $i109 := $load.i16($M.0, $p108);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i109);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $i111 := $sgt.i32($i110, 0);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i112 := $i98;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} vslice_dummy_var_280 := mxl111sf_i2c_stop($p0);
    assume {:verifier.code 0} true;
    $i81 := $i112;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i20 := $i81;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb73:
    assume $i111 == 1;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb76;

  $bb76:
    call $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i132, $i133, $i134, $i135, $i113, $i136, vslice_dummy_var_278 := mxl111sf_i2c_sw_xfer_msg_loop_$bb76($p0, $p1, $p108, $p114, $p115, $i116, $p117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i129, $i130, $i132, $i133, $i134, $i135, $i113, $i136, vslice_dummy_var_278);
    goto $bb76_last;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i116 := $sext.i32.i64($i113);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p115, $mul.ref($i116, 1));
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i8($i119);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i121 := mxl111sf_i2c_bitbang_sendbyte($p0, $i120);
    call {:si_unique_call 1106} {:cexpr "ret"} boogie_si_record_i32($i121);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i121, 0);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    call {:si_unique_call 1107} {:cexpr "__ret___5"} boogie_si_record_i32($i123);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i123, 0);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i130 := $i121;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i132 := $add.i32($i113, 1);
    call {:si_unique_call 1110} {:cexpr "i"} boogie_si_record_i32($i132);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i133 := $load.i16($M.0, $p108);
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i135 := $sgt.i32($i134, $i132);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i136 := $i121;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $i112 := $i136;
    goto $bb75;

  $bb87:
    assume $i135 == 1;
    assume {:verifier.code 0} true;
    $i113 := $i132;
    goto $bb87_dummy;

  $bb84:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} vslice_dummy_var_279 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i20 := $i130;
    goto $bb14;

  $bb78:
    assume $i124 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i125 := $M.1;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb80;

  $bb81:
    assume $i127 == 1;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} vslice_dummy_var_278 := printk.ref.ref.i32.i32(.str.4, .str.141, $i121, 354);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb70:
    assume $i106 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} vslice_dummy_var_277 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i20 := $i98;
    goto $bb14;

  $bb64:
    assume $i101 == 1;
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i102 := $M.1;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, 16);
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $i104 := $ne.i32($i103, 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb66;

  $bb67:
    assume $i104 == 1;
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} vslice_dummy_var_276 := printk.ref.ref.i32.i32(.str.4, .str.141, $i98, 346);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb61:
    assume $i90 == 1;
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i20 := $i82;
    goto $bb14;

  $bb55:
    assume $i85 == 1;
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i86 := $M.1;
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 16);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i88 == 1);
    goto $bb57;

  $bb58:
    assume $i88 == 1;
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} vslice_dummy_var_275 := printk.ref.ref.i32.i32(.str.4, .str.141, $i82, 341);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i11 := mxl111sf_i2c_start($p0);
    call {:si_unique_call 1076} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    call {:si_unique_call 1077} {:cexpr "__ret"} boogie_si_record_i32($i13);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i13, 0);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i24 := $shl.i32($i23, 1);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i8($i24);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i26 := $sext.i8.i32($i25);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 1);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i31 := mxl111sf_i2c_bitbang_sendbyte($p0, $i30);
    call {:si_unique_call 1083} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i32($i32);
    call {:si_unique_call 1084} {:cexpr "__ret___0"} boogie_si_record_i32($i33);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i33, 0);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i44 := $sgt.i32($i43, 0);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} vslice_dummy_var_273 := mxl111sf_i2c_nack($p0);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i72 := mxl111sf_i2c_stop($p0);
    call {:si_unique_call 1096} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 0);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    call {:si_unique_call 1097} {:cexpr "__ret___2"} boogie_si_record_i32($i74);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i74, 0);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i81 := $i72;
    goto $bb54;

  $bb51:
    assume $i80 == 1;
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i20 := $i72;
    goto $bb14;

  $bb45:
    assume $i75 == 1;
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i76 := $M.1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i77 := $and.i32($i76, 16);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb47;

  $bb48:
    assume $i78 == 1;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_274 := printk.ref.ref.i32.i32(.str.4, .str.141, $i72, 335);
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb25:
    assume $i44 == 1;
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb28;

  $bb28:
    call $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $p61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i45, vslice_dummy_var_270, vslice_dummy_var_272 := mxl111sf_i2c_sw_xfer_msg_loop_$bb28($p0, $p1, $p41, $p46, $p47, $i48, $p49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $p61, $i62, $i63, $i64, $i65, $i67, $i68, $i69, $i70, $i45, vslice_dummy_var_270, vslice_dummy_var_272);
    goto $bb28_last;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p47, $mul.ref($i48, 1));
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i50 := mxl111sf_i2c_bitbang_recvbyte($p0, $p49);
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32($i50);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i50, 0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    call {:si_unique_call 1089} {:cexpr "__ret___1"} boogie_si_record_i32($i52);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i52, 0);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i59 := $i50;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i62 := $load.i16($M.0, $p61);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i62);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i63, $sub.i32(0, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i65 := $sgt.i32($i64, $i45);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i45, 1);
    call {:si_unique_call 1093} {:cexpr "i"} boogie_si_record_i32($i67);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p41);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, $i67);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i70 == 1);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb42:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i45 := $i67;
    goto $bb42_dummy;

  $bb39:
    assume $i65 == 1;
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} vslice_dummy_var_272 := mxl111sf_i2c_ack($p0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} vslice_dummy_var_271 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i20 := $i59;
    goto $bb14;

  $bb30:
    assume $i53 == 1;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $i54 := $M.1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb32;

  $bb33:
    assume $i56 == 1;
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} vslice_dummy_var_270 := printk.ref.ref.i32.i32(.str.4, .str.141, $i50, 323);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb22:
    assume $i39 == 1;
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} vslice_dummy_var_269 := mxl111sf_i2c_stop($p0);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb14;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i35 := $M.1;
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 16);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb18;

  $bb19:
    assume $i37 == 1;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} vslice_dummy_var_268 := printk.ref.ref.i32.i32(.str.4, .str.141, $i31, 315);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i20 := $i11;
    goto $bb14;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i15 := $M.1;
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} vslice_dummy_var_267 := printk.ref.ref.i32.i32(.str.4, .str.141, $i11, 310);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} vslice_dummy_var_266 := printk.ref.ref(.str.16, .str.141);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb87_dummy:
    assume false;
    return;

  $bb76_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  $bb42_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;
}



const ldv_mutex_unlock_45: ref;

axiom ldv_mutex_unlock_45 == $sub.ref(0, 421253);

procedure ldv_mutex_unlock_45($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_45($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} ldv_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} mutex_unlock($p0);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const ldv_mutex_unlock_i2c_mutex_of_dvb_usb_device: ref;

axiom ldv_mutex_unlock_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 422285);

procedure ldv_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0: ref);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_unlock_i2c_mutex_of_dvb_usb_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} ldv_error();
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1115} {:cexpr "ldv_mutex_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i32(1);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_start: ref;

axiom mxl111sf_i2c_start == $sub.ref(0, 423317);

procedure mxl111sf_i2c_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_start($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i14: i32;
  var vslice_dummy_var_281: i32;
  var vslice_dummy_var_282: i32;
  var vslice_dummy_var_283: i32;
  var vslice_dummy_var_284: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i5 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1118} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1119} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i15 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 1122} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1123} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $i24 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 1126} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1127} {:cexpr "__ret___1"} boogie_si_record_i32($i26);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1128} vslice_dummy_var_284 := printk.ref.ref.i32.i32(.str.4, .str.142, $i24, 217);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} vslice_dummy_var_283 := printk.ref.ref.i32.i32(.str.4, .str.142, $i15, 212);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} vslice_dummy_var_282 := printk.ref.ref.i32.i32(.str.4, .str.142, $i5, 207);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} vslice_dummy_var_281 := printk.ref.ref(.str.16, .str.142);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_bitbang_sendbyte: ref;

axiom mxl111sf_i2c_bitbang_sendbyte == $sub.ref(0, 424349);

procedure mxl111sf_i2c_bitbang_sendbyte($p0: ref, $i1: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_bitbang_sendbyte($p0: ref, $i1: i8) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i16: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $i74: i1;
  var $i75: i32;
  var $i76: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i92: i1;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i17: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i8;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $i115: i32;
  var $i116: i1;
  var $i117: i32;
  var $i118: i32;
  var $i119: i1;
  var $i121: i8;
  var $i122: i32;
  var $i123: i32;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i32;
  var $i129: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i134: i8;
  var $i135: i32;
  var $i136: i32;
  var $i137: i8;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i144: i8;
  var $i145: i32;
  var $i146: i32;
  var $i147: i8;
  var $i148: i32;
  var $i149: i1;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i154: i8;
  var $i155: i32;
  var $i156: i32;
  var $i157: i8;
  var $i158: i32;
  var $i159: i1;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i164: i32;
  var $i165: i32;
  var $i166: i1;
  var $i167: i8;
  var $i168: i32;
  var $i169: i32;
  var $i170: i8;
  var $i171: i32;
  var $i172: i1;
  var $i173: i32;
  var $i174: i32;
  var $i175: i1;
  var $i177: i8;
  var $i178: i32;
  var $i179: i32;
  var $i180: i8;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i8;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i32;
  var $i195: i1;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i200: i8;
  var $i201: i32;
  var $i202: i32;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $i206: i32;
  var $i207: i32;
  var $i208: i1;
  var $i210: i8;
  var $i211: i32;
  var $i212: i32;
  var $i213: i8;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $i218: i1;
  var $i220: i8;
  var $i221: i32;
  var $i222: i32;
  var $i223: i8;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i230: i32;
  var $i231: i32;
  var $i232: i1;
  var $i233: i8;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i32;
  var $i241: i1;
  var $i243: i8;
  var $i244: i32;
  var $i245: i32;
  var $i246: i8;
  var $i247: i32;
  var $i248: i1;
  var $i249: i32;
  var $i250: i32;
  var $i251: i1;
  var $i253: i8;
  var $i254: i32;
  var $i255: i32;
  var $i256: i8;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $i263: i32;
  var $i264: i32;
  var $i265: i1;
  var $i266: i8;
  var $i267: i32;
  var $i268: i32;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i32;
  var $i274: i1;
  var $i276: i8;
  var $i277: i32;
  var $i278: i32;
  var $i279: i8;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i32;
  var $i284: i1;
  var $i286: i8;
  var $i287: i32;
  var $i288: i32;
  var $i289: i8;
  var $i290: i32;
  var $i291: i1;
  var $i292: i32;
  var $i293: i32;
  var $i294: i1;
  var $i296: i32;
  var $i297: i32;
  var $i298: i1;
  var $i299: i8;
  var $i300: i32;
  var $i301: i32;
  var $i302: i8;
  var $i303: i32;
  var $i304: i1;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $i309: i8;
  var $i310: i32;
  var $i311: i32;
  var $i312: i8;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i32;
  var $i317: i1;
  var $i319: i8;
  var $i320: i32;
  var $i321: i32;
  var $i322: i8;
  var $i323: i32;
  var $i324: i1;
  var $i325: i32;
  var $i326: i32;
  var $i327: i1;
  var vslice_dummy_var_285: i32;
  var vslice_dummy_var_286: i32;
  var vslice_dummy_var_287: i32;
  var vslice_dummy_var_288: i32;
  var vslice_dummy_var_289: i32;
  var vslice_dummy_var_290: i32;
  var vslice_dummy_var_291: i32;
  var vslice_dummy_var_292: i32;
  var vslice_dummy_var_293: i32;
  var vslice_dummy_var_294: i32;
  var vslice_dummy_var_295: i32;
  var vslice_dummy_var_296: i32;
  var vslice_dummy_var_297: i32;
  var vslice_dummy_var_298: i32;
  var vslice_dummy_var_299: i32;
  var vslice_dummy_var_300: i32;
  var vslice_dummy_var_301: i32;
  var vslice_dummy_var_302: i32;
  var vslice_dummy_var_303: i32;
  var vslice_dummy_var_304: i32;
  var vslice_dummy_var_305: i32;
  var vslice_dummy_var_306: i32;
  var vslice_dummy_var_307: i32;
  var vslice_dummy_var_308: i32;
  var vslice_dummy_var_309: i32;
  var vslice_dummy_var_310: i32;
  var vslice_dummy_var_311: i32;
  var vslice_dummy_var_312: i32;
  var vslice_dummy_var_313: i32;
  var vslice_dummy_var_314: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 1130} {:cexpr "mxl111sf_i2c_bitbang_sendbyte:arg:byte"} boogie_si_record_i8($i1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i8 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 1133} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    call {:si_unique_call 1134} {:cexpr "__ret"} boogie_si_record_i32($i10);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i10, 0);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 128);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.3, $p2);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 18);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} $i25 := mxl111sf_write_reg($p0, 26, $i24);
    call {:si_unique_call 1137} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i31 := $i25;
    assume {:branchcond $i26} true;
    goto $bb25, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.3, $p2);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 22);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i36 := mxl111sf_write_reg($p0, 26, $i35);
    call {:si_unique_call 1140} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i42 := $i36;
    assume {:branchcond $i37} true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.3, $p2);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 18);
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i47 := mxl111sf_write_reg($p0, 26, $i46);
    call {:si_unique_call 1143} {:cexpr "ret"} boogie_si_record_i32($i47);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i48 := $slt.i32($i47, 0);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i53 := $i47;
    assume true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i1);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 64);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i100 == 1);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.3, $p2);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, 18);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i105 := mxl111sf_write_reg($p0, 26, $i104);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i105, 0);
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i31 := $i105;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.3, $p2);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 22);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i115 := mxl111sf_write_reg($p0, 26, $i114);
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i115, 0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    assume {:branchcond $i116} true;
    goto $bb105, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i116 == 1);
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $i42 := $i115;
    assume {:branchcond $i116} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.3, $p2);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i123 := $or.i32($i122, 18);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i125 := mxl111sf_write_reg($p0, 26, $i124);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i125, 0);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    assume {:branchcond $i126} true;
    goto $bb114, $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume !($i126 == 1);
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i53 := $i125;
    assume {:branchcond $i126} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i1);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 32);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i133 == 1);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.3, $p2);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i134);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i135, 18);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i137 := $trunc.i32.i8($i136);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i138 := mxl111sf_write_reg($p0, 26, $i137);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i139 := $slt.i32($i138, 0);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb127, $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i31 := $i138;
    assume {:branchcond $i139} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.3, $p2);
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i32($i144);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, 22);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i147 := $trunc.i32.i8($i146);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i148 := mxl111sf_write_reg($p0, 26, $i147);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i149 := $slt.i32($i148, 0);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb136, $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i42 := $i148;
    assume {:branchcond $i149} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.3, $p2);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $i156 := $or.i32($i155, 18);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i8($i156);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i158 := mxl111sf_write_reg($p0, 26, $i157);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i159 := $slt.i32($i158, 0);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i53 := $i158;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i32($i1);
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, 16);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i166 := $ne.i32($i165, 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i166 == 1);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.3, $p2);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i32($i167);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i168, 18);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i32.i8($i169);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i171 := mxl111sf_write_reg($p0, 26, $i170);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i172 := $slt.i32($i171, 0);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i31 := $i171;
    assume {:branchcond $i172} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $i177 := $load.i8($M.3, $p2);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i178 := $zext.i8.i32($i177);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i179 := $or.i32($i178, 22);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i8($i179);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i181 := mxl111sf_write_reg($p0, 26, $i180);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i181, 0);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $i42 := $i181;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.3, $p2);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $i189 := $or.i32($i188, 18);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i32.i8($i189);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $i191 := mxl111sf_write_reg($p0, 26, $i190);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $i192 := $slt.i32($i191, 0);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i192 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i53 := $i191;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i1);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 8);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i199 == 1);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.3, $p2);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i32($i200);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i202 := $or.i32($i201, 18);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i203 := $trunc.i32.i8($i202);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i204 := mxl111sf_write_reg($p0, 26, $i203);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $i205 := $slt.i32($i204, 0);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i31 := $i204;
    assume {:branchcond $i205} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.3, $p2);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i212 := $or.i32($i211, 22);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i213 := $trunc.i32.i8($i212);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i214 := mxl111sf_write_reg($p0, 26, $i213);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i214, 0);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i42 := $i214;
    assume {:branchcond $i215} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.3, $p2);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, 18);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i32.i8($i222);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i224 := mxl111sf_write_reg($p0, 26, $i223);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $i225 := $slt.i32($i224, 0);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i225 == 1);
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $i53 := $i224;
    assume {:branchcond $i225} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i230 := $zext.i8.i32($i1);
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i231 := $and.i32($i230, 4);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $i232 := $ne.i32($i231, 0);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i232 == 1);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.3, $p2);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i233);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i235 := $or.i32($i234, 18);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i237 := mxl111sf_write_reg($p0, 26, $i236);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i238 := $slt.i32($i237, 0);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb220, $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    assume !($i238 == 1);
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $i31 := $i237;
    assume {:branchcond $i238} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.3, $p2);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i244 := $zext.i8.i32($i243);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i245 := $or.i32($i244, 22);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i245);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $i247 := mxl111sf_write_reg($p0, 26, $i246);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, 0);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i248 == 1);
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i42 := $i247;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $i253 := $load.i8($M.3, $p2);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i254 := $zext.i8.i32($i253);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $i255 := $or.i32($i254, 18);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i256 := $trunc.i32.i8($i255);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i257 := mxl111sf_write_reg($p0, 26, $i256);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i258 := $slt.i32($i257, 0);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i258} true;
    goto $bb238, $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    assume !($i258 == 1);
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $i53 := $i257;
    assume {:branchcond $i258} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $i263 := $zext.i8.i32($i1);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i264 := $and.i32($i263, 2);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i265 := $ne.i32($i264, 0);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i265 == 1);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.3, $p2);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i268 := $or.i32($i267, 18);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i269 := $trunc.i32.i8($i268);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i270 := mxl111sf_write_reg($p0, 26, $i269);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i271 := $slt.i32($i270, 0);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    assume !($i271 == 1);
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    $i31 := $i270;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i276 := $load.i8($M.3, $p2);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i277 := $zext.i8.i32($i276);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i278 := $or.i32($i277, 22);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i279 := $trunc.i32.i8($i278);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1193} $i280 := mxl111sf_write_reg($p0, 26, $i279);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i280, 0);
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i281 == 1);
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $i42 := $i280;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.3, $p2);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i32($i286);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $i288 := $or.i32($i287, 18);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $i289 := $trunc.i32.i8($i288);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i290 := mxl111sf_write_reg($p0, 26, $i289);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i291 := $slt.i32($i290, 0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i53 := $i290;
    assume {:branchcond $i291} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $i296 := $zext.i8.i32($i1);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i297 := $and.i32($i296, 1);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i298 == 1);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $i299 := $load.i8($M.3, $p2);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i300 := $zext.i8.i32($i299);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i301 := $or.i32($i300, 18);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i302 := $trunc.i32.i8($i301);
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i303 := mxl111sf_write_reg($p0, 26, $i302);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i304 := $slt.i32($i303, 0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb282, $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $i31 := $i303;
    assume {:branchcond $i304} true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $i309 := $load.i8($M.3, $p2);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i310 := $zext.i8.i32($i309);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i311 := $or.i32($i310, 22);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i312 := $trunc.i32.i8($i311);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $i313 := mxl111sf_write_reg($p0, 26, $i312);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $i314 := $slt.i32($i313, 0);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i314 == 1);
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    $i42 := $i313;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $i319 := $load.i8($M.3, $p2);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i320 := $zext.i8.i32($i319);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i321 := $or.i32($i320, 18);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i322 := $trunc.i32.i8($i321);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i323 := mxl111sf_write_reg($p0, 26, $i322);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i323, 0);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb300, $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    assume !($i324 == 1);
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    $i53 := $i323;
    assume {:branchcond $i324} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 1);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i66 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1150} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $i68 := $zext.i1.i32($i67);
    call {:si_unique_call 1151} {:cexpr "__ret___4"} boogie_si_record_i32($i68);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i68, 0);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i75 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 1154} {:cexpr "ret"} boogie_si_record_i32($i75);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i75, 0);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i77 := $zext.i1.i32($i76);
    call {:si_unique_call 1155} {:cexpr "__ret___5"} boogie_si_record_i32($i77);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i78 := $ne.i32($i77, 0);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i77, 0);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i84 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1158} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $i85 := $slt.i32($i84, 0);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i32($i85);
    call {:si_unique_call 1159} {:cexpr "__ret___6"} boogie_si_record_i32($i86);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i86, 0);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.3, $p2);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 4);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i84;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i17 := $i97;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb90:
    assume $i96 == 1;
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(0, 5);
    goto $bb92;

  $bb87:
    assume $i92 == 1;
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i17 := $i84;
    goto $bb12;

  $bb81:
    assume $i87 == 1;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i88 := $M.1;
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 16);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb83;

  $bb84:
    assume $i90 == 1;
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} vslice_dummy_var_293 := printk.ref.ref.i32.i32(.str.4, .str.143, $i84, 150);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb78:
    assume $i83 == 1;
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i17 := $i75;
    goto $bb12;

  $bb72:
    assume $i78 == 1;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $i79 := $M.1;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 16);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb74;

  $bb75:
    assume $i81 == 1;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} vslice_dummy_var_292 := printk.ref.ref.i32.i32(.str.4, .str.143, $i75, 144);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i74 == 1;
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i17 := $i66;
    goto $bb12;

  $bb63:
    assume $i69 == 1;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i70 := $M.1;
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 16);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb65;

  $bb66:
    assume $i72 == 1;
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} vslice_dummy_var_291 := printk.ref.ref.i32.i32(.str.4, .str.143, $i66, 140);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb51:
    assume $i56 == 1;
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i57 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1146} {:cexpr "ret"} boogie_si_record_i32($i57);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i57, 0);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    call {:si_unique_call 1147} {:cexpr "__ret___3"} boogie_si_record_i32($i59);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i59, 0);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb59:
    assume $i65 == 1;
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $i17 := $i57;
    goto $bb12;

  $bb53:
    assume $i60 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i61 := $M.1;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 16);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb55;

  $bb56:
    assume $i63 == 1;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} vslice_dummy_var_290 := printk.ref.ref.i32.i32(.str.4, .str.143, $i57, 133);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb306:
    assume {:verifier.code 0} true;
    assume $i324 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i17 := $i53;
    goto $bb12;

  $bb300:
    assume $i324 == 1;
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i325 := $M.1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i326 := $and.i32($i325, 16);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i327 := $ne.i32($i326, 0);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb303, $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb302;

  $bb303:
    assume $i327 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} vslice_dummy_var_314 := printk.ref.ref.i32.i32(.str.4, .str.143, $i323, 125);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb297:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $i17 := $i42;
    goto $bb12;

  $bb291:
    assume $i314 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i315 := $M.1;
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i316 := $and.i32($i315, 16);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i317} true;
    goto $bb294, $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    assume !($i317 == 1);
    goto $bb293;

  $bb294:
    assume $i317 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} vslice_dummy_var_313 := printk.ref.ref.i32.i32(.str.4, .str.143, $i313, 120);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i17 := $i31;
    goto $bb12;

  $bb282:
    assume $i304 == 1;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i305 := $M.1;
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 16);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb285, $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb284;

  $bb285:
    assume $i307 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} vslice_dummy_var_312 := printk.ref.ref.i32.i32(.str.4, .str.143, $i303, 115);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb279:
    assume $i298 == 1;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i291 == 1;
    goto $bb46;

  $bb269:
    assume $i291 == 1;
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $i292 := $M.1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i293 := $and.i32($i292, 16);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb272, $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    assume !($i294 == 1);
    goto $bb271;

  $bb272:
    assume $i294 == 1;
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} vslice_dummy_var_311 := printk.ref.ref.i32.i32(.str.4, .str.143, $i290, 125);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb266:
    assume {:verifier.code 0} true;
    assume $i281 == 1;
    goto $bb36;

  $bb260:
    assume $i281 == 1;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i282 := $M.1;
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i283 := $and.i32($i282, 16);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i284 := $ne.i32($i283, 0);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i284 == 1);
    goto $bb262;

  $bb263:
    assume $i284 == 1;
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} vslice_dummy_var_310 := printk.ref.ref.i32.i32(.str.4, .str.143, $i280, 120);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb257:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb26;

  $bb251:
    assume $i271 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i272 := $M.1;
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $i273 := $and.i32($i272, 16);
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i274} true;
    goto $bb254, $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    assume !($i274 == 1);
    goto $bb253;

  $bb254:
    assume $i274 == 1;
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} vslice_dummy_var_309 := printk.ref.ref.i32.i32(.str.4, .str.143, $i270, 115);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb248:
    assume $i265 == 1;
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i258 == 1;
    goto $bb46;

  $bb238:
    assume $i258 == 1;
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i259 := $M.1;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $i260 := $and.i32($i259, 16);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i261 := $ne.i32($i260, 0);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb241, $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb240;

  $bb241:
    assume $i261 == 1;
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} vslice_dummy_var_308 := printk.ref.ref.i32.i32(.str.4, .str.143, $i257, 125);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i248 == 1;
    goto $bb36;

  $bb229:
    assume $i248 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i249 := $M.1;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i250 := $and.i32($i249, 16);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i251 == 1);
    goto $bb231;

  $bb232:
    assume $i251 == 1;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} vslice_dummy_var_307 := printk.ref.ref.i32.i32(.str.4, .str.143, $i247, 120);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb226:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb26;

  $bb220:
    assume $i238 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i239 := $M.1;
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i240 := $and.i32($i239, 16);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $i241 := $ne.i32($i240, 0);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb223, $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    assume !($i241 == 1);
    goto $bb222;

  $bb223:
    assume $i241 == 1;
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} vslice_dummy_var_306 := printk.ref.ref.i32.i32(.str.4, .str.143, $i237, 115);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb217:
    assume $i232 == 1;
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb213:
    assume {:verifier.code 0} true;
    assume $i225 == 1;
    goto $bb46;

  $bb207:
    assume $i225 == 1;
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $i226 := $M.1;
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $i227 := $and.i32($i226, 16);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i228 := $ne.i32($i227, 0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb210, $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb209;

  $bb210:
    assume $i228 == 1;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} vslice_dummy_var_305 := printk.ref.ref.i32.i32(.str.4, .str.143, $i224, 125);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i215 == 1;
    goto $bb36;

  $bb198:
    assume $i215 == 1;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i216 := $M.1;
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i216, 16);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb201, $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume !($i218 == 1);
    goto $bb200;

  $bb201:
    assume $i218 == 1;
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} vslice_dummy_var_304 := printk.ref.ref.i32.i32(.str.4, .str.143, $i214, 120);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb26;

  $bb189:
    assume $i205 == 1;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i206 := $M.1;
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $i207 := $and.i32($i206, 16);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i208 := $ne.i32($i207, 0);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb191;

  $bb192:
    assume $i208 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} vslice_dummy_var_303 := printk.ref.ref.i32.i32(.str.4, .str.143, $i204, 115);
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb186:
    assume $i199 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb182:
    assume {:verifier.code 0} true;
    assume $i192 == 1;
    goto $bb46;

  $bb176:
    assume $i192 == 1;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i193 := $M.1;
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 16);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i195 := $ne.i32($i194, 0);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb178;

  $bb179:
    assume $i195 == 1;
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} vslice_dummy_var_302 := printk.ref.ref.i32.i32(.str.4, .str.143, $i191, 125);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb36;

  $bb167:
    assume $i182 == 1;
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i183 := $M.1;
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 16);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb170, $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb169;

  $bb170:
    assume $i185 == 1;
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} vslice_dummy_var_301 := printk.ref.ref.i32.i32(.str.4, .str.143, $i181, 120);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb26;

  $bb158:
    assume $i172 == 1;
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i173 := $M.1;
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i173, 16);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i175 := $ne.i32($i174, 0);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb160;

  $bb161:
    assume $i175 == 1;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} vslice_dummy_var_300 := printk.ref.ref.i32.i32(.str.4, .str.143, $i171, 115);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb155:
    assume $i166 == 1;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i159 == 1;
    goto $bb46;

  $bb145:
    assume $i159 == 1;
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i160 := $M.1;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, 16);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i162 := $ne.i32($i161, 0);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i162} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i162 == 1);
    goto $bb147;

  $bb148:
    assume $i162 == 1;
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} vslice_dummy_var_299 := printk.ref.ref.i32.i32(.str.4, .str.143, $i158, 125);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb142:
    assume {:verifier.code 0} true;
    assume $i149 == 1;
    goto $bb36;

  $bb136:
    assume $i149 == 1;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i150 := $M.1;
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i151 := $and.i32($i150, 16);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb139, $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    assume !($i152 == 1);
    goto $bb138;

  $bb139:
    assume $i152 == 1;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} vslice_dummy_var_298 := printk.ref.ref.i32.i32(.str.4, .str.143, $i148, 120);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb26;

  $bb127:
    assume $i139 == 1;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i140 := $M.1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 16);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i142 := $ne.i32($i141, 0);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    assume !($i142 == 1);
    goto $bb129;

  $bb130:
    assume $i142 == 1;
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} vslice_dummy_var_297 := printk.ref.ref.i32.i32(.str.4, .str.143, $i138, 115);
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb124:
    assume $i133 == 1;
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb46;

  $bb114:
    assume $i126 == 1;
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i127 := $M.1;
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i128 := $and.i32($i127, 16);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i128, 0);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb116;

  $bb117:
    assume $i129 == 1;
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} vslice_dummy_var_296 := printk.ref.ref.i32.i32(.str.4, .str.143, $i125, 125);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i116 == 1;
    goto $bb36;

  $bb105:
    assume $i116 == 1;
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i117 := $M.1;
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i118 := $and.i32($i117, 16);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb108, $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb107;

  $bb108:
    assume $i119 == 1;
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} vslice_dummy_var_295 := printk.ref.ref.i32.i32(.str.4, .str.143, $i115, 120);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb26;

  $bb96:
    assume $i106 == 1;
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i107 := $M.1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 16);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume !($i109 == 1);
    goto $bb98;

  $bb99:
    assume $i109 == 1;
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} vslice_dummy_var_294 := printk.ref.ref.i32.i32(.str.4, .str.143, $i105, 115);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb93:
    assume $i100 == 1;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb46;

  $bb39:
    assume $i48 == 1;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i49 := $M.1;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 16);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb41;

  $bb42:
    assume $i51 == 1;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} vslice_dummy_var_289 := printk.ref.ref.i32.i32(.str.4, .str.143, $i47, 125);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb36;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb31;

  $bb32:
    assume $i40 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} vslice_dummy_var_288 := printk.ref.ref.i32.i32(.str.4, .str.143, $i36, 120);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb26;

  $bb19:
    assume $i26 == 1;
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i27 := $M.1;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 16);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb21;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} vslice_dummy_var_287 := printk.ref.ref.i32.i32(.str.4, .str.143, $i25, 115);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 8);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i17 := $i8;
    goto $bb12;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $i12 := $M.1;
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 16);
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb6;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} vslice_dummy_var_286 := printk.ref.ref.i32.i32(.str.4, .str.143, $i8, 106);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} vslice_dummy_var_285 := printk.ref.ref.i32(.str.29, .str.143, $i6);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_stop: ref;

axiom mxl111sf_i2c_stop == $sub.ref(0, 425381);

procedure mxl111sf_i2c_stop($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_stop($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i32: i1;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i14: i32;
  var vslice_dummy_var_315: i32;
  var vslice_dummy_var_316: i32;
  var vslice_dummy_var_317: i32;
  var vslice_dummy_var_318: i32;
  var vslice_dummy_var_319: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i5 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 1205} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1206} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1208} $i15 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 1209} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1210} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i24 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1213} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i32($i25);
    call {:si_unique_call 1214} {:cexpr "__ret___1"} boogie_si_record_i32($i26);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i26, 0);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i33 := mxl111sf_write_reg($p0, 26, 28);
    call {:si_unique_call 1217} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    call {:si_unique_call 1218} {:cexpr "__ret___2"} boogie_si_record_i32($i35);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i14 := $i33;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb32:
    assume $i36 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $i37 := $M.1;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 16);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb34;

  $bb35:
    assume $i39 == 1;
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} vslice_dummy_var_319 := printk.ref.ref.i32.i32(.str.4, .str.144, $i33, 245);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i32 == 1;
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i14 := $i24;
    goto $bb12;

  $bb23:
    assume $i27 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i28 := $M.1;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 16);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb25;

  $bb26:
    assume $i30 == 1;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} vslice_dummy_var_318 := printk.ref.ref.i32.i32(.str.4, .str.144, $i24, 240);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i23 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} vslice_dummy_var_317 := printk.ref.ref.i32.i32(.str.4, .str.144, $i15, 235);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} vslice_dummy_var_316 := printk.ref.ref.i32.i32(.str.4, .str.144, $i5, 230);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} vslice_dummy_var_315 := printk.ref.ref(.str.16, .str.144);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_bitbang_recvbyte: ref;

axiom mxl111sf_i2c_bitbang_recvbyte == $sub.ref(0, 426413);

procedure mxl111sf_i2c_bitbang_recvbyte($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_bitbang_recvbyte($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i15: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i42: i32;
  var $i16: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i8;
  var $i61: i8;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i1;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $i87: i8;
  var $i91: i32;
  var $i92: i1;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i32;
  var $i101: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i32;
  var $i107: i1;
  var $i109: i8;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i113: i8;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i32;
  var $i121: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i32;
  var $i126: i32;
  var $i127: i1;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i32;
  var $i133: i1;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i139: i8;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i149: i32;
  var $i150: i1;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i155: i32;
  var $i156: i1;
  var $i157: i32;
  var $i158: i32;
  var $i159: i1;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i1;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i165: i8;
  var $i169: i32;
  var $i170: i1;
  var $i171: i32;
  var $i172: i32;
  var $i173: i1;
  var $i175: i32;
  var $i176: i1;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i181: i32;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i187: i8;
  var $i188: i32;
  var $i189: i32;
  var $i190: i1;
  var $i192: i32;
  var $i193: i32;
  var $i194: i8;
  var $i191: i8;
  var $i195: i32;
  var $i196: i1;
  var $i197: i32;
  var $i198: i32;
  var $i199: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i32;
  var $i205: i1;
  var $i207: i32;
  var $i208: i1;
  var $i209: i32;
  var $i210: i32;
  var $i211: i1;
  var $i213: i8;
  var $i214: i32;
  var $i215: i32;
  var $i216: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i43: i8;
  var $i44: i32;
  var $i220: i1;
  var $i221: i32;
  var $i222: i32;
  var $i223: i1;
  var vslice_dummy_var_320: i32;
  var vslice_dummy_var_321: i32;
  var vslice_dummy_var_322: i32;
  var vslice_dummy_var_323: i32;
  var vslice_dummy_var_324: i32;
  var vslice_dummy_var_325: i32;
  var vslice_dummy_var_326: i32;
  var vslice_dummy_var_327: i32;
  var vslice_dummy_var_328: i32;
  var vslice_dummy_var_329: i32;
  var vslice_dummy_var_330: i32;
  var vslice_dummy_var_331: i32;
  var vslice_dummy_var_332: i32;
  var vslice_dummy_var_333: i32;
  var vslice_dummy_var_334: i32;
  var vslice_dummy_var_335: i32;
  var vslice_dummy_var_336: i32;
  var vslice_dummy_var_337: i32;
  var vslice_dummy_var_338: i32;
  var vslice_dummy_var_339: i32;
  var vslice_dummy_var_340: i32;
  var vslice_dummy_var_341: i32;
  var vslice_dummy_var_342: i32;
  var vslice_dummy_var_343: i32;
  var vslice_dummy_var_344: i32;
  var vslice_dummy_var_345: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p2, 0);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i3 := $M.1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 4);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i7 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1223} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 0);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 1224} {:cexpr "__ret"} boogie_si_record_i32($i9);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i17 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1227} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 0);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i23 := $i17;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $i24 := mxl111sf_read_reg($p0, 47, $p2);
    call {:si_unique_call 1230} {:cexpr "ret"} boogie_si_record_i32($i24);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i30 := $i24;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.3, $p2);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i36 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1233} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i42 := $i36;
    assume {:branchcond $i37} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i45 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i45, 0);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i23 := $i45;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i51 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i51, 0);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb60, $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i30 := $i51;
    assume {:branchcond $i52} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.3, $p2);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 4);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $i35;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i65 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i65, 0);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i42 := $i65;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i71 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i71, 0);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb82, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i23 := $i71;
    assume {:branchcond $i72} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i77 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i77, 0);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb91, $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i30 := $i77;
    assume {:branchcond $i78} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.3, $p2);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 4);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i61;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i91 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    assume {:branchcond $i92} true;
    goto $bb103, $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i42 := $i91;
    assume {:branchcond $i92} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} $i97 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i97, 0);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i23 := $i97;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $i103 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 0);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i104} true;
    goto $bb122, $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    assume !($i104 == 1);
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i30 := $i103;
    assume {:branchcond $i104} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.3, $p2);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 4);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := $i87;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} $i117 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i117, 0);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $i42 := $i117;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i123 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume !($i124 == 1);
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $i23 := $i123;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i129 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i129, 0);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i130} true;
    goto $bb153, $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i30 := $i129;
    assume {:branchcond $i130} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.3, $p2);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 4);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i138} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    $i139 := $i113;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $i143 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i144 := $slt.i32($i143, 0);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i42 := $i143;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i149 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i150 := $slt.i32($i149, 0);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i150} true;
    goto $bb175, $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $i23 := $i149;
    assume {:branchcond $i150} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $i155 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i156 := $slt.i32($i155, 0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $i30 := $i155;
    assume {:branchcond $i156} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.3, $p2);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 4);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i164 := $ne.i32($i163, 0);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i164} true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    $i165 := $i139;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i169 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i170 := $slt.i32($i169, 0);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb196, $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    assume !($i170 == 1);
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i42 := $i169;
    assume {:branchcond $i170} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i170 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $i175 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i176 := $slt.i32($i175, 0);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i176} true;
    goto $bb206, $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    assume !($i176 == 1);
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i23 := $i175;
    assume {:branchcond $i176} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i181 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $i182 := $slt.i32($i181, 0);
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i30 := $i181;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.3, $p2);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i188, 4);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i190 := $ne.i32($i189, 0);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i191 := $i165;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i195 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i195, 0);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i42 := $i195;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $i201 := mxl111sf_write_reg($p0, 26, 30);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i201, 0);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb237, $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $i23 := $i201;
    assume {:branchcond $i202} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i207 := mxl111sf_read_reg($p0, 47, $p2);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i208 := $slt.i32($i207, 0);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i208} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i208 == 1);
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i30 := $i207;
    assume {:branchcond $i208} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i213 := $load.i8($M.3, $p2);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i214 := $zext.i8.i32($i213);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i215 := $and.i32($i214, 4);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i216 := $ne.i32($i215, 0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i216} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    $i43 := $i191;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i44 := mxl111sf_write_reg($p0, 26, 26);
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $i220 := $slt.i32($i44, 0);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i220} true;
    goto $bb258, $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    assume !($i220 == 1);
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i42 := $i44;
    assume {:branchcond $i220} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i43);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $i16 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i16 := $i42;
    goto $bb12;

  $bb258:
    assume $i220 == 1;
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i221 := $M.1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i221, 16);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb261, $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb260;

  $bb261:
    assume $i223 == 1;
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} vslice_dummy_var_345 := printk.ref.ref.i32.i32(.str.4, .str.145, $i44, 191);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb255:
    assume $i216 == 1;
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    $i217 := $sext.i8.i32($i191);
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $i218 := $or.i32(1, $i217);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i8($i218);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i43 := $i219;
    goto $bb257;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i16 := $i30;
    goto $bb12;

  $bb246:
    assume $i208 == 1;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i209 := $M.1;
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $i210 := $and.i32($i209, 16);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i211 := $ne.i32($i210, 0);
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i211} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb248;

  $bb249:
    assume $i211 == 1;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} vslice_dummy_var_344 := printk.ref.ref.i32.i32(.str.4, .str.145, $i207, 183);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i16 := $i23;
    goto $bb12;

  $bb237:
    assume $i202 == 1;
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    $i203 := $M.1;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $i204 := $and.i32($i203, 16);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb240, $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb239;

  $bb240:
    assume $i205 == 1;
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} vslice_dummy_var_343 := printk.ref.ref.i32.i32(.str.4, .str.145, $i201, 179);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb233:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb46;

  $bb227:
    assume $i196 == 1;
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i197 := $M.1;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i198 := $and.i32($i197, 16);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i199 := $ne.i32($i198, 0);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    assume !($i199 == 1);
    goto $bb229;

  $bb230:
    assume $i199 == 1;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} vslice_dummy_var_342 := printk.ref.ref.i32.i32(.str.4, .str.145, $i195, 191);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb224:
    assume $i190 == 1;
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i192 := $sext.i8.i32($i165);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i193 := $or.i32(2, $i192);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i194 := $trunc.i32.i8($i193);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $i191 := $i194;
    goto $bb226;

  $bb221:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb33;

  $bb215:
    assume $i182 == 1;
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $i183 := $M.1;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 16);
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb217;

  $bb218:
    assume $i185 == 1;
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} vslice_dummy_var_341 := printk.ref.ref.i32.i32(.str.4, .str.145, $i181, 183);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i176 == 1;
    goto $bb23;

  $bb206:
    assume $i176 == 1;
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i177 := $M.1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i178 := $and.i32($i177, 16);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i179 := $ne.i32($i178, 0);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb209, $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    assume !($i179 == 1);
    goto $bb208;

  $bb209:
    assume $i179 == 1;
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} vslice_dummy_var_340 := printk.ref.ref.i32.i32(.str.4, .str.145, $i175, 179);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb202:
    assume {:verifier.code 0} true;
    assume $i170 == 1;
    goto $bb46;

  $bb196:
    assume $i170 == 1;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i171 := $M.1;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $i172 := $and.i32($i171, 16);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $i173 := $ne.i32($i172, 0);
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    assume !($i173 == 1);
    goto $bb198;

  $bb199:
    assume $i173 == 1;
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} vslice_dummy_var_339 := printk.ref.ref.i32.i32(.str.4, .str.145, $i169, 191);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb193:
    assume $i164 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i166 := $sext.i8.i32($i139);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i167 := $or.i32(4, $i166);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i8($i167);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i165 := $i168;
    goto $bb195;

  $bb190:
    assume {:verifier.code 0} true;
    assume $i156 == 1;
    goto $bb33;

  $bb184:
    assume $i156 == 1;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i157 := $M.1;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i158 := $and.i32($i157, 16);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i159 := $ne.i32($i158, 0);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i159 == 1);
    goto $bb186;

  $bb187:
    assume $i159 == 1;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} vslice_dummy_var_338 := printk.ref.ref.i32.i32(.str.4, .str.145, $i155, 183);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb181:
    assume {:verifier.code 0} true;
    assume $i150 == 1;
    goto $bb23;

  $bb175:
    assume $i150 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i151 := $M.1;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 16);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i153 := $ne.i32($i152, 0);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    assume {:branchcond $i153} true;
    goto $bb178, $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    assume !($i153 == 1);
    goto $bb177;

  $bb178:
    assume $i153 == 1;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} vslice_dummy_var_337 := printk.ref.ref.i32.i32(.str.4, .str.145, $i149, 179);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb46;

  $bb165:
    assume $i144 == 1;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i145 := $M.1;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 16);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume !($i147 == 1);
    goto $bb167;

  $bb168:
    assume $i147 == 1;
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} vslice_dummy_var_336 := printk.ref.ref.i32.i32(.str.4, .str.145, $i143, 191);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb162:
    assume $i138 == 1;
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i140 := $sext.i8.i32($i113);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i141 := $or.i32(8, $i140);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i8($i141);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $i139 := $i142;
    goto $bb164;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb33;

  $bb153:
    assume $i130 == 1;
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i131 := $M.1;
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i131, 16);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb156, $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    assume !($i133 == 1);
    goto $bb155;

  $bb156:
    assume $i133 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} vslice_dummy_var_335 := printk.ref.ref.i32.i32(.str.4, .str.145, $i129, 183);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb150:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb23;

  $bb144:
    assume $i124 == 1;
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i125 := $M.1;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i125, 16);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i127 := $ne.i32($i126, 0);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i127 == 1);
    goto $bb146;

  $bb147:
    assume $i127 == 1;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} vslice_dummy_var_334 := printk.ref.ref.i32.i32(.str.4, .str.145, $i123, 179);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb46;

  $bb134:
    assume $i118 == 1;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i119 := $M.1;
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i120 := $and.i32($i119, 16);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i121 == 1);
    goto $bb136;

  $bb137:
    assume $i121 == 1;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} vslice_dummy_var_333 := printk.ref.ref.i32.i32(.str.4, .str.145, $i117, 191);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb131:
    assume $i112 == 1;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i114 := $sext.i8.i32($i87);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i115 := $or.i32(16, $i114);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $i113 := $i116;
    goto $bb133;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb33;

  $bb122:
    assume $i104 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i105 := $M.1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i105, 16);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i106, 0);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    assume !($i107 == 1);
    goto $bb124;

  $bb125:
    assume $i107 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} vslice_dummy_var_332 := printk.ref.ref.i32.i32(.str.4, .str.145, $i103, 183);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb23;

  $bb113:
    assume $i98 == 1;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i99 := $M.1;
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i99, 16);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i100, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i101 == 1);
    goto $bb115;

  $bb116:
    assume $i101 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} vslice_dummy_var_331 := printk.ref.ref.i32.i32(.str.4, .str.145, $i97, 179);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb46;

  $bb103:
    assume $i92 == 1;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i93 := $M.1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 16);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i95 == 1);
    goto $bb105;

  $bb106:
    assume $i95 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} vslice_dummy_var_330 := printk.ref.ref.i32.i32(.str.4, .str.145, $i91, 191);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb100:
    assume $i86 == 1;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i88 := $sext.i8.i32($i61);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i89 := $or.i32(32, $i88);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i87 := $i90;
    goto $bb102;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb33;

  $bb91:
    assume $i78 == 1;
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i79 := $M.1;
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i79, 16);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i80, 0);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb93;

  $bb94:
    assume $i81 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_329 := printk.ref.ref.i32.i32(.str.4, .str.145, $i77, 183);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb23;

  $bb82:
    assume $i72 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $i73 := $M.1;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 16);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb84;

  $bb85:
    assume $i75 == 1;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_328 := printk.ref.ref.i32.i32(.str.4, .str.145, $i71, 179);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i66 == 1;
    goto $bb46;

  $bb72:
    assume $i66 == 1;
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i67 := $M.1;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 16);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb74;

  $bb75:
    assume $i69 == 1;
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} vslice_dummy_var_327 := printk.ref.ref.i32.i32(.str.4, .str.145, $i65, 191);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i60 == 1;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i62 := $sext.i8.i32($i35);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $i63 := $or.i32(64, $i62);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i8($i63);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $i61 := $i64;
    goto $bb71;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb33;

  $bb60:
    assume $i52 == 1;
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $i53 := $M.1;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 16);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb62;

  $bb63:
    assume $i55 == 1;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_326 := printk.ref.ref.i32.i32(.str.4, .str.145, $i51, 183);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb23;

  $bb51:
    assume $i46 == 1;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i47 := $M.1;
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 16);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb53;

  $bb54:
    assume $i49 == 1;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} vslice_dummy_var_325 := printk.ref.ref.i32.i32(.str.4, .str.145, $i45, 179);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb46;

  $bb39:
    assume $i37 == 1;
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb41;

  $bb42:
    assume $i40 == 1;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} vslice_dummy_var_324 := printk.ref.ref.i32.i32(.str.4, .str.145, $i36, 191);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb36:
    assume $i34 == 1;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i35 := $sub.i8(0, 128);
    goto $bb38;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb33;

  $bb26:
    assume $i25 == 1;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i26 := $M.1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 16);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb28;

  $bb29:
    assume $i28 == 1;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} vslice_dummy_var_323 := printk.ref.ref.i32.i32(.str.4, .str.145, $i24, 183);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb23;

  $bb16:
    assume $i18 == 1;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb18;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_322 := printk.ref.ref.i32.i32(.str.4, .str.145, $i17, 179);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i16 := $i7;
    goto $bb12;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i11 := $M.1;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 16);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} vslice_dummy_var_321 := printk.ref.ref.i32.i32(.str.4, .str.145, $i7, 172);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} vslice_dummy_var_320 := printk.ref.ref(.str.16, .str.145);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_ack: ref;

axiom mxl111sf_i2c_ack == $sub.ref(0, 427445);

procedure mxl111sf_i2c_ack($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_ack($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i14: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i15: i32;
  var vslice_dummy_var_346: i32;
  var vslice_dummy_var_347: i32;
  var vslice_dummy_var_348: i32;
  var vslice_dummy_var_349: i32;
  var vslice_dummy_var_350: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $M.3 := $store.i8($M.3, $p1, 0);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $i6 := mxl111sf_read_reg($p0, 47, $p1);
    call {:si_unique_call 1280} {:cexpr "ret"} boogie_si_record_i32($i6);
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1281} {:cexpr "__ret"} boogie_si_record_i32($i8);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $i16 := mxl111sf_write_reg($p0, 26, 18);
    call {:si_unique_call 1284} {:cexpr "ret"} boogie_si_record_i32($i16);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i16, 0);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    call {:si_unique_call 1285} {:cexpr "__ret___0"} boogie_si_record_i32($i18);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i18, 0);
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $i25 := mxl111sf_write_reg($p0, 26, 22);
    call {:si_unique_call 1288} {:cexpr "ret"} boogie_si_record_i32($i25);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 0);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    call {:si_unique_call 1289} {:cexpr "__ret___1"} boogie_si_record_i32($i27);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i27, 0);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i34 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1292} {:cexpr "ret"} boogie_si_record_i32($i34);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i32($i35);
    call {:si_unique_call 1293} {:cexpr "__ret___2"} boogie_si_record_i32($i36);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i15 := $i34;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $i38 := $M.1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 16);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb34;

  $bb35:
    assume $i40 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} vslice_dummy_var_350 := printk.ref.ref.i32.i32(.str.4, .str.146, $i34, 274);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i15 := $i25;
    goto $bb12;

  $bb23:
    assume $i28 == 1;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 16);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb25;

  $bb26:
    assume $i31 == 1;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} vslice_dummy_var_349 := printk.ref.ref.i32.i32(.str.4, .str.146, $i25, 269);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i15 := $i16;
    goto $bb12;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i20 := $M.1;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 16);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb16;

  $bb17:
    assume $i22 == 1;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} vslice_dummy_var_348 := printk.ref.ref.i32.i32(.str.4, .str.146, $i16, 263);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i15 := $i6;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i10 := $M.1;
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 16);
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_347 := printk.ref.ref.i32.i32(.str.4, .str.146, $i6, 258);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} vslice_dummy_var_346 := printk.ref.ref(.str.16, .str.146);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_nack: ref;

axiom mxl111sf_i2c_nack == $sub.ref(0, 428477);

procedure mxl111sf_i2c_nack($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_nack($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i13: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i14: i32;
  var vslice_dummy_var_351: i32;
  var vslice_dummy_var_352: i32;
  var vslice_dummy_var_353: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $i1 := $M.1;
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 4);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $i5 := mxl111sf_write_reg($p0, 26, 30);
    call {:si_unique_call 1297} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 1298} {:cexpr "__ret"} boogie_si_record_i32($i7);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i15 := mxl111sf_write_reg($p0, 26, 26);
    call {:si_unique_call 1301} {:cexpr "ret"} boogie_si_record_i32($i15);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 1302} {:cexpr "__ret___0"} boogie_si_record_i32($i17);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb14:
    assume $i18 == 1;
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $i19 := $M.1;
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb16;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} vslice_dummy_var_353 := printk.ref.ref.i32.i32(.str.4, .str.147, $i15, 293);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $i14 := $i5;
    goto $bb12;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $i9 := $M.1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb7:
    assume $i11 == 1;
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} vslice_dummy_var_352 := printk.ref.ref.i32.i32(.str.4, .str.147, $i5, 288);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} vslice_dummy_var_351 := printk.ref.ref(.str.16, .str.147);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_send_data: ref;

axiom mxl111sf_i2c_send_data == $sub.ref(0, 429509);

procedure mxl111sf_i2c_send_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_send_data($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var vslice_dummy_var_354: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} {:cexpr "mxl111sf_i2c_send_data:arg:index"} boogie_si_record_i8($i1);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p2);
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $i9 := mxl111sf_ctrl_msg($p4, $i7, $p8, 25, $0.ref, 0);
    call {:si_unique_call 1306} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i9, 0);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    call {:si_unique_call 1307} {:cexpr "__ret"} boogie_si_record_i32($i11);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i13 := $M.1;
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 16);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb3;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_354 := printk.ref.ref.i32.i32(.str.4, .str.132, $i9, 387);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_i2c_check_status: ref;

axiom mxl111sf_i2c_check_status == $sub.ref(0, 430541);

procedure mxl111sf_i2c_check_status($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_check_status($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i8;
  var vslice_dummy_var_355: i32;
  var vslice_dummy_var_356: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p1 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 20);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 20);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 35));
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 16);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 2));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} vslice_dummy_var_356 := mxl111sf_i2c_get_data($p0, 0, $p12, $p13);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 4);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} vslice_dummy_var_355 := printk.ref.ref(.str.16, .str.133);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mxl111sf_i2c_get_data: ref;

axiom mxl111sf_i2c_get_data == $sub.ref(0, 431573);

procedure mxl111sf_i2c_get_data($p0: ref, $i1: i8, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_get_data($p0: ref, $i1: i8, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var vslice_dummy_var_357: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} {:cexpr "mxl111sf_i2c_get_data:arg:index"} boogie_si_record_i8($i1);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 376)), $mul.ref(0, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p2);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p2, $mul.ref(1, 1));
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i10 := mxl111sf_ctrl_msg($p5, $i8, $p9, 25, $p3, 24);
    call {:si_unique_call 1314} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1315} {:cexpr "__ret"} boogie_si_record_i32($i12);
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i14 := $M.1;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 16);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} vslice_dummy_var_357 := printk.ref.ref.i32.i32(.str.4, .str.134, $i10, 397);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const mxl111sf_i2c_readagain: ref;

axiom mxl111sf_i2c_readagain == $sub.ref(0, 432605);

procedure mxl111sf_i2c_readagain($p0: ref, $i1: i8, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.30, $CurrAddr;



implementation mxl111sf_i2c_readagain($p0: ref, $i1: i8, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i10: i8;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i64;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i24: i8;
  var $p45: ref;
  var $p46: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i1;
  var $i51: i32;
  var $i52: i32;
  var $i53: i1;
  var $i56: i32;
  var $i57: i1;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i64;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i8;
  var $i88: i32;
  var $i89: i1;
  var $i58: i8;
  var $i55: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var vslice_dummy_var_358: i32;
  var vslice_dummy_var_359: i32;
  var vslice_dummy_var_360: i32;
  var vslice_dummy_var_361: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p3 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 1319} {:cexpr "mxl111sf_i2c_readagain:arg:count"} boogie_si_record_i8($i1);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $i5 := $M.1;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 4);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb4;

  $bb4:
    call $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i17, $i18 := mxl111sf_i2c_readagain_loop_$bb4($p0, $i11, $i12, $i13, $i10, $i14, $i15, $i16, $i17, $i18);
    goto $bb4_last;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i10);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i14, 1);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    call {:si_unique_call 1321} {:cexpr "i"} boogie_si_record_i8($i16);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i10);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, 4);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $sub.i8(0, 35));
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, 0);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $sub.i8(0, 2));
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, $sub.i8(0, 2));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $sub.i8(0, 2));
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $sub.i8(0, 2));
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $sub.i8(0, 2));
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $sub.i8(0, 2));
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p96, $sub.i8(0, 2));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, $sub.i8(0, 2));
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $sub.i8(0, 2));
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $sub.i8(0, 2));
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, $sub.i8(0, 2));
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, $sub.i8(0, 2));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $sub.i8(0, 2));
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $sub.i8(0, 2));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $sub.i8(0, 2));
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $sub.i8(0, 2));
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $sub.i8(0, 2));
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, $sub.i8(0, 2));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $sub.i8(0, 2));
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, $sub.i8(0, 2));
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p110, $sub.i8(0, 2));
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, $sub.i8(0, 2));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $sub.i8(0, 2));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, $sub.i8(0, 2));
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32(0, $i22);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_359 := mxl111sf_i2c_get_data($p0, 0, $p45, $p46);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i48 := mxl111sf_i2c_check_status($p0);
    call {:si_unique_call 1327} {:cexpr "tmp___0"} boogie_si_record_i8($i48);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 1);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i90 := 0;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $r := $i90;
    return;

  $bb23:
    assume $i50 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $i51 := $M.1;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, 4);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i1);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32(0, $i56);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i55 := 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i90 := $i55;
    goto $bb39;

  $bb28:
    assume $i57 == 1;
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb31;

  $bb31:
    call $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i58, vslice_dummy_var_361 := mxl111sf_i2c_readagain_loop_$bb31($p2, $p4, $i56, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $p66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $p74, $i75, $i76, $i77, $i78, $i79, $i80, $p81, $i82, $i83, $i85, $i86, $i87, $i88, $i89, $i58, vslice_dummy_var_361);
    goto $bb31_last;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i60 := $mul.i32($i59, 3);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, 1);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i62, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.32, $p63);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i58);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p2, $mul.ref($i65, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, $p66, $i64);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i67 := $M.1;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 4);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i58);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, 1);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i32.i8($i86);
    call {:si_unique_call 1330} {:cexpr "i"} boogie_si_record_i8($i87);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i88, $i56);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i89 == 1);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb36:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    $i58 := $i87;
    goto $bb36_dummy;

  $bb33:
    assume $i69 == 1;
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i58);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i71 := $mul.i32($i70, 3);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i71, 1);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i72);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i73, 1));
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.32, $p74);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i58);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i78 := $mul.i32($i77, 3);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 2);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref($i80, 1));
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.32, $p81);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_361 := printk.ref.ref.i32.i32(.str.138, .str.136, $i76, $i83);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_360 := printk.ref.ref(.str.137, .str.136);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i55 := 0;
    goto $bb27;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb18;

  $bb18:
    call $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i24 := mxl111sf_i2c_readagain_loop_$bb18($p3, $i22, $i25, $i26, $i27, $i28, $p29, $i30, $i31, $i32, $i33, $p34, $i35, $i36, $i37, $i38, $p39, $i40, $i41, $i42, $i43, $i44, $i24);
    goto $bb18_last;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 3);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 2);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i28, 1));
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 12);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i24);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 3);
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i33, 1));
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 0);
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i24);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i35, 3);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 4);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 26)), $mul.ref($i38, 1));
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 0);
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i24);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i40, 1);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    call {:si_unique_call 1324} {:cexpr "i"} boogie_si_record_i8($i42);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, $i22);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i44 == 1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i24 := $i42;
    goto $bb20_dummy;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i11 := mxl111sf_i2c_check_fifo($p0);
    call {:si_unique_call 1323} {:cexpr "fifo_status"} boogie_si_record_i8($i11);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i13 == 1);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i16;
    goto $bb6_dummy;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_358 := printk.ref.ref.i32(.str.135, .str.136, $i8);
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb36_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8998;

  $bb20_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8947;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8914;
}



const mxl111sf_i2c_check_fifo: ref;

axiom mxl111sf_i2c_check_fifo == $sub.ref(0, 433637);

procedure mxl111sf_i2c_check_fifo($p0: ref) returns ($r: i8);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_check_fifo($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var vslice_dummy_var_362: i32;
  var vslice_dummy_var_363: i32;
  var vslice_dummy_var_364: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $p1 := $alloc($mul.ref(26, $zext.i32.i64(1)));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $i2 := $M.1;
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 4);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(0, 1));
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, $sub.i8(0, 35));
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 48);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, 0);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, 0);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 16);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $sub.i8(0, 2));
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_363 := mxl111sf_i2c_get_data($p0, 0, $p15, $p16);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(1, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 8);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i26, 2);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i29 := $M.1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i31 == 1;
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_364 := printk.ref.ref(.str.140, .str.139);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_362 := printk.ref.ref(.str.16, .str.139);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_lock_interruptible: ref;

axiom mutex_lock_interruptible == $sub.ref(0, 434669);

procedure mutex_lock_interruptible($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation mutex_lock_interruptible($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1335} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1336} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_mutex_lock_interruptible_i2c_mutex_of_dvb_usb_device: ref;

axiom ldv_mutex_lock_interruptible_i2c_mutex_of_dvb_usb_device == $sub.ref(0, 435701);

procedure ldv_mutex_lock_interruptible_i2c_mutex_of_dvb_usb_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.31, assertsPassed;



implementation ldv_mutex_lock_interruptible_i2c_mutex_of_dvb_usb_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i1 := $M.31;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1338} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    call {:si_unique_call 1340} {:cexpr "nondetermined"} boogie_si_record_i32($i3);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 4);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 1341} {:cexpr "ldv_mutex_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i32(2);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 436733);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} $p1 := external_alloc();
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 437765);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.14, $M.15, $M.46, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.53, $M.60, $M.75, $M.86, $M.12, $M.89, $M.90, $M.91, $M.93, $M.99, $M.107, $M.10, $M.1, $M.116, $M.132, $M.160, $M.206, $M.213, $M.217, $M.221, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.115, $M.114, $M.31, $M.18, $M.113, $M.66, $M.74, $M.88, $M.68, $M.109, $M.78, $M.77, $M.70, $M.85, $M.98, $M.76, $M.64, $M.108, $M.65, $M.95, $M.106, $M.102, $M.71, $M.54, $M.110, $M.101, $M.48, $M.82, $M.96, $M.111, $M.83, $M.59, $M.67, $M.94, $M.80, $M.100, $M.92, $M.81, $M.63, $M.112, $M.72, $M.62, $M.45, $M.61, $M.79, $M.105, $M.55, $M.84, $M.49, $M.97, $M.58, $M.56, $M.69, $M.103, $M.57, $M.47, $M.51, $M.50, $M.73, $M.52, $M.104, $M.27, $M.17, $M.87, $CurrAddr, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $M.29, $M.24, $M.25, $M.26, $M.30, assertsPassed;



implementation main() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i1;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i1;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i136: i32;
  var $i137: i1;
  var $p138: ref;
  var $i139: i32;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $i176: i32;
  var $i177: i1;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i1;
  var $i189: i32;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i32;
  var $i194: i1;
  var $i195: i1;
  var $i196: i1;
  var $i197: i1;
  var $i198: i1;
  var $i199: i1;
  var $i200: i1;
  var $i201: i1;
  var $i202: i32;
  var $i203: i1;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $p210: ref;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i216: i32;
  var $i217: i1;
  var $p218: ref;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i32;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i233: i32;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i243: i32;
  var $i244: i1;
  var $p245: ref;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i265: i32;
  var $i266: i1;
  var $i268: i32;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $i273: i32;
  var $i274: i32;
  var $i275: i32;
  var $i276: i1;
  var $i278: i32;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $i282: i32;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i1;
  var $i291: i32;
  var $i292: i1;
  var $p293: ref;
  var $i294: i8;
  var $i295: i32;
  var $i296: i8;
  var $i297: i8;
  var $i298: i32;
  var $i299: i8;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $i305: i32;
  var $i306: i1;
  var $p307: ref;
  var $i309: i32;
  var $i310: i1;
  var $p311: ref;
  var $i312: i32;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $i317: i32;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $p322: ref;
  var $i324: i32;
  var $i325: i1;
  var $p326: ref;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i332: i8;
  var $i333: i32;
  var $i334: i8;
  var $p335: ref;
  var $i337: i32;
  var $i338: i1;
  var $i340: i32;
  var $i341: i32;
  var $i342: i32;
  var $i343: i1;
  var $i345: i32;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i350: i1;
  var $i351: i1;
  var $i352: i1;
  var $i353: i1;
  var $i354: i1;
  var $i355: i1;
  var $i356: i1;
  var $i357: i1;
  var $i358: i32;
  var $i359: i1;
  var $p360: ref;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i379: i32;
  var $i381: i32;
  var $i382: i1;
  var $p383: ref;
  var $i384: i32;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i32;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $i403: i32;
  var $i404: i1;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $i409: i32;
  var $i410: i1;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i415: i32;
  var $i416: i1;
  var $p417: ref;
  var $p418: ref;
  var $p419: ref;
  var $i421: i32;
  var $i422: i1;
  var $i424: i32;
  var $i425: i32;
  var $i426: i32;
  var $i427: i1;
  var $i429: i32;
  var $i430: i32;
  var $i431: i32;
  var $i432: i1;
  var $i434: i32;
  var $i435: i32;
  var $i436: i32;
  var $i437: i1;
  var $i438: i32;
  var $i439: i1;
  var $i440: i1;
  var $i441: i1;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $p445: ref;
  var $i446: i32;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i452: i32;
  var $i453: i1;
  var $i454: i32;
  var $i455: i1;
  var $i456: i1;
  var $i457: i1;
  var $i458: i1;
  var $i459: i1;
  var $i460: i1;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $p464: ref;
  var $i465: i32;
  var $i466: i32;
  var $i467: i1;
  var $i468: i32;
  var $i469: i32;
  var $i470: i32;
  var $i471: i1;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $i475: i32;
  var $i476: i32;
  var $i477: i32;
  var $i478: i1;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $i482: i32;
  var $i483: i32;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $i487: i32;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $i494: i32;
  var $i495: i32;
  var $i496: i1;
  var $i497: i32;
  var $i498: i1;
  var $i499: i32;
  var $i500: i32;
  var $i501: i1;
  var $i502: i32;
  var $i503: i1;
  var $i504: i32;
  var $i505: i1;
  var $i506: i1;
  var $i507: i1;
  var $i508: i1;
  var $i509: i1;
  var $i510: i1;
  var $i511: i1;
  var $i512: i1;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $i516: i32;
  var $i517: i32;
  var $i518: i1;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i523: i32;
  var $i524: i1;
  var $p525: ref;
  var $i527: i32;
  var $i528: i1;
  var $p529: ref;
  var $i531: i32;
  var $i532: i1;
  var $p533: ref;
  var $i534: i32;
  var $i536: i32;
  var $i537: i1;
  var $p538: ref;
  var $i539: i32;
  var $i541: i32;
  var $i542: i1;
  var $p543: ref;
  var $i544: i32;
  var $i546: i32;
  var $i547: i1;
  var $p548: ref;
  var $i550: i32;
  var $i551: i1;
  var $p552: ref;
  var $i554: i32;
  var $i555: i1;
  var $p556: ref;
  var $i558: i32;
  var $i559: i1;
  var $p560: ref;
  var $p561: ref;
  var $p562: ref;
  var $i564: i32;
  var $i565: i1;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $i570: i32;
  var $i571: i1;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i576: i32;
  var $i577: i1;
  var $i579: i32;
  var $i580: i32;
  var $i581: i32;
  var $i582: i1;
  var $i584: i32;
  var $i585: i32;
  var $i586: i32;
  var $i587: i1;
  var $i589: i32;
  var $i590: i32;
  var $i591: i32;
  var $i592: i1;
  var $i593: i32;
  var $i594: i1;
  var $i595: i1;
  var $i596: i1;
  var $i597: i32;
  var $i598: i1;
  var $i599: i32;
  var $i600: i1;
  var $i601: i32;
  var $i602: i1;
  var $i603: i32;
  var $i604: i32;
  var $i605: i1;
  var $i606: i32;
  var $i607: i1;
  var $i608: i32;
  var $i609: i1;
  var $i610: i32;
  var $i611: i1;
  var $i612: i1;
  var $i613: i1;
  var $i614: i1;
  var $i615: i1;
  var $i616: i1;
  var $i617: i32;
  var $i618: i1;
  var $p619: ref;
  var $i620: i8;
  var $i621: i32;
  var $i622: i8;
  var $i623: i8;
  var $i624: i32;
  var $i625: i8;
  var $i627: i32;
  var $i628: i1;
  var $p629: ref;
  var $p630: ref;
  var $i632: i32;
  var $i633: i1;
  var $p634: ref;
  var $p635: ref;
  var $i637: i32;
  var $i638: i1;
  var $p639: ref;
  var $i640: i8;
  var $i641: i32;
  var $i642: i8;
  var $p643: ref;
  var $i645: i32;
  var $i646: i1;
  var $i648: i32;
  var $i649: i32;
  var $i650: i32;
  var $i651: i1;
  var $i653: i32;
  var $i654: i32;
  var $i655: i32;
  var $i656: i1;
  var $i657: i32;
  var $i658: i1;
  var $i659: i1;
  var $i660: i1;
  var $i661: i1;
  var $i662: i1;
  var $i663: i1;
  var $i664: i1;
  var $i665: i1;
  var $i666: i32;
  var $i667: i1;
  var $p668: ref;
  var $i669: i32;
  var $i670: i32;
  var $i671: i1;
  var $i672: i32;
  var $i673: i1;
  var $p674: ref;
  var $i676: i32;
  var $i677: i1;
  var $p678: ref;
  var $i680: i32;
  var $i681: i1;
  var $p682: ref;
  var $i684: i32;
  var $i685: i1;
  var $p686: ref;
  var $i687: i32;
  var $i689: i32;
  var $i690: i1;
  var $p691: ref;
  var $i692: i32;
  var $i694: i32;
  var $i695: i1;
  var $p696: ref;
  var $i697: i32;
  var $i699: i32;
  var $i700: i1;
  var $p701: ref;
  var $i703: i32;
  var $i704: i1;
  var $p705: ref;
  var $i707: i32;
  var $i708: i1;
  var $p709: ref;
  var $i711: i32;
  var $i712: i1;
  var $p713: ref;
  var $p714: ref;
  var $p715: ref;
  var $i717: i32;
  var $i718: i1;
  var $p719: ref;
  var $p720: ref;
  var $p721: ref;
  var $i723: i32;
  var $i724: i1;
  var $p725: ref;
  var $p726: ref;
  var $p727: ref;
  var $i729: i32;
  var $i730: i1;
  var $i732: i32;
  var $i733: i32;
  var $i734: i32;
  var $i735: i1;
  var $i737: i32;
  var $i738: i32;
  var $i739: i32;
  var $i740: i1;
  var $i742: i32;
  var $i743: i32;
  var vslice_dummy_var_365: i32;
  var vslice_dummy_var_366: i32;
  var vslice_dummy_var_367: i32;
  var vslice_dummy_var_368: i32;
  var vslice_dummy_var_369: i32;
  var vslice_dummy_var_370: i32;
  var vslice_dummy_var_371: i32;
  var vslice_dummy_var_372: i32;
  var vslice_dummy_var_373: i32;
  var vslice_dummy_var_374: i32;
  var vslice_dummy_var_375: i32;
  var vslice_dummy_var_376: i32;
  var vslice_dummy_var_377: i32;
  var vslice_dummy_var_378: i32;
  var vslice_dummy_var_379: i32;
  var vslice_dummy_var_380: i32;
  var vslice_dummy_var_381: i32;
  var vslice_dummy_var_382: i32;
  var vslice_dummy_var_383: i32;
  var vslice_dummy_var_384: i32;
  var vslice_dummy_var_385: i32;
  var vslice_dummy_var_386: i32;
  var vslice_dummy_var_387: i32;
  var vslice_dummy_var_388: i32;
  var vslice_dummy_var_389: i32;
  var vslice_dummy_var_390: i32;
  var vslice_dummy_var_391: i32;
  var vslice_dummy_var_392: i32;
  var vslice_dummy_var_393: i32;
  var vslice_dummy_var_394: i32;
  var vslice_dummy_var_395: i32;
  var vslice_dummy_var_396: i32;
  var vslice_dummy_var_397: i32;
  var vslice_dummy_var_398: i32;
  var vslice_dummy_var_399: i32;
  var vslice_dummy_var_400: i32;
  var vslice_dummy_var_401: i32;
  var vslice_dummy_var_402: i32;
  var vslice_dummy_var_403: i32;
  var vslice_dummy_var_404: i32;
  var vslice_dummy_var_405: i32;
  var vslice_dummy_var_406: i32;
  var vslice_dummy_var_407: i32;
  var vslice_dummy_var_408: i32;
  var vslice_dummy_var_409: i32;
  var vslice_dummy_var_410: i32;
  var vslice_dummy_var_411: i32;
  var vslice_dummy_var_412: i32;
  var vslice_dummy_var_413: i32;
  var vslice_dummy_var_414: i32;
  var vslice_dummy_var_415: i32;
  var vslice_dummy_var_416: i32;
  var vslice_dummy_var_417: i32;
  var vslice_dummy_var_418: i32;
  var vslice_dummy_var_419: i32;
  var vslice_dummy_var_420: i32;
  var vslice_dummy_var_421: i32;
  var vslice_dummy_var_422: i32;
  var vslice_dummy_var_423: i32;
  var vslice_dummy_var_424: i32;
  var vslice_dummy_var_425: i32;
  var vslice_dummy_var_426: i32;
  var vslice_dummy_var_427: i32;
  var vslice_dummy_var_428: i32;
  var vslice_dummy_var_429: i32;
  var vslice_dummy_var_430: i32;
  var vslice_dummy_var_431: i32;
  var vslice_dummy_var_432: i32;
  var vslice_dummy_var_433: i32;
  var vslice_dummy_var_434: i32;
  var vslice_dummy_var_435: i32;
  var vslice_dummy_var_436: i32;
  var vslice_dummy_var_437: i32;
  var vslice_dummy_var_438: i32;
  var vslice_dummy_var_439: i32;
  var vslice_dummy_var_440: i32;
  var vslice_dummy_var_441: i32;
  var vslice_dummy_var_442: i32;
  var vslice_dummy_var_443: i32;
  var vslice_dummy_var_444: i32;
  var vslice_dummy_var_445: i32;
  var vslice_dummy_var_446: i32;
  var vslice_dummy_var_447: i32;
  var vslice_dummy_var_448: i32;
  var vslice_dummy_var_449: i32;
  var vslice_dummy_var_450: i32;
  var vslice_dummy_var_451: i32;
  var vslice_dummy_var_452: i32;
  var vslice_dummy_var_453: i32;
  var vslice_dummy_var_454: i32;
  var vslice_dummy_var_455: i32;
  var vslice_dummy_var_456: i32;
  var vslice_dummy_var_457: i32;
  var vslice_dummy_var_458: i32;
  var vslice_dummy_var_459: i32;
  var vslice_dummy_var_460: i32;
  var vslice_dummy_var_461: i32;
  var vslice_dummy_var_462: i32;
  var vslice_dummy_var_463: i32;
  var vslice_dummy_var_464: i32;
  var vslice_dummy_var_465: i32;
  var vslice_dummy_var_466: i32;
  var vslice_dummy_var_467: i32;
  var vslice_dummy_var_468: i32;
  var vslice_dummy_var_469: i32;
  var vslice_dummy_var_470: i32;
  var vslice_dummy_var_471: i32;
  var vslice_dummy_var_472: i32;

  $bb0:
    call {:si_unique_call 1343} $initialize();
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} ldv_initialize();
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1346} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $M.34 := 0;
    call {:si_unique_call 1347} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $M.35 := 0;
    call {:si_unique_call 1348} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $M.36 := 0;
    call {:si_unique_call 1349} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $M.37 := 0;
    call {:si_unique_call 1350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 1351} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1352} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 1354} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 1356} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i34, $i35, $p36, $i38, $i39, $p40, $i42, $i43, $p44, $i45, $i47, $i48, $p49, $i50, $i52, $i53, $p54, $i55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i69, $i70, $p71, $p72, $p73, $i75, $i76, $p77, $p78, $p79, $i81, $i82, $p83, $p84, $p85, $i87, $i88, $i90, $i91, $i92, $i93, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i134, $i136, $i137, $p138, $i139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $p161, $p162, $i164, $i165, $p166, $p167, $p168, $i170, $i171, $p172, $p173, $p174, $i176, $i177, $i179, $i180, $i181, $i182, $i184, $i185, $i186, $i187, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $p204, $i205, $i206, $i207, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i223, $i225, $i226, $p227, $i228, $i230, $i231, $p232, $i233, $i235, $i236, $p237, $i239, $i240, $p241, $i243, $i244, $p245, $i247, $i248, $p249, $p250, $p251, $i253, $i254, $p255, $p256, $p257, $i259, $i260, $p261, $p262, $p263, $i265, $i266, $i268, $i269, $i270, $i271, $i273, $i274, $i275, $i276, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $p293, $i294, $i295, $i296, $i297, $i298, $i299, $i301, $i302, $p303, $i305, $i306, $p307, $i309, $i310, $p311, $i312, $i314, $i315, $p316, $i317, $i319, $i320, $p321, $p322, $i324, $i325, $p326, $p327, $i329, $i330, $p331, $i332, $i333, $i334, $p335, $i337, $i338, $i340, $i341, $i342, $i343, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $p360, $i361, $i362, $i363, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i379, $i381, $i382, $p383, $i384, $i386, $i387, $p388, $i389, $i391, $i392, $p393, $i395, $i396, $p397, $i399, $i400, $p401, $i403, $i404, $p405, $p406, $p407, $i409, $i410, $p411, $p412, $p413, $i415, $i416, $p417, $p418, $p419, $i421, $i422, $i424, $i425, $i426, $i427, $i429, $i430, $i431, $i432, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $p444, $p445, $i446, $i448, $i449, $p450, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $p463, $p464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $p474, $i475, $i476, $i477, $i478, $i479, $i480, $p481, $i482, $i483, $i484, $i485, $p486, $i487, $i488, $i489, $i490, $i491, $i492, $p493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $i523, $i524, $p525, $i527, $i528, $p529, $i531, $i532, $p533, $i534, $i536, $i537, $p538, $i539, $i541, $i542, $p543, $i544, $i546, $i547, $p548, $i550, $i551, $p552, $i554, $i555, $p556, $i558, $i559, $p560, $p561, $p562, $i564, $i565, $p566, $p567, $p568, $i570, $i571, $p572, $p573, $p574, $i576, $i577, $i579, $i580, $i581, $i582, $i584, $i585, $i586, $i587, $i589, $i590, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $i598, $i599, $i600, $i601, $i602, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $i613, $i614, $i615, $i616, $i617, $i618, $p619, $i620, $i621, $i622, $i623, $i624, $i625, $i627, $i628, $p629, $p630, $i632, $i633, $p634, $p635, $i637, $i638, $p639, $i640, $i641, $i642, $p643, $i645, $i646, $i648, $i649, $i650, $i651, $i653, $i654, $i655, $i656, $i657, $i658, $i659, $i660, $i661, $i662, $i663, $i664, $i665, $i666, $i667, $p668, $i669, $i670, $i671, $i672, $i673, $p674, $i676, $i677, $p678, $i680, $i681, $p682, $i684, $i685, $p686, $i687, $i689, $i690, $p691, $i692, $i694, $i695, $p696, $i697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $p714, $p715, $i717, $i718, $p719, $p720, $p721, $i723, $i724, $p725, $p726, $p727, $i729, $i730, $i732, $i733, $i734, $i735, $i737, $i738, $i739, $i740, $i742, $i743, vslice_dummy_var_365, vslice_dummy_var_366, vslice_dummy_var_367, vslice_dummy_var_368, vslice_dummy_var_369, vslice_dummy_var_370, vslice_dummy_var_371, vslice_dummy_var_372, vslice_dummy_var_373, vslice_dummy_var_374, vslice_dummy_var_375, vslice_dummy_var_376, vslice_dummy_var_377, vslice_dummy_var_378, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387, vslice_dummy_var_388, vslice_dummy_var_389, vslice_dummy_var_390, vslice_dummy_var_391, vslice_dummy_var_392, vslice_dummy_var_393, vslice_dummy_var_394, vslice_dummy_var_395, vslice_dummy_var_396, vslice_dummy_var_397, vslice_dummy_var_398, vslice_dummy_var_399, vslice_dummy_var_400, vslice_dummy_var_401, vslice_dummy_var_402, vslice_dummy_var_403, vslice_dummy_var_404, vslice_dummy_var_405, vslice_dummy_var_406, vslice_dummy_var_407, vslice_dummy_var_408, vslice_dummy_var_409, vslice_dummy_var_410, vslice_dummy_var_411, vslice_dummy_var_412, vslice_dummy_var_413, vslice_dummy_var_414, vslice_dummy_var_415, vslice_dummy_var_416, vslice_dummy_var_417, vslice_dummy_var_418, vslice_dummy_var_419, vslice_dummy_var_420, vslice_dummy_var_421, vslice_dummy_var_422, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_426, vslice_dummy_var_427, vslice_dummy_var_428, vslice_dummy_var_429, vslice_dummy_var_430, vslice_dummy_var_431, vslice_dummy_var_432, vslice_dummy_var_433, vslice_dummy_var_434, vslice_dummy_var_435, vslice_dummy_var_436, vslice_dummy_var_437, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442, vslice_dummy_var_443, vslice_dummy_var_444, vslice_dummy_var_445, vslice_dummy_var_446, vslice_dummy_var_447, vslice_dummy_var_448, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451, vslice_dummy_var_452, vslice_dummy_var_453, vslice_dummy_var_454, vslice_dummy_var_455, vslice_dummy_var_456, vslice_dummy_var_457, vslice_dummy_var_458, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463, vslice_dummy_var_464, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472 := main_loop_$bb1($i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $i28, $i29, $i30, $i31, $p32, $i34, $i35, $p36, $i38, $i39, $p40, $i42, $i43, $p44, $i45, $i47, $i48, $p49, $i50, $i52, $i53, $p54, $i55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i69, $i70, $p71, $p72, $p73, $i75, $i76, $p77, $p78, $p79, $i81, $i82, $p83, $p84, $p85, $i87, $i88, $i90, $i91, $i92, $i93, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $p115, $i116, $i117, $i118, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i134, $i136, $i137, $p138, $i139, $i141, $i142, $p143, $i144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $p161, $p162, $i164, $i165, $p166, $p167, $p168, $i170, $i171, $p172, $p173, $p174, $i176, $i177, $i179, $i180, $i181, $i182, $i184, $i185, $i186, $i187, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $p204, $i205, $i206, $i207, $i208, $i209, $p210, $i212, $i213, $p214, $i216, $i217, $p218, $i220, $i221, $p222, $i223, $i225, $i226, $p227, $i228, $i230, $i231, $p232, $i233, $i235, $i236, $p237, $i239, $i240, $p241, $i243, $i244, $p245, $i247, $i248, $p249, $p250, $p251, $i253, $i254, $p255, $p256, $p257, $i259, $i260, $p261, $p262, $p263, $i265, $i266, $i268, $i269, $i270, $i271, $i273, $i274, $i275, $i276, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $i292, $p293, $i294, $i295, $i296, $i297, $i298, $i299, $i301, $i302, $p303, $i305, $i306, $p307, $i309, $i310, $p311, $i312, $i314, $i315, $p316, $i317, $i319, $i320, $p321, $p322, $i324, $i325, $p326, $p327, $i329, $i330, $p331, $i332, $i333, $i334, $p335, $i337, $i338, $i340, $i341, $i342, $i343, $i345, $i346, $i347, $i348, $i349, $i350, $i351, $i352, $i353, $i354, $i355, $i356, $i357, $i358, $i359, $p360, $i361, $i362, $i363, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i379, $i381, $i382, $p383, $i384, $i386, $i387, $p388, $i389, $i391, $i392, $p393, $i395, $i396, $p397, $i399, $i400, $p401, $i403, $i404, $p405, $p406, $p407, $i409, $i410, $p411, $p412, $p413, $i415, $i416, $p417, $p418, $p419, $i421, $i422, $i424, $i425, $i426, $i427, $i429, $i430, $i431, $i432, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $p444, $p445, $i446, $i448, $i449, $p450, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $p463, $p464, $i465, $i466, $i467, $i468, $i469, $i470, $i471, $i472, $i473, $p474, $i475, $i476, $i477, $i478, $i479, $i480, $p481, $i482, $i483, $i484, $i485, $p486, $i487, $i488, $i489, $i490, $i491, $i492, $p493, $i494, $i495, $i496, $i497, $i498, $i499, $i500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $i510, $i511, $i512, $i513, $i514, $p515, $i516, $i517, $i518, $i519, $i520, $p521, $i523, $i524, $p525, $i527, $i528, $p529, $i531, $i532, $p533, $i534, $i536, $i537, $p538, $i539, $i541, $i542, $p543, $i544, $i546, $i547, $p548, $i550, $i551, $p552, $i554, $i555, $p556, $i558, $i559, $p560, $p561, $p562, $i564, $i565, $p566, $p567, $p568, $i570, $i571, $p572, $p573, $p574, $i576, $i577, $i579, $i580, $i581, $i582, $i584, $i585, $i586, $i587, $i589, $i590, $i591, $i592, $i593, $i594, $i595, $i596, $i597, $i598, $i599, $i600, $i601, $i602, $i603, $i604, $i605, $i606, $i607, $i608, $i609, $i610, $i611, $i612, $i613, $i614, $i615, $i616, $i617, $i618, $p619, $i620, $i621, $i622, $i623, $i624, $i625, $i627, $i628, $p629, $p630, $i632, $i633, $p634, $p635, $i637, $i638, $p639, $i640, $i641, $i642, $p643, $i645, $i646, $i648, $i649, $i650, $i651, $i653, $i654, $i655, $i656, $i657, $i658, $i659, $i660, $i661, $i662, $i663, $i664, $i665, $i666, $i667, $p668, $i669, $i670, $i671, $i672, $i673, $p674, $i676, $i677, $p678, $i680, $i681, $p682, $i684, $i685, $p686, $i687, $i689, $i690, $p691, $i692, $i694, $i695, $p696, $i697, $i699, $i700, $p701, $i703, $i704, $p705, $i707, $i708, $p709, $i711, $i712, $p713, $p714, $p715, $i717, $i718, $p719, $p720, $p721, $i723, $i724, $p725, $p726, $p727, $i729, $i730, $i732, $i733, $i734, $i735, $i737, $i738, $i739, $i740, $i742, $i743, vslice_dummy_var_365, vslice_dummy_var_366, vslice_dummy_var_367, vslice_dummy_var_368, vslice_dummy_var_369, vslice_dummy_var_370, vslice_dummy_var_371, vslice_dummy_var_372, vslice_dummy_var_373, vslice_dummy_var_374, vslice_dummy_var_375, vslice_dummy_var_376, vslice_dummy_var_377, vslice_dummy_var_378, vslice_dummy_var_379, vslice_dummy_var_380, vslice_dummy_var_381, vslice_dummy_var_382, vslice_dummy_var_383, vslice_dummy_var_384, vslice_dummy_var_385, vslice_dummy_var_386, vslice_dummy_var_387, vslice_dummy_var_388, vslice_dummy_var_389, vslice_dummy_var_390, vslice_dummy_var_391, vslice_dummy_var_392, vslice_dummy_var_393, vslice_dummy_var_394, vslice_dummy_var_395, vslice_dummy_var_396, vslice_dummy_var_397, vslice_dummy_var_398, vslice_dummy_var_399, vslice_dummy_var_400, vslice_dummy_var_401, vslice_dummy_var_402, vslice_dummy_var_403, vslice_dummy_var_404, vslice_dummy_var_405, vslice_dummy_var_406, vslice_dummy_var_407, vslice_dummy_var_408, vslice_dummy_var_409, vslice_dummy_var_410, vslice_dummy_var_411, vslice_dummy_var_412, vslice_dummy_var_413, vslice_dummy_var_414, vslice_dummy_var_415, vslice_dummy_var_416, vslice_dummy_var_417, vslice_dummy_var_418, vslice_dummy_var_419, vslice_dummy_var_420, vslice_dummy_var_421, vslice_dummy_var_422, vslice_dummy_var_423, vslice_dummy_var_424, vslice_dummy_var_425, vslice_dummy_var_426, vslice_dummy_var_427, vslice_dummy_var_428, vslice_dummy_var_429, vslice_dummy_var_430, vslice_dummy_var_431, vslice_dummy_var_432, vslice_dummy_var_433, vslice_dummy_var_434, vslice_dummy_var_435, vslice_dummy_var_436, vslice_dummy_var_437, vslice_dummy_var_438, vslice_dummy_var_439, vslice_dummy_var_440, vslice_dummy_var_441, vslice_dummy_var_442, vslice_dummy_var_443, vslice_dummy_var_444, vslice_dummy_var_445, vslice_dummy_var_446, vslice_dummy_var_447, vslice_dummy_var_448, vslice_dummy_var_449, vslice_dummy_var_450, vslice_dummy_var_451, vslice_dummy_var_452, vslice_dummy_var_453, vslice_dummy_var_454, vslice_dummy_var_455, vslice_dummy_var_456, vslice_dummy_var_457, vslice_dummy_var_458, vslice_dummy_var_459, vslice_dummy_var_460, vslice_dummy_var_461, vslice_dummy_var_462, vslice_dummy_var_463, vslice_dummy_var_464, vslice_dummy_var_465, vslice_dummy_var_466, vslice_dummy_var_467, vslice_dummy_var_468, vslice_dummy_var_469, vslice_dummy_var_470, vslice_dummy_var_471, vslice_dummy_var_472);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb102_dummy;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $i655 := $M.44;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i656 := $ne.i32($i655, 0);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb592:
    assume $i656 == 1;
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} $i657 := __VERIFIER_nondet_int();
    call {:si_unique_call 1647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i657);
    call {:si_unique_call 1648} {:cexpr "tmp___10"} boogie_si_record_i32($i657);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $i658 := $slt.i32($i657, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    $i659 := $slt.i32($i657, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb598:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    $i660 := $slt.i32($i657, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i657, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    assume !($i661 == 1);
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb601:
    assume $i661 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $i734 := $M.44;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i735 := $eq.i32($i734, 3);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb658, $bb659;

  $bb659:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    $i739 := $M.44;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i739, 2);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb661, $bb662;

  $bb662:
    assume !($i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb661:
    assume $i740 == 1;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_472 := ldv_mxl111sf_props_mh_release_5();
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    $i742 := $M.41;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $i743 := $sub.i32($i742, 1);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.41 := $i743;
    call {:si_unique_call 1684} {:cexpr "ref_cnt"} boogie_si_record_i32($i743);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb658:
    assume $i735 == 1;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} vslice_dummy_var_471 := ldv_mxl111sf_props_mh_release_5();
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i737 := $M.41;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i738 := $sub.i32($i737, 1);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $M.41 := $i738;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32($i738);
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb599:
    assume $i660 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $i729 := $M.44;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i730 := $eq.i32($i729, 1);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb655, $bb656;

  $bb656:
    assume !($i730 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb655:
    assume $i730 == 1;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_470 := ldv_mxl111sf_props_mh_setup_5();
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i732 := $M.41;
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i733 := $add.i32($i732, 1);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $M.41 := $i733;
    call {:si_unique_call 1678} {:cexpr "ref_cnt"} boogie_si_record_i32($i733);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb597:
    assume $i659 == 1;
    assume {:verifier.code 0} true;
    $i662 := $slt.i32($i657, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i662 == 1);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $i711 := $M.44;
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i712 := $eq.i32($i711, 1);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  $bb647:
    assume !($i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    $i717 := $M.44;
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $i718 := $eq.i32($i717, 3);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $i723 := $M.44;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i724 := $eq.i32($i723, 2);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb652:
    assume $i724 == 1;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $p725 := $M.109;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p726 := $M.111;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p727 := $M.112;
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_469 := mxl111sf_get_stream_config_mh($p725, $p726, $p727);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb649:
    assume $i718 == 1;
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $p719 := $M.109;
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $p720 := $M.111;
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $p721 := $M.112;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} vslice_dummy_var_468 := mxl111sf_get_stream_config_mh($p719, $p720, $p721);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb646:
    assume $i712 == 1;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p713 := $M.109;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p714 := $M.111;
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $p715 := $M.112;
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_467 := mxl111sf_get_stream_config_mh($p713, $p714, $p715);
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb604:
    assume $i662 == 1;
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $i699 := $M.44;
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i700 := $eq.i32($i699, 1);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $i703 := $M.44;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i704 := $eq.i32($i703, 3);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $i707 := $M.44;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i708 := $eq.i32($i707, 2);
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb643:
    assume $i708 == 1;
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $p709 := $M.108;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_466 := mxl111sf_frontend_attach_mh($p709);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb640:
    assume $i704 == 1;
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $p705 := $M.108;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_465 := mxl111sf_frontend_attach_mh($p705);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb637:
    assume $i700 == 1;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p701 := $M.108;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_464 := mxl111sf_frontend_attach_mh($p701);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb595:
    assume $i658 == 1;
    assume {:verifier.code 0} true;
    $i663 := $slt.i32($i657, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb607:
    assume !($i663 == 1);
    assume {:verifier.code 0} true;
    $i664 := $slt.i32($i657, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i664 == 1);
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i684 := $M.44;
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $i685 := $eq.i32($i684, 1);
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i685 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    $i689 := $M.44;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i690 := $eq.i32($i689, 3);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    $i694 := $M.44;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i694, 2);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  $bb635:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb634:
    assume $i695 == 1;
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $p696 := $M.109;
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i697 := $M.110;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} vslice_dummy_var_463 := mxl111sf_ep5_streaming_ctrl($p696, $i697);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10447;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb636;

  $bb631:
    assume $i690 == 1;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p691 := $M.109;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i692 := $M.110;
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} vslice_dummy_var_462 := mxl111sf_ep5_streaming_ctrl($p691, $i692);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb628:
    assume $i685 == 1;
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $p686 := $M.109;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $i687 := $M.110;
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} vslice_dummy_var_461 := mxl111sf_ep5_streaming_ctrl($p686, $i687);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb608:
    assume $i664 == 1;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i672 := $M.44;
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $i673 := $eq.i32($i672, 1);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    $i676 := $M.44;
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $i677 := $eq.i32($i676, 3);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  $bb623:
    assume !($i677 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb624:
    assume {:verifier.code 0} true;
    $i680 := $M.44;
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i680, 2);
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb625:
    assume $i681 == 1;
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p682 := $M.108;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} vslice_dummy_var_460 := mxl111sf_attach_tuner($p682);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb622:
    assume $i677 == 1;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p678 := $M.108;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} vslice_dummy_var_459 := mxl111sf_attach_tuner($p678);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    goto $bb624;

  $bb619:
    assume $i673 == 1;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p674 := $M.108;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} vslice_dummy_var_458 := mxl111sf_attach_tuner($p674);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb606:
    assume $i663 == 1;
    assume {:verifier.code 0} true;
    $i665 := $eq.i32($i657, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume !($i665 == 1);
    goto $bb603;

  $bb610:
    assume $i665 == 1;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $i666 := $M.44;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $i667 := $eq.i32($i666, 2);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb612:
    assume $i667 == 1;
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $p668 := $M.106;
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} $i669 := mxl111sf_init($p668);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $M.107 := $i669;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_10"} boogie_si_record_i32($i669);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $i670 := $M.107;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i670, 0);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  $bb615:
    assume !($i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb614:
    assume $i671 == 1;
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb616;

  $bb9:
    assume $i4 == 1;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i608 := $M.43;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i609 := $ne.i32($i608, 0);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb555:
    assume $i609 == 1;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} $i610 := __VERIFIER_nondet_int();
    call {:si_unique_call 1630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i610);
    call {:si_unique_call 1631} {:cexpr "tmp___9"} boogie_si_record_i32($i610);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $i611 := $slt.i32($i610, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    $i612 := $slt.i32($i610, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i612 == 1);
    assume {:verifier.code 0} true;
    $i613 := $slt.i32($i610, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb563:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    $i614 := $eq.i32($i610, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    assume !($i614 == 1);
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb564:
    assume $i614 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i650 := $M.43;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i651 := $eq.i32($i650, 1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb587:
    assume $i651 == 1;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} vslice_dummy_var_457 := ldv_mxl_demod_config_probe_10();
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i653 := $M.41;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i654 := $add.i32($i653, 1);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $M.41 := $i654;
    call {:si_unique_call 1645} {:cexpr "ref_cnt"} boogie_si_record_i32($i654);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb562:
    assume $i613 == 1;
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i645 := $M.43;
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i646 := $eq.i32($i645, 2);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb584:
    assume $i646 == 1;
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} vslice_dummy_var_456 := ldv_mxl_demod_config_release_10();
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i648 := $M.41;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i649 := $sub.i32($i648, 1);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $M.41 := $i649;
    call {:si_unique_call 1642} {:cexpr "ref_cnt"} boogie_si_record_i32($i649);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb560:
    assume $i612 == 1;
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i637 := $M.43;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i638 := $eq.i32($i637, 2);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  $bb582:
    assume !($i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb581:
    assume $i638 == 1;
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $p639 := $M.100;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $i640 := $M.104;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i641 := $zext.i8.i32($i640);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i642 := $trunc.i32.i8($i641);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $p643 := $M.105;
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} vslice_dummy_var_455 := mxl111sf_read_reg($p639, $i642, $p643);
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb558:
    assume $i611 == 1;
    assume {:verifier.code 0} true;
    $i615 := $slt.i32($i610, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i615 == 1);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i627 := $M.43;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $i628 := $eq.i32($i627, 1);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $i632 := $M.43;
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    $i633 := $eq.i32($i632, 2);
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  $bb579:
    assume !($i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb578:
    assume $i633 == 1;
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    $p634 := $M.100;
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $p635 := $M.103;
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_454 := mxl111sf_ctrl_program_regs($p634, $p635);
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb575:
    assume $i628 == 1;
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $p629 := $M.100;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $p630 := $M.103;
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_453 := mxl111sf_ctrl_program_regs($p629, $p630);
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb567:
    assume $i615 == 1;
    assume {:verifier.code 0} true;
    $i616 := $eq.i32($i610, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    assume !($i616 == 1);
    goto $bb566;

  $bb569:
    assume $i616 == 1;
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $i617 := $M.43;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i618 := $eq.i32($i617, 2);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb571:
    assume $i618 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p619 := $M.100;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i620 := $M.101;
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i621 := $zext.i8.i32($i620);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $i622 := $trunc.i32.i8($i621);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $i623 := $M.102;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $i624 := $zext.i8.i32($i623);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $i625 := $trunc.i32.i8($i624);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_452 := mxl111sf_write_reg($p619, $i622, $i625);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb7:
    assume $i3 == 1;
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i591 := $M.42;
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i592 := $ne.i32($i591, 0);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  $bb527:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb526:
    assume $i592 == 1;
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} $i593 := __VERIFIER_nondet_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i593);
    call {:si_unique_call 1612} {:cexpr "tmp___8"} boogie_si_record_i32($i593);
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    $i594 := $slt.i32($i593, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  $bb530:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    $i595 := $eq.i32($i593, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume {:verifier.code 0} true;
    assume !($i595 == 1);
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb531:
    assume $i595 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i601 := $M.42;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i602 := $eq.i32($i601, 1);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb544:
    assume $i602 == 1;
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} $i603 := mxl111sf_usb_driver_init();
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $M.99 := $i603;
    call {:si_unique_call 1617} {:cexpr "ldv_retval_9"} boogie_si_record_i32($i603);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i604 := $M.99;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i605 := $ne.i32($i604, 0);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    $i606 := $M.99;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    $i607 := $eq.i32($i606, 0);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb549:
    assume $i607 == 1;
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb546:
    assume $i605 == 1;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} ldv_check_final_state();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb529:
    assume $i594 == 1;
    assume {:verifier.code 0} true;
    $i596 := $eq.i32($i593, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    assume !($i596 == 1);
    goto $bb533;

  $bb534:
    assume $i596 == 1;
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i597 := $M.42;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i598 := $eq.i32($i597, 2);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    assume !($i598 == 1);
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb536:
    assume $i598 == 1;
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i599 := $M.41;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i600 := $eq.i32($i599, 0);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb539, $bb540;

  $bb540:
    assume {:verifier.code 0} true;
    assume !($i600 == 1);
    goto $bb538;

  $bb539:
    assume $i600 == 1;
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} mxl111sf_usb_driver_exit();
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.42 := 3;
    call {:si_unique_call 1614} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb5:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i7 == 1);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i502 := $M.40;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i503 := $ne.i32($i502, 0);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb452:
    assume $i503 == 1;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} $i504 := __VERIFIER_nondet_int();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i504);
    call {:si_unique_call 1573} {:cexpr "tmp___7"} boogie_si_record_i32($i504);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $i505 := $slt.i32($i504, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    $i506 := $slt.i32($i504, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb458:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    $i507 := $slt.i32($i504, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i507 == 1);
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i504, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    assume !($i508 == 1);
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb461:
    assume $i508 == 1;
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    $i581 := $M.40;
    goto corral_source_split_10099;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    $i582 := $eq.i32($i581, 3);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    $i586 := $M.40;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 2);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  $bb522:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb521:
    assume $i587 == 1;
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} vslice_dummy_var_451 := ldv_mxl111sf_props_atsc_mh_release_4();
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i589 := $M.41;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $i590 := $sub.i32($i589, 1);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $M.41 := $i590;
    call {:si_unique_call 1609} {:cexpr "ref_cnt"} boogie_si_record_i32($i590);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb518:
    assume $i582 == 1;
    goto corral_source_split_10232;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} vslice_dummy_var_450 := ldv_mxl111sf_props_atsc_mh_release_4();
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i584 := $M.41;
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    $i585 := $sub.i32($i584, 1);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.41 := $i585;
    call {:si_unique_call 1606} {:cexpr "ref_cnt"} boogie_si_record_i32($i585);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb459:
    assume $i507 == 1;
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i576 := $M.40;
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i577 := $eq.i32($i576, 1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb515:
    assume $i577 == 1;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} vslice_dummy_var_449 := ldv_mxl111sf_props_atsc_mh_setup_4();
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i579 := $M.41;
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    $i580 := $add.i32($i579, 1);
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $M.41 := $i580;
    call {:si_unique_call 1603} {:cexpr "ref_cnt"} boogie_si_record_i32($i580);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb457:
    assume $i506 == 1;
    assume {:verifier.code 0} true;
    $i509 := $slt.i32($i504, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i509 == 1);
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i558 := $M.40;
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $i559 := $eq.i32($i558, 1);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  $bb507:
    assume !($i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    $i564 := $M.40;
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    $i565 := $eq.i32($i564, 3);
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $i570 := $M.40;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i571 := $eq.i32($i570, 2);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb512:
    assume $i571 == 1;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p572 := $M.95;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $p573 := $M.97;
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p574 := $M.98;
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_448 := mxl111sf_get_stream_config_atsc_mh($p572, $p573, $p574);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb509:
    assume $i565 == 1;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p566 := $M.95;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $p567 := $M.97;
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $p568 := $M.98;
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_447 := mxl111sf_get_stream_config_atsc_mh($p566, $p567, $p568);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10213;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb506:
    assume $i559 == 1;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p560 := $M.95;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $p561 := $M.97;
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    $p562 := $M.98;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_446 := mxl111sf_get_stream_config_atsc_mh($p560, $p561, $p562);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb464:
    assume $i509 == 1;
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i546 := $M.40;
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    $i547 := $eq.i32($i546, 1);
    goto corral_source_split_10104;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  $bb498:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $i550 := $M.40;
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i551 := $eq.i32($i550, 3);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $i554 := $M.40;
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i554, 2);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb503:
    assume $i555 == 1;
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $p556 := $M.94;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_445 := mxl111sf_frontend_attach_atsc_mh($p556);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10196;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb500:
    assume $i551 == 1;
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $p552 := $M.94;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} vslice_dummy_var_444 := mxl111sf_frontend_attach_atsc_mh($p552);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb497:
    assume $i547 == 1;
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $p548 := $M.94;
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} vslice_dummy_var_443 := mxl111sf_frontend_attach_atsc_mh($p548);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb455:
    assume $i505 == 1;
    assume {:verifier.code 0} true;
    $i510 := $slt.i32($i504, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb467:
    assume !($i510 == 1);
    assume {:verifier.code 0} true;
    $i511 := $slt.i32($i504, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i511 == 1);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i531 := $M.40;
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i532 := $eq.i32($i531, 1);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $i536 := $M.40;
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $i537 := $eq.i32($i536, 3);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    $i541 := $M.40;
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i541, 2);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  $bb495:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb494:
    assume $i542 == 1;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p543 := $M.95;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i544 := $M.96;
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} vslice_dummy_var_442 := mxl111sf_streaming_ctrl_atsc_mh($p543, $i544);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb496;

  $bb491:
    assume $i537 == 1;
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p538 := $M.95;
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $i539 := $M.96;
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} vslice_dummy_var_441 := mxl111sf_streaming_ctrl_atsc_mh($p538, $i539);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb488:
    assume $i532 == 1;
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    $p533 := $M.95;
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $i534 := $M.96;
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} vslice_dummy_var_440 := mxl111sf_streaming_ctrl_atsc_mh($p533, $i534);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb468:
    assume $i511 == 1;
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $i519 := $M.40;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 1);
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    $i523 := $M.40;
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $i524 := $eq.i32($i523, 3);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  $bb483:
    assume !($i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb484:
    assume {:verifier.code 0} true;
    $i527 := $M.40;
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i528 := $eq.i32($i527, 2);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  $bb486:
    assume !($i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb485:
    assume $i528 == 1;
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p529 := $M.94;
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} vslice_dummy_var_439 := mxl111sf_attach_tuner($p529);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb482:
    assume $i524 == 1;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p525 := $M.94;
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} vslice_dummy_var_438 := mxl111sf_attach_tuner($p525);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    goto $bb484;

  $bb479:
    assume $i520 == 1;
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p521 := $M.94;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} vslice_dummy_var_437 := mxl111sf_attach_tuner($p521);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb466:
    assume $i510 == 1;
    assume {:verifier.code 0} true;
    $i512 := $eq.i32($i504, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    assume !($i512 == 1);
    goto $bb463;

  $bb470:
    assume $i512 == 1;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $i513 := $M.40;
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i513, 2);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb472:
    assume $i514 == 1;
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $p515 := $M.92;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i516 := mxl111sf_init($p515);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $M.93 := $i516;
    call {:si_unique_call 1575} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i516);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i517 := $M.93;
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i518 := $eq.i32($i517, 0);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  $bb475:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb474:
    assume $i518 == 1;
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb16:
    assume $i7 == 1;
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i452 := $M.39;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i453 := $ne.i32($i452, 0);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb397:
    assume $i453 == 1;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i454 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i454);
    call {:si_unique_call 1551} {:cexpr "tmp___6"} boogie_si_record_i32($i454);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $i455 := $slt.i32($i454, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    $i456 := $slt.i32($i454, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i456 == 1);
    assume {:verifier.code 0} true;
    $i457 := $slt.i32($i454, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i454, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb406:
    assume $i458 == 1;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i497 := $M.39;
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i498 := $eq.i32($i497, 3);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb444:
    assume $i498 == 1;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} $i499 := ldv_mxl111sf_usb_driver_reset_resume_1();
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $M.91 := $i499;
    call {:si_unique_call 1569} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i499);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    $i500 := $M.91;
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $i501 := $eq.i32($i500, 0);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  $bb447:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb446:
    assume $i501 == 1;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb448;

  $bb404:
    assume $i457 == 1;
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i491 := $M.39;
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 3);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb438:
    assume $i492 == 1;
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p493 := $M.84;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i494 := dvb_usbv2_resume($p493);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.90 := $i494;
    call {:si_unique_call 1566} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i494);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $i495 := $M.90;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i495, 0);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb440:
    assume $i496 == 1;
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb402:
    assume $i456 == 1;
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i484 := $M.39;
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 2);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb432:
    assume $i485 == 1;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p486 := $M.84;
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $i487 := $M.88;
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $i488 := dvb_usbv2_suspend($p486, $i487);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $M.89 := $i488;
    call {:si_unique_call 1563} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i488);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i489 := $M.89;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, 0);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb434:
    assume $i490 == 1;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb400:
    assume $i455 == 1;
    assume {:verifier.code 0} true;
    $i459 := $slt.i32($i454, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb410:
    assume !($i459 == 1);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i470 := $M.39;
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i470, 3);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    assume !($i471 == 1);
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $i477 := $M.39;
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $i478 := $eq.i32($i477, 2);
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    assume !($i478 == 1);
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb426:
    assume $i478 == 1;
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i479 := $M.87;
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i479, 0);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb428;

  $bb429:
    assume $i480 == 1;
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    $p481 := $M.84;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} dvb_usbv2_disconnect($p481);
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i482 := $M.41;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i483 := $sub.i32($i482, 1);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.41 := $i483;
    call {:si_unique_call 1561} {:cexpr "ref_cnt"} boogie_si_record_i32($i483);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb420:
    assume $i471 == 1;
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i472 := $M.87;
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 0);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    assume !($i473 == 1);
    goto $bb422;

  $bb423:
    assume $i473 == 1;
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p474 := $M.84;
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} dvb_usbv2_disconnect($p474);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i475 := $M.41;
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i476 := $sub.i32($i475, 1);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.41 := $i476;
    call {:si_unique_call 1558} {:cexpr "ref_cnt"} boogie_si_record_i32($i476);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb409:
    assume $i459 == 1;
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i454, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume {:verifier.code 0} true;
    assume !($i460 == 1);
    goto $bb408;

  $bb411:
    assume $i460 == 1;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i461 := $M.39;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, 1);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  $bb414:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb413:
    assume $i462 == 1;
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p463 := $M.84;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $p464 := $M.85;
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i465 := dvb_usbv2_probe($p463, $p464);
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.86 := $i465;
    call {:si_unique_call 1553} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i465);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i466 := $M.86;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i467 := $eq.i32($i466, 0);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb415:
    assume $i467 == 1;
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i468 := $M.41;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $i469 := $add.i32($i468, 1);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.41 := $i469;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32($i469);
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb14:
    assume $i6 == 1;
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i436 := $M.38;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i437 := $ne.i32($i436, 0);
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb378:
    assume $i437 == 1;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1542} $i438 := __VERIFIER_nondet_int();
    call {:si_unique_call 1543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i438);
    call {:si_unique_call 1544} {:cexpr "tmp___5"} boogie_si_record_i32($i438);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $i439 := $slt.i32($i438, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i438, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb383:
    assume $i440 == 1;
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i448 := $M.38;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 1);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb392:
    assume $i449 == 1;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p450 := $M.81;
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_436 := mxl111sf_i2c_func($p450);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb381:
    assume $i439 == 1;
    assume {:verifier.code 0} true;
    $i441 := $eq.i32($i438, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i441 == 1);
    goto $bb385;

  $bb386:
    assume $i441 == 1;
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $i442 := $M.38;
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 1);
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb388:
    assume $i443 == 1;
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $p444 := $M.81;
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    $p445 := $M.82;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $i446 := $M.83;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_435 := mxl111sf_i2c_xfer($p444, $p445, $i446);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb390;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i10 == 1);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i347 := $M.37;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i348 := $ne.i32($i347, 0);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb304:
    assume $i348 == 1;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} $i349 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i349);
    call {:si_unique_call 1505} {:cexpr "tmp___4"} boogie_si_record_i32($i349);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $i350 := $slt.i32($i349, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    $i351 := $slt.i32($i349, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    $i352 := $slt.i32($i349, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i349, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    assume !($i353 == 1);
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb313:
    assume $i353 == 1;
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i426 := $M.37;
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i427 := $eq.i32($i426, 3);
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $i431 := $M.37;
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i432 := $eq.i32($i431, 2);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb373:
    assume $i432 == 1;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} vslice_dummy_var_434 := ldv_mxl111sf_props_mercury_mh_release_2();
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $i434 := $M.41;
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i435 := $sub.i32($i434, 1);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $M.41 := $i435;
    call {:si_unique_call 1541} {:cexpr "ref_cnt"} boogie_si_record_i32($i435);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb370:
    assume $i427 == 1;
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_433 := ldv_mxl111sf_props_mercury_mh_release_2();
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i429 := $M.41;
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i430 := $sub.i32($i429, 1);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $M.41 := $i430;
    call {:si_unique_call 1538} {:cexpr "ref_cnt"} boogie_si_record_i32($i430);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb311:
    assume $i352 == 1;
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $i421 := $M.37;
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 1);
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb367:
    assume $i422 == 1;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_432 := ldv_mxl111sf_props_mercury_mh_setup_2();
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i424 := $M.41;
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i425 := $add.i32($i424, 1);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $M.41 := $i425;
    call {:si_unique_call 1535} {:cexpr "ref_cnt"} boogie_si_record_i32($i425);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb309:
    assume $i351 == 1;
    assume {:verifier.code 0} true;
    $i354 := $slt.i32($i349, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i354 == 1);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i403 := $M.37;
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 1);
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    $i409 := $M.37;
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i410 := $eq.i32($i409, 3);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume !($i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $i415 := $M.37;
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 2);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb364:
    assume $i416 == 1;
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p417 := $M.77;
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $p418 := $M.79;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p419 := $M.80;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_431 := mxl111sf_get_stream_config_mercury_mh($p417, $p418, $p419);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb361:
    assume $i410 == 1;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    $p411 := $M.77;
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p412 := $M.79;
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $p413 := $M.80;
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_430 := mxl111sf_get_stream_config_mercury_mh($p411, $p412, $p413);
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb358:
    assume $i404 == 1;
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $p405 := $M.77;
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p406 := $M.79;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p407 := $M.80;
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_429 := mxl111sf_get_stream_config_mercury_mh($p405, $p406, $p407);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    goto $bb360;

  $bb316:
    assume $i354 == 1;
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i391 := $M.37;
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 1);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $i395 := $M.37;
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 3);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $i399 := $M.37;
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 2);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb355:
    assume $i400 == 1;
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p401 := $M.76;
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} vslice_dummy_var_428 := mxl111sf_frontend_attach_mercury_mh($p401);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb352:
    assume $i396 == 1;
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p397 := $M.76;
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} vslice_dummy_var_427 := mxl111sf_frontend_attach_mercury_mh($p397);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb349:
    assume $i392 == 1;
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $p393 := $M.76;
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_426 := mxl111sf_frontend_attach_mercury_mh($p393);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb307:
    assume $i350 == 1;
    assume {:verifier.code 0} true;
    $i355 := $slt.i32($i349, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    $i356 := $slt.i32($i349, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i356 == 1);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i376 := $M.37;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 1);
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $i381 := $M.37;
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i382 := $eq.i32($i381, 3);
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    $i386 := $M.37;
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 2);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb346:
    assume $i387 == 1;
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $p388 := $M.77;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i389 := $M.78;
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} vslice_dummy_var_425 := mxl111sf_streaming_ctrl_mercury_mh($p388, $i389);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb343:
    assume $i382 == 1;
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p383 := $M.77;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i384 := $M.78;
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_424 := mxl111sf_streaming_ctrl_mercury_mh($p383, $i384);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb340:
    assume $i377 == 1;
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p378 := $M.77;
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i379 := $M.78;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} vslice_dummy_var_423 := mxl111sf_streaming_ctrl_mercury_mh($p378, $i379);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb320:
    assume $i356 == 1;
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i364 := $M.37;
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    $i368 := $M.37;
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 3);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    $i372 := $M.37;
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 2);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb337:
    assume $i373 == 1;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p374 := $M.76;
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} vslice_dummy_var_422 := mxl111sf_attach_tuner($p374);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb334:
    assume $i369 == 1;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p370 := $M.76;
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} vslice_dummy_var_421 := mxl111sf_attach_tuner($p370);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1512} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    goto $bb336;

  $bb331:
    assume $i365 == 1;
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $p366 := $M.76;
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vslice_dummy_var_420 := mxl111sf_attach_tuner($p366);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb318:
    assume $i355 == 1;
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i349, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    assume !($i357 == 1);
    goto $bb315;

  $bb322:
    assume $i357 == 1;
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i358 := $M.37;
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i359 := $eq.i32($i358, 2);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb324:
    assume $i359 == 1;
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $p360 := $M.74;
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $i361 := mxl111sf_init($p360);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.75 := $i361;
    call {:si_unique_call 1507} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i361);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $i362 := $M.75;
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $i363 := $eq.i32($i362, 0);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb326:
    assume $i363 == 1;
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb22:
    assume $i10 == 1;
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i280 := $M.36;
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i281 := $ne.i32($i280, 0);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb251:
    assume $i281 == 1;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1478} $i282 := __VERIFIER_nondet_int();
    call {:si_unique_call 1479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i282);
    call {:si_unique_call 1480} {:cexpr "tmp___3"} boogie_si_record_i32($i282);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i282, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i282, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i282, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $eq.i32($i282, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb260:
    assume $i286 == 1;
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i342 := $M.36;
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 1);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb299:
    assume $i343 == 1;
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_419 := ldv_mxl_tuner_config_probe_9();
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $i345 := $M.41;
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $i346 := $add.i32($i345, 1);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.41 := $i346;
    call {:si_unique_call 1502} {:cexpr "ref_cnt"} boogie_si_record_i32($i346);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb258:
    assume $i285 == 1;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $i337 := $M.36;
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 2);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb296:
    assume $i338 == 1;
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} vslice_dummy_var_418 := ldv_mxl_tuner_config_release_9();
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i340 := $M.41;
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i341 := $sub.i32($i340, 1);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.41 := $i341;
    call {:si_unique_call 1499} {:cexpr "ref_cnt"} boogie_si_record_i32($i341);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb256:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i282, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i287 == 1);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i329 := $M.36;
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 2);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb293:
    assume $i330 == 1;
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $p331 := $M.66;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $i332 := $M.72;
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i334 := $trunc.i32.i8($i333);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $p335 := $M.73;
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} vslice_dummy_var_417 := mxl111sf_read_reg($p331, $i334, $p335);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1496} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb263:
    assume $i287 == 1;
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $i319 := $M.36;
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 1);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i324 := $M.36;
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $i325 := $eq.i32($i324, 2);
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb290:
    assume $i325 == 1;
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $p326 := $M.66;
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p327 := $M.71;
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} vslice_dummy_var_416 := mxl111sf_ctrl_program_regs($p326, $p327);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1494} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb287:
    assume $i320 == 1;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p321 := $M.66;
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $p322 := $M.71;
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_415 := mxl111sf_ctrl_program_regs($p321, $p322);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1492} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb254:
    assume $i283 == 1;
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb266:
    assume !($i288 == 1);
    assume {:verifier.code 0} true;
    $i289 := $slt.i32($i282, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i289 == 1);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $i309 := $M.36;
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i310 := $eq.i32($i309, 1);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i314 := $M.36;
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    $i315 := $eq.i32($i314, 2);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb284:
    assume $i315 == 1;
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p316 := $M.66;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $i317 := $M.70;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_414 := mxl1x1sf_top_master_ctrl($p316, $i317);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb281:
    assume $i310 == 1;
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p311 := $M.66;
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i312 := $M.70;
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} vslice_dummy_var_413 := mxl1x1sf_top_master_ctrl($p311, $i312);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb267:
    assume $i289 == 1;
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $i301 := $M.36;
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 1);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $i305 := $M.36;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i306 := $eq.i32($i305, 2);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb278:
    assume $i306 == 1;
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $p307 := $M.69;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} vslice_dummy_var_412 := mxl111sf_ant_hunt($p307);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb275:
    assume $i302 == 1;
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $p303 := $M.69;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} vslice_dummy_var_411 := mxl111sf_ant_hunt($p303);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb265:
    assume $i288 == 1;
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i282, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    assume !($i290 == 1);
    goto $bb262;

  $bb269:
    assume $i290 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i291 := $M.36;
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $i292 := $eq.i32($i291, 2);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb271:
    assume $i292 == 1;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p293 := $M.66;
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $i294 := $M.67;
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $i295 := $zext.i8.i32($i294);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $i296 := $trunc.i32.i8($i295);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i297 := $M.68;
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i298 := $zext.i8.i32($i297);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $i299 := $trunc.i32.i8($i298);
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_410 := mxl111sf_write_reg($p293, $i296, $i299);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb20:
    assume $i9 == 1;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $i191 := $M.35;
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i192 := $ne.i32($i191, 0);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb177:
    assume $i192 == 1;
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1439} $i193 := __VERIFIER_nondet_int();
    call {:si_unique_call 1440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i193);
    call {:si_unique_call 1441} {:cexpr "tmp___2"} boogie_si_record_i32($i193);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i194 := $slt.i32($i193, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    $i195 := $slt.i32($i193, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    $i196 := $slt.i32($i193, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i193, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb186:
    assume $i197 == 1;
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i270 := $M.35;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 3);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i275 := $M.35;
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $i276 := $eq.i32($i275, 2);
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb246:
    assume $i276 == 1;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_409 := ldv_mxl111sf_props_dvbt_release_7();
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $i278 := $M.41;
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $i279 := $sub.i32($i278, 1);
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.41 := $i279;
    call {:si_unique_call 1477} {:cexpr "ref_cnt"} boogie_si_record_i32($i279);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume $i271 == 1;
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_408 := ldv_mxl111sf_props_dvbt_release_7();
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $i273 := $M.41;
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $i274 := $sub.i32($i273, 1);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.41 := $i274;
    call {:si_unique_call 1474} {:cexpr "ref_cnt"} boogie_si_record_i32($i274);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb184:
    assume $i196 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i265 := $M.35;
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 1);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb240:
    assume $i266 == 1;
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} vslice_dummy_var_407 := ldv_mxl111sf_props_dvbt_setup_7();
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i268 := $M.41;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i269 := $add.i32($i268, 1);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $M.41 := $i269;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32($i269);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb182:
    assume $i195 == 1;
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i193, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i198 == 1);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    $i247 := $M.35;
    goto corral_source_split_9571;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 1);
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i253 := $M.35;
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 3);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $i259 := $M.35;
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 2);
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb237:
    assume $i260 == 1;
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p261 := $M.62;
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p262 := $M.64;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p263 := $M.65;
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_406 := mxl111sf_get_stream_config_dvbt($p261, $p262, $p263);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb234:
    assume $i254 == 1;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p255 := $M.62;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p256 := $M.64;
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $p257 := $M.65;
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} vslice_dummy_var_405 := mxl111sf_get_stream_config_dvbt($p255, $p256, $p257);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb231:
    assume $i248 == 1;
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $p249 := $M.62;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p250 := $M.64;
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $p251 := $M.65;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} vslice_dummy_var_404 := mxl111sf_get_stream_config_dvbt($p249, $p250, $p251);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb189:
    assume $i198 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i235 := $M.35;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i236 := $eq.i32($i235, 1);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    $i239 := $M.35;
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 3);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i243 := $M.35;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 2);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb228:
    assume $i244 == 1;
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p245 := $M.61;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_403 := mxl111sf_frontend_attach_dvbt($p245);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb225:
    assume $i240 == 1;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p241 := $M.61;
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vslice_dummy_var_402 := mxl111sf_frontend_attach_dvbt($p241);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb222:
    assume $i236 == 1;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $p237 := $M.61;
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vslice_dummy_var_401 := mxl111sf_frontend_attach_dvbt($p237);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9644;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb180:
    assume $i194 == 1;
    assume {:verifier.code 0} true;
    $i199 := $slt.i32($i193, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    $i200 := $slt.i32($i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume !($i200 == 1);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $i220 := $M.35;
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 1);
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i225 := $M.35;
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i230 := $M.35;
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb219:
    assume $i231 == 1;
    goto corral_source_split_9635;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    $p232 := $M.62;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i233 := $M.63;
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vslice_dummy_var_400 := mxl111sf_ep4_streaming_ctrl($p232, $i233);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb216:
    assume $i226 == 1;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p227 := $M.62;
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i228 := $M.63;
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_399 := mxl111sf_ep4_streaming_ctrl($p227, $i228);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb213:
    assume $i221 == 1;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p222 := $M.62;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i223 := $M.63;
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_398 := mxl111sf_ep4_streaming_ctrl($p222, $i223);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb193:
    assume $i200 == 1;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i208 := $M.35;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i209 := $eq.i32($i208, 1);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $i212 := $M.35;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 3);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $i216 := $M.35;
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $i217 := $eq.i32($i216, 2);
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb210:
    assume $i217 == 1;
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $p218 := $M.61;
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_397 := mxl111sf_attach_tuner($p218);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb207:
    assume $i213 == 1;
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $p214 := $M.61;
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_396 := mxl111sf_attach_tuner($p214);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb204:
    assume $i209 == 1;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p210 := $M.61;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_395 := mxl111sf_attach_tuner($p210);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb191:
    assume $i199 == 1;
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i193, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume !($i201 == 1);
    goto $bb188;

  $bb195:
    assume $i201 == 1;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $i202 := $M.35;
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i202, 2);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb197:
    assume $i203 == 1;
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p204 := $M.59;
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} $i205 := mxl111sf_init($p204);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.60 := $i205;
    call {:si_unique_call 1443} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i205);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i206 := $M.60;
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 0);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb199:
    assume $i207 == 1;
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb18:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i11 == 1);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    $i102 := $M.34;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i103 := $ne.i32($i102, 0);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb103:
    assume $i103 == 1;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1400} $i104 := __VERIFIER_nondet_int();
    call {:si_unique_call 1401} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i104);
    call {:si_unique_call 1402} {:cexpr "tmp___1"} boogie_si_record_i32($i104);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i104, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i104, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i104, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb112:
    assume $i108 == 1;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i181 := $M.34;
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 3);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $i186 := $M.34;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb172:
    assume $i187 == 1;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_394 := ldv_mxl111sf_props_mercury_release_3();
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i189 := $M.41;
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i190 := $sub.i32($i189, 1);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $M.41 := $i190;
    call {:si_unique_call 1438} {:cexpr "ref_cnt"} boogie_si_record_i32($i190);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb169:
    assume $i182 == 1;
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vslice_dummy_var_393 := ldv_mxl111sf_props_mercury_release_3();
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i184 := $M.41;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i185 := $sub.i32($i184, 1);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.41 := $i185;
    call {:si_unique_call 1435} {:cexpr "ref_cnt"} boogie_si_record_i32($i185);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb110:
    assume $i107 == 1;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i176 := $M.34;
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb166:
    assume $i177 == 1;
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_392 := ldv_mxl111sf_props_mercury_setup_3();
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i179 := $M.41;
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i179, 1);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $M.41 := $i180;
    call {:si_unique_call 1432} {:cexpr "ref_cnt"} boogie_si_record_i32($i180);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb108:
    assume $i106 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i109 == 1);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i158 := $M.34;
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 1);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i164 := $M.34;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 3);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $i170 := $M.34;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 2);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb163:
    assume $i171 == 1;
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p172 := $M.55;
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p173 := $M.57;
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p174 := $M.58;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_391 := mxl111sf_get_stream_config_mercury($p172, $p173, $p174);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb160:
    assume $i165 == 1;
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $p166 := $M.55;
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $p167 := $M.57;
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p168 := $M.58;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_390 := mxl111sf_get_stream_config_mercury($p166, $p167, $p168);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb157:
    assume $i159 == 1;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p160 := $M.55;
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p161 := $M.57;
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p162 := $M.58;
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} vslice_dummy_var_389 := mxl111sf_get_stream_config_mercury($p160, $p161, $p162);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb115:
    assume $i109 == 1;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i146 := $M.34;
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 1);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i150 := $M.34;
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 3);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $i154 := $M.34;
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 2);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb154:
    assume $i155 == 1;
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $p156 := $M.54;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vslice_dummy_var_388 := mxl111sf_frontend_attach_mercury($p156);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb151:
    assume $i151 == 1;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $p152 := $M.54;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_387 := mxl111sf_frontend_attach_mercury($p152);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1421} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb148:
    assume $i147 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p148 := $M.54;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_386 := mxl111sf_frontend_attach_mercury($p148);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb106:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i110 := $slt.i32($i104, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    $i111 := $slt.i32($i104, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i111 == 1);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i131 := $M.34;
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 1);
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i136 := $M.34;
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i136, 3);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    $i141 := $M.34;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 2);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb145:
    assume $i142 == 1;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p143 := $M.55;
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $i144 := $M.56;
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_385 := mxl111sf_streaming_ctrl_mercury($p143, $i144);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb142:
    assume $i137 == 1;
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $p138 := $M.55;
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i139 := $M.56;
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_384 := mxl111sf_streaming_ctrl_mercury($p138, $i139);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb139:
    assume $i132 == 1;
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $p133 := $M.55;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $i134 := $M.56;
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_383 := mxl111sf_streaming_ctrl_mercury($p133, $i134);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb119:
    assume $i111 == 1;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i119 := $M.34;
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i123 := $M.34;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 3);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $i127 := $M.34;
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb136:
    assume $i128 == 1;
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $p129 := $M.54;
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_382 := mxl111sf_attach_tuner($p129);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb133:
    assume $i124 == 1;
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p125 := $M.54;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_381 := mxl111sf_attach_tuner($p125);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb130:
    assume $i120 == 1;
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p121 := $M.54;
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_380 := mxl111sf_attach_tuner($p121);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb117:
    assume $i110 == 1;
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i104, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb114;

  $bb121:
    assume $i112 == 1;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i113 := $M.34;
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 2);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb123:
    assume $i114 == 1;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p115 := $M.52;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i116 := mxl111sf_init($p115);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $M.53 := $i116;
    call {:si_unique_call 1404} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i116);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i117 := $M.53;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb125:
    assume $i118 == 1;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb24:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb13;

  $bb26:
    assume $i12 == 1;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    $i13 := $M.33;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb28:
    assume $i14 == 1;
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1361} $i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i15);
    call {:si_unique_call 1363} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb37:
    assume $i19 == 1;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i92 := $M.33;
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 3);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i97 := $M.33;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 2);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb97:
    assume $i98 == 1;
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_379 := ldv_mxl111sf_props_atsc_release_6();
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i100 := $M.41;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32($i100, 1);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $M.41 := $i101;
    call {:si_unique_call 1399} {:cexpr "ref_cnt"} boogie_si_record_i32($i101);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb94:
    assume $i93 == 1;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} vslice_dummy_var_378 := ldv_mxl111sf_props_atsc_release_6();
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i95 := $M.41;
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $i96 := $sub.i32($i95, 1);
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $M.41 := $i96;
    call {:si_unique_call 1396} {:cexpr "ref_cnt"} boogie_si_record_i32($i96);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb35:
    assume $i18 == 1;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i87 := $M.33;
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb91:
    assume $i88 == 1;
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} vslice_dummy_var_377 := ldv_mxl111sf_props_atsc_setup_6();
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1392} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i90 := $M.41;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i91 := $add.i32($i90, 1);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $M.41 := $i91;
    call {:si_unique_call 1393} {:cexpr "ref_cnt"} boogie_si_record_i32($i91);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb33:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i20 == 1);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i69 := $M.33;
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 1);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i75 := $M.33;
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 3);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i81 := $M.33;
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 2);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb88:
    assume $i82 == 1;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $p83 := $M.48;
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $p84 := $M.50;
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $p85 := $M.51;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} vslice_dummy_var_376 := mxl111sf_get_stream_config_atsc($p83, $p84, $p85);
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb85:
    assume $i76 == 1;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $p77 := $M.48;
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $p78 := $M.50;
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p79 := $M.51;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} vslice_dummy_var_375 := mxl111sf_get_stream_config_atsc($p77, $p78, $p79);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1388} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb82:
    assume $i70 == 1;
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $p71 := $M.48;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p72 := $M.50;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $p73 := $M.51;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} vslice_dummy_var_374 := mxl111sf_get_stream_config_atsc($p71, $p72, $p73);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1386} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb40:
    assume $i20 == 1;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i57 := $M.33;
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 1);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i61 := $M.33;
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 3);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i65 := $M.33;
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 2);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb79:
    assume $i66 == 1;
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p67 := $M.47;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} vslice_dummy_var_373 := mxl111sf_frontend_attach_atsc($p67);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb76:
    assume $i62 == 1;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p63 := $M.47;
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} vslice_dummy_var_372 := mxl111sf_frontend_attach_atsc($p63);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb73:
    assume $i58 == 1;
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p59 := $M.47;
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} vslice_dummy_var_371 := mxl111sf_frontend_attach_atsc($p59);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb31:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i22 == 1);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i42 := $M.33;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i47 := $M.33;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 3);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i52 := $M.33;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 2);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb70:
    assume $i53 == 1;
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $p54 := $M.48;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i55 := $M.49;
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} vslice_dummy_var_370 := mxl111sf_ep6_streaming_ctrl($p54, $i55);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb67:
    assume $i48 == 1;
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p49 := $M.48;
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i50 := $M.49;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} vslice_dummy_var_369 := mxl111sf_ep6_streaming_ctrl($p49, $i50);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb64:
    assume $i43 == 1;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p44 := $M.48;
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i45 := $M.49;
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} vslice_dummy_var_368 := mxl111sf_ep6_streaming_ctrl($p44, $i45);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb44:
    assume $i22 == 1;
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $i30 := $M.33;
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 1);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i34 := $M.33;
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 3);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i38 := $M.33;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 2);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb61:
    assume $i39 == 1;
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p40 := $M.47;
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} vslice_dummy_var_367 := mxl111sf_attach_tuner($p40);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb58:
    assume $i35 == 1;
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $p36 := $M.47;
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} vslice_dummy_var_366 := mxl111sf_attach_tuner($p36);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i31 == 1;
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p32 := $M.47;
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} vslice_dummy_var_365 := mxl111sf_attach_tuner($p32);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb42:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb39;

  $bb46:
    assume $i23 == 1;
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i24 := $M.33;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 2);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i25 == 1;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p26 := $M.45;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $i27 := mxl111sf_init($p26);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.46 := $i27;
    call {:si_unique_call 1365} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i27);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i28 := $M.46;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i29 == 1;
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb102_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 438797);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.113, $M.18, $M.31, $M.114, $M.115;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $M.113 := 1;
    call {:si_unique_call 1685} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(1);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1686} {:cexpr "ldv_mutex_fe_lock_of_mxl111sf_state"} boogie_si_record_i32(1);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_mutex_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i32(1);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    $M.114 := 1;
    call {:si_unique_call 1688} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(1);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $M.115 := 1;
    call {:si_unique_call 1689} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(1);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mxl111sf_props_atsc_setup_6: ref;

axiom ldv_mxl111sf_props_atsc_setup_6 == $sub.ref(0, 439829);

procedure ldv_mxl111sf_props_atsc_setup_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_atsc_setup_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1690} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1691} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_atsc_release_6: ref;

axiom ldv_mxl111sf_props_atsc_release_6 == $sub.ref(0, 440861);

procedure ldv_mxl111sf_props_atsc_release_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_atsc_release_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mercury_setup_3: ref;

axiom ldv_mxl111sf_props_mercury_setup_3 == $sub.ref(0, 441893);

procedure ldv_mxl111sf_props_mercury_setup_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mercury_setup_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1694} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1695} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mercury_release_3: ref;

axiom ldv_mxl111sf_props_mercury_release_3 == $sub.ref(0, 442925);

procedure ldv_mxl111sf_props_mercury_release_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mercury_release_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1697} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_dvbt_setup_7: ref;

axiom ldv_mxl111sf_props_dvbt_setup_7 == $sub.ref(0, 443957);

procedure ldv_mxl111sf_props_dvbt_setup_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_dvbt_setup_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1698} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1699} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_dvbt_release_7: ref;

axiom ldv_mxl111sf_props_dvbt_release_7 == $sub.ref(0, 444989);

procedure ldv_mxl111sf_props_dvbt_release_7() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_dvbt_release_7() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1701} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl_tuner_config_release_9: ref;

axiom ldv_mxl_tuner_config_release_9 == $sub.ref(0, 446021);

procedure ldv_mxl_tuner_config_release_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl_tuner_config_release_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1702} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1703} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl_tuner_config_probe_9: ref;

axiom ldv_mxl_tuner_config_probe_9 == $sub.ref(0, 447053);

procedure ldv_mxl_tuner_config_probe_9() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl_tuner_config_probe_9() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1705} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mercury_mh_setup_2: ref;

axiom ldv_mxl111sf_props_mercury_mh_setup_2 == $sub.ref(0, 448085);

procedure ldv_mxl111sf_props_mercury_mh_setup_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mercury_mh_setup_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1706} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1707} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mercury_mh_release_2: ref;

axiom ldv_mxl111sf_props_mercury_mh_release_2 == $sub.ref(0, 449117);

procedure ldv_mxl111sf_props_mercury_mh_release_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mercury_mh_release_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1708} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1709} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_usb_driver_reset_resume_1: ref;

axiom ldv_mxl111sf_usb_driver_reset_resume_1 == $sub.ref(0, 450149);

procedure ldv_mxl111sf_usb_driver_reset_resume_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_usb_driver_reset_resume_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_atsc_mh_setup_4: ref;

axiom ldv_mxl111sf_props_atsc_mh_setup_4 == $sub.ref(0, 451181);

procedure ldv_mxl111sf_props_atsc_mh_setup_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_atsc_mh_setup_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1712} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1713} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_atsc_mh_release_4: ref;

axiom ldv_mxl111sf_props_atsc_mh_release_4 == $sub.ref(0, 452213);

procedure ldv_mxl111sf_props_atsc_mh_release_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_atsc_mh_release_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1715} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const mxl111sf_usb_driver_exit: ref;

axiom mxl111sf_usb_driver_exit == $sub.ref(0, 453245);

procedure mxl111sf_usb_driver_exit();
  free requires assertsPassed;
  modifies $M.39;



implementation mxl111sf_usb_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ldv_usb_deregister_11(mxl111sf_usb_driver);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    return;
}



const mxl111sf_usb_driver_init: ref;

axiom mxl111sf_usb_driver_init == $sub.ref(0, 454277);

procedure mxl111sf_usb_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.87;



implementation mxl111sf_usb_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $i0 := ldv_usb_register_driver_10(mxl111sf_usb_driver, __this_module, .str);
    call {:si_unique_call 1718} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl_demod_config_release_10: ref;

axiom ldv_mxl_demod_config_release_10 == $sub.ref(0, 455309);

procedure ldv_mxl_demod_config_release_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl_demod_config_release_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1719} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1720} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl_demod_config_probe_10: ref;

axiom ldv_mxl_demod_config_probe_10 == $sub.ref(0, 456341);

procedure ldv_mxl_demod_config_probe_10() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl_demod_config_probe_10() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1721} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1722} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mh_setup_5: ref;

axiom ldv_mxl111sf_props_mh_setup_5 == $sub.ref(0, 457373);

procedure ldv_mxl111sf_props_mh_setup_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mh_setup_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1723} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1724} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_mxl111sf_props_mh_release_5: ref;

axiom ldv_mxl111sf_props_mh_release_5 == $sub.ref(0, 458405);

procedure ldv_mxl111sf_props_mh_release_5() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_mxl111sf_props_mh_release_5() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1725} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1726} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 459437);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $i0 := $M.113;
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 1);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} ldv_error();
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i2 := $M.18;
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 1);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1728} ldv_error();
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i4 := $M.31;
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i5 == 1);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} ldv_error();
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := $M.114;
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i7 == 1);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1730} ldv_error();
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := $M.115;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i9 == 1);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} ldv_error();
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i9 == 1;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i7 == 1;
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i5 == 1;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i3 == 1;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_usb_register_driver_10: ref;

axiom ldv_usb_register_driver_10 == $sub.ref(0, 460469);

procedure ldv_usb_register_driver_10($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.87;



implementation ldv_usb_register_driver_10($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1733} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $M.87 := 0;
    call {:si_unique_call 1735} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 461501);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1736} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1737} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_11: ref;

axiom ldv_usb_deregister_11 == $sub.ref(0, 462533);

procedure ldv_usb_deregister_11($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_usb_deregister_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1738} usb_deregister($p0);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 463565);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 464597);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1740} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 1} true;
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 465629);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 466661);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 467693);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 468725);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 469757);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 470789);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 471821);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 472853);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 473885);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 474917);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 475949);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 476981);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 478013);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1741} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1742} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1743} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1744} __VERIFIER_assume($i4);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 479045);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 480077);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 481109);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 482141);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 483173);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 484205);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 485237);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 486269);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 487301);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 488333);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 489365);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 490397);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 491429);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 492461);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 493493);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 494525);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 495557);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1745} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1746} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 496589);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 497621);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1747} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 498653);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 499685);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    return;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 500717);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 501749);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.10, $M.1, $M.116, $M.132, $M.160, $M.206, $M.213, $M.217, $M.221, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.115, $M.114, $M.31, $M.18, $M.113, $M.66, $M.75, $M.74, $M.88, $M.91, $M.68, $M.109, $M.78, $M.77, $M.70, $M.99, $M.107, $M.85, $M.98, $M.76, $M.64, $M.108, $M.89, $M.65, $M.95, $M.106, $M.102, $M.71, $M.54, $M.110, $M.101, $M.48, $M.82, $M.96, $M.90, $M.111, $M.83, $M.59, $M.67, $M.94, $M.80, $M.100, $M.92, $M.81, $M.63, $M.112, $M.72, $M.62, $M.45, $M.61, $M.79, $M.105, $M.55, $M.84, $M.86, $M.49, $M.97, $M.93, $M.58, $M.56, $M.69, $M.103, $M.57, $M.47, $M.51, $M.53, $M.46, $M.50, $M.60, $M.73, $M.52, $M.104, $M.27, $M.17, $M.44, $M.36, $M.42, $M.33, $M.40, $M.35, $M.87, $M.39, $M.43, $M.41, $M.37, $M.38, $M.34;



implementation __SMACK_static_init()
{

  $bb0:
    $M.10 := 1;
    call {:si_unique_call 1748} {:cexpr "dvb_usb_mxl111sf_rfswitch"} boogie_si_record_i32(1);
    $M.1 := 0;
    call {:si_unique_call 1749} {:cexpr "dvb_usb_mxl111sf_debug"} boogie_si_record_i32(0);
    $M.116 := $store.ref($M.116, mxl111sf_i2c_algo, mxl111sf_i2c_xfer);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 24)), $mul.ref(8, 1)), $0.ref);
    $M.116 := $store.ref($M.116, $add.ref($add.ref(mxl111sf_i2c_algo, $mul.ref(0, 24)), $mul.ref(16, 1)), mxl111sf_i2c_func);
    $M.132 := $store.ref($M.132, mxl111sf_props_mercury_mh, .str);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.132 := $store.i32($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.132 := $store.i32($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.132 := $store.i8($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.132 := $store.i32($M.132, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mercury_mh);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_streaming_ctrl_mercury_mh);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.132 := $store.ref($M.132, $add.ref($add.ref(mxl111sf_props_mercury_mh, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_mercury_mh);
    $M.160 := $store.ref($M.160, mxl111sf_props_mercury, .str);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.160 := $store.i8($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.160 := $store.i32($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.160 := $store.i32($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.160 := $store.i8($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.160 := $store.i32($M.160, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mercury);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_streaming_ctrl_mercury);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.160 := $store.ref($M.160, $add.ref($add.ref(mxl111sf_props_mercury, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_mercury);
    $M.206 := $store.ref($M.206, mxl111sf_props_dvbt, .str);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.206 := $store.i32($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.206 := $store.i8($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.206 := $store.i32($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.206 := $store.i32($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.206 := $store.ref($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.206 := $store.ref($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.206 := $store.i8($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.206 := $store.i32($M.206, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_dvbt);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_ep4_streaming_ctrl);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.206 := $store.ref($M.206, $add.ref($add.ref(mxl111sf_props_dvbt, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_dvbt);
    $M.213 := $store.ref($M.213, mxl111sf_props_mh, .str);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.213 := $store.i32($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.213 := $store.i8($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.213 := $store.i32($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.213 := $store.i32($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.213 := $store.i8($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.213 := $store.i32($M.213, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_mh);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_ep5_streaming_ctrl);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.213 := $store.ref($M.213, $add.ref($add.ref(mxl111sf_props_mh, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_mh);
    $M.217 := $store.ref($M.217, mxl111sf_props_atsc, .str);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.217 := $store.i32($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.217 := $store.i8($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.217 := $store.i32($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.217 := $store.i32($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.217 := $store.i8($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.217 := $store.i32($M.217, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_atsc);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_ep6_streaming_ctrl);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.217 := $store.ref($M.217, $add.ref($add.ref(mxl111sf_props_atsc, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_atsc);
    $M.116 := $store.i16($M.116, adapter_nr, $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(1, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(2, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(3, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(4, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(5, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(6, 2)), $sub.i16(0, 1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref(adapter_nr, $mul.ref(0, 16)), $mul.ref(7, 2)), $sub.i16(0, 1));
    $M.221 := $store.ref($M.221, mxl111sf_props_atsc_mh, .str);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(8, 1)), __this_module);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(16, 1)), adapter_nr);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.221 := $store.i32($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(28, 1)), 376);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(32, 1)), 2);
    $M.221 := $store.i8($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(33, 1)), $sub.i8(0, 127));
    $M.221 := $store.i32($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(40, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(48, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(56, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(64, 1)), mxl111sf_i2c_algo);
    $M.221 := $store.i32($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(72, 1)), 1);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(80, 1)), $0.ref);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(0, 1)), 0);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(1, 1)), 0);
    $M.221 := $store.ref($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(8, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(16, 1)), $0.ref);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 2);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 5);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 6);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 24);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 3072);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 1);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(0, 1)), 0);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(1, 1)), 0);
    $M.221 := $store.ref($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(8, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(16, 1)), $0.ref);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(0, 1)), 0);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(1, 1)), 0);
    $M.221 := $store.i8($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(2, 1)), 0);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.221 := $store.i32($M.221, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(88, 1)), $mul.ref(1, 40)), $mul.ref(24, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(168, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(176, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(184, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(192, 1)), mxl111sf_frontend_attach_atsc_mh);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(200, 1)), mxl111sf_attach_tuner);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(208, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(216, 1)), mxl111sf_streaming_ctrl_atsc_mh);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(224, 1)), mxl111sf_init);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(232, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(240, 1)), $0.ref);
    $M.221 := $store.ref($M.221, $add.ref($add.ref(mxl111sf_props_atsc_mh, $mul.ref(0, 256)), $mul.ref(248, 1)), mxl111sf_get_stream_config_atsc_mh);
    $M.116 := $store.i16($M.116, mxl111sf_id_table, 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(4, 1)), $sub.i16(0, 14848));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(0, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_0));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(4, 1)), $sub.i16(0, 14847));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(1, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_1));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(4, 1)), $sub.i16(0, 14846));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(2, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_2));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(4, 1)), $sub.i16(0, 14845));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(3, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_3));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(4, 1)), $sub.i16(0, 14844));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(4, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_4));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 14839));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(5, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_5));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 14838));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(6, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_6));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 14837));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(7, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_7));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(4, 1)), $sub.i16(0, 14836));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(8, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_8));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(4, 1)), $sub.i16(0, 14765));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(9, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_9));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(4, 1)), $sub.i16(0, 14757));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(10, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_10));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(4, 1)), $sub.i16(0, 18688));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(11, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_11));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(4, 1)), $sub.i16(0, 18687));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(12, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_12));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(4, 1)), $sub.i16(0, 18686));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(13, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_13));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(4, 1)), $sub.i16(0, 18685));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(14, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_14));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(4, 1)), $sub.i16(0, 18684));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(15, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_15));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(4, 1)), $sub.i16(0, 18605));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(16, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_16));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(4, 1)), $sub.i16(0, 18589));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(17, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_17));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(4, 1)), $sub.i16(0, 18588));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(18, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_18));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(4, 1)), $sub.i16(0, 10157));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(19, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_19));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(4, 1)), $sub.i16(0, 10156));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(20, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_20));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(4, 1)), $sub.i16(0, 10141));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(21, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_21));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(4, 1)), $sub.i16(0, 10140));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(22, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_22));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(4, 1)), $sub.i16(0, 10029));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(23, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_23));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(4, 1)), $sub.i16(0, 10028));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(24, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_24));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(4, 1)), $sub.i16(0, 10013));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(25, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_25));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(4, 1)), $sub.i16(0, 10012));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(26, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_26));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(4, 1)), $sub.i16(0, 9985));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(27, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_27));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(4, 1)), $sub.i16(0, 14830));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(28, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_28));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(4, 1)), $sub.i16(0, 14829));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(29, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_29));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(4, 1)), $sub.i16(0, 14822));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(30, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_30));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(4, 1)), $sub.i16(0, 14821));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(31, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_31));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(4, 1)), $sub.i16(0, 18601));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(32, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_32));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(0, 1)), 3);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(2, 1)), 8256);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(4, 1)), $sub.i16(0, 18585));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(33, 32)), $mul.ref(24, 1)), $p2i.ref.i64(__constr_expr_33));
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(0, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(2, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(4, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.116 := $store.i16($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.116 := $store.i8($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.116 := $store.i64($M.116, $add.ref($add.ref($add.ref(mxl111sf_id_table, $mul.ref(0, 1120)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.225 := $store.ref($M.225, mxl111sf_usb_driver, .str);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), dvb_usbv2_probe);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), dvb_usbv2_disconnect);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), dvb_usbv2_suspend);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), dvb_usbv2_resume);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), mxl111sf_id_table);
    $M.225 := $store.i32($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.225 := $store.i32($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.225 := $store.i32($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.225 := $store.i32($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.225 := $store.i64($M.225, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.225 := $store.i8($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.225 := $store.ref($M.225, $add.ref($add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.225 := $store.i32($M.225, $add.ref($add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.225 := $store.i8($M.225, $add.ref($add.ref(mxl111sf_usb_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 9);
    $M.226 := $store.i8($M.226, hauppauge_lg2160_config, 14);
    $M.227 := $store.i16($M.227, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.229 := $store.i32($M.229, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 0);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref(hauppauge_lg2160_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 0);
    $M.226 := $store.i8($M.226, hauppauge_lg2161_1019_config, 14);
    $M.227 := $store.i16($M.227, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.229 := $store.i32($M.229, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 2);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref(hauppauge_lg2161_1019_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.226 := $store.i8($M.226, hauppauge_lg2161_1040_config, 14);
    $M.227 := $store.i16($M.227, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.229 := $store.i32($M.229, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 4);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref(hauppauge_lg2161_1040_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.226 := $store.i8($M.226, hauppauge_lg2161_1019_ep6_config, 14);
    $M.227 := $store.i16($M.227, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.229 := $store.i32($M.229, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 1);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref(hauppauge_lg2161_1019_ep6_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.226 := $store.i8($M.226, hauppauge_lg2161_1040_ep6_config, 14);
    $M.227 := $store.i16($M.227, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(2, 1)), 6000);
    $M.228 := $store.i8($M.228, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(4, 1)), 1);
    $M.229 := $store.i32($M.229, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(8, 1)), 7);
    $M.230 := $store.i32($M.230, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(12, 1)), 0);
    $M.231 := $store.i32($M.231, $add.ref($add.ref(hauppauge_lg2161_1040_ep6_config, $mul.ref(0, 20)), $mul.ref(16, 1)), 1);
    $M.115 := 0;
    call {:si_unique_call 1750} {:cexpr "ldv_mutex_mutex_of_device"} boogie_si_record_i32(0);
    $M.114 := 0;
    call {:si_unique_call 1751} {:cexpr "ldv_mutex_lock"} boogie_si_record_i32(0);
    $M.31 := 0;
    call {:si_unique_call 1752} {:cexpr "ldv_mutex_i2c_mutex_of_dvb_usb_device"} boogie_si_record_i32(0);
    $M.18 := 0;
    call {:si_unique_call 1753} {:cexpr "ldv_mutex_fe_lock_of_mxl111sf_state"} boogie_si_record_i32(0);
    $M.113 := 0;
    call {:si_unique_call 1754} {:cexpr "ldv_mutex_cred_guard_mutex_of_signal_struct"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.75 := 0;
    call {:si_unique_call 1755} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.74 := $0.ref;
    $M.88 := 0;
    $M.91 := 0;
    call {:si_unique_call 1756} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.68 := 0;
    call {:si_unique_call 1757} {:cexpr "ldvarg17"} boogie_si_record_i8(0);
    $M.109 := $0.ref;
    $M.78 := 0;
    call {:si_unique_call 1758} {:cexpr "ldvarg21"} boogie_si_record_i32(0);
    $M.77 := $0.ref;
    $M.70 := 0;
    call {:si_unique_call 1759} {:cexpr "ldvarg15"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1760} {:cexpr "ldv_retval_9"} boogie_si_record_i32(0);
    $M.107 := 0;
    call {:si_unique_call 1761} {:cexpr "ldv_retval_10"} boogie_si_record_i32(0);
    $M.85 := $0.ref;
    $M.98 := $0.ref;
    $M.76 := $0.ref;
    $M.64 := $0.ref;
    $M.108 := $0.ref;
    $M.89 := 0;
    call {:si_unique_call 1762} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.65 := $0.ref;
    $M.95 := $0.ref;
    $M.106 := $0.ref;
    $M.102 := 0;
    call {:si_unique_call 1763} {:cexpr "ldvarg34"} boogie_si_record_i8(0);
    $M.71 := $0.ref;
    $M.54 := $0.ref;
    $M.110 := 0;
    call {:si_unique_call 1764} {:cexpr "ldvarg38"} boogie_si_record_i32(0);
    $M.101 := 0;
    call {:si_unique_call 1765} {:cexpr "ldvarg35"} boogie_si_record_i8(0);
    $M.48 := $0.ref;
    $M.82 := $0.ref;
    $M.96 := 0;
    call {:si_unique_call 1766} {:cexpr "ldvarg29"} boogie_si_record_i32(0);
    $M.90 := 0;
    call {:si_unique_call 1767} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.111 := $0.ref;
    $M.83 := 0;
    call {:si_unique_call 1768} {:cexpr "ldvarg23"} boogie_si_record_i32(0);
    $M.59 := $0.ref;
    $M.67 := 0;
    call {:si_unique_call 1769} {:cexpr "ldvarg18"} boogie_si_record_i8(0);
    $M.94 := $0.ref;
    $M.80 := $0.ref;
    $M.100 := $0.ref;
    $M.92 := $0.ref;
    $M.81 := $0.ref;
    $M.63 := 0;
    call {:si_unique_call 1770} {:cexpr "ldvarg10"} boogie_si_record_i32(0);
    $M.112 := $0.ref;
    $M.72 := 0;
    call {:si_unique_call 1771} {:cexpr "ldvarg13"} boogie_si_record_i8(0);
    $M.62 := $0.ref;
    $M.45 := $0.ref;
    $M.61 := $0.ref;
    $M.79 := $0.ref;
    $M.105 := $0.ref;
    $M.55 := $0.ref;
    $M.84 := $0.ref;
    $M.86 := 0;
    call {:si_unique_call 1772} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1773} {:cexpr "ldvarg2"} boogie_si_record_i32(0);
    $M.97 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 1774} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.58 := $0.ref;
    $M.56 := 0;
    call {:si_unique_call 1775} {:cexpr "ldvarg6"} boogie_si_record_i32(0);
    $M.69 := $0.ref;
    $M.103 := $0.ref;
    $M.57 := $0.ref;
    $M.47 := $0.ref;
    $M.51 := $0.ref;
    $M.53 := 0;
    call {:si_unique_call 1776} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1777} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.50 := $0.ref;
    $M.60 := 0;
    call {:si_unique_call 1778} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.73 := $0.ref;
    $M.52 := $0.ref;
    $M.104 := 0;
    call {:si_unique_call 1779} {:cexpr "ldvarg32"} boogie_si_record_i8(0);
    $M.27 := 0;
    call {:si_unique_call 1780} {:cexpr "dvb_usb_mxl111sf_spi"} boogie_si_record_i32(0);
    $M.17 := 0;
    call {:si_unique_call 1781} {:cexpr "dvb_usb_mxl111sf_isoc"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1782} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.36 := 0;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1784} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.33 := 0;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1786} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.87 := 0;
    call {:si_unique_call 1788} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1790} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1791} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.37 := 0;
    call {:si_unique_call 1792} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(0);
    $M.34 := 0;
    call {:si_unique_call 1794} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    call {:si_unique_call 1795} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 502781);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i8 := $eq.ref(dvb_usbv2_probe, $p0);
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    $i7 := $eq.ref(mxl111sf_ctrl_program_regs, $p0);
    assume true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1796} $i3 := mxl111sf_ctrl_program_regs($p1, $p2);
    $r := $i3;
    return;

  $bb3:
    assume $i8 == 1;
    $p4 := $bitcast.ref.ref(arg);
    $p5 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1797} $i6 := dvb_usbv2_probe($p4, $p5);
    $r := $i6;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 503813);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 504845);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 505877);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 506909);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 507941);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32);



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.10, $M.1, $M.116, $M.132, $M.160, $M.206, $M.213, $M.217, $M.221, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.115, $M.114, $M.31, $M.18, $M.113, $M.66, $M.75, $M.74, $M.88, $M.91, $M.68, $M.109, $M.78, $M.77, $M.70, $M.99, $M.107, $M.85, $M.98, $M.76, $M.64, $M.108, $M.89, $M.65, $M.95, $M.106, $M.102, $M.71, $M.54, $M.110, $M.101, $M.48, $M.82, $M.96, $M.90, $M.111, $M.83, $M.59, $M.67, $M.94, $M.80, $M.100, $M.92, $M.81, $M.63, $M.112, $M.72, $M.62, $M.45, $M.61, $M.79, $M.105, $M.55, $M.84, $M.86, $M.49, $M.97, $M.93, $M.58, $M.56, $M.69, $M.103, $M.57, $M.47, $M.51, $M.53, $M.46, $M.50, $M.60, $M.73, $M.52, $M.104, $M.27, $M.17, $M.44, $M.36, $M.42, $M.33, $M.40, $M.35, $M.87, $M.39, $M.43, $M.41, $M.37, $M.38, $M.34, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1798} __SMACK_static_init();
    call {:si_unique_call 1799} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.14, $M.15, $M.46, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.0, $M.3, $M.53, $M.60, $M.75, $M.86, $M.12, $M.89, $M.90, $M.91, $M.93, $M.99, $M.107, $M.10, $M.1, $M.116, $M.132, $M.160, $M.206, $M.213, $M.217, $M.221, $M.225, $M.226, $M.227, $M.228, $M.229, $M.230, $M.231, $M.115, $M.114, $M.31, $M.18, $M.113, $M.66, $M.74, $M.88, $M.68, $M.109, $M.78, $M.77, $M.70, $M.85, $M.98, $M.76, $M.64, $M.108, $M.65, $M.95, $M.106, $M.102, $M.71, $M.54, $M.110, $M.101, $M.48, $M.82, $M.96, $M.111, $M.83, $M.59, $M.67, $M.94, $M.80, $M.100, $M.92, $M.81, $M.63, $M.112, $M.72, $M.62, $M.45, $M.61, $M.79, $M.105, $M.55, $M.84, $M.49, $M.97, $M.58, $M.56, $M.69, $M.103, $M.57, $M.47, $M.51, $M.50, $M.73, $M.52, $M.104, $M.27, $M.17, $M.87, $CurrAddr, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $M.29, $M.24, $M.25, $M.26, $M.30;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation mxl111sf_i2c_xfer_loop_$bb8(in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$i12: i32, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i24: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i62: i32, in_$i63: i1, in_$i19: i32, in_$i64: i32, in_vslice_dummy_var_5: i32) returns (out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i24: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i62: i32, out_$i63: i1, out_$i19: i32, out_$i64: i32, out_vslice_dummy_var_5: i32)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_5 := in_$i20, in_$i21, in_$p22, in_$i23, in_$i25, in_$p26, in_$i27, in_$i24, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i62, in_$i63, in_$i19, in_$i64, in_vslice_dummy_var_5;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_26;

  $bb29:
    assume out_$i63 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i62;
    goto $bb29_dummy;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i62;
    assume true;
    goto $bb29;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i62, in_$i2);
    goto corral_source_split_90;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i19, 1);
    call {:si_unique_call 13} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_89;

  $bb20:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    out_$i36, out_$i37 := out_$i19, out_$i24;
    assume true;
    goto $bb20;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i29, 0);
    goto corral_source_split_52;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} out_vslice_dummy_var_5 := printk.ref.ref.i32.i32(.str.4, .str.36, out_$i24, 891);
    goto corral_source_split_50;

  $bb16:
    assume out_$i33 == 1;
    goto corral_source_split_49;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_47;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    out_$i32 := $and.i32(out_$i31, 16);
    goto corral_source_split_46;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    out_$i31 := $M.1;
    goto corral_source_split_45;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_44;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i29, 0);
    goto corral_source_split_42;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i1.i32(out_$i28);
    call {:si_unique_call 9} {:cexpr "__ret"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_41;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i24, 0);
    goto corral_source_split_40;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_39;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} out_$i27 := mxl111sf_i2c_sw_xfer_msg(in_$p7, out_$p26);
    call {:si_unique_call 8} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i27);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i27;
    goto $bb12;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    out_$i24 := out_$i23;
    goto $bb12;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} out_$i23 := mxl111sf_i2c_hw_xfer_msg(in_$p7, out_$p22);
    call {:si_unique_call 6} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_33;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p1, $mul.ref(out_$i21, 16));
    goto corral_source_split_32;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i19);
    goto corral_source_split_31;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_30;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i32(in_$i12, 0);
    goto corral_source_split_28;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(in_$p1, $mul.ref(out_$i25, 16));
    goto corral_source_split_37;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i19);
    goto corral_source_split_36;

  $bb11:
    assume !(out_$i20 == 1);
    goto corral_source_split_35;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i33 == 1);
    goto $bb15;

  $bb29_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_5 := mxl111sf_i2c_xfer_loop_$bb8(in_$p1, in_$i2, in_$p7, in_$i12, out_$i20, out_$i21, out_$p22, out_$i23, out_$i25, out_$p26, out_$i27, out_$i24, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i62, out_$i63, out_$i19, out_$i64, out_vslice_dummy_var_5);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_xfer_loop_$bb8(in_$p1: ref, in_$i2: i32, in_$p7: ref, in_$i12: i32, in_$i20: i1, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i24: i32, in_$i28: i1, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i33: i1, in_$i35: i1, in_$i36: i32, in_$i37: i32, in_$i62: i32, in_$i63: i1, in_$i19: i32, in_$i64: i32, in_vslice_dummy_var_5: i32) returns (out_$i20: i1, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i24: i32, out_$i28: i1, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i33: i1, out_$i35: i1, out_$i36: i32, out_$i37: i32, out_$i62: i32, out_$i63: i1, out_$i19: i32, out_$i64: i32, out_vslice_dummy_var_5: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.3, $M.11, $CurrAddr, $M.29, $M.30;



implementation mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i8, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i40: i32, in_$i2: i32, in_$i3: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_vslice_dummy_var_14: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i8, out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i40: i32, out_$i2: i32, out_$i3: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_vslice_dummy_var_14: i32)
{

  entry:
    out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_14 := in_$i4, in_$p6, in_$i7, in_$i8, in_$i9, in_$i10, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i30, in_$i31, in_$i32, in_$i40, in_$i2, in_$i3, in_$i41, in_$p43, in_$i44, in_$i45, in_$i46, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_vslice_dummy_var_14;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_241;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i2, out_$i3 := out_$i40, out_$i22;
    goto corral_source_split_304_dummy;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i2, 1);
    call {:si_unique_call 44} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_304;

  $bb10:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    out_$i31, out_$i32 := out_$i2, out_$i22;
    assume true;
    goto $bb10;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i32(out_$i24, 0);
    goto corral_source_split_292;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_vslice_dummy_var_14 := printk.ref.ref.i32.i32(.str.4, .str.14, out_$i22, 232);
    goto corral_source_split_290;

  $bb6:
    assume out_$i28 == 1;
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i26, 16);
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$i26 := $M.1;
    goto corral_source_split_285;

  $bb3:
    assume out_$i25 == 1;
    goto corral_source_split_284;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i32(out_$i24, 0);
    goto corral_source_split_282;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i1.i32(out_$i23);
    call {:si_unique_call 41} {:cexpr "__ret"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    out_$i23 := $slt.i32(out_$i22, 0);
    goto corral_source_split_280;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} out_$i22 := mxl111sf_write_reg_mask(in_$p0, out_$i9, out_$i15, out_$i21);
    call {:si_unique_call 40} {:cexpr "ret"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i8(out_$i20);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i8.i32(out_$i19);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i8($M.0, out_$p18);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i16, 3)), $mul.ref(2, 1));
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i2);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i8(out_$i14);
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i13);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i8($M.0, out_$p12);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i10, 3)), $mul.ref(1, 1));
    goto corral_source_split_269;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i2);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$i9 := $trunc.i32.i8(out_$i8);
    goto corral_source_split_266;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    out_$i8 := $zext.i8.i32(out_$i7);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i8($M.0, out_$p6);
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i4, 3)), $mul.ref(0, 1));
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    goto corral_source_split_262;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i2);
    goto corral_source_split_261;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb13:
    assume out_$i58 == 1;
    goto corral_source_split_306;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i3;
    assume true;
    goto $bb13;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$i57 := $or.i32(out_$i51, out_$i56);
    goto corral_source_split_258;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i8.i32(out_$i55);
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, out_$p54);
    goto corral_source_split_256;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i52, 3)), $mul.ref(2, 1));
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    goto corral_source_split_254;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    out_$i52 := $sext.i32.i64(out_$i2);
    goto corral_source_split_253;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    out_$i51 := $or.i32(out_$i45, out_$i50);
    goto corral_source_split_252;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i8.i32(out_$i49);
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    out_$i49 := $load.i8($M.0, out_$p48);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i46, 3)), $mul.ref(1, 1));
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i46 := $sext.i32.i64(out_$i2);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i8.i32(out_$i44);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i8($M.0, out_$p43);
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p1, $mul.ref(out_$i41, 3)), $mul.ref(0, 1));
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$i41 := $sext.i32.i64(out_$i2);
    goto corral_source_split_242;

  $bb4:
    assume {:verifier.code 0} true;
    assume !(out_$i25 == 1);
    goto $bb5;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i28 == 1);
    goto $bb5;

  corral_source_split_304_dummy:
    call {:si_unique_call 1} out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_14 := mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0, in_$p1, out_$i4, out_$p6, out_$i7, out_$i8, out_$i9, out_$i10, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i30, out_$i31, out_$i32, out_$i40, out_$i2, out_$i3, out_$i41, out_$p43, out_$i44, out_$i45, out_$i46, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_vslice_dummy_var_14);
    return;

  exit:
    return;
}



procedure mxl111sf_ctrl_program_regs_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$i4: i64, in_$p6: ref, in_$i7: i8, in_$i8: i32, in_$i9: i8, in_$i10: i64, in_$p12: ref, in_$i13: i8, in_$i14: i32, in_$i15: i8, in_$i16: i64, in_$p18: ref, in_$i19: i8, in_$i20: i32, in_$i21: i8, in_$i22: i32, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i30: i1, in_$i31: i32, in_$i32: i32, in_$i40: i32, in_$i2: i32, in_$i3: i32, in_$i41: i64, in_$p43: ref, in_$i44: i8, in_$i45: i32, in_$i46: i64, in_$p48: ref, in_$i49: i8, in_$i50: i32, in_$i51: i32, in_$i52: i64, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i1, in_$i59: i32, in_vslice_dummy_var_14: i32) returns (out_$i4: i64, out_$p6: ref, out_$i7: i8, out_$i8: i32, out_$i9: i8, out_$i10: i64, out_$p12: ref, out_$i13: i8, out_$i14: i32, out_$i15: i8, out_$i16: i64, out_$p18: ref, out_$i19: i8, out_$i20: i32, out_$i21: i8, out_$i22: i32, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i30: i1, out_$i31: i32, out_$i32: i32, out_$i40: i32, out_$i2: i32, out_$i3: i32, out_$i41: i64, out_$p43: ref, out_$i44: i8, out_$i45: i32, out_$i46: i64, out_$p48: ref, out_$i49: i8, out_$i50: i32, out_$i51: i32, out_$i52: i64, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i1, out_$i59: i32, out_vslice_dummy_var_14: i32);
  modifies $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_attach_tuner_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p43: ref, in_$p41: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i57: i64, in_$i58: i1, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i74: i32, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i34: i32, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p43: ref, out_$p41: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i57: i64, out_$i58: i1, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$i74: i32, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i34: i32, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32)
{

  entry:
    out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p43, out_$p41, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i60, out_$p62, out_$p63, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i34, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$p43, in_$p41, in_$i45, in_$i46, in_$i47, in_$p49, in_$p50, in_$p51, in_$p52, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$i60, in_$p62, in_$p63, in_$p66, in_$p67, in_$i68, in_$p70, in_$p71, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i34, in_vslice_dummy_var_38, in_vslice_dummy_var_39;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_785;

  $bb22:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i74;
    goto $bb22_dummy;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    out_$i77 := $sgt.i32(out_$i76, out_$i74);
    goto corral_source_split_838;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_837;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.0, in_$p30);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i34, 1);
    call {:si_unique_call 195} {:cexpr "i"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p73, out_$p67);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref($add.ref(out_$p71, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(272, 1));
    goto corral_source_split_833;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref(out_$i68, 8));
    goto corral_source_split_831;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    out_$i68 := $sext.i32.i64(out_$i34);
    goto corral_source_split_830;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_829;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref($add.ref(out_$p63, $mul.ref(0, 992)), $mul.ref(0, 1)), $mul.ref(392, 1)), $mul.ref(240, 1));
    goto corral_source_split_828;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    out_$p63 := $load.ref($M.0, out_$p62);
    goto corral_source_split_827;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref(out_$i60, 8));
    goto corral_source_split_826;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i32.i64(out_$i34);
    goto corral_source_split_825;

  $bb19:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i64(out_$i57, 0);
    goto corral_source_split_819;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_818;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_817;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} out_vslice_dummy_var_39 := printk.ref(.str.64);
    assume {:verifier.code 0} true;
    out_$p55 := $0.ref;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p51;
    goto $bb17;

  $bb15:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __symbol_put(.str.62);
    goto corral_source_split_815;

  $bb14:
    assume out_$i54 == 1;
    goto corral_source_split_814;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i64(out_$i53, 0);
    goto corral_source_split_810;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    out_$i53 := $p2i.ref.i64(out_$p52);
    goto corral_source_split_809;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(out_$p51);
    goto corral_source_split_808;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    call {:si_unique_call 192} out_$p51 := devirtbounce.1(out_$p41, out_$p50, in_$p12, mxl_tuner_config);
    goto corral_source_split_807;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 2424)), $mul.ref(2352, 1)), $mul.ref(out_$i47, 8));
    goto corral_source_split_806;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i34);
    goto corral_source_split_805;

  $bb12:
    assume out_$i46 == 1;
    goto corral_source_split_804;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_802;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_801;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p41 := out_$p43;
    goto $bb11;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p39;
    goto $bb11;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    goto corral_source_split_794;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} out_$p39 := __symbol_get(.str.62);
    goto corral_source_split_793;

  $bb9:
    assume out_$i38 == 1;
    goto corral_source_split_792;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_790;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_789;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p35);
    goto corral_source_split_788;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} out_$p35 := __symbol_get(.str.62);
    goto corral_source_split_787;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} out_$p43 := __symbol_get(.str.62);
    goto corral_source_split_798;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} out_vslice_dummy_var_38 := __request_module.i1.ref(1, .str.63);
    goto corral_source_split_797;

  $bb10:
    assume !(out_$i38 == 1);
    goto corral_source_split_796;

  $bb13:
    assume !(out_$i46 == 1);
    goto corral_source_split_812;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p43, out_$p41, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i60, out_$p62, out_$p63, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i34, out_vslice_dummy_var_38, out_vslice_dummy_var_39 := mxl111sf_attach_tuner_loop_$bb7(in_$p0, in_$p12, in_$p30, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$p43, out_$p41, out_$i45, out_$i46, out_$i47, out_$p49, out_$p50, out_$p51, out_$p52, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$i60, out_$p62, out_$p63, out_$p66, out_$p67, out_$i68, out_$p70, out_$p71, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i34, out_vslice_dummy_var_38, out_vslice_dummy_var_39);
    return;

  exit:
    return;
}



procedure mxl111sf_attach_tuner_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p30: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p43: ref, in_$p41: ref, in_$i45: i64, in_$i46: i1, in_$i47: i64, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$i54: i1, in_$p55: ref, in_$i57: i64, in_$i58: i1, in_$i60: i64, in_$p62: ref, in_$p63: ref, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$p70: ref, in_$p71: ref, in_$p73: ref, in_$i74: i32, in_$i75: i8, in_$i76: i32, in_$i77: i1, in_$i34: i32, in_vslice_dummy_var_38: i32, in_vslice_dummy_var_39: i32) returns (out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p43: ref, out_$p41: ref, out_$i45: i64, out_$i46: i1, out_$i47: i64, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$i54: i1, out_$p55: ref, out_$i57: i64, out_$i58: i1, out_$i60: i64, out_$p62: ref, out_$p63: ref, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$p70: ref, out_$p71: ref, out_$p73: ref, out_$i74: i32, out_$i75: i8, out_$i76: i32, out_$i77: i1, out_$i34: i32, out_vslice_dummy_var_38: i32, out_vslice_dummy_var_39: i32);
  modifies $M.0;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1: ref, in_$p3: ref, in_$i262: i16, in_$i470: i32, in_$i473: i32, in_$i474: i32, in_$i475: i64, in_$p476: ref, in_$i477: i8, in_$p478: ref, in_$p479: ref, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i64, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$p491: ref, in_$i492: i8, in_$i493: i32, in_$i494: i32, in_$i495: i32, in_$i496: i64, in_$p497: ref, in_$i498: i8, in_$i499: i32, in_$i501: i32, in_$i502: i1, in_$i472: i32, in_vslice_dummy_var_265: i32) returns (out_$i473: i32, out_$i474: i32, out_$i475: i64, out_$p476: ref, out_$i477: i8, out_$p478: ref, out_$p479: ref, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i64, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$p491: ref, out_$i492: i8, out_$i493: i32, out_$i494: i32, out_$i495: i32, out_$i496: i64, out_$p497: ref, out_$i498: i8, out_$i499: i32, out_$i501: i32, out_$i502: i1, out_$i472: i32, out_vslice_dummy_var_265: i32)
{

  entry:
    out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_265 := in_$i473, in_$i474, in_$i475, in_$p476, in_$i477, in_$p478, in_$p479, in_$i480, in_$i481, in_$i482, in_$i483, in_$p484, in_$i485, in_$i486, in_$i487, in_$i488, in_$i489, in_$i490, in_$p491, in_$i492, in_$i493, in_$i494, in_$i495, in_$i496, in_$p497, in_$i498, in_$i499, in_$i501, in_$i502, in_$i472, in_vslice_dummy_var_265;
    goto $bb168, exit;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_7012;

  $bb173:
    assume out_$i502 == 1;
    assume {:verifier.code 0} true;
    out_$i472 := out_$i501;
    goto $bb173_dummy;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$i502 := $sgt.i32(in_$i470, out_$i501);
    goto corral_source_split_7047;

  $bb172:
    assume {:verifier.code 0} true;
    out_$i501 := $add.i32(out_$i472, 1);
    call {:si_unique_call 1071} {:cexpr "i"} boogie_si_record_i32(out_$i501);
    goto corral_source_split_7046;

  $bb171:
    assume !(out_$i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb172;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} out_vslice_dummy_var_265 := printk.ref.ref.i32.i32(.str.130, .str.122, out_$i493, out_$i499);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i499 := $zext.i8.i32(out_$i498);
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i498 := $load.i8($M.28, out_$p497);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$p497 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i496, 1));
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i496 := $sext.i32.i64(out_$i495);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$i495 := $add.i32(out_$i494, 2);
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$i494 := $mul.i32(out_$i472, 3);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$i493 := $zext.i8.i32(out_$i492);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i492 := $load.i8($M.28, out_$p491);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$p491 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i490, 1));
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    out_$i490 := $sext.i32.i64(out_$i489);
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i489 := $add.i32(out_$i488, 1);
    goto corral_source_split_7033;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i488 := $mul.i32(out_$i472, 3);
    goto corral_source_split_7032;

  $bb170:
    assume out_$i487 == 1;
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb170, $bb171;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i487 := $ne.i32(out_$i486, 0);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i486 := $and.i32(out_$i485, 4);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i485 := $M.1;
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p484, out_$i477);
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    out_$p484 := $add.ref(out_$p479, $mul.ref(out_$i483, 1));
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$i483 := $sext.i32.i64(out_$i482);
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i482 := $add.i32(out_$i481, out_$i472);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i481 := $mul.i32(out_$i480, 8);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i480 := $zext.i16.i32(in_$i262);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    out_$p479 := $load.ref($M.0, out_$p478);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p478 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$i477 := $load.i8($M.28, out_$p476);
    goto corral_source_split_7018;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    out_$p476 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i475, 1));
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    out_$i475 := $sext.i32.i64(out_$i474);
    goto corral_source_split_7016;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    out_$i474 := $add.i32(out_$i473, 1);
    goto corral_source_split_7015;

  $bb169:
    assume {:verifier.code 0} true;
    out_$i473 := $mul.i32(out_$i472, 3);
    goto corral_source_split_7014;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb173_dummy:
    call {:si_unique_call 1} out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_265 := mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1, in_$p3, in_$i262, in_$i470, out_$i473, out_$i474, out_$i475, out_$p476, out_$i477, out_$p478, out_$p479, out_$i480, out_$i481, out_$i482, out_$i483, out_$p484, out_$i485, out_$i486, out_$i487, out_$i488, out_$i489, out_$i490, out_$p491, out_$i492, out_$i493, out_$i494, out_$i495, out_$i496, out_$p497, out_$i498, out_$i499, out_$i501, out_$i502, out_$i472, out_vslice_dummy_var_265);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb168(in_$p1: ref, in_$p3: ref, in_$i262: i16, in_$i470: i32, in_$i473: i32, in_$i474: i32, in_$i475: i64, in_$p476: ref, in_$i477: i8, in_$p478: ref, in_$p479: ref, in_$i480: i32, in_$i481: i32, in_$i482: i32, in_$i483: i64, in_$p484: ref, in_$i485: i32, in_$i486: i32, in_$i487: i1, in_$i488: i32, in_$i489: i32, in_$i490: i64, in_$p491: ref, in_$i492: i8, in_$i493: i32, in_$i494: i32, in_$i495: i32, in_$i496: i64, in_$p497: ref, in_$i498: i8, in_$i499: i32, in_$i501: i32, in_$i502: i1, in_$i472: i32, in_vslice_dummy_var_265: i32) returns (out_$i473: i32, out_$i474: i32, out_$i475: i64, out_$p476: ref, out_$i477: i8, out_$p478: ref, out_$p479: ref, out_$i480: i32, out_$i481: i32, out_$i482: i32, out_$i483: i64, out_$p484: ref, out_$i485: i32, out_$i486: i32, out_$i487: i1, out_$i488: i32, out_$i489: i32, out_$i490: i64, out_$p491: ref, out_$i492: i8, out_$i493: i32, out_$i494: i32, out_$i495: i32, out_$i496: i64, out_$p497: ref, out_$i498: i8, out_$i499: i32, out_$i501: i32, out_$i502: i1, out_$i472: i32, out_vslice_dummy_var_265: i32);
  modifies $M.0;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2: ref, in_$i437: i32, in_$i440: i32, in_$i441: i32, in_$i442: i64, in_$p443: ref, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p447: ref, in_$i448: i32, in_$i449: i32, in_$i450: i64, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$i439: i32) returns (out_$i440: i32, out_$i441: i32, out_$i442: i64, out_$p443: ref, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p447: ref, out_$i448: i32, out_$i449: i32, out_$i450: i64, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$i439: i32)
{

  entry:
    out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439 := in_$i440, in_$i441, in_$i442, in_$p443, in_$i444, in_$i445, in_$i446, in_$p447, in_$i448, in_$i449, in_$i450, in_$p451, in_$i452, in_$i453, in_$i439;
    goto $bb154, exit;

  $bb154:
    assume {:verifier.code 0} true;
    goto corral_source_split_6960;

  $bb156:
    assume out_$i453 == 1;
    assume {:verifier.code 0} true;
    out_$i439 := out_$i452;
    goto $bb156_dummy;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    out_$i453 := $sgt.i32(in_$i437, out_$i452);
    goto corral_source_split_6978;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    out_$i452 := $add.i32(out_$i439, 1);
    call {:si_unique_call 1064} {:cexpr "i"} boogie_si_record_i32(out_$i452);
    goto corral_source_split_6977;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p451, 0);
    goto corral_source_split_6976;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    out_$p451 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i450, 1));
    goto corral_source_split_6975;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    out_$i450 := $sext.i32.i64(out_$i449);
    goto corral_source_split_6974;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    out_$i449 := $add.i32(out_$i448, 4);
    goto corral_source_split_6973;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$i448 := $mul.i32(out_$i439, 3);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p447, 0);
    goto corral_source_split_6971;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    out_$p447 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i446, 1));
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$i446 := $sext.i32.i64(out_$i445);
    goto corral_source_split_6969;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    out_$i445 := $mul.i32(out_$i444, 3);
    goto corral_source_split_6968;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i444 := $add.i32(out_$i439, 1);
    goto corral_source_split_6967;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p443, 12);
    goto corral_source_split_6966;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    out_$p443 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i442, 1));
    goto corral_source_split_6965;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    out_$i442 := $sext.i32.i64(out_$i441);
    goto corral_source_split_6964;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    out_$i441 := $add.i32(out_$i440, 2);
    goto corral_source_split_6963;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i440 := $mul.i32(out_$i439, 3);
    goto corral_source_split_6962;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb156_dummy:
    call {:si_unique_call 1} out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439 := mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2, in_$i437, out_$i440, out_$i441, out_$i442, out_$p443, out_$i444, out_$i445, out_$i446, out_$p447, out_$i448, out_$i449, out_$i450, out_$p451, out_$i452, out_$i453, out_$i439);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb154(in_$p2: ref, in_$i437: i32, in_$i440: i32, in_$i441: i32, in_$i442: i64, in_$p443: ref, in_$i444: i32, in_$i445: i32, in_$i446: i64, in_$p447: ref, in_$i448: i32, in_$i449: i32, in_$i450: i64, in_$p451: ref, in_$i452: i32, in_$i453: i1, in_$i439: i32) returns (out_$i440: i32, out_$i441: i32, out_$i442: i64, out_$p443: ref, out_$i444: i32, out_$i445: i32, out_$i446: i64, out_$p447: ref, out_$i448: i32, out_$i449: i32, out_$i450: i64, out_$p451: ref, out_$i452: i32, out_$i453: i1, out_$i439: i32);
  modifies $M.0;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1: ref, in_$p5: ref, in_$i338: i32, in_$i340: i32, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i278: i16, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32) returns (out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32)
{

  entry:
    out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_261, out_vslice_dummy_var_262 := in_$i343, in_$p344, in_$i345, in_$p346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i357, in_$p358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i373, in_$i374, in_$i375, in_$p376, in_$p377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$i385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i390, in_$i392, in_$i393, in_$i342, in_vslice_dummy_var_261, in_vslice_dummy_var_262;
    goto $bb121, exit;

  $bb121:
    assume {:verifier.code 0} true;
    goto corral_source_split_6857;

  $bb129:
    assume out_$i393 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := out_$i392;
    goto $bb129_dummy;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    out_$i393 := $sgt.i32(in_$i340, out_$i392);
    goto corral_source_split_6916;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i392 := $add.i32(out_$i342, 1);
    call {:si_unique_call 1060} {:cexpr "k"} boogie_si_record_i32(out_$i392);
    goto corral_source_split_6915;

  $bb127:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_vslice_dummy_var_262 := printk.ref.ref.i32.i32(.str.130, .str.122, out_$i386, out_$i390);
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$i390 := $zext.i8.i32(out_$i389);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i389 := $load.i8($M.30, out_$p388);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i387, 1));
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6909;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    out_$i386 := $zext.i8.i32(out_$i385);
    goto corral_source_split_6908;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i8($M.0, out_$p384);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref(out_$p377, $mul.ref(out_$i383, 1));
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i383 := $sext.i32.i64(out_$i382);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i382 := $add.i32(out_$i379, out_$i381);
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$i381 := $add.i32(out_$i380, 1);
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$i380 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6902;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i379 := $mul.i32(out_$i378, 8);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6900;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.0, out_$p376);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6898;

  $bb126:
    assume out_$i375 == 1;
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i32(out_$i374, 0);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i374 := $and.i32(out_$i373, 4);
    goto corral_source_split_6894;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i373 := $M.1;
    goto corral_source_split_6893;

  $bb124:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_vslice_dummy_var_261 := printk.ref.ref.i32.i32(.str.130, .str.122, out_$i367, out_$i371);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i371 := $add.i32(out_$i369, out_$i370);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$i369 := $mul.i32(out_$i368, 8);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i367 := $zext.i8.i32(out_$i366);
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i8($M.0, out_$p365);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref(out_$p359, $mul.ref(out_$i364, 1));
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i364 := $sext.i32.i64(out_$i363);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i363 := $add.i32(out_$i361, out_$i362);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i362 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i361 := $mul.i32(out_$i360, 8);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i360 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$p359 := $load.ref($M.0, out_$p358);
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  $bb123:
    assume out_$i357 == 1;
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 4);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i355 := $M.1;
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p354, out_$i345);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref(out_$p347, $mul.ref(out_$i353, 1));
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$i353 := $sext.i32.i64(out_$i352);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i352 := $add.i32(out_$i349, out_$i351);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i342, in_$i338);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i349 := $mul.i32(out_$i348, 8);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    out_$p347 := $load.ref($M.0, out_$p346);
    goto corral_source_split_6863;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i8($M.30, out_$p344);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i343, 1));
    goto corral_source_split_6860;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb129_dummy:
    call {:si_unique_call 1} out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_261, out_vslice_dummy_var_262 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1, in_$p5, in_$i338, in_$i340, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, in_$i278, out_vslice_dummy_var_261, out_vslice_dummy_var_262);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1: ref, in_$p5: ref, in_$i338: i32, in_$i340: i32, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i278: i16, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32) returns (out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32);
  modifies $M.0;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i278: i16, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_263: i32) returns (out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_263: i32)
{

  entry:
    out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_260, out_vslice_dummy_var_263 := in_$i299, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i316, in_$i317, in_$i318, in_$p319, in_$i320, in_$p321, in_$p322, in_$i323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i395, in_$i396, in_$i397, in_$i400, in_$i401, in_$i402, in_$p403, in_$i404, in_$p405, in_$p406, in_$i407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i399, in_$i413, in_$i414, in_$i415, in_$p416, in_$i417, in_$p418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$i412, in_$i425, in_$i426, in_$i298, in_vslice_dummy_var_260, in_vslice_dummy_var_263;
    goto $bb107, exit;

  $bb107:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  $bb139:
    assume out_$i426 == 1;
    assume {:verifier.code 0} true;
    out_$i298 := out_$i425;
    goto $bb139_dummy;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i426 := $sle.i32(out_$i425, 7);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i412, 1);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_6933;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6932;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p424, out_$i417);
    assume {:verifier.code 0} true;
    out_$i412 := out_$i298;
    goto $bb138;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i412 := out_$i399;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6930;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p411, out_$i404);
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_vslice_dummy_var_263 := printk.ref.ref(.str.131, .str.122);
    goto corral_source_split_6928;

  $bb133:
    assume out_$i397 == 1;
    goto corral_source_split_6927;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i397 := $ne.i32(out_$i396, 0);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i396 := $and.i32(out_$i395, 4);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i395 := $M.1;
    goto corral_source_split_6851;

  $bb117:
    assume !(out_$i337 == 1);
    goto corral_source_split_6850;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i338 := out_$i298;
    assume true;
    goto $bb117;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i336 := $zext.i8.i32(out_$i335);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i335 := $trunc.i32.i8(out_$i334);
    call {:si_unique_call 1057} {:cexpr "ret_status"} boogie_si_record_i8(out_$i335);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_$i334 := mxl111sf_i2c_readagain(in_$p0, out_$i332, out_$p333);
    call {:si_unique_call 1056} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$p333 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i8(out_$i331);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i331 := $add.i32(out_$i330, 8);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i330 := $xor.i32(out_$i329, $sub.i32(0, 1));
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i32(out_$i328);
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i298);
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p327, out_$i320);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref(out_$p322, $mul.ref(out_$i326, 1));
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i325);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i324, out_$i298);
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$i324 := $mul.i32(out_$i323, 8);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$i323 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    out_$p322 := $load.ref($M.0, out_$p321);
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.28, out_$p319);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i318, 1));
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i318 := $sext.i32.i64(out_$i317);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i316, 1);
    goto corral_source_split_6822;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i316 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6821;

  $bb114:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_vslice_dummy_var_260 := printk.ref.ref.i32(.str.129, .str.122, out_$i298);
    goto corral_source_split_6819;

  $bb113:
    assume out_$i314 == 1;
    goto corral_source_split_6818;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 4);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i312 := $M.1;
    goto corral_source_split_6800;

  $bb111:
    assume out_$i311 == 1;
    goto corral_source_split_6799;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$i311 := $sle.i32(out_$i298, 6);
    goto corral_source_split_6783;

  $bb109:
    assume out_$i310 == 1;
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 4);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i8($M.29, out_$p307);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i306, 1));
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i306 := $sext.i32.i64(out_$i298);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, out_$p305, out_$i303);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i304, 1));
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i304 := $sext.i32.i64(out_$i298);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i8($M.28, out_$p302);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i301, 1));
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i301 := $sext.i32.i64(out_$i300);
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, 2);
    goto corral_source_split_6769;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i299 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6768;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref(out_$p406, $mul.ref(out_$i410, 1));
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i410 := $sext.i32.i64(out_$i409);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i409 := $add.i32(out_$i408, out_$i298);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i408 := $mul.i32(out_$i407, 8);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i407 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$p406 := $load.ref($M.0, out_$p405);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i8($M.28, out_$p403);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i402, 1));
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i402 := $sext.i32.i64(out_$i401);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i401 := $add.i32(out_$i400, 1);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i400 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6805;

  $bb112:
    assume !(out_$i311 == 1);
    goto corral_source_split_6804;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref(out_$p419, $mul.ref(out_$i423, 1));
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i422);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i421, out_$i298);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i421 := $mul.i32(out_$i420, 8);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i420 := $zext.i16.i32(in_$i278);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.0, out_$p418);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i8($M.28, out_$p416);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i415, 1));
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i414);
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i414 := $add.i32(out_$i413, 1);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i413 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6786;

  $bb110:
    assume !(out_$i310 == 1);
    goto corral_source_split_6785;

  $bb139_dummy:
    call {:si_unique_call 1} out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_260, out_vslice_dummy_var_263 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, in_$i278, out_vslice_dummy_var_260, out_vslice_dummy_var_263);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i278: i16, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_263: i32) returns (out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_263: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.30, $CurrAddr, $M.29;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i276: i32, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i8, in_$i286: i32, in_$i287: i1, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i394: i16, in_$i427: i32, in_$i428: i32, in_$i429: i16, in_$i430: i32, in_$i431: i1, in_$i278: i16, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$p581: ref, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32) returns (out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i8, out_$i286: i32, out_$i287: i1, out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_$i394: i16, out_$i427: i32, out_$i428: i32, out_$i429: i16, out_$i430: i32, out_$i431: i1, out_$i278: i16, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$p581: ref, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32)
{

  entry:
    out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263 := in_$p279, in_$p280, in_$p281, in_$p282, in_$p283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i299, in_$i300, in_$i301, in_$p302, in_$i303, in_$i304, in_$p305, in_$i306, in_$p307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_$i316, in_$i317, in_$i318, in_$p319, in_$i320, in_$p321, in_$p322, in_$i323, in_$i324, in_$i325, in_$i326, in_$p327, in_$i328, in_$i329, in_$i330, in_$i331, in_$i332, in_$p333, in_$i334, in_$i335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$i341, in_$i343, in_$p344, in_$i345, in_$p346, in_$p347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$p354, in_$i355, in_$i356, in_$i357, in_$p358, in_$p359, in_$i360, in_$i361, in_$i362, in_$i363, in_$i364, in_$p365, in_$i366, in_$i367, in_$i368, in_$i369, in_$i370, in_$i371, in_$i373, in_$i374, in_$i375, in_$p376, in_$p377, in_$i378, in_$i379, in_$i380, in_$i381, in_$i382, in_$i383, in_$p384, in_$i385, in_$i386, in_$i387, in_$p388, in_$i389, in_$i390, in_$i392, in_$i393, in_$i342, in_$i395, in_$i396, in_$i397, in_$i400, in_$i401, in_$i402, in_$p403, in_$i404, in_$p405, in_$p406, in_$i407, in_$i408, in_$i409, in_$i410, in_$p411, in_$i399, in_$i413, in_$i414, in_$i415, in_$p416, in_$i417, in_$p418, in_$p419, in_$i420, in_$i421, in_$i422, in_$i423, in_$p424, in_$i412, in_$i425, in_$i426, in_$i298, in_$i394, in_$i427, in_$i428, in_$i429, in_$i430, in_$i431, in_$i278, in_$p566, in_$p567, in_$p568, in_$p569, in_$p570, in_$p571, in_$p572, in_$p573, in_$p574, in_$p575, in_$p576, in_$p577, in_$p578, in_$p579, in_$p580, in_$p581, in_$p582, in_$p583, in_$p584, in_$p585, in_$p586, in_vslice_dummy_var_260, in_vslice_dummy_var_261, in_vslice_dummy_var_262, in_vslice_dummy_var_263;
    goto $bb95, exit;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  $bb142:
    assume out_$i431 == 1;
    assume {:verifier.code 0} true;
    out_$i278 := out_$i429;
    goto $bb142_dummy;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    out_$i431 := $slt.i32(out_$i430, in_$i276);
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i430 := $zext.i16.i32(out_$i429);
    goto corral_source_split_6924;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i429 := $trunc.i32.i16(out_$i428);
    call {:si_unique_call 1061} {:cexpr "index"} boogie_si_record_i16(out_$i429);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i428 := $add.i32(out_$i427, 1);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i427 := $zext.i16.i32(out_$i394);
    goto corral_source_split_6921;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_6920;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i394 := out_$i278;
    goto $bb132;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i394 := out_$i278;
    goto $bb132;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb119:
    assume {:verifier.code 0} true;
    assume !(out_$i341 == 1);
    goto $bb120;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb130:
    assume !(out_$i393 == 1);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    out_$i393 := $sgt.i32(out_$i340, out_$i392);
    goto corral_source_split_6916;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i392 := $add.i32(out_$i342, 1);
    call {:si_unique_call 1060} {:cexpr "k"} boogie_si_record_i32(out_$i392);
    goto corral_source_split_6915;

  $bb127:
    assume !(out_$i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} out_vslice_dummy_var_262 := printk.ref.ref.i32.i32(.str.130, .str.122, out_$i386, out_$i390);
    goto corral_source_split_6913;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    out_$i390 := $zext.i8.i32(out_$i389);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    out_$i389 := $load.i8($M.30, out_$p388);
    goto corral_source_split_6911;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    out_$p388 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i387, 1));
    goto corral_source_split_6910;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    out_$i387 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6909;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    out_$i386 := $zext.i8.i32(out_$i385);
    goto corral_source_split_6908;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i385 := $load.i8($M.0, out_$p384);
    goto corral_source_split_6907;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$p384 := $add.ref(out_$p377, $mul.ref(out_$i383, 1));
    goto corral_source_split_6906;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    out_$i383 := $sext.i32.i64(out_$i382);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    out_$i382 := $add.i32(out_$i379, out_$i381);
    goto corral_source_split_6904;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    out_$i381 := $add.i32(out_$i380, 1);
    goto corral_source_split_6903;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    out_$i380 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6902;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    out_$i379 := $mul.i32(out_$i378, 8);
    goto corral_source_split_6901;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    out_$i378 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6900;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    out_$p377 := $load.ref($M.0, out_$p376);
    goto corral_source_split_6899;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    out_$p376 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6898;

  $bb126:
    assume out_$i375 == 1;
    goto corral_source_split_6897;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    out_$i375 := $ne.i32(out_$i374, 0);
    goto corral_source_split_6895;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    out_$i374 := $and.i32(out_$i373, 4);
    goto corral_source_split_6894;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i373 := $M.1;
    goto corral_source_split_6893;

  $bb124:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} out_vslice_dummy_var_261 := printk.ref.ref.i32.i32(.str.130, .str.122, out_$i367, out_$i371);
    goto corral_source_split_6891;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    out_$i371 := $add.i32(out_$i369, out_$i370);
    goto corral_source_split_6890;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    out_$i370 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6889;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    out_$i369 := $mul.i32(out_$i368, 8);
    goto corral_source_split_6888;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    out_$i368 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6887;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    out_$i367 := $zext.i8.i32(out_$i366);
    goto corral_source_split_6886;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    out_$i366 := $load.i8($M.0, out_$p365);
    goto corral_source_split_6885;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    out_$p365 := $add.ref(out_$p359, $mul.ref(out_$i364, 1));
    goto corral_source_split_6884;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    out_$i364 := $sext.i32.i64(out_$i363);
    goto corral_source_split_6883;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    out_$i363 := $add.i32(out_$i361, out_$i362);
    goto corral_source_split_6882;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    out_$i362 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6881;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    out_$i361 := $mul.i32(out_$i360, 8);
    goto corral_source_split_6880;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    out_$i360 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6879;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    out_$p359 := $load.ref($M.0, out_$p358);
    goto corral_source_split_6878;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    out_$p358 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  $bb123:
    assume out_$i357 == 1;
    goto corral_source_split_6876;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    out_$i357 := $ne.i32(out_$i356, 0);
    goto corral_source_split_6874;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    out_$i356 := $and.i32(out_$i355, 4);
    goto corral_source_split_6873;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    out_$i355 := $M.1;
    goto corral_source_split_6872;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p354, out_$i345);
    goto corral_source_split_6871;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    out_$p354 := $add.ref(out_$p347, $mul.ref(out_$i353, 1));
    goto corral_source_split_6870;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    out_$i353 := $sext.i32.i64(out_$i352);
    goto corral_source_split_6869;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    out_$i352 := $add.i32(out_$i349, out_$i351);
    goto corral_source_split_6868;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    out_$i351 := $add.i32(out_$i350, 1);
    goto corral_source_split_6867;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    out_$i350 := $add.i32(out_$i342, out_$i338);
    goto corral_source_split_6866;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    out_$i349 := $mul.i32(out_$i348, 8);
    goto corral_source_split_6865;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    out_$i348 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6864;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    out_$p347 := $load.ref($M.0, out_$p346);
    goto corral_source_split_6863;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    out_$p346 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6862;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    out_$i345 := $load.i8($M.30, out_$p344);
    goto corral_source_split_6861;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    out_$p344 := $add.ref($add.ref(in_$p5, $mul.ref(0, 26)), $mul.ref(out_$i343, 1));
    goto corral_source_split_6860;

  $bb122:
    assume {:verifier.code 0} true;
    out_$i343 := $sext.i32.i64(out_$i342);
    goto corral_source_split_6859;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb121:
    call out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_vslice_dummy_var_261, out_vslice_dummy_var_262 := mxl111sf_i2c_hw_xfer_msg_loop_$bb121(in_$p1, in_$p5, out_$i338, out_$i340, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i278, out_vslice_dummy_var_261, out_vslice_dummy_var_262);
    goto $bb121_last;

  $bb121_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6857;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    out_$i342 := 0;
    goto $bb121;

  $bb129:
    assume out_$i393 == 1;
    assume {:verifier.code 0} true;
    out_$i342 := out_$i392;
    assume false;
    return;

  $bb118:
    assume out_$i341 == 1;
    goto corral_source_split_6855;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    out_$i341 := $sgt.i32(out_$i340, 0);
    goto corral_source_split_6848;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    out_$i340 := $add.i32(out_$i339, 8);
    goto corral_source_split_6847;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    out_$i339 := $xor.i32(out_$i338, $sub.i32(0, 1));
    goto corral_source_split_6846;

  $bb116:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6845;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    out_$i338 := out_$i298;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    out_$i337 := $eq.i32(out_$i336, 1);
    goto corral_source_split_6843;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    out_$i336 := $zext.i8.i32(out_$i335);
    goto corral_source_split_6842;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    out_$i335 := $trunc.i32.i8(out_$i334);
    call {:si_unique_call 1057} {:cexpr "ret_status"} boogie_si_record_i8(out_$i335);
    goto corral_source_split_6841;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} out_$i334 := mxl111sf_i2c_readagain(in_$p0, out_$i332, out_$p333);
    call {:si_unique_call 1056} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i334);
    goto corral_source_split_6840;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    out_$p333 := $bitcast.ref.ref(in_$p5);
    goto corral_source_split_6839;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    out_$i332 := $trunc.i32.i8(out_$i331);
    goto corral_source_split_6838;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    out_$i331 := $add.i32(out_$i330, 8);
    goto corral_source_split_6837;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    out_$i330 := $xor.i32(out_$i329, $sub.i32(0, 1));
    goto corral_source_split_6836;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    out_$i329 := $zext.i8.i32(out_$i328);
    goto corral_source_split_6835;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    out_$i328 := $trunc.i32.i8(out_$i298);
    goto corral_source_split_6834;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p327, out_$i320);
    goto corral_source_split_6833;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    out_$p327 := $add.ref(out_$p322, $mul.ref(out_$i326, 1));
    goto corral_source_split_6832;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    out_$i326 := $sext.i32.i64(out_$i325);
    goto corral_source_split_6831;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    out_$i325 := $add.i32(out_$i324, out_$i298);
    goto corral_source_split_6830;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    out_$i324 := $mul.i32(out_$i323, 8);
    goto corral_source_split_6829;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    out_$i323 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6828;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    out_$p322 := $load.ref($M.0, out_$p321);
    goto corral_source_split_6827;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6826;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.28, out_$p319);
    goto corral_source_split_6825;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    out_$p319 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i318, 1));
    goto corral_source_split_6824;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    out_$i318 := $sext.i32.i64(out_$i317);
    goto corral_source_split_6823;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    out_$i317 := $add.i32(out_$i316, 1);
    goto corral_source_split_6822;

  $bb115:
    assume {:verifier.code 0} true;
    out_$i316 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6821;

  $bb114:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} out_vslice_dummy_var_260 := printk.ref.ref.i32(.str.129, .str.122, out_$i298);
    goto corral_source_split_6819;

  $bb113:
    assume out_$i314 == 1;
    goto corral_source_split_6818;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    out_$i314 := $ne.i32(out_$i313, 0);
    goto corral_source_split_6802;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    out_$i313 := $and.i32(out_$i312, 4);
    goto corral_source_split_6801;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    out_$i312 := $M.1;
    goto corral_source_split_6800;

  $bb111:
    assume out_$i311 == 1;
    goto corral_source_split_6799;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    out_$i311 := $sle.i32(out_$i298, 6);
    goto corral_source_split_6783;

  $bb109:
    assume out_$i310 == 1;
    goto corral_source_split_6782;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 4);
    goto corral_source_split_6780;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    out_$i309 := $zext.i8.i32(out_$i308);
    goto corral_source_split_6779;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i8($M.29, out_$p307);
    goto corral_source_split_6778;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i306, 1));
    goto corral_source_split_6777;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    out_$i306 := $sext.i32.i64(out_$i298);
    goto corral_source_split_6776;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, out_$p305, out_$i303);
    goto corral_source_split_6775;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(out_$i304, 1));
    goto corral_source_split_6774;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    out_$i304 := $sext.i32.i64(out_$i298);
    goto corral_source_split_6773;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    out_$i303 := $load.i8($M.28, out_$p302);
    goto corral_source_split_6772;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    out_$p302 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i301, 1));
    goto corral_source_split_6771;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    out_$i301 := $sext.i32.i64(out_$i300);
    goto corral_source_split_6770;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    out_$i300 := $add.i32(out_$i299, 2);
    goto corral_source_split_6769;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i299 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6768;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb107:
    call out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_vslice_dummy_var_260, out_vslice_dummy_var_263 := mxl111sf_i2c_hw_xfer_msg_loop_$bb107(in_$p0, in_$p1, in_$p3, in_$p4, in_$p5, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i278, out_vslice_dummy_var_260, out_vslice_dummy_var_263);
    goto $bb107_last;

  $bb107_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6766;

  $bb106:
    assume {:verifier.code 0} true;
    out_$i298 := 0;
    goto $bb107;

  $bb139:
    assume out_$i426 == 1;
    assume {:verifier.code 0} true;
    out_$i298 := out_$i425;
    assume false;
    return;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i426 := $sle.i32(out_$i425, 7);
    goto corral_source_split_6934;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i412, 1);
    call {:si_unique_call 1063} {:cexpr "i"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_6933;

  $bb138:
    assume {:verifier.code 0} true;
    goto corral_source_split_6932;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p424, out_$i417);
    assume {:verifier.code 0} true;
    out_$i412 := out_$i298;
    goto $bb138;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i412 := out_$i399;
    goto $bb138;

  $bb137:
    assume {:verifier.code 0} true;
    goto corral_source_split_6930;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p411, out_$i404);
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb136:
    assume {:verifier.code 0} true;
    out_$i399 := out_$i298;
    goto $bb137;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb134:
    assume !(out_$i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} out_vslice_dummy_var_263 := printk.ref.ref(.str.131, .str.122);
    goto corral_source_split_6928;

  $bb133:
    assume out_$i397 == 1;
    goto corral_source_split_6927;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    out_$i397 := $ne.i32(out_$i396, 0);
    goto corral_source_split_6853;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    out_$i396 := $and.i32(out_$i395, 4);
    goto corral_source_split_6852;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    out_$i395 := $M.1;
    goto corral_source_split_6851;

  $bb117:
    assume !(out_$i337 == 1);
    goto corral_source_split_6850;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    out_$p411 := $add.ref(out_$p406, $mul.ref(out_$i410, 1));
    goto corral_source_split_6816;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    out_$i410 := $sext.i32.i64(out_$i409);
    goto corral_source_split_6815;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    out_$i409 := $add.i32(out_$i408, out_$i298);
    goto corral_source_split_6814;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    out_$i408 := $mul.i32(out_$i407, 8);
    goto corral_source_split_6813;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    out_$i407 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6812;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    out_$p406 := $load.ref($M.0, out_$p405);
    goto corral_source_split_6811;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    out_$p405 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6810;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    out_$i404 := $load.i8($M.28, out_$p403);
    goto corral_source_split_6809;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    out_$p403 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i402, 1));
    goto corral_source_split_6808;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    out_$i402 := $sext.i32.i64(out_$i401);
    goto corral_source_split_6807;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    out_$i401 := $add.i32(out_$i400, 1);
    goto corral_source_split_6806;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    out_$i400 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6805;

  $bb112:
    assume !(out_$i311 == 1);
    goto corral_source_split_6804;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    out_$p424 := $add.ref(out_$p419, $mul.ref(out_$i423, 1));
    goto corral_source_split_6797;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    out_$i423 := $sext.i32.i64(out_$i422);
    goto corral_source_split_6796;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    out_$i422 := $add.i32(out_$i421, out_$i298);
    goto corral_source_split_6795;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    out_$i421 := $mul.i32(out_$i420, 8);
    goto corral_source_split_6794;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    out_$i420 := $zext.i16.i32(out_$i278);
    goto corral_source_split_6793;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    out_$p419 := $load.ref($M.0, out_$p418);
    goto corral_source_split_6792;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    out_$p418 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6791;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    out_$i417 := $load.i8($M.28, out_$p416);
    goto corral_source_split_6790;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    out_$p416 := $add.ref($add.ref(in_$p3, $mul.ref(0, 24)), $mul.ref(out_$i415, 1));
    goto corral_source_split_6789;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    out_$i415 := $sext.i32.i64(out_$i414);
    goto corral_source_split_6788;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    out_$i414 := $add.i32(out_$i413, 1);
    goto corral_source_split_6787;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    out_$i413 := $mul.i32(out_$i298, 3);
    goto corral_source_split_6786;

  $bb110:
    assume !(out_$i310 == 1);
    goto corral_source_split_6785;

  $bb102:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    out_$i287 := $eq.i32(out_$i286, 1);
    goto corral_source_split_6746;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    out_$i286 := $zext.i8.i32(out_$i285);
    goto corral_source_split_6745;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} out_$i285 := mxl111sf_i2c_check_status(in_$p0);
    call {:si_unique_call 1052} {:cexpr "tmp___5"} boogie_si_record_i8(out_$i285);
    goto corral_source_split_6744;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} out_$i284 := mxl111sf_i2c_get_data(in_$p0, 0, out_$p282, out_$p283);
    call {:si_unique_call 1050} {:cexpr "ret"} boogie_si_record_i32(out_$i284);
    goto corral_source_split_6743;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    out_$p283 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_6742;

  $bb100:
    assume {:verifier.code 0} true;
    out_$p282 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6741;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p586, 0);
    goto corral_source_split_7186;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    out_$p586 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7185;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p585, 0);
    goto corral_source_split_7184;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    out_$p585 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7183;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p584, 12);
    goto corral_source_split_7182;

  $bb207:
    assume {:verifier.code 0} true;
    out_$p584 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7181;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p583, 0);
    goto corral_source_split_7179;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    out_$p583 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7178;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p582, 0);
    goto corral_source_split_7177;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    out_$p582 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7176;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p581, 12);
    goto corral_source_split_7175;

  $bb206:
    assume {:verifier.code 0} true;
    out_$p581 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7174;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p580, 0);
    goto corral_source_split_7172;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    out_$p580 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7171;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p579, 0);
    goto corral_source_split_7170;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    out_$p579 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7169;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p578, 12);
    goto corral_source_split_7168;

  $bb205:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7167;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p577, 0);
    goto corral_source_split_7165;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    out_$p577 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7164;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p576, 0);
    goto corral_source_split_7163;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    out_$p576 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7162;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p575, 12);
    goto corral_source_split_7161;

  $bb204:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7160;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    goto $bb204;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p574, 0);
    goto corral_source_split_7158;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    out_$p574 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7157;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p573, 0);
    goto corral_source_split_7156;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    out_$p573 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7155;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p572, 12);
    goto corral_source_split_7154;

  $bb203:
    assume {:verifier.code 0} true;
    out_$p572 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7153;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p571, 0);
    goto corral_source_split_7151;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$p571 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7150;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p570, 0);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    out_$p570 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p569, 12);
    goto corral_source_split_7147;

  $bb202:
    assume {:verifier.code 0} true;
    out_$p569 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7146;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p568, 0);
    goto corral_source_split_6739;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    out_$p568 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6738;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p567, 0);
    goto corral_source_split_6737;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    out_$p567 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6736;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p566, 12);
    goto corral_source_split_6735;

  $bb99:
    assume {:verifier.code 0} true;
    out_$p566 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6734;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p281, 0);
    goto corral_source_split_6732;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    out_$p281 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6731;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p280, 0);
    goto corral_source_split_6730;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    out_$p280 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6729;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p279, 12);
    goto corral_source_split_6728;

  $bb98:
    assume {:verifier.code 0} true;
    out_$p279 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6727;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb140:
    assume !(out_$i426 == 1);
    goto corral_source_split_6936;

  $bb142_dummy:
    call {:si_unique_call 1} out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263 := mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$i276, out_$p279, out_$p280, out_$p281, out_$p282, out_$p283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i299, out_$i300, out_$i301, out_$p302, out_$i303, out_$i304, out_$p305, out_$i306, out_$p307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$p322, out_$i323, out_$i324, out_$i325, out_$i326, out_$p327, out_$i328, out_$i329, out_$i330, out_$i331, out_$i332, out_$p333, out_$i334, out_$i335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$i341, out_$i343, out_$p344, out_$i345, out_$p346, out_$p347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$p354, out_$i355, out_$i356, out_$i357, out_$p358, out_$p359, out_$i360, out_$i361, out_$i362, out_$i363, out_$i364, out_$p365, out_$i366, out_$i367, out_$i368, out_$i369, out_$i370, out_$i371, out_$i373, out_$i374, out_$i375, out_$p376, out_$p377, out_$i378, out_$i379, out_$i380, out_$i381, out_$i382, out_$i383, out_$p384, out_$i385, out_$i386, out_$i387, out_$p388, out_$i389, out_$i390, out_$i392, out_$i393, out_$i342, out_$i395, out_$i396, out_$i397, out_$i400, out_$i401, out_$i402, out_$p403, out_$i404, out_$p405, out_$p406, out_$i407, out_$i408, out_$i409, out_$i410, out_$p411, out_$i399, out_$i413, out_$i414, out_$i415, out_$p416, out_$i417, out_$p418, out_$p419, out_$i420, out_$i421, out_$i422, out_$i423, out_$p424, out_$i412, out_$i425, out_$i426, out_$i298, out_$i394, out_$i427, out_$i428, out_$i429, out_$i430, out_$i431, out_$i278, out_$p566, out_$p567, out_$p568, out_$p569, out_$p570, out_$p571, out_$p572, out_$p573, out_$p574, out_$p575, out_$p576, out_$p577, out_$p578, out_$p579, out_$p580, out_$p581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_vslice_dummy_var_260, out_vslice_dummy_var_261, out_vslice_dummy_var_262, out_vslice_dummy_var_263);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb95(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i276: i32, in_$p279: ref, in_$p280: ref, in_$p281: ref, in_$p282: ref, in_$p283: ref, in_$i284: i32, in_$i285: i8, in_$i286: i32, in_$i287: i1, in_$i299: i32, in_$i300: i32, in_$i301: i64, in_$p302: ref, in_$i303: i8, in_$i304: i64, in_$p305: ref, in_$i306: i64, in_$p307: ref, in_$i308: i8, in_$i309: i32, in_$i310: i1, in_$i311: i1, in_$i312: i32, in_$i313: i32, in_$i314: i1, in_$i316: i32, in_$i317: i32, in_$i318: i64, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$p322: ref, in_$i323: i32, in_$i324: i32, in_$i325: i32, in_$i326: i64, in_$p327: ref, in_$i328: i8, in_$i329: i32, in_$i330: i32, in_$i331: i32, in_$i332: i8, in_$p333: ref, in_$i334: i32, in_$i335: i8, in_$i336: i32, in_$i337: i1, in_$i338: i32, in_$i339: i32, in_$i340: i32, in_$i341: i1, in_$i343: i64, in_$p344: ref, in_$i345: i8, in_$p346: ref, in_$p347: ref, in_$i348: i32, in_$i349: i32, in_$i350: i32, in_$i351: i32, in_$i352: i32, in_$i353: i64, in_$p354: ref, in_$i355: i32, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$p359: ref, in_$i360: i32, in_$i361: i32, in_$i362: i32, in_$i363: i32, in_$i364: i64, in_$p365: ref, in_$i366: i8, in_$i367: i32, in_$i368: i32, in_$i369: i32, in_$i370: i32, in_$i371: i32, in_$i373: i32, in_$i374: i32, in_$i375: i1, in_$p376: ref, in_$p377: ref, in_$i378: i32, in_$i379: i32, in_$i380: i32, in_$i381: i32, in_$i382: i32, in_$i383: i64, in_$p384: ref, in_$i385: i8, in_$i386: i32, in_$i387: i64, in_$p388: ref, in_$i389: i8, in_$i390: i32, in_$i392: i32, in_$i393: i1, in_$i342: i32, in_$i395: i32, in_$i396: i32, in_$i397: i1, in_$i400: i32, in_$i401: i32, in_$i402: i64, in_$p403: ref, in_$i404: i8, in_$p405: ref, in_$p406: ref, in_$i407: i32, in_$i408: i32, in_$i409: i32, in_$i410: i64, in_$p411: ref, in_$i399: i32, in_$i413: i32, in_$i414: i32, in_$i415: i64, in_$p416: ref, in_$i417: i8, in_$p418: ref, in_$p419: ref, in_$i420: i32, in_$i421: i32, in_$i422: i32, in_$i423: i64, in_$p424: ref, in_$i412: i32, in_$i425: i32, in_$i426: i1, in_$i298: i32, in_$i394: i16, in_$i427: i32, in_$i428: i32, in_$i429: i16, in_$i430: i32, in_$i431: i1, in_$i278: i16, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$p569: ref, in_$p570: ref, in_$p571: ref, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$p575: ref, in_$p576: ref, in_$p577: ref, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$p581: ref, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_vslice_dummy_var_260: i32, in_vslice_dummy_var_261: i32, in_vslice_dummy_var_262: i32, in_vslice_dummy_var_263: i32) returns (out_$p279: ref, out_$p280: ref, out_$p281: ref, out_$p282: ref, out_$p283: ref, out_$i284: i32, out_$i285: i8, out_$i286: i32, out_$i287: i1, out_$i299: i32, out_$i300: i32, out_$i301: i64, out_$p302: ref, out_$i303: i8, out_$i304: i64, out_$p305: ref, out_$i306: i64, out_$p307: ref, out_$i308: i8, out_$i309: i32, out_$i310: i1, out_$i311: i1, out_$i312: i32, out_$i313: i32, out_$i314: i1, out_$i316: i32, out_$i317: i32, out_$i318: i64, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$p322: ref, out_$i323: i32, out_$i324: i32, out_$i325: i32, out_$i326: i64, out_$p327: ref, out_$i328: i8, out_$i329: i32, out_$i330: i32, out_$i331: i32, out_$i332: i8, out_$p333: ref, out_$i334: i32, out_$i335: i8, out_$i336: i32, out_$i337: i1, out_$i338: i32, out_$i339: i32, out_$i340: i32, out_$i341: i1, out_$i343: i64, out_$p344: ref, out_$i345: i8, out_$p346: ref, out_$p347: ref, out_$i348: i32, out_$i349: i32, out_$i350: i32, out_$i351: i32, out_$i352: i32, out_$i353: i64, out_$p354: ref, out_$i355: i32, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$p359: ref, out_$i360: i32, out_$i361: i32, out_$i362: i32, out_$i363: i32, out_$i364: i64, out_$p365: ref, out_$i366: i8, out_$i367: i32, out_$i368: i32, out_$i369: i32, out_$i370: i32, out_$i371: i32, out_$i373: i32, out_$i374: i32, out_$i375: i1, out_$p376: ref, out_$p377: ref, out_$i378: i32, out_$i379: i32, out_$i380: i32, out_$i381: i32, out_$i382: i32, out_$i383: i64, out_$p384: ref, out_$i385: i8, out_$i386: i32, out_$i387: i64, out_$p388: ref, out_$i389: i8, out_$i390: i32, out_$i392: i32, out_$i393: i1, out_$i342: i32, out_$i395: i32, out_$i396: i32, out_$i397: i1, out_$i400: i32, out_$i401: i32, out_$i402: i64, out_$p403: ref, out_$i404: i8, out_$p405: ref, out_$p406: ref, out_$i407: i32, out_$i408: i32, out_$i409: i32, out_$i410: i64, out_$p411: ref, out_$i399: i32, out_$i413: i32, out_$i414: i32, out_$i415: i64, out_$p416: ref, out_$i417: i8, out_$p418: ref, out_$p419: ref, out_$i420: i32, out_$i421: i32, out_$i422: i32, out_$i423: i64, out_$p424: ref, out_$i412: i32, out_$i425: i32, out_$i426: i1, out_$i298: i32, out_$i394: i16, out_$i427: i32, out_$i428: i32, out_$i429: i16, out_$i430: i32, out_$i431: i1, out_$i278: i16, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$p569: ref, out_$p570: ref, out_$p571: ref, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$p575: ref, out_$p576: ref, out_$p577: ref, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$p581: ref, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_vslice_dummy_var_260: i32, out_vslice_dummy_var_261: i32, out_vslice_dummy_var_262: i32, out_vslice_dummy_var_263: i32);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $M.30, $CurrAddr, $M.29;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1: ref, in_$p2: ref, in_$i112: i16, in_$i152: i32, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i32, in_$i180: i64, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i185: i32, in_$i186: i32, in_$i187: i64, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$i154: i32, in_vslice_dummy_var_254: i32) returns (out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i32, out_$i180: i64, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i185: i32, out_$i186: i32, out_$i187: i64, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$i154: i32, out_vslice_dummy_var_254: i32)
{

  entry:
    out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_254 := in_$i155, in_$i156, in_$i157, in_$p158, in_$p159, in_$p160, in_$i161, in_$i162, in_$i163, in_$i164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$i174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$p181, in_$i182, in_$i183, in_$i185, in_$i186, in_$i187, in_$p188, in_$i189, in_$i190, in_$i154, in_vslice_dummy_var_254;
    goto $bb59, exit;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_6544;

  $bb64:
    assume out_$i190 == 1;
    assume {:verifier.code 0} true;
    out_$i154 := out_$i189;
    goto $bb64_dummy;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    out_$i190 := $sgt.i32(in_$i152, out_$i189);
    goto corral_source_split_6587;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    out_$i189 := $add.i32(out_$i154, 1);
    call {:si_unique_call 1034} {:cexpr "i"} boogie_si_record_i32(out_$i189);
    goto corral_source_split_6586;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p188, 0);
    goto corral_source_split_6585;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i187, 1));
    goto corral_source_split_6584;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    out_$i187 := $sext.i32.i64(out_$i186);
    goto corral_source_split_6583;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    out_$i186 := $add.i32(out_$i185, 4);
    goto corral_source_split_6582;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i185 := $mul.i32(out_$i154, 3);
    goto corral_source_split_6581;

  $bb62:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_vslice_dummy_var_254 := printk.ref.ref.i32.i32.i32(.str.126, .str.122, out_$i174, out_$i154, out_$i183);
    goto corral_source_split_6579;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    out_$i183 := $zext.i8.i32(out_$i182);
    goto corral_source_split_6578;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i8($M.0, out_$p181);
    goto corral_source_split_6577;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref(out_$p176, $mul.ref(out_$i180, 1));
    goto corral_source_split_6576;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    out_$i180 := $sext.i32.i64(out_$i179);
    goto corral_source_split_6575;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    out_$i179 := $add.i32(out_$i178, out_$i154);
    goto corral_source_split_6574;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    out_$i178 := $mul.i32(out_$i177, 8);
    goto corral_source_split_6573;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    out_$i177 := $zext.i16.i32(in_$i112);
    goto corral_source_split_6572;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    out_$p176 := $load.ref($M.0, out_$p175);
    goto corral_source_split_6571;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6570;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(in_$i112);
    goto corral_source_split_6569;

  $bb61:
    assume out_$i173 == 1;
    goto corral_source_split_6568;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    out_$i173 := $ne.i32(out_$i172, 0);
    goto corral_source_split_6566;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    out_$i172 := $and.i32(out_$i171, 4);
    goto corral_source_split_6565;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    out_$i171 := $M.1;
    goto corral_source_split_6564;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p170, out_$i166);
    goto corral_source_split_6563;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i169, 1));
    goto corral_source_split_6562;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    out_$i169 := $sext.i32.i64(out_$i168);
    goto corral_source_split_6561;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    out_$i168 := $mul.i32(out_$i167, 3);
    goto corral_source_split_6560;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    out_$i167 := $add.i32(out_$i154, 1);
    goto corral_source_split_6559;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i8($M.0, out_$p165);
    goto corral_source_split_6558;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref(out_$p160, $mul.ref(out_$i164, 1));
    goto corral_source_split_6557;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    out_$i164 := $sext.i32.i64(out_$i163);
    goto corral_source_split_6556;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    out_$i163 := $add.i32(out_$i162, out_$i154);
    goto corral_source_split_6555;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    out_$i162 := $mul.i32(out_$i161, 8);
    goto corral_source_split_6554;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i16.i32(in_$i112);
    goto corral_source_split_6553;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    out_$p160 := $load.ref($M.0, out_$p159);
    goto corral_source_split_6552;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    out_$p159 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6551;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p158, 12);
    goto corral_source_split_6550;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(out_$i157, 1));
    goto corral_source_split_6549;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    out_$i157 := $sext.i32.i64(out_$i156);
    goto corral_source_split_6548;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i155, 2);
    goto corral_source_split_6547;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i155 := $mul.i32(out_$i154, 3);
    goto corral_source_split_6546;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb64_dummy:
    call {:si_unique_call 1} out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_254 := mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1, in_$p2, in_$i112, in_$i152, out_$i155, out_$i156, out_$i157, out_$p158, out_$p159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$p181, out_$i182, out_$i183, out_$i185, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i154, out_vslice_dummy_var_254);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb59(in_$p1: ref, in_$p2: ref, in_$i112: i16, in_$i152: i32, in_$i155: i32, in_$i156: i32, in_$i157: i64, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i32, in_$i164: i64, in_$p165: ref, in_$i166: i8, in_$i167: i32, in_$i168: i32, in_$i169: i64, in_$p170: ref, in_$i171: i32, in_$i172: i32, in_$i173: i1, in_$i174: i32, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i32, in_$i180: i64, in_$p181: ref, in_$i182: i8, in_$i183: i32, in_$i185: i32, in_$i186: i32, in_$i187: i64, in_$p188: ref, in_$i189: i32, in_$i190: i1, in_$i154: i32, in_vslice_dummy_var_254: i32) returns (out_$i155: i32, out_$i156: i32, out_$i157: i64, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i32, out_$i164: i64, out_$p165: ref, out_$i166: i8, out_$i167: i32, out_$i168: i32, out_$i169: i64, out_$p170: ref, out_$i171: i32, out_$i172: i32, out_$i173: i1, out_$i174: i32, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i32, out_$i180: i64, out_$p181: ref, out_$i182: i8, out_$i183: i32, out_$i185: i32, out_$i186: i32, out_$i187: i64, out_$p188: ref, out_$i189: i32, out_$i190: i1, out_$i154: i32, out_vslice_dummy_var_254: i32);
  modifies $M.0;



implementation mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i110: i32, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i114: i16, in_$i145: i16, in_$i146: i32, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$i615: i32, in_$i616: i32, in_$i617: i32, in_$i618: i64, in_$p619: ref, in_$i620: i8, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$i628: i32, in_$i629: i64, in_$p630: ref, in_$i631: i8, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i639: i32, in_$i640: i64, in_$p641: ref, in_$i642: i8, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i64, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$i660: i32, in_$i661: i32, in_$i662: i64, in_$p663: ref, in_$i664: i8, in_$p665: ref, in_$p666: ref, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$i670: i32, in_$i671: i32, in_$i672: i32, in_$i673: i64, in_$p674: ref, in_$i675: i8, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i32, in_$i683: i32, in_$i684: i64, in_$p685: ref, in_$i686: i8, in_$p687: ref, in_$p688: ref) returns (out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i114: i16, out_$i145: i16, out_$i146: i32, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$i615: i32, out_$i616: i32, out_$i617: i32, out_$i618: i64, out_$p619: ref, out_$i620: i8, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$i628: i32, out_$i629: i64, out_$p630: ref, out_$i631: i8, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i639: i32, out_$i640: i64, out_$p641: ref, out_$i642: i8, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i64, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$i660: i32, out_$i661: i32, out_$i662: i64, out_$p663: ref, out_$i664: i8, out_$p665: ref, out_$p666: ref, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$i670: i32, out_$i671: i32, out_$i672: i32, out_$i673: i64, out_$p674: ref, out_$i675: i8, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i32, out_$i683: i32, out_$i684: i64, out_$p685: ref, out_$i686: i8, out_$p687: ref, out_$p688: ref)
{

  entry:
    out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688 := in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i114, in_$i145, in_$i146, in_$p612, in_$p613, in_$p614, in_$i615, in_$i616, in_$i617, in_$i618, in_$p619, in_$i620, in_$p621, in_$p622, in_$p623, in_$p624, in_$p625, in_$i626, in_$i627, in_$i628, in_$i629, in_$p630, in_$i631, in_$p632, in_$p633, in_$p634, in_$p635, in_$p636, in_$i637, in_$i638, in_$i639, in_$i640, in_$p641, in_$i642, in_$p643, in_$p644, in_$p645, in_$p646, in_$p647, in_$i648, in_$i649, in_$i650, in_$i651, in_$p652, in_$i653, in_$p654, in_$p655, in_$p656, in_$p657, in_$p658, in_$i659, in_$i660, in_$i661, in_$i662, in_$p663, in_$i664, in_$p665, in_$p666, in_$p667, in_$p668, in_$p669, in_$i670, in_$i671, in_$i672, in_$i673, in_$p674, in_$i675, in_$p676, in_$p677, in_$p678, in_$p679, in_$p680, in_$i681, in_$i682, in_$i683, in_$i684, in_$p685, in_$i686, in_$p687, in_$p688;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_6461;

  $bb47:
    assume out_$i144 == 1;
    assume {:verifier.code 0} true;
    out_$i114 := out_$i142;
    goto $bb47_dummy;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    out_$i145, out_$i146 := out_$i142, out_$i126;
    assume true;
    goto $bb47;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i144 := $slt.i32(out_$i143, in_$i110);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i143 := $zext.i16.i32(out_$i142);
    goto corral_source_split_6519;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i32.i16(out_$i141);
    call {:si_unique_call 1032} {:cexpr "index"} boogie_si_record_i16(out_$i142);
    goto corral_source_split_6518;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    out_$i141 := $add.i32(out_$i140, 1);
    goto corral_source_split_6517;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6516;

  $bb42:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i128, 1);
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i8.i32(out_$i127);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} out_$i127 := mxl111sf_i2c_check_status(in_$p0);
    call {:si_unique_call 1030} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i127);
    goto corral_source_split_6494;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} out_$i126 := mxl111sf_i2c_send_data(in_$p0, 0, out_$p125);
    call {:si_unique_call 1028} {:cexpr "ret"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_6493;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_6492;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p688, 0);
    goto corral_source_split_7348;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    out_$p688 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(25, 1));
    goto corral_source_split_7347;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p687, out_$i686);
    goto corral_source_split_7346;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    out_$p687 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(24, 1));
    goto corral_source_split_7345;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    out_$i686 := $load.i8($M.0, out_$p685);
    goto corral_source_split_7344;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    out_$p685 := $add.ref(out_$p680, $mul.ref(out_$i684, 1));
    goto corral_source_split_7343;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    out_$i684 := $sext.i32.i64(out_$i683);
    goto corral_source_split_7342;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    out_$i683 := $add.i32(out_$i682, 7);
    goto corral_source_split_7341;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$i682 := $mul.i32(out_$i681, 8);
    goto corral_source_split_7340;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i681 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7339;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    out_$p680 := $load.ref($M.0, out_$p679);
    goto corral_source_split_7338;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$p679 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p678, 12);
    goto corral_source_split_7336;

  $bb237:
    assume {:verifier.code 0} true;
    out_$p678 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(23, 1));
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p677, 0);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$p677 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(22, 1));
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p676, out_$i675);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$p676 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(21, 1));
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$i675 := $load.i8($M.0, out_$p674);
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$p674 := $add.ref(out_$p669, $mul.ref(out_$i673, 1));
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i673 := $sext.i32.i64(out_$i672);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$i672 := $add.i32(out_$i671, 6);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$i671 := $mul.i32(out_$i670, 8);
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    out_$i670 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$p669 := $load.ref($M.0, out_$p668);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$p668 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p667, 12);
    goto corral_source_split_7321;

  $bb236:
    assume {:verifier.code 0} true;
    out_$p667 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(20, 1));
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p666, 0);
    goto corral_source_split_7318;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(19, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p665, out_$i664);
    goto corral_source_split_7316;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    out_$p665 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(18, 1));
    goto corral_source_split_7315;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    out_$i664 := $load.i8($M.0, out_$p663);
    goto corral_source_split_7314;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    out_$p663 := $add.ref(out_$p658, $mul.ref(out_$i662, 1));
    goto corral_source_split_7313;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    out_$i662 := $sext.i32.i64(out_$i661);
    goto corral_source_split_7312;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    out_$i661 := $add.i32(out_$i660, 5);
    goto corral_source_split_7311;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    out_$i660 := $mul.i32(out_$i659, 8);
    goto corral_source_split_7310;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    out_$i659 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7309;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    out_$p658 := $load.ref($M.0, out_$p657);
    goto corral_source_split_7308;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    out_$p657 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7307;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p656, 12);
    goto corral_source_split_7306;

  $bb235:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(17, 1));
    goto corral_source_split_7305;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p655, 0);
    goto corral_source_split_7303;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    out_$p655 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(16, 1));
    goto corral_source_split_7302;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p654, out_$i653);
    goto corral_source_split_7301;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    out_$p654 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(15, 1));
    goto corral_source_split_7300;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    out_$i653 := $load.i8($M.0, out_$p652);
    goto corral_source_split_7299;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    out_$p652 := $add.ref(out_$p647, $mul.ref(out_$i651, 1));
    goto corral_source_split_7298;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    out_$i651 := $sext.i32.i64(out_$i650);
    goto corral_source_split_7297;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    out_$i650 := $add.i32(out_$i649, 4);
    goto corral_source_split_7296;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    out_$i649 := $mul.i32(out_$i648, 8);
    goto corral_source_split_7295;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    out_$i648 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7294;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    out_$p647 := $load.ref($M.0, out_$p646);
    goto corral_source_split_7293;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    out_$p646 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7292;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p645, 12);
    goto corral_source_split_7291;

  $bb234:
    assume {:verifier.code 0} true;
    out_$p645 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(14, 1));
    goto corral_source_split_7290;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    goto $bb234;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p644, 0);
    goto corral_source_split_7288;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    out_$p644 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(13, 1));
    goto corral_source_split_7287;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p643, out_$i642);
    goto corral_source_split_7286;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    out_$p643 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(12, 1));
    goto corral_source_split_7285;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    out_$i642 := $load.i8($M.0, out_$p641);
    goto corral_source_split_7284;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref(out_$p636, $mul.ref(out_$i640, 1));
    goto corral_source_split_7283;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    out_$i640 := $sext.i32.i64(out_$i639);
    goto corral_source_split_7282;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    out_$i639 := $add.i32(out_$i638, 3);
    goto corral_source_split_7281;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    out_$i638 := $mul.i32(out_$i637, 8);
    goto corral_source_split_7280;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    out_$i637 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7279;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    out_$p636 := $load.ref($M.0, out_$p635);
    goto corral_source_split_7278;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    out_$p635 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7277;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p634, 12);
    goto corral_source_split_7276;

  $bb233:
    assume {:verifier.code 0} true;
    out_$p634 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(11, 1));
    goto corral_source_split_7275;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p633, 0);
    goto corral_source_split_7273;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$p633 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(10, 1));
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p632, out_$i631);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(9, 1));
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i631 := $load.i8($M.0, out_$p630);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$p630 := $add.ref(out_$p625, $mul.ref(out_$i629, 1));
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i629 := $sext.i32.i64(out_$i628);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i628 := $add.i32(out_$i627, 2);
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$i627 := $mul.i32(out_$i626, 8);
    goto corral_source_split_7265;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$i626 := $zext.i16.i32(out_$i114);
    goto corral_source_split_7264;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    out_$p625 := $load.ref($M.0, out_$p624);
    goto corral_source_split_7263;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    out_$p624 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7262;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p623, 12);
    goto corral_source_split_7261;

  $bb232:
    assume {:verifier.code 0} true;
    out_$p623 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(8, 1));
    goto corral_source_split_7260;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p622, 0);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$p622 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(7, 1));
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p621, out_$i620);
    goto corral_source_split_6488;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    out_$p621 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(6, 1));
    goto corral_source_split_6487;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    out_$i620 := $load.i8($M.0, out_$p619);
    goto corral_source_split_6486;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    out_$p619 := $add.ref(out_$p614, $mul.ref(out_$i618, 1));
    goto corral_source_split_6485;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    out_$i618 := $sext.i32.i64(out_$i617);
    goto corral_source_split_6484;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    out_$i617 := $add.i32(out_$i616, 1);
    goto corral_source_split_6483;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$i616 := $mul.i32(out_$i615, 8);
    goto corral_source_split_6482;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i615 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$p614 := $load.ref($M.0, out_$p613);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p612, 12);
    goto corral_source_split_6478;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p612 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(5, 1));
    goto corral_source_split_6477;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p124, 0);
    goto corral_source_split_6475;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(4, 1));
    goto corral_source_split_6474;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p123, out_$i122);
    goto corral_source_split_6473;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(3, 1));
    goto corral_source_split_6472;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i8($M.0, out_$p121);
    goto corral_source_split_6471;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref(out_$p117, $mul.ref(out_$i120, 1));
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i119);
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$i119 := $mul.i32(out_$i118, 8);
    goto corral_source_split_6468;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i16.i32(out_$i114);
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p115, 12);
    goto corral_source_split_6464;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref($add.ref(in_$p2, $mul.ref(0, 26)), $mul.ref(2, 1));
    goto corral_source_split_6463;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688 := mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0, in_$p1, in_$p2, in_$i110, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i114, out_$i145, out_$i146, out_$p612, out_$p613, out_$p614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$p621, out_$p622, out_$p623, out_$p624, out_$p625, out_$i626, out_$i627, out_$i628, out_$i629, out_$p630, out_$i631, out_$p632, out_$p633, out_$p634, out_$p635, out_$p636, out_$i637, out_$i638, out_$i639, out_$i640, out_$p641, out_$i642, out_$p643, out_$p644, out_$p645, out_$p646, out_$p647, out_$i648, out_$i649, out_$i650, out_$i651, out_$p652, out_$i653, out_$p654, out_$p655, out_$p656, out_$p657, out_$p658, out_$i659, out_$i660, out_$i661, out_$i662, out_$p663, out_$i664, out_$p665, out_$p666, out_$p667, out_$p668, out_$p669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i675, out_$p676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i683, out_$i684, out_$p685, out_$i686, out_$p687, out_$p688);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_hw_xfer_msg_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i110: i32, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i64, in_$p121: ref, in_$i122: i8, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i32, in_$i127: i8, in_$i128: i32, in_$i129: i1, in_$i140: i32, in_$i141: i32, in_$i142: i16, in_$i143: i32, in_$i144: i1, in_$i114: i16, in_$i145: i16, in_$i146: i32, in_$p612: ref, in_$p613: ref, in_$p614: ref, in_$i615: i32, in_$i616: i32, in_$i617: i32, in_$i618: i64, in_$p619: ref, in_$i620: i8, in_$p621: ref, in_$p622: ref, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i627: i32, in_$i628: i32, in_$i629: i64, in_$p630: ref, in_$i631: i8, in_$p632: ref, in_$p633: ref, in_$p634: ref, in_$p635: ref, in_$p636: ref, in_$i637: i32, in_$i638: i32, in_$i639: i32, in_$i640: i64, in_$p641: ref, in_$i642: i8, in_$p643: ref, in_$p644: ref, in_$p645: ref, in_$p646: ref, in_$p647: ref, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i64, in_$p652: ref, in_$i653: i8, in_$p654: ref, in_$p655: ref, in_$p656: ref, in_$p657: ref, in_$p658: ref, in_$i659: i32, in_$i660: i32, in_$i661: i32, in_$i662: i64, in_$p663: ref, in_$i664: i8, in_$p665: ref, in_$p666: ref, in_$p667: ref, in_$p668: ref, in_$p669: ref, in_$i670: i32, in_$i671: i32, in_$i672: i32, in_$i673: i64, in_$p674: ref, in_$i675: i8, in_$p676: ref, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i32, in_$i683: i32, in_$i684: i64, in_$p685: ref, in_$i686: i8, in_$p687: ref, in_$p688: ref) returns (out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i64, out_$p121: ref, out_$i122: i8, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i32, out_$i127: i8, out_$i128: i32, out_$i129: i1, out_$i140: i32, out_$i141: i32, out_$i142: i16, out_$i143: i32, out_$i144: i1, out_$i114: i16, out_$i145: i16, out_$i146: i32, out_$p612: ref, out_$p613: ref, out_$p614: ref, out_$i615: i32, out_$i616: i32, out_$i617: i32, out_$i618: i64, out_$p619: ref, out_$i620: i8, out_$p621: ref, out_$p622: ref, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i627: i32, out_$i628: i32, out_$i629: i64, out_$p630: ref, out_$i631: i8, out_$p632: ref, out_$p633: ref, out_$p634: ref, out_$p635: ref, out_$p636: ref, out_$i637: i32, out_$i638: i32, out_$i639: i32, out_$i640: i64, out_$p641: ref, out_$i642: i8, out_$p643: ref, out_$p644: ref, out_$p645: ref, out_$p646: ref, out_$p647: ref, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i64, out_$p652: ref, out_$i653: i8, out_$p654: ref, out_$p655: ref, out_$p656: ref, out_$p657: ref, out_$p658: ref, out_$i659: i32, out_$i660: i32, out_$i661: i32, out_$i662: i64, out_$p663: ref, out_$i664: i8, out_$p665: ref, out_$p666: ref, out_$p667: ref, out_$p668: ref, out_$p669: ref, out_$i670: i32, out_$i671: i32, out_$i672: i32, out_$i673: i64, out_$p674: ref, out_$i675: i8, out_$p676: ref, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i32, out_$i683: i32, out_$i684: i64, out_$p685: ref, out_$i686: i8, out_$p687: ref, out_$p688: ref);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0: ref, in_$p1: ref, in_$p108: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i129: i1, in_$i130: i32, in_$i132: i32, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$i113: i32, in_$i136: i32, in_vslice_dummy_var_278: i32) returns (out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i129: i1, out_$i130: i32, out_$i132: i32, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$i113: i32, out_$i136: i32, out_vslice_dummy_var_278: i32)
{

  entry:
    out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_278 := in_$p114, in_$p115, in_$i116, in_$p117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i129, in_$i130, in_$i132, in_$i133, in_$i134, in_$i135, in_$i113, in_$i136, in_vslice_dummy_var_278;
    goto $bb76, exit;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  $bb87:
    assume out_$i135 == 1;
    assume {:verifier.code 0} true;
    out_$i113 := out_$i132;
    goto $bb87_dummy;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    out_$i136 := out_$i121;
    assume true;
    goto $bb87;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    out_$i135 := $sgt.i32(out_$i134, out_$i132);
    goto corral_source_split_7633;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i16.i32(out_$i133);
    goto corral_source_split_7632;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i16($M.0, in_$p108);
    goto corral_source_split_7631;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i132 := $add.i32(out_$i113, 1);
    call {:si_unique_call 1110} {:cexpr "i"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_7630;

  $bb85:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i130 := out_$i121;
    assume true;
    goto $bb85;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i123, 0);
    goto corral_source_split_7625;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_vslice_dummy_var_278 := printk.ref.ref.i32.i32(.str.4, .str.141, out_$i121, 354);
    goto corral_source_split_7623;

  $bb81:
    assume out_$i127 == 1;
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    out_$i127 := $ne.i32(out_$i126, 0);
    goto corral_source_split_7620;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    out_$i126 := $and.i32(out_$i125, 16);
    goto corral_source_split_7619;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    out_$i125 := $M.1;
    goto corral_source_split_7618;

  $bb78:
    assume out_$i124 == 1;
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    out_$i124 := $ne.i32(out_$i123, 0);
    goto corral_source_split_7615;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i1.i32(out_$i122);
    call {:si_unique_call 1107} {:cexpr "__ret___5"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_7614;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i121, 0);
    goto corral_source_split_7613;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} out_$i121 := mxl111sf_i2c_bitbang_sendbyte(in_$p0, out_$i120);
    call {:si_unique_call 1106} {:cexpr "ret"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_7612;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i8(out_$i119);
    goto corral_source_split_7611;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i8.i32(out_$i118);
    goto corral_source_split_7610;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i8($M.0, out_$p117);
    goto corral_source_split_7609;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p115, $mul.ref(out_$i116, 1));
    goto corral_source_split_7608;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    out_$i116 := $sext.i32.i64(out_$i113);
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_7606;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i124 == 1);
    goto $bb80;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i127 == 1);
    goto $bb80;

  $bb87_dummy:
    call {:si_unique_call 1} out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_278 := mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0, in_$p1, in_$p108, out_$p114, out_$p115, out_$i116, out_$p117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i129, out_$i130, out_$i132, out_$i133, out_$i134, out_$i135, out_$i113, out_$i136, out_vslice_dummy_var_278);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_sw_xfer_msg_loop_$bb76(in_$p0: ref, in_$p1: ref, in_$p108: ref, in_$p114: ref, in_$p115: ref, in_$i116: i64, in_$p117: ref, in_$i118: i8, in_$i119: i32, in_$i120: i8, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i32, in_$i126: i32, in_$i127: i1, in_$i129: i1, in_$i130: i32, in_$i132: i32, in_$i133: i16, in_$i134: i32, in_$i135: i1, in_$i113: i32, in_$i136: i32, in_vslice_dummy_var_278: i32) returns (out_$p114: ref, out_$p115: ref, out_$i116: i64, out_$p117: ref, out_$i118: i8, out_$i119: i32, out_$i120: i8, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i32, out_$i126: i32, out_$i127: i1, out_$i129: i1, out_$i130: i32, out_$i132: i32, out_$i133: i16, out_$i134: i32, out_$i135: i1, out_$i113: i32, out_$i136: i32, out_vslice_dummy_var_278: i32);
  modifies $M.3, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i58: i1, in_$i59: i32, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$i45: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_272: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i58: i1, out_$i59: i32, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$i45: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_272: i32)
{

  entry:
    out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_270, out_vslice_dummy_var_272 := in_$p46, in_$p47, in_$i48, in_$p49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i58, in_$i59, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i67, in_$i68, in_$i69, in_$i70, in_$i45, in_vslice_dummy_var_270, in_vslice_dummy_var_272;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  $bb42:
    assume out_$i70 == 1;
    assume {:verifier.code 0} true;
    out_$i45 := out_$i67;
    goto $bb42_dummy;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$i70 := $sgt.i32(out_$i69, out_$i67);
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.0, in_$p41);
    goto corral_source_split_7531;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i67 := $add.i32(out_$i45, 1);
    call {:si_unique_call 1093} {:cexpr "i"} boogie_si_record_i32(out_$i67);
    goto corral_source_split_7530;

  $bb40:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} out_vslice_dummy_var_272 := mxl111sf_i2c_ack(in_$p0);
    goto corral_source_split_7528;

  $bb39:
    assume out_$i65 == 1;
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$i65 := $sgt.i32(out_$i64, out_$i45);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i63, $sub.i32(0, 1));
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i62);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i16($M.0, out_$p61);
    goto corral_source_split_7522;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_7521;

  $bb37:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    out_$i59 := out_$i50;
    assume true;
    goto $bb37;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i52, 0);
    goto corral_source_split_7516;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} out_vslice_dummy_var_270 := printk.ref.ref.i32.i32(.str.4, .str.141, out_$i50, 323);
    goto corral_source_split_7514;

  $bb33:
    assume out_$i56 == 1;
    goto corral_source_split_7513;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    out_$i56 := $ne.i32(out_$i55, 0);
    goto corral_source_split_7511;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    out_$i55 := $and.i32(out_$i54, 16);
    goto corral_source_split_7510;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    out_$i54 := $M.1;
    goto corral_source_split_7509;

  $bb30:
    assume out_$i53 == 1;
    goto corral_source_split_7508;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i52, 0);
    goto corral_source_split_7506;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i1.i32(out_$i51);
    call {:si_unique_call 1089} {:cexpr "__ret___1"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_7505;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i50, 0);
    goto corral_source_split_7504;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} out_$i50 := mxl111sf_i2c_bitbang_recvbyte(in_$p0, out_$p49);
    call {:si_unique_call 1088} {:cexpr "ret"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_7503;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref(out_$p47, $mul.ref(out_$i48, 1));
    goto corral_source_split_7502;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_7501;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    out_$p47 := $load.ref($M.0, out_$p46);
    goto corral_source_split_7500;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_7499;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb32;

  $bb34:
    assume {:verifier.code 0} true;
    assume !(out_$i56 == 1);
    goto $bb32;

  $bb42_dummy:
    call {:si_unique_call 1} out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_270, out_vslice_dummy_var_272 := mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0, in_$p1, in_$p41, out_$p46, out_$p47, out_$i48, out_$p49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i67, out_$i68, out_$i69, out_$i70, out_$i45, out_vslice_dummy_var_270, out_vslice_dummy_var_272);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_sw_xfer_msg_loop_$bb28(in_$p0: ref, in_$p1: ref, in_$p41: ref, in_$p46: ref, in_$p47: ref, in_$i48: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$i55: i32, in_$i56: i1, in_$i58: i1, in_$i59: i32, in_$p61: ref, in_$i62: i16, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i67: i32, in_$i68: i16, in_$i69: i32, in_$i70: i1, in_$i45: i32, in_vslice_dummy_var_270: i32, in_vslice_dummy_var_272: i32) returns (out_$p46: ref, out_$p47: ref, out_$i48: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$i55: i32, out_$i56: i1, out_$i58: i1, out_$i59: i32, out_$p61: ref, out_$i62: i16, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i67: i32, out_$i68: i16, out_$i69: i32, out_$i70: i1, out_$i45: i32, out_vslice_dummy_var_270: i32, out_vslice_dummy_var_272: i32);
  modifies $M.3, $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation mxl111sf_i2c_readagain_loop_$bb31(in_$p2: ref, in_$p4: ref, in_$i56: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i85: i32, in_$i86: i32, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i58: i8, in_vslice_dummy_var_361: i32) returns (out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i85: i32, out_$i86: i32, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i58: i8, out_vslice_dummy_var_361: i32)
{

  entry:
    out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_361 := in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$p66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i58, in_vslice_dummy_var_361;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8998;

  $bb36:
    assume out_$i89 == 1;
    assume {:verifier.code 0} true;
    out_$i58 := out_$i87;
    goto $bb36_dummy;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i88, in_$i56);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_9033;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i32.i8(out_$i86);
    call {:si_unique_call 1330} {:cexpr "i"} boogie_si_record_i8(out_$i87);
    goto corral_source_split_9032;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i85, 1);
    goto corral_source_split_9031;

  $bb35:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i58);
    goto corral_source_split_9030;

  $bb34:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto $bb35;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} out_vslice_dummy_var_361 := printk.ref.ref.i32.i32(.str.138, .str.136, out_$i76, out_$i83);
    goto corral_source_split_9028;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i8.i32(out_$i82);
    goto corral_source_split_9027;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i8($M.32, out_$p81);
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i80, 1));
    goto corral_source_split_9025;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i79);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$i79 := $add.i32(out_$i78, 2);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i78 := $mul.i32(out_$i77, 3);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i8.i32(out_$i58);
    goto corral_source_split_9021;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    out_$i76 := $zext.i8.i32(out_$i75);
    goto corral_source_split_9020;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i8($M.32, out_$p74);
    goto corral_source_split_9019;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i73, 1));
    goto corral_source_split_9018;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i72);
    goto corral_source_split_9017;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    out_$i72 := $add.i32(out_$i71, 1);
    goto corral_source_split_9016;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    out_$i71 := $mul.i32(out_$i70, 3);
    goto corral_source_split_9015;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i58);
    goto corral_source_split_9014;

  $bb33:
    assume out_$i69 == 1;
    goto corral_source_split_9013;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_9011;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i67, 4);
    goto corral_source_split_9010;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$i67 := $M.1;
    goto corral_source_split_9009;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $M.30 := $store.i8($M.30, out_$p66, out_$i64);
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref(in_$p2, $mul.ref(out_$i65, 1));
    goto corral_source_split_9007;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i64(out_$i58);
    goto corral_source_split_9006;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.32, out_$p63);
    goto corral_source_split_9005;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p4, $mul.ref(0, 24)), $mul.ref(out_$i62, 1));
    goto corral_source_split_9004;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_9003;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, 1);
    goto corral_source_split_9002;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    out_$i60 := $mul.i32(out_$i59, 3);
    goto corral_source_split_9001;

  $bb32:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i8.i32(out_$i58);
    goto corral_source_split_9000;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb36_dummy:
    call {:si_unique_call 1} out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_361 := mxl111sf_i2c_readagain_loop_$bb31(in_$p2, in_$p4, in_$i56, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$p66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i58, out_vslice_dummy_var_361);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb31(in_$p2: ref, in_$p4: ref, in_$i56: i32, in_$i59: i32, in_$i60: i32, in_$i61: i32, in_$i62: i64, in_$p63: ref, in_$i64: i8, in_$i65: i64, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i64, in_$p74: ref, in_$i75: i8, in_$i76: i32, in_$i77: i32, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i8, in_$i83: i32, in_$i85: i32, in_$i86: i32, in_$i87: i8, in_$i88: i32, in_$i89: i1, in_$i58: i8, in_vslice_dummy_var_361: i32) returns (out_$i59: i32, out_$i60: i32, out_$i61: i32, out_$i62: i64, out_$p63: ref, out_$i64: i8, out_$i65: i64, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i64, out_$p74: ref, out_$i75: i8, out_$i76: i32, out_$i77: i32, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i8, out_$i83: i32, out_$i85: i32, out_$i86: i32, out_$i87: i8, out_$i88: i32, out_$i89: i1, out_$i58: i8, out_vslice_dummy_var_361: i32);
  modifies $M.30;



implementation mxl111sf_i2c_readagain_loop_$bb18(in_$p3: ref, in_$i22: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i24: i8) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i24: i8)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24 := in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i24;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_8947;

  $bb20:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$i24 := out_$i42;
    goto $bb20_dummy;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    out_$i44 := $slt.i32(out_$i43, in_$i22);
    goto corral_source_split_8971;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i8.i32(out_$i42);
    goto corral_source_split_8970;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i8(out_$i41);
    call {:si_unique_call 1324} {:cexpr "i"} boogie_si_record_i8(out_$i42);
    goto corral_source_split_8969;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i40, 1);
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8967;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p39, 0);
    goto corral_source_split_8966;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i38, 1));
    goto corral_source_split_8965;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i37);
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    out_$i37 := $add.i32(out_$i36, 4);
    goto corral_source_split_8963;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$i36 := $mul.i32(out_$i35, 3);
    goto corral_source_split_8962;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8961;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p34, 0);
    goto corral_source_split_8960;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i33, 1));
    goto corral_source_split_8959;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    out_$i33 := $sext.i32.i64(out_$i32);
    goto corral_source_split_8958;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    out_$i32 := $mul.i32(out_$i31, 3);
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i30, 1);
    goto corral_source_split_8956;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p29, 12);
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p3, $mul.ref(0, 26)), $mul.ref(out_$i28, 1));
    goto corral_source_split_8953;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    out_$i28 := $sext.i32.i64(out_$i27);
    goto corral_source_split_8952;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i26, 2);
    goto corral_source_split_8951;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    out_$i26 := $mul.i32(out_$i25, 3);
    goto corral_source_split_8950;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i8.i32(out_$i24);
    goto corral_source_split_8949;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24 := mxl111sf_i2c_readagain_loop_$bb18(in_$p3, in_$i22, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i24);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb18(in_$p3: ref, in_$i22: i32, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$i30: i32, in_$i31: i32, in_$i32: i32, in_$i33: i64, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i64, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i8, in_$i43: i32, in_$i44: i1, in_$i24: i8) returns (out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$i30: i32, out_$i31: i32, out_$i32: i32, out_$i33: i64, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i64, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i8, out_$i43: i32, out_$i44: i1, out_$i24: i8);
  modifies $M.0;



implementation mxl111sf_i2c_readagain_loop_$bb4(in_$p0: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i10: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1) returns (out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i10: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1)
{

  entry:
    out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18 := in_$i11, in_$i12, in_$i13, in_$i10, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_8914;

  $bb6:
    assume out_$i13 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i16;
    goto $bb6_dummy;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_8923;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i8.i32(out_$i11);
    goto corral_source_split_8922;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} out_$i11 := mxl111sf_i2c_check_fifo(in_$p0);
    call {:si_unique_call 1323} {:cexpr "fifo_status"} boogie_si_record_i8(out_$i11);
    goto corral_source_split_8921;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i18 == 1;
    goto corral_source_split_8927;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    out_$i18 := $ule.i32(out_$i17, 4);
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i8.i32(out_$i10);
    goto corral_source_split_8918;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$i16 := $trunc.i32.i8(out_$i15);
    call {:si_unique_call 1321} {:cexpr "i"} boogie_si_record_i8(out_$i16);
    goto corral_source_split_8917;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i14, 1);
    goto corral_source_split_8916;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i8.i32(out_$i10);
    goto corral_source_split_8915;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18 := mxl111sf_i2c_readagain_loop_$bb4(in_$p0, out_$i11, out_$i12, out_$i13, out_$i10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18);
    return;

  exit:
    return;
}



procedure mxl111sf_i2c_readagain_loop_$bb4(in_$p0: ref, in_$i11: i8, in_$i12: i32, in_$i13: i1, in_$i10: i8, in_$i14: i32, in_$i15: i32, in_$i16: i8, in_$i17: i32, in_$i18: i1) returns (out_$i11: i8, out_$i12: i32, out_$i13: i1, out_$i10: i8, out_$i14: i32, out_$i15: i32, out_$i16: i8, out_$i17: i32, out_$i18: i1);
  modifies $M.0, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.11, $CurrAddr;



implementation main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$i273: i32, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i8, in_$i295: i32, in_$i296: i8, in_$i297: i8, in_$i298: i32, in_$i299: i8, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i312: i32, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i8, in_$i333: i32, in_$i334: i8, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i345: i32, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i1, in_$i352: i1, in_$i353: i1, in_$i354: i1, in_$i355: i1, in_$i356: i1, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i32, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$p406: ref, in_$p407: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$i421: i32, in_$i422: i1, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i429: i32, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$i434: i32, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i1, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$p445: ref, in_$i446: i32, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i452: i32, in_$i453: i1, in_$i454: i32, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i1, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$p464: ref, in_$i465: i32, in_$i466: i32, in_$i467: i1, in_$i468: i32, in_$i469: i32, in_$i470: i32, in_$i471: i1, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i475: i32, in_$i476: i32, in_$i477: i32, in_$i478: i1, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i482: i32, in_$i483: i32, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i494: i32, in_$i495: i32, in_$i496: i1, in_$i497: i32, in_$i498: i1, in_$i499: i32, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i1, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i32, in_$i518: i1, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i534: i32, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i539: i32, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i550: i32, in_$i551: i1, in_$p552: ref, in_$i554: i32, in_$i555: i1, in_$p556: ref, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$i564: i32, in_$i565: i1, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$i570: i32, in_$i571: i1, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$i576: i32, in_$i577: i1, in_$i579: i32, in_$i580: i32, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i589: i32, in_$i590: i32, in_$i591: i32, in_$i592: i1, in_$i593: i32, in_$i594: i1, in_$i595: i1, in_$i596: i1, in_$i597: i32, in_$i598: i1, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i602: i1, in_$i603: i32, in_$i604: i32, in_$i605: i1, in_$i606: i32, in_$i607: i1, in_$i608: i32, in_$i609: i1, in_$i610: i32, in_$i611: i1, in_$i612: i1, in_$i613: i1, in_$i614: i1, in_$i615: i1, in_$i616: i1, in_$i617: i32, in_$i618: i1, in_$p619: ref, in_$i620: i8, in_$i621: i32, in_$i622: i8, in_$i623: i8, in_$i624: i32, in_$i625: i8, in_$i627: i32, in_$i628: i1, in_$p629: ref, in_$p630: ref, in_$i632: i32, in_$i633: i1, in_$p634: ref, in_$p635: ref, in_$i637: i32, in_$i638: i1, in_$p639: ref, in_$i640: i8, in_$i641: i32, in_$i642: i8, in_$p643: ref, in_$i645: i32, in_$i646: i1, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i1, in_$i653: i32, in_$i654: i32, in_$i655: i32, in_$i656: i1, in_$i657: i32, in_$i658: i1, in_$i659: i1, in_$i660: i1, in_$i661: i1, in_$i662: i1, in_$i663: i1, in_$i664: i1, in_$i665: i1, in_$i666: i32, in_$i667: i1, in_$p668: ref, in_$i669: i32, in_$i670: i32, in_$i671: i1, in_$i672: i32, in_$i673: i1, in_$p674: ref, in_$i676: i32, in_$i677: i1, in_$p678: ref, in_$i680: i32, in_$i681: i1, in_$p682: ref, in_$i684: i32, in_$i685: i1, in_$p686: ref, in_$i687: i32, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$i692: i32, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$i697: i32, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i717: i32, in_$i718: i1, in_$p719: ref, in_$p720: ref, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$p726: ref, in_$p727: ref, in_$i729: i32, in_$i730: i1, in_$i732: i32, in_$i733: i32, in_$i734: i32, in_$i735: i1, in_$i737: i32, in_$i738: i32, in_$i739: i32, in_$i740: i1, in_$i742: i32, in_$i743: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32, in_vslice_dummy_var_367: i32, in_vslice_dummy_var_368: i32, in_vslice_dummy_var_369: i32, in_vslice_dummy_var_370: i32, in_vslice_dummy_var_371: i32, in_vslice_dummy_var_372: i32, in_vslice_dummy_var_373: i32, in_vslice_dummy_var_374: i32, in_vslice_dummy_var_375: i32, in_vslice_dummy_var_376: i32, in_vslice_dummy_var_377: i32, in_vslice_dummy_var_378: i32, in_vslice_dummy_var_379: i32, in_vslice_dummy_var_380: i32, in_vslice_dummy_var_381: i32, in_vslice_dummy_var_382: i32, in_vslice_dummy_var_383: i32, in_vslice_dummy_var_384: i32, in_vslice_dummy_var_385: i32, in_vslice_dummy_var_386: i32, in_vslice_dummy_var_387: i32, in_vslice_dummy_var_388: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_390: i32, in_vslice_dummy_var_391: i32, in_vslice_dummy_var_392: i32, in_vslice_dummy_var_393: i32, in_vslice_dummy_var_394: i32, in_vslice_dummy_var_395: i32, in_vslice_dummy_var_396: i32, in_vslice_dummy_var_397: i32, in_vslice_dummy_var_398: i32, in_vslice_dummy_var_399: i32, in_vslice_dummy_var_400: i32, in_vslice_dummy_var_401: i32, in_vslice_dummy_var_402: i32, in_vslice_dummy_var_403: i32, in_vslice_dummy_var_404: i32, in_vslice_dummy_var_405: i32, in_vslice_dummy_var_406: i32, in_vslice_dummy_var_407: i32, in_vslice_dummy_var_408: i32, in_vslice_dummy_var_409: i32, in_vslice_dummy_var_410: i32, in_vslice_dummy_var_411: i32, in_vslice_dummy_var_412: i32, in_vslice_dummy_var_413: i32, in_vslice_dummy_var_414: i32, in_vslice_dummy_var_415: i32, in_vslice_dummy_var_416: i32, in_vslice_dummy_var_417: i32, in_vslice_dummy_var_418: i32, in_vslice_dummy_var_419: i32, in_vslice_dummy_var_420: i32, in_vslice_dummy_var_421: i32, in_vslice_dummy_var_422: i32, in_vslice_dummy_var_423: i32, in_vslice_dummy_var_424: i32, in_vslice_dummy_var_425: i32, in_vslice_dummy_var_426: i32, in_vslice_dummy_var_427: i32, in_vslice_dummy_var_428: i32, in_vslice_dummy_var_429: i32, in_vslice_dummy_var_430: i32, in_vslice_dummy_var_431: i32, in_vslice_dummy_var_432: i32, in_vslice_dummy_var_433: i32, in_vslice_dummy_var_434: i32, in_vslice_dummy_var_435: i32, in_vslice_dummy_var_436: i32, in_vslice_dummy_var_437: i32, in_vslice_dummy_var_438: i32, in_vslice_dummy_var_439: i32, in_vslice_dummy_var_440: i32, in_vslice_dummy_var_441: i32, in_vslice_dummy_var_442: i32, in_vslice_dummy_var_443: i32, in_vslice_dummy_var_444: i32, in_vslice_dummy_var_445: i32, in_vslice_dummy_var_446: i32, in_vslice_dummy_var_447: i32, in_vslice_dummy_var_448: i32, in_vslice_dummy_var_449: i32, in_vslice_dummy_var_450: i32, in_vslice_dummy_var_451: i32, in_vslice_dummy_var_452: i32, in_vslice_dummy_var_453: i32, in_vslice_dummy_var_454: i32, in_vslice_dummy_var_455: i32, in_vslice_dummy_var_456: i32, in_vslice_dummy_var_457: i32, in_vslice_dummy_var_458: i32, in_vslice_dummy_var_459: i32, in_vslice_dummy_var_460: i32, in_vslice_dummy_var_461: i32, in_vslice_dummy_var_462: i32, in_vslice_dummy_var_463: i32, in_vslice_dummy_var_464: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i32, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i32, in_vslice_dummy_var_472: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$i273: i32, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i8, out_$i295: i32, out_$i296: i8, out_$i297: i8, out_$i298: i32, out_$i299: i8, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i312: i32, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i8, out_$i333: i32, out_$i334: i8, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i345: i32, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i1, out_$i352: i1, out_$i353: i1, out_$i354: i1, out_$i355: i1, out_$i356: i1, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i32, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$p406: ref, out_$p407: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$i421: i32, out_$i422: i1, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i429: i32, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$i434: i32, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i1, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$p445: ref, out_$i446: i32, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i452: i32, out_$i453: i1, out_$i454: i32, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i1, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$p464: ref, out_$i465: i32, out_$i466: i32, out_$i467: i1, out_$i468: i32, out_$i469: i32, out_$i470: i32, out_$i471: i1, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i475: i32, out_$i476: i32, out_$i477: i32, out_$i478: i1, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i482: i32, out_$i483: i32, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i494: i32, out_$i495: i32, out_$i496: i1, out_$i497: i32, out_$i498: i1, out_$i499: i32, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i1, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i32, out_$i518: i1, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i534: i32, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i539: i32, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i550: i32, out_$i551: i1, out_$p552: ref, out_$i554: i32, out_$i555: i1, out_$p556: ref, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$i564: i32, out_$i565: i1, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$i570: i32, out_$i571: i1, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$i576: i32, out_$i577: i1, out_$i579: i32, out_$i580: i32, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i589: i32, out_$i590: i32, out_$i591: i32, out_$i592: i1, out_$i593: i32, out_$i594: i1, out_$i595: i1, out_$i596: i1, out_$i597: i32, out_$i598: i1, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i602: i1, out_$i603: i32, out_$i604: i32, out_$i605: i1, out_$i606: i32, out_$i607: i1, out_$i608: i32, out_$i609: i1, out_$i610: i32, out_$i611: i1, out_$i612: i1, out_$i613: i1, out_$i614: i1, out_$i615: i1, out_$i616: i1, out_$i617: i32, out_$i618: i1, out_$p619: ref, out_$i620: i8, out_$i621: i32, out_$i622: i8, out_$i623: i8, out_$i624: i32, out_$i625: i8, out_$i627: i32, out_$i628: i1, out_$p629: ref, out_$p630: ref, out_$i632: i32, out_$i633: i1, out_$p634: ref, out_$p635: ref, out_$i637: i32, out_$i638: i1, out_$p639: ref, out_$i640: i8, out_$i641: i32, out_$i642: i8, out_$p643: ref, out_$i645: i32, out_$i646: i1, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i1, out_$i653: i32, out_$i654: i32, out_$i655: i32, out_$i656: i1, out_$i657: i32, out_$i658: i1, out_$i659: i1, out_$i660: i1, out_$i661: i1, out_$i662: i1, out_$i663: i1, out_$i664: i1, out_$i665: i1, out_$i666: i32, out_$i667: i1, out_$p668: ref, out_$i669: i32, out_$i670: i32, out_$i671: i1, out_$i672: i32, out_$i673: i1, out_$p674: ref, out_$i676: i32, out_$i677: i1, out_$p678: ref, out_$i680: i32, out_$i681: i1, out_$p682: ref, out_$i684: i32, out_$i685: i1, out_$p686: ref, out_$i687: i32, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$i692: i32, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$i697: i32, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i717: i32, out_$i718: i1, out_$p719: ref, out_$p720: ref, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$p726: ref, out_$p727: ref, out_$i729: i32, out_$i730: i1, out_$i732: i32, out_$i733: i32, out_$i734: i32, out_$i735: i1, out_$i737: i32, out_$i738: i32, out_$i739: i32, out_$i740: i1, out_$i742: i32, out_$i743: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32, out_vslice_dummy_var_367: i32, out_vslice_dummy_var_368: i32, out_vslice_dummy_var_369: i32, out_vslice_dummy_var_370: i32, out_vslice_dummy_var_371: i32, out_vslice_dummy_var_372: i32, out_vslice_dummy_var_373: i32, out_vslice_dummy_var_374: i32, out_vslice_dummy_var_375: i32, out_vslice_dummy_var_376: i32, out_vslice_dummy_var_377: i32, out_vslice_dummy_var_378: i32, out_vslice_dummy_var_379: i32, out_vslice_dummy_var_380: i32, out_vslice_dummy_var_381: i32, out_vslice_dummy_var_382: i32, out_vslice_dummy_var_383: i32, out_vslice_dummy_var_384: i32, out_vslice_dummy_var_385: i32, out_vslice_dummy_var_386: i32, out_vslice_dummy_var_387: i32, out_vslice_dummy_var_388: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_390: i32, out_vslice_dummy_var_391: i32, out_vslice_dummy_var_392: i32, out_vslice_dummy_var_393: i32, out_vslice_dummy_var_394: i32, out_vslice_dummy_var_395: i32, out_vslice_dummy_var_396: i32, out_vslice_dummy_var_397: i32, out_vslice_dummy_var_398: i32, out_vslice_dummy_var_399: i32, out_vslice_dummy_var_400: i32, out_vslice_dummy_var_401: i32, out_vslice_dummy_var_402: i32, out_vslice_dummy_var_403: i32, out_vslice_dummy_var_404: i32, out_vslice_dummy_var_405: i32, out_vslice_dummy_var_406: i32, out_vslice_dummy_var_407: i32, out_vslice_dummy_var_408: i32, out_vslice_dummy_var_409: i32, out_vslice_dummy_var_410: i32, out_vslice_dummy_var_411: i32, out_vslice_dummy_var_412: i32, out_vslice_dummy_var_413: i32, out_vslice_dummy_var_414: i32, out_vslice_dummy_var_415: i32, out_vslice_dummy_var_416: i32, out_vslice_dummy_var_417: i32, out_vslice_dummy_var_418: i32, out_vslice_dummy_var_419: i32, out_vslice_dummy_var_420: i32, out_vslice_dummy_var_421: i32, out_vslice_dummy_var_422: i32, out_vslice_dummy_var_423: i32, out_vslice_dummy_var_424: i32, out_vslice_dummy_var_425: i32, out_vslice_dummy_var_426: i32, out_vslice_dummy_var_427: i32, out_vslice_dummy_var_428: i32, out_vslice_dummy_var_429: i32, out_vslice_dummy_var_430: i32, out_vslice_dummy_var_431: i32, out_vslice_dummy_var_432: i32, out_vslice_dummy_var_433: i32, out_vslice_dummy_var_434: i32, out_vslice_dummy_var_435: i32, out_vslice_dummy_var_436: i32, out_vslice_dummy_var_437: i32, out_vslice_dummy_var_438: i32, out_vslice_dummy_var_439: i32, out_vslice_dummy_var_440: i32, out_vslice_dummy_var_441: i32, out_vslice_dummy_var_442: i32, out_vslice_dummy_var_443: i32, out_vslice_dummy_var_444: i32, out_vslice_dummy_var_445: i32, out_vslice_dummy_var_446: i32, out_vslice_dummy_var_447: i32, out_vslice_dummy_var_448: i32, out_vslice_dummy_var_449: i32, out_vslice_dummy_var_450: i32, out_vslice_dummy_var_451: i32, out_vslice_dummy_var_452: i32, out_vslice_dummy_var_453: i32, out_vslice_dummy_var_454: i32, out_vslice_dummy_var_455: i32, out_vslice_dummy_var_456: i32, out_vslice_dummy_var_457: i32, out_vslice_dummy_var_458: i32, out_vslice_dummy_var_459: i32, out_vslice_dummy_var_460: i32, out_vslice_dummy_var_461: i32, out_vslice_dummy_var_462: i32, out_vslice_dummy_var_463: i32, out_vslice_dummy_var_464: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i32, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i32, out_vslice_dummy_var_472: i32)
{

  entry:
    out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$p54, out_$i55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181, out_$i182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$i253, out_$i254, out_$p255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$p406, out_$p407, out_$i409, out_$i410, out_$p411, out_$p412, out_$p413, out_$i415, out_$i416, out_$p417, out_$p418, out_$p419, out_$i421, out_$i422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i429, out_$i430, out_$i431, out_$i432, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$i539, out_$i541, out_$i542, out_$p543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i554, out_$i555, out_$p556, out_$i558, out_$i559, out_$p560, out_$p561, out_$p562, out_$i564, out_$i565, out_$p566, out_$p567, out_$p568, out_$i570, out_$i571, out_$p572, out_$p573, out_$p574, out_$i576, out_$i577, out_$i579, out_$i580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i627, out_$i628, out_$p629, out_$p630, out_$i632, out_$i633, out_$p634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$i662, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$i669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i676, out_$i677, out_$p678, out_$i680, out_$i681, out_$p682, out_$i684, out_$i685, out_$p686, out_$i687, out_$i689, out_$i690, out_$p691, out_$i692, out_$i694, out_$i695, out_$p696, out_$i697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$p714, out_$p715, out_$i717, out_$i718, out_$p719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$p727, out_$i729, out_$i730, out_$i732, out_$i733, out_$i734, out_$i735, out_$i737, out_$i738, out_$i739, out_$i740, out_$i742, out_$i743, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376, out_vslice_dummy_var_377, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400, out_vslice_dummy_var_401, out_vslice_dummy_var_402, out_vslice_dummy_var_403, out_vslice_dummy_var_404, out_vslice_dummy_var_405, out_vslice_dummy_var_406, out_vslice_dummy_var_407, out_vslice_dummy_var_408, out_vslice_dummy_var_409, out_vslice_dummy_var_410, out_vslice_dummy_var_411, out_vslice_dummy_var_412, out_vslice_dummy_var_413, out_vslice_dummy_var_414, out_vslice_dummy_var_415, out_vslice_dummy_var_416, out_vslice_dummy_var_417, out_vslice_dummy_var_418, out_vslice_dummy_var_419, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472 := in_$i0, in_$i1, in_$i2, in_$i3, in_$i4, in_$i5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$i34, in_$i35, in_$p36, in_$i38, in_$i39, in_$p40, in_$i42, in_$i43, in_$p44, in_$i45, in_$i47, in_$i48, in_$p49, in_$i50, in_$i52, in_$i53, in_$p54, in_$i55, in_$i57, in_$i58, in_$p59, in_$i61, in_$i62, in_$p63, in_$i65, in_$i66, in_$p67, in_$i69, in_$i70, in_$p71, in_$p72, in_$p73, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$i81, in_$i82, in_$p83, in_$p84, in_$p85, in_$i87, in_$i88, in_$i90, in_$i91, in_$i92, in_$i93, in_$i95, in_$i96, in_$i97, in_$i98, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$p115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i123, in_$i124, in_$p125, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i134, in_$i136, in_$i137, in_$p138, in_$i139, in_$i141, in_$i142, in_$p143, in_$i144, in_$i146, in_$i147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$p161, in_$p162, in_$i164, in_$i165, in_$p166, in_$p167, in_$p168, in_$i170, in_$i171, in_$p172, in_$p173, in_$p174, in_$i176, in_$i177, in_$i179, in_$i180, in_$i181, in_$i182, in_$i184, in_$i185, in_$i186, in_$i187, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$p204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i209, in_$p210, in_$i212, in_$i213, in_$p214, in_$i216, in_$i217, in_$p218, in_$i220, in_$i221, in_$p222, in_$i223, in_$i225, in_$i226, in_$p227, in_$i228, in_$i230, in_$i231, in_$p232, in_$i233, in_$i235, in_$i236, in_$p237, in_$i239, in_$i240, in_$p241, in_$i243, in_$i244, in_$p245, in_$i247, in_$i248, in_$p249, in_$p250, in_$p251, in_$i253, in_$i254, in_$p255, in_$p256, in_$p257, in_$i259, in_$i260, in_$p261, in_$p262, in_$p263, in_$i265, in_$i266, in_$i268, in_$i269, in_$i270, in_$i271, in_$i273, in_$i274, in_$i275, in_$i276, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$i292, in_$p293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i301, in_$i302, in_$p303, in_$i305, in_$i306, in_$p307, in_$i309, in_$i310, in_$p311, in_$i312, in_$i314, in_$i315, in_$p316, in_$i317, in_$i319, in_$i320, in_$p321, in_$p322, in_$i324, in_$i325, in_$p326, in_$p327, in_$i329, in_$i330, in_$p331, in_$i332, in_$i333, in_$i334, in_$p335, in_$i337, in_$i338, in_$i340, in_$i341, in_$i342, in_$i343, in_$i345, in_$i346, in_$i347, in_$i348, in_$i349, in_$i350, in_$i351, in_$i352, in_$i353, in_$i354, in_$i355, in_$i356, in_$i357, in_$i358, in_$i359, in_$p360, in_$i361, in_$i362, in_$i363, in_$i364, in_$i365, in_$p366, in_$i368, in_$i369, in_$p370, in_$i372, in_$i373, in_$p374, in_$i376, in_$i377, in_$p378, in_$i379, in_$i381, in_$i382, in_$p383, in_$i384, in_$i386, in_$i387, in_$p388, in_$i389, in_$i391, in_$i392, in_$p393, in_$i395, in_$i396, in_$p397, in_$i399, in_$i400, in_$p401, in_$i403, in_$i404, in_$p405, in_$p406, in_$p407, in_$i409, in_$i410, in_$p411, in_$p412, in_$p413, in_$i415, in_$i416, in_$p417, in_$p418, in_$p419, in_$i421, in_$i422, in_$i424, in_$i425, in_$i426, in_$i427, in_$i429, in_$i430, in_$i431, in_$i432, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$p444, in_$p445, in_$i446, in_$i448, in_$i449, in_$p450, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$p463, in_$p464, in_$i465, in_$i466, in_$i467, in_$i468, in_$i469, in_$i470, in_$i471, in_$i472, in_$i473, in_$p474, in_$i475, in_$i476, in_$i477, in_$i478, in_$i479, in_$i480, in_$p481, in_$i482, in_$i483, in_$i484, in_$i485, in_$p486, in_$i487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$p493, in_$i494, in_$i495, in_$i496, in_$i497, in_$i498, in_$i499, in_$i500, in_$i501, in_$i502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i507, in_$i508, in_$i509, in_$i510, in_$i511, in_$i512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i520, in_$p521, in_$i523, in_$i524, in_$p525, in_$i527, in_$i528, in_$p529, in_$i531, in_$i532, in_$p533, in_$i534, in_$i536, in_$i537, in_$p538, in_$i539, in_$i541, in_$i542, in_$p543, in_$i544, in_$i546, in_$i547, in_$p548, in_$i550, in_$i551, in_$p552, in_$i554, in_$i555, in_$p556, in_$i558, in_$i559, in_$p560, in_$p561, in_$p562, in_$i564, in_$i565, in_$p566, in_$p567, in_$p568, in_$i570, in_$i571, in_$p572, in_$p573, in_$p574, in_$i576, in_$i577, in_$i579, in_$i580, in_$i581, in_$i582, in_$i584, in_$i585, in_$i586, in_$i587, in_$i589, in_$i590, in_$i591, in_$i592, in_$i593, in_$i594, in_$i595, in_$i596, in_$i597, in_$i598, in_$i599, in_$i600, in_$i601, in_$i602, in_$i603, in_$i604, in_$i605, in_$i606, in_$i607, in_$i608, in_$i609, in_$i610, in_$i611, in_$i612, in_$i613, in_$i614, in_$i615, in_$i616, in_$i617, in_$i618, in_$p619, in_$i620, in_$i621, in_$i622, in_$i623, in_$i624, in_$i625, in_$i627, in_$i628, in_$p629, in_$p630, in_$i632, in_$i633, in_$p634, in_$p635, in_$i637, in_$i638, in_$p639, in_$i640, in_$i641, in_$i642, in_$p643, in_$i645, in_$i646, in_$i648, in_$i649, in_$i650, in_$i651, in_$i653, in_$i654, in_$i655, in_$i656, in_$i657, in_$i658, in_$i659, in_$i660, in_$i661, in_$i662, in_$i663, in_$i664, in_$i665, in_$i666, in_$i667, in_$p668, in_$i669, in_$i670, in_$i671, in_$i672, in_$i673, in_$p674, in_$i676, in_$i677, in_$p678, in_$i680, in_$i681, in_$p682, in_$i684, in_$i685, in_$p686, in_$i687, in_$i689, in_$i690, in_$p691, in_$i692, in_$i694, in_$i695, in_$p696, in_$i697, in_$i699, in_$i700, in_$p701, in_$i703, in_$i704, in_$p705, in_$i707, in_$i708, in_$p709, in_$i711, in_$i712, in_$p713, in_$p714, in_$p715, in_$i717, in_$i718, in_$p719, in_$p720, in_$p721, in_$i723, in_$i724, in_$p725, in_$p726, in_$p727, in_$i729, in_$i730, in_$i732, in_$i733, in_$i734, in_$i735, in_$i737, in_$i738, in_$i739, in_$i740, in_$i742, in_$i743, in_vslice_dummy_var_365, in_vslice_dummy_var_366, in_vslice_dummy_var_367, in_vslice_dummy_var_368, in_vslice_dummy_var_369, in_vslice_dummy_var_370, in_vslice_dummy_var_371, in_vslice_dummy_var_372, in_vslice_dummy_var_373, in_vslice_dummy_var_374, in_vslice_dummy_var_375, in_vslice_dummy_var_376, in_vslice_dummy_var_377, in_vslice_dummy_var_378, in_vslice_dummy_var_379, in_vslice_dummy_var_380, in_vslice_dummy_var_381, in_vslice_dummy_var_382, in_vslice_dummy_var_383, in_vslice_dummy_var_384, in_vslice_dummy_var_385, in_vslice_dummy_var_386, in_vslice_dummy_var_387, in_vslice_dummy_var_388, in_vslice_dummy_var_389, in_vslice_dummy_var_390, in_vslice_dummy_var_391, in_vslice_dummy_var_392, in_vslice_dummy_var_393, in_vslice_dummy_var_394, in_vslice_dummy_var_395, in_vslice_dummy_var_396, in_vslice_dummy_var_397, in_vslice_dummy_var_398, in_vslice_dummy_var_399, in_vslice_dummy_var_400, in_vslice_dummy_var_401, in_vslice_dummy_var_402, in_vslice_dummy_var_403, in_vslice_dummy_var_404, in_vslice_dummy_var_405, in_vslice_dummy_var_406, in_vslice_dummy_var_407, in_vslice_dummy_var_408, in_vslice_dummy_var_409, in_vslice_dummy_var_410, in_vslice_dummy_var_411, in_vslice_dummy_var_412, in_vslice_dummy_var_413, in_vslice_dummy_var_414, in_vslice_dummy_var_415, in_vslice_dummy_var_416, in_vslice_dummy_var_417, in_vslice_dummy_var_418, in_vslice_dummy_var_419, in_vslice_dummy_var_420, in_vslice_dummy_var_421, in_vslice_dummy_var_422, in_vslice_dummy_var_423, in_vslice_dummy_var_424, in_vslice_dummy_var_425, in_vslice_dummy_var_426, in_vslice_dummy_var_427, in_vslice_dummy_var_428, in_vslice_dummy_var_429, in_vslice_dummy_var_430, in_vslice_dummy_var_431, in_vslice_dummy_var_432, in_vslice_dummy_var_433, in_vslice_dummy_var_434, in_vslice_dummy_var_435, in_vslice_dummy_var_436, in_vslice_dummy_var_437, in_vslice_dummy_var_438, in_vslice_dummy_var_439, in_vslice_dummy_var_440, in_vslice_dummy_var_441, in_vslice_dummy_var_442, in_vslice_dummy_var_443, in_vslice_dummy_var_444, in_vslice_dummy_var_445, in_vslice_dummy_var_446, in_vslice_dummy_var_447, in_vslice_dummy_var_448, in_vslice_dummy_var_449, in_vslice_dummy_var_450, in_vslice_dummy_var_451, in_vslice_dummy_var_452, in_vslice_dummy_var_453, in_vslice_dummy_var_454, in_vslice_dummy_var_455, in_vslice_dummy_var_456, in_vslice_dummy_var_457, in_vslice_dummy_var_458, in_vslice_dummy_var_459, in_vslice_dummy_var_460, in_vslice_dummy_var_461, in_vslice_dummy_var_462, in_vslice_dummy_var_463, in_vslice_dummy_var_464, in_vslice_dummy_var_465, in_vslice_dummy_var_466, in_vslice_dummy_var_467, in_vslice_dummy_var_468, in_vslice_dummy_var_469, in_vslice_dummy_var_470, in_vslice_dummy_var_471, in_vslice_dummy_var_472;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1358} out_$i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1359} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i0);
    call {:si_unique_call 1360} {:cexpr "tmp"} boogie_si_record_i32(out_$i0);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb102_dummy;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb396:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb29:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1366} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9280;

  $bb50:
    assume out_$i29 == 1;
    goto corral_source_split_9279;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i32(out_$i28, 0);
    goto corral_source_split_9277;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    out_$i28 := $M.46;
    goto corral_source_split_9276;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.46 := out_$i27;
    call {:si_unique_call 1365} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_9275;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_$i27 := mxl111sf_init(out_$p26);
    goto corral_source_split_9274;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    out_$p26 := $M.45;
    goto corral_source_split_9273;

  $bb48:
    assume out_$i25 == 1;
    goto corral_source_split_9272;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i32(out_$i24, 2);
    goto corral_source_split_9270;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    out_$i24 := $M.33;
    goto corral_source_split_9269;

  $bb46:
    assume out_$i23 == 1;
    goto corral_source_split_9268;

  $bb42:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := $eq.i32(out_$i15, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb31:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i15, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_9242:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1361} out_$i15 := __VERIFIER_nondet_int();
    call {:si_unique_call 1362} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i15);
    call {:si_unique_call 1363} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i15);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume out_$i14 == 1;
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i13, 0);
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    out_$i13 := $M.33;
    goto corral_source_split_9239;

  $bb26:
    assume out_$i12 == 1;
    goto corral_source_split_9238;

  $bb24:
    assume out_$i11 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := $eq.i32(out_$i0, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb18:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := $slt.i32(out_$i0, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb3:
    assume out_$i1 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := $slt.i32(out_$i0, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i1 := $slt.i32(out_$i0, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb62:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1372} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1371} out_vslice_dummy_var_367 := mxl111sf_attach_tuner(out_$p40);
    goto corral_source_split_9300;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    out_$p40 := $M.47;
    goto corral_source_split_9299;

  $bb61:
    assume out_$i39 == 1;
    goto corral_source_split_9298;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i38, 2);
    goto corral_source_split_9296;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i38 := $M.33;
    goto corral_source_split_9295;

  $bb59:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1370} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9293;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} out_vslice_dummy_var_366 := mxl111sf_attach_tuner(out_$p36);
    goto corral_source_split_9292;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    out_$p36 := $M.47;
    goto corral_source_split_9291;

  $bb58:
    assume out_$i35 == 1;
    goto corral_source_split_9290;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    out_$i35 := $eq.i32(out_$i34, 3);
    goto corral_source_split_9288;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i34 := $M.33;
    goto corral_source_split_9287;

  $bb56:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1368} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9285;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} out_vslice_dummy_var_365 := mxl111sf_attach_tuner(out_$p32);
    goto corral_source_split_9284;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    out_$p32 := $M.47;
    goto corral_source_split_9283;

  $bb55:
    assume out_$i31 == 1;
    goto corral_source_split_9282;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 1);
    goto corral_source_split_9262;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    out_$i30 := $M.33;
    goto corral_source_split_9261;

  $bb44:
    assume out_$i22 == 1;
    goto corral_source_split_9260;

  $bb43:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := $slt.i32(out_$i15, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb71:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9325;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} out_vslice_dummy_var_370 := mxl111sf_ep6_streaming_ctrl(out_$p54, out_$i55);
    goto corral_source_split_9324;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    out_$i55 := $M.49;
    goto corral_source_split_9323;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    out_$p54 := $M.48;
    goto corral_source_split_9322;

  $bb70:
    assume out_$i53 == 1;
    goto corral_source_split_9321;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i32(out_$i52, 2);
    goto corral_source_split_9319;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i52 := $M.33;
    goto corral_source_split_9318;

  $bb68:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1376} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9316;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} out_vslice_dummy_var_369 := mxl111sf_ep6_streaming_ctrl(out_$p49, out_$i50);
    goto corral_source_split_9315;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    out_$i50 := $M.49;
    goto corral_source_split_9314;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    out_$p49 := $M.48;
    goto corral_source_split_9313;

  $bb67:
    assume out_$i48 == 1;
    goto corral_source_split_9312;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i47, 3);
    goto corral_source_split_9310;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i47 := $M.33;
    goto corral_source_split_9309;

  $bb65:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1374} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9307;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} out_vslice_dummy_var_368 := mxl111sf_ep6_streaming_ctrl(out_$p44, out_$i45);
    goto corral_source_split_9306;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    out_$i45 := $M.49;
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    out_$p44 := $M.48;
    goto corral_source_split_9304;

  $bb64:
    assume out_$i43 == 1;
    goto corral_source_split_9303;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i32(out_$i42, 1);
    goto corral_source_split_9266;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$i42 := $M.33;
    goto corral_source_split_9265;

  $bb45:
    assume !(out_$i22 == 1);
    goto corral_source_split_9264;

  $bb80:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9346;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} out_vslice_dummy_var_373 := mxl111sf_frontend_attach_atsc(out_$p67);
    goto corral_source_split_9345;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    out_$p67 := $M.47;
    goto corral_source_split_9344;

  $bb79:
    assume out_$i66 == 1;
    goto corral_source_split_9343;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 2);
    goto corral_source_split_9341;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i65 := $M.33;
    goto corral_source_split_9340;

  $bb77:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9338;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} out_vslice_dummy_var_372 := mxl111sf_frontend_attach_atsc(out_$p63);
    goto corral_source_split_9337;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    out_$p63 := $M.47;
    goto corral_source_split_9336;

  $bb76:
    assume out_$i62 == 1;
    goto corral_source_split_9335;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 3);
    goto corral_source_split_9333;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i61 := $M.33;
    goto corral_source_split_9332;

  $bb74:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9330;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} out_vslice_dummy_var_371 := mxl111sf_frontend_attach_atsc(out_$p59);
    goto corral_source_split_9329;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    out_$p59 := $M.47;
    goto corral_source_split_9328;

  $bb73:
    assume out_$i58 == 1;
    goto corral_source_split_9327;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 1);
    goto corral_source_split_9254;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    out_$i57 := $M.33;
    goto corral_source_split_9253;

  $bb40:
    assume out_$i20 == 1;
    goto corral_source_split_9252;

  $bb33:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i15, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb32:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i15, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb89:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9373;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} out_vslice_dummy_var_376 := mxl111sf_get_stream_config_atsc(out_$p83, out_$p84, out_$p85);
    goto corral_source_split_9372;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    out_$p85 := $M.51;
    goto corral_source_split_9371;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    out_$p84 := $M.50;
    goto corral_source_split_9370;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    out_$p83 := $M.48;
    goto corral_source_split_9369;

  $bb88:
    assume out_$i82 == 1;
    goto corral_source_split_9368;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    out_$i82 := $eq.i32(out_$i81, 2);
    goto corral_source_split_9366;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i81 := $M.33;
    goto corral_source_split_9365;

  $bb86:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $M.33 := 3;
    call {:si_unique_call 1388} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_9363;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} out_vslice_dummy_var_375 := mxl111sf_get_stream_config_atsc(out_$p77, out_$p78, out_$p79);
    goto corral_source_split_9362;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    out_$p79 := $M.51;
    goto corral_source_split_9361;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    out_$p78 := $M.50;
    goto corral_source_split_9360;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    out_$p77 := $M.48;
    goto corral_source_split_9359;

  $bb85:
    assume out_$i76 == 1;
    goto corral_source_split_9358;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i32(out_$i75, 3);
    goto corral_source_split_9356;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i75 := $M.33;
    goto corral_source_split_9355;

  $bb83:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1386} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9353;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} out_vslice_dummy_var_374 := mxl111sf_get_stream_config_atsc(out_$p71, out_$p72, out_$p73);
    goto corral_source_split_9352;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    out_$p73 := $M.51;
    goto corral_source_split_9351;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$p72 := $M.50;
    goto corral_source_split_9350;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    out_$p71 := $M.48;
    goto corral_source_split_9349;

  $bb82:
    assume out_$i70 == 1;
    goto corral_source_split_9348;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i69, 1);
    goto corral_source_split_9258;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    out_$i69 := $M.33;
    goto corral_source_split_9257;

  $bb41:
    assume !(out_$i20 == 1);
    goto corral_source_split_9256;

  $bb92:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $M.41 := out_$i91;
    call {:si_unique_call 1393} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i91);
    goto corral_source_split_9380;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    out_$i91 := $add.i32(out_$i90, 1);
    goto corral_source_split_9379;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    out_$i90 := $M.41;
    goto corral_source_split_9378;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1392} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_9377;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} out_vslice_dummy_var_377 := ldv_mxl111sf_props_atsc_setup_6();
    goto corral_source_split_9376;

  $bb91:
    assume out_$i88 == 1;
    goto corral_source_split_9375;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i88 := $eq.i32(out_$i87, 1);
    goto corral_source_split_9246;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    out_$i87 := $M.33;
    goto corral_source_split_9245;

  $bb35:
    assume out_$i18 == 1;
    goto corral_source_split_9244;

  $bb34:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $slt.i32(out_$i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb98:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $M.41 := out_$i101;
    call {:si_unique_call 1399} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_9397;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$i101 := $sub.i32(out_$i100, 1);
    goto corral_source_split_9396;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    out_$i100 := $M.41;
    goto corral_source_split_9395;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9394;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} out_vslice_dummy_var_379 := ldv_mxl111sf_props_atsc_release_6();
    goto corral_source_split_9393;

  $bb97:
    assume out_$i98 == 1;
    goto corral_source_split_9392;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 2);
    goto corral_source_split_9390;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i97 := $M.33;
    goto corral_source_split_9389;

  $bb95:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $M.41 := out_$i96;
    call {:si_unique_call 1396} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i96);
    goto corral_source_split_9387;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    out_$i96 := $sub.i32(out_$i95, 1);
    goto corral_source_split_9386;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    out_$i95 := $M.41;
    goto corral_source_split_9385;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1395} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_9384;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} out_vslice_dummy_var_378 := ldv_mxl111sf_props_atsc_release_6();
    goto corral_source_split_9383;

  $bb94:
    assume out_$i93 == 1;
    goto corral_source_split_9382;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 3);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i92 := $M.33;
    goto corral_source_split_9249;

  $bb37:
    assume out_$i19 == 1;
    goto corral_source_split_9248;

  $bb36:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i19 := $eq.i32(out_$i15, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb39;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb39;

  $bb104:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb175:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb147:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb124:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb126:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1405} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9437;

  $bb125:
    assume out_$i118 == 1;
    goto corral_source_split_9436;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 0);
    goto corral_source_split_9434;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    out_$i117 := $M.53;
    goto corral_source_split_9433;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $M.53 := out_$i116;
    call {:si_unique_call 1404} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_9432;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} out_$i116 := mxl111sf_init(out_$p115);
    goto corral_source_split_9431;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    out_$p115 := $M.52;
    goto corral_source_split_9430;

  $bb123:
    assume out_$i114 == 1;
    goto corral_source_split_9429;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 2);
    goto corral_source_split_9427;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    out_$i113 := $M.34;
    goto corral_source_split_9426;

  $bb121:
    assume out_$i112 == 1;
    goto corral_source_split_9425;

  $bb117:
    assume out_$i110 == 1;
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i104, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb106:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $slt.i32(out_$i104, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_9399:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1400} out_$i104 := __VERIFIER_nondet_int();
    call {:si_unique_call 1401} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i104);
    call {:si_unique_call 1402} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i104);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb103:
    assume out_$i103 == 1;
    goto corral_source_split_9399;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i32(out_$i102, 0);
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    out_$i102 := $M.34;
    goto corral_source_split_9235;

  $bb25:
    assume !(out_$i11 == 1);
    goto corral_source_split_9234;

  $bb137:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9458;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} out_vslice_dummy_var_382 := mxl111sf_attach_tuner(out_$p129);
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    out_$p129 := $M.54;
    goto corral_source_split_9456;

  $bb136:
    assume out_$i128 == 1;
    goto corral_source_split_9455;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 2);
    goto corral_source_split_9453;

  $bb135:
    assume {:verifier.code 0} true;
    out_$i127 := $M.34;
    goto corral_source_split_9452;

  $bb134:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9450;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} out_vslice_dummy_var_381 := mxl111sf_attach_tuner(out_$p125);
    goto corral_source_split_9449;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    out_$p125 := $M.54;
    goto corral_source_split_9448;

  $bb133:
    assume out_$i124 == 1;
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 3);
    goto corral_source_split_9445;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i123 := $M.34;
    goto corral_source_split_9444;

  $bb131:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1407} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9442;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} out_vslice_dummy_var_380 := mxl111sf_attach_tuner(out_$p121);
    goto corral_source_split_9441;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$p121 := $M.54;
    goto corral_source_split_9440;

  $bb130:
    assume out_$i120 == 1;
    goto corral_source_split_9439;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_9419;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    out_$i119 := $M.34;
    goto corral_source_split_9418;

  $bb119:
    assume out_$i111 == 1;
    goto corral_source_split_9417;

  $bb118:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    out_$i111 := $slt.i32(out_$i104, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb146:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9482;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} out_vslice_dummy_var_385 := mxl111sf_streaming_ctrl_mercury(out_$p143, out_$i144);
    goto corral_source_split_9481;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    out_$i144 := $M.56;
    goto corral_source_split_9480;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    out_$p143 := $M.55;
    goto corral_source_split_9479;

  $bb145:
    assume out_$i142 == 1;
    goto corral_source_split_9478;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 2);
    goto corral_source_split_9476;

  $bb144:
    assume {:verifier.code 0} true;
    out_$i141 := $M.34;
    goto corral_source_split_9475;

  $bb143:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9473;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} out_vslice_dummy_var_384 := mxl111sf_streaming_ctrl_mercury(out_$p138, out_$i139);
    goto corral_source_split_9472;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    out_$i139 := $M.56;
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    out_$p138 := $M.55;
    goto corral_source_split_9470;

  $bb142:
    assume out_$i137 == 1;
    goto corral_source_split_9469;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i136, 3);
    goto corral_source_split_9467;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i136 := $M.34;
    goto corral_source_split_9466;

  $bb140:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9464;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_vslice_dummy_var_383 := mxl111sf_streaming_ctrl_mercury(out_$p133, out_$i134);
    goto corral_source_split_9463;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    out_$i134 := $M.56;
    goto corral_source_split_9462;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    out_$p133 := $M.55;
    goto corral_source_split_9461;

  $bb139:
    assume out_$i132 == 1;
    goto corral_source_split_9460;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 1);
    goto corral_source_split_9423;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$i131 := $M.34;
    goto corral_source_split_9422;

  $bb120:
    assume !(out_$i111 == 1);
    goto corral_source_split_9421;

  $bb155:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    goto $bb156;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9503;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} out_vslice_dummy_var_388 := mxl111sf_frontend_attach_mercury(out_$p156);
    goto corral_source_split_9502;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    out_$p156 := $M.54;
    goto corral_source_split_9501;

  $bb154:
    assume out_$i155 == 1;
    goto corral_source_split_9500;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 2);
    goto corral_source_split_9498;

  $bb153:
    assume {:verifier.code 0} true;
    out_$i154 := $M.34;
    goto corral_source_split_9497;

  $bb152:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1421} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9495;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} out_vslice_dummy_var_387 := mxl111sf_frontend_attach_mercury(out_$p152);
    goto corral_source_split_9494;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    out_$p152 := $M.54;
    goto corral_source_split_9493;

  $bb151:
    assume out_$i151 == 1;
    goto corral_source_split_9492;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 3);
    goto corral_source_split_9490;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i150 := $M.34;
    goto corral_source_split_9489;

  $bb149:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9487;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} out_vslice_dummy_var_386 := mxl111sf_frontend_attach_mercury(out_$p148);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p148 := $M.54;
    goto corral_source_split_9485;

  $bb148:
    assume out_$i147 == 1;
    goto corral_source_split_9484;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 1);
    goto corral_source_split_9411;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    out_$i146 := $M.34;
    goto corral_source_split_9410;

  $bb115:
    assume out_$i109 == 1;
    goto corral_source_split_9409;

  $bb108:
    assume out_$i106 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb107:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i104, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb164:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    goto $bb165;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9530;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} out_vslice_dummy_var_391 := mxl111sf_get_stream_config_mercury(out_$p172, out_$p173, out_$p174);
    goto corral_source_split_9529;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    out_$p174 := $M.58;
    goto corral_source_split_9528;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    out_$p173 := $M.57;
    goto corral_source_split_9527;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    out_$p172 := $M.55;
    goto corral_source_split_9526;

  $bb163:
    assume out_$i171 == 1;
    goto corral_source_split_9525;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 2);
    goto corral_source_split_9523;

  $bb162:
    assume {:verifier.code 0} true;
    out_$i170 := $M.34;
    goto corral_source_split_9522;

  $bb161:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    goto $bb162;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $M.34 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9520;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} out_vslice_dummy_var_390 := mxl111sf_get_stream_config_mercury(out_$p166, out_$p167, out_$p168);
    goto corral_source_split_9519;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    out_$p168 := $M.58;
    goto corral_source_split_9518;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    out_$p167 := $M.57;
    goto corral_source_split_9517;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    out_$p166 := $M.55;
    goto corral_source_split_9516;

  $bb160:
    assume out_$i165 == 1;
    goto corral_source_split_9515;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb160, $bb161;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 3);
    goto corral_source_split_9513;

  $bb159:
    assume {:verifier.code 0} true;
    out_$i164 := $M.34;
    goto corral_source_split_9512;

  $bb158:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    goto $bb159;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9510;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} out_vslice_dummy_var_389 := mxl111sf_get_stream_config_mercury(out_$p160, out_$p161, out_$p162);
    goto corral_source_split_9509;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    out_$p162 := $M.58;
    goto corral_source_split_9508;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    out_$p161 := $M.57;
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$p160 := $M.55;
    goto corral_source_split_9506;

  $bb157:
    assume out_$i159 == 1;
    goto corral_source_split_9505;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb157, $bb158;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 1);
    goto corral_source_split_9415;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    out_$i158 := $M.34;
    goto corral_source_split_9414;

  $bb116:
    assume !(out_$i109 == 1);
    goto corral_source_split_9413;

  $bb167:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    goto $bb168;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $M.41 := out_$i180;
    call {:si_unique_call 1432} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i180);
    goto corral_source_split_9537;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    out_$i180 := $add.i32(out_$i179, 1);
    goto corral_source_split_9536;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    out_$i179 := $M.41;
    goto corral_source_split_9535;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $M.34 := 2;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} out_vslice_dummy_var_392 := ldv_mxl111sf_props_mercury_setup_3();
    goto corral_source_split_9533;

  $bb166:
    assume out_$i177 == 1;
    goto corral_source_split_9532;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_9403;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    out_$i176 := $M.34;
    goto corral_source_split_9402;

  $bb110:
    assume out_$i107 == 1;
    goto corral_source_split_9401;

  $bb109:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i104, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb173:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    goto $bb174;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $M.41 := out_$i190;
    call {:si_unique_call 1438} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i190);
    goto corral_source_split_9554;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    out_$i190 := $sub.i32(out_$i189, 1);
    goto corral_source_split_9553;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    out_$i189 := $M.41;
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9551;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} out_vslice_dummy_var_394 := ldv_mxl111sf_props_mercury_release_3();
    goto corral_source_split_9550;

  $bb172:
    assume out_$i187 == 1;
    goto corral_source_split_9549;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb172, $bb173;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_9547;

  $bb171:
    assume {:verifier.code 0} true;
    out_$i186 := $M.34;
    goto corral_source_split_9546;

  $bb170:
    assume !(out_$i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $M.41 := out_$i185;
    call {:si_unique_call 1435} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i185);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$i185 := $sub.i32(out_$i184, 1);
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$i184 := $M.41;
    goto corral_source_split_9542;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9541;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} out_vslice_dummy_var_393 := ldv_mxl111sf_props_mercury_release_3();
    goto corral_source_split_9540;

  $bb169:
    assume out_$i182 == 1;
    goto corral_source_split_9539;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    out_$i182 := $eq.i32(out_$i181, 3);
    goto corral_source_split_9407;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    out_$i181 := $M.34;
    goto corral_source_split_9406;

  $bb112:
    assume out_$i108 == 1;
    goto corral_source_split_9405;

  $bb111:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i104, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb113:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb114;

  $bb122:
    assume {:verifier.code 0} true;
    assume !(out_$i112 == 1);
    goto $bb114;

  $bb178:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb239:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb198:
    assume !(out_$i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb200:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb201;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9594;

  $bb199:
    assume out_$i207 == 1;
    goto corral_source_split_9593;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 0);
    goto corral_source_split_9591;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    out_$i206 := $M.60;
    goto corral_source_split_9590;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.60 := out_$i205;
    call {:si_unique_call 1443} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i205);
    goto corral_source_split_9589;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} out_$i205 := mxl111sf_init(out_$p204);
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    out_$p204 := $M.59;
    goto corral_source_split_9587;

  $bb197:
    assume out_$i203 == 1;
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    out_$i203 := $eq.i32(out_$i202, 2);
    goto corral_source_split_9584;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    out_$i202 := $M.35;
    goto corral_source_split_9583;

  $bb195:
    assume out_$i201 == 1;
    goto corral_source_split_9582;

  $bb191:
    assume out_$i199 == 1;
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i193, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb180:
    assume out_$i194 == 1;
    assume {:verifier.code 0} true;
    out_$i199 := $slt.i32(out_$i193, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i194 := $slt.i32(out_$i193, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_9556:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1439} out_$i193 := __VERIFIER_nondet_int();
    call {:si_unique_call 1440} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i193);
    call {:si_unique_call 1441} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i193);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb177:
    assume out_$i192 == 1;
    goto corral_source_split_9556;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    out_$i192 := $ne.i32(out_$i191, 0);
    goto corral_source_split_9224;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    out_$i191 := $M.35;
    goto corral_source_split_9223;

  $bb20:
    assume out_$i9 == 1;
    goto corral_source_split_9222;

  $bb19:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    out_$i9 := $slt.i32(out_$i0, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb211:
    assume !(out_$i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9615;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_vslice_dummy_var_397 := mxl111sf_attach_tuner(out_$p218);
    goto corral_source_split_9614;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    out_$p218 := $M.61;
    goto corral_source_split_9613;

  $bb210:
    assume out_$i217 == 1;
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$i217 := $eq.i32(out_$i216, 2);
    goto corral_source_split_9610;

  $bb209:
    assume {:verifier.code 0} true;
    out_$i216 := $M.35;
    goto corral_source_split_9609;

  $bb208:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9607;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_vslice_dummy_var_396 := mxl111sf_attach_tuner(out_$p214);
    goto corral_source_split_9606;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    out_$p214 := $M.61;
    goto corral_source_split_9605;

  $bb207:
    assume out_$i213 == 1;
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 3);
    goto corral_source_split_9602;

  $bb206:
    assume {:verifier.code 0} true;
    out_$i212 := $M.35;
    goto corral_source_split_9601;

  $bb205:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9599;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} out_vslice_dummy_var_395 := mxl111sf_attach_tuner(out_$p210);
    goto corral_source_split_9598;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    out_$p210 := $M.61;
    goto corral_source_split_9597;

  $bb204:
    assume out_$i209 == 1;
    goto corral_source_split_9596;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$i209 := $eq.i32(out_$i208, 1);
    goto corral_source_split_9576;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    out_$i208 := $M.35;
    goto corral_source_split_9575;

  $bb193:
    assume out_$i200 == 1;
    goto corral_source_split_9574;

  $bb192:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    out_$i200 := $slt.i32(out_$i193, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb220:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9639;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} out_vslice_dummy_var_400 := mxl111sf_ep4_streaming_ctrl(out_$p232, out_$i233);
    goto corral_source_split_9638;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$i233 := $M.63;
    goto corral_source_split_9637;

  corral_source_split_9635:
    assume {:verifier.code 0} true;
    out_$p232 := $M.62;
    goto corral_source_split_9636;

  $bb219:
    assume out_$i231 == 1;
    goto corral_source_split_9635;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_9633;

  $bb218:
    assume {:verifier.code 0} true;
    out_$i230 := $M.35;
    goto corral_source_split_9632;

  $bb217:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9630;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} out_vslice_dummy_var_399 := mxl111sf_ep4_streaming_ctrl(out_$p227, out_$i228);
    goto corral_source_split_9629;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    out_$i228 := $M.63;
    goto corral_source_split_9628;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    out_$p227 := $M.62;
    goto corral_source_split_9627;

  $bb216:
    assume out_$i226 == 1;
    goto corral_source_split_9626;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_9624;

  $bb215:
    assume {:verifier.code 0} true;
    out_$i225 := $M.35;
    goto corral_source_split_9623;

  $bb214:
    assume !(out_$i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9621;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} out_vslice_dummy_var_398 := mxl111sf_ep4_streaming_ctrl(out_$p222, out_$i223);
    goto corral_source_split_9620;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    out_$i223 := $M.63;
    goto corral_source_split_9619;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$p222 := $M.62;
    goto corral_source_split_9618;

  $bb213:
    assume out_$i221 == 1;
    goto corral_source_split_9617;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    out_$i221 := $eq.i32(out_$i220, 1);
    goto corral_source_split_9580;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    out_$i220 := $M.35;
    goto corral_source_split_9579;

  $bb194:
    assume !(out_$i200 == 1);
    goto corral_source_split_9578;

  $bb229:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9660;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} out_vslice_dummy_var_403 := mxl111sf_frontend_attach_dvbt(out_$p245);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$p245 := $M.61;
    goto corral_source_split_9658;

  $bb228:
    assume out_$i244 == 1;
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 2);
    goto corral_source_split_9655;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i243 := $M.35;
    goto corral_source_split_9654;

  $bb226:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9652;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} out_vslice_dummy_var_402 := mxl111sf_frontend_attach_dvbt(out_$p241);
    goto corral_source_split_9651;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    out_$p241 := $M.61;
    goto corral_source_split_9650;

  $bb225:
    assume out_$i240 == 1;
    goto corral_source_split_9649;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 3);
    goto corral_source_split_9647;

  $bb224:
    assume {:verifier.code 0} true;
    out_$i239 := $M.35;
    goto corral_source_split_9646;

  $bb223:
    assume !(out_$i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_9644:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9644;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} out_vslice_dummy_var_401 := mxl111sf_frontend_attach_dvbt(out_$p237);
    goto corral_source_split_9643;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    out_$p237 := $M.61;
    goto corral_source_split_9642;

  $bb222:
    assume out_$i236 == 1;
    goto corral_source_split_9641;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    out_$i236 := $eq.i32(out_$i235, 1);
    goto corral_source_split_9568;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    out_$i235 := $M.35;
    goto corral_source_split_9567;

  $bb189:
    assume out_$i198 == 1;
    goto corral_source_split_9566;

  $bb182:
    assume out_$i195 == 1;
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i193, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb181:
    assume !(out_$i194 == 1);
    assume {:verifier.code 0} true;
    out_$i195 := $slt.i32(out_$i193, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb238:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9687;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} out_vslice_dummy_var_406 := mxl111sf_get_stream_config_dvbt(out_$p261, out_$p262, out_$p263);
    goto corral_source_split_9686;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    out_$p263 := $M.65;
    goto corral_source_split_9685;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    out_$p262 := $M.64;
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    out_$p261 := $M.62;
    goto corral_source_split_9683;

  $bb237:
    assume out_$i260 == 1;
    goto corral_source_split_9682;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 2);
    goto corral_source_split_9680;

  $bb236:
    assume {:verifier.code 0} true;
    out_$i259 := $M.35;
    goto corral_source_split_9679;

  $bb235:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $M.35 := 3;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(3);
    goto corral_source_split_9677;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} out_vslice_dummy_var_405 := mxl111sf_get_stream_config_dvbt(out_$p255, out_$p256, out_$p257);
    goto corral_source_split_9676;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    out_$p257 := $M.65;
    goto corral_source_split_9675;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    out_$p256 := $M.64;
    goto corral_source_split_9674;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    out_$p255 := $M.62;
    goto corral_source_split_9673;

  $bb234:
    assume out_$i254 == 1;
    goto corral_source_split_9672;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 3);
    goto corral_source_split_9670;

  $bb233:
    assume {:verifier.code 0} true;
    out_$i253 := $M.35;
    goto corral_source_split_9669;

  $bb232:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9667;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} out_vslice_dummy_var_404 := mxl111sf_get_stream_config_dvbt(out_$p249, out_$p250, out_$p251);
    goto corral_source_split_9666;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    out_$p251 := $M.65;
    goto corral_source_split_9665;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    out_$p250 := $M.64;
    goto corral_source_split_9664;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    out_$p249 := $M.62;
    goto corral_source_split_9663;

  $bb231:
    assume out_$i248 == 1;
    goto corral_source_split_9662;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_9571:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 1);
    goto corral_source_split_9572;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    out_$i247 := $M.35;
    goto corral_source_split_9571;

  $bb190:
    assume !(out_$i198 == 1);
    goto corral_source_split_9570;

  $bb241:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $M.41 := out_$i269;
    call {:si_unique_call 1471} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_9694;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    out_$i269 := $add.i32(out_$i268, 1);
    goto corral_source_split_9693;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    out_$i268 := $M.41;
    goto corral_source_split_9692;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $M.35 := 2;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(2);
    goto corral_source_split_9691;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} out_vslice_dummy_var_407 := ldv_mxl111sf_props_dvbt_setup_7();
    goto corral_source_split_9690;

  $bb240:
    assume out_$i266 == 1;
    goto corral_source_split_9689;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 1);
    goto corral_source_split_9560;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$i265 := $M.35;
    goto corral_source_split_9559;

  $bb184:
    assume out_$i196 == 1;
    goto corral_source_split_9558;

  $bb183:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    out_$i196 := $slt.i32(out_$i193, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb247:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $M.41 := out_$i279;
    call {:si_unique_call 1477} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i279);
    goto corral_source_split_9711;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    out_$i279 := $sub.i32(out_$i278, 1);
    goto corral_source_split_9710;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    out_$i278 := $M.41;
    goto corral_source_split_9709;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9708;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} out_vslice_dummy_var_409 := ldv_mxl111sf_props_dvbt_release_7();
    goto corral_source_split_9707;

  $bb246:
    assume out_$i276 == 1;
    goto corral_source_split_9706;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    out_$i276 := $eq.i32(out_$i275, 2);
    goto corral_source_split_9704;

  $bb245:
    assume {:verifier.code 0} true;
    out_$i275 := $M.35;
    goto corral_source_split_9703;

  $bb244:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $M.41 := out_$i274;
    call {:si_unique_call 1474} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i274);
    goto corral_source_split_9701;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    out_$i274 := $sub.i32(out_$i273, 1);
    goto corral_source_split_9700;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    out_$i273 := $M.41;
    goto corral_source_split_9699;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_9698;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_vslice_dummy_var_408 := ldv_mxl111sf_props_dvbt_release_7();
    goto corral_source_split_9697;

  $bb243:
    assume out_$i271 == 1;
    goto corral_source_split_9696;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 3);
    goto corral_source_split_9564;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    out_$i270 := $M.35;
    goto corral_source_split_9563;

  $bb186:
    assume out_$i197 == 1;
    goto corral_source_split_9562;

  $bb185:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i193, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb188;

  $bb196:
    assume {:verifier.code 0} true;
    assume !(out_$i201 == 1);
    goto $bb188;

  $bb252:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb272:
    assume !(out_$i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    goto $bb273;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9752;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} out_vslice_dummy_var_410 := mxl111sf_write_reg(out_$p293, out_$i296, out_$i299);
    goto corral_source_split_9751;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    out_$i299 := $trunc.i32.i8(out_$i298);
    goto corral_source_split_9750;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    out_$i298 := $zext.i8.i32(out_$i297);
    goto corral_source_split_9749;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    out_$i297 := $M.68;
    goto corral_source_split_9748;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    out_$i296 := $trunc.i32.i8(out_$i295);
    goto corral_source_split_9747;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    out_$i295 := $zext.i8.i32(out_$i294);
    goto corral_source_split_9746;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    out_$i294 := $M.67;
    goto corral_source_split_9745;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    out_$p293 := $M.66;
    goto corral_source_split_9744;

  $bb271:
    assume out_$i292 == 1;
    goto corral_source_split_9743;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    out_$i292 := $eq.i32(out_$i291, 2);
    goto corral_source_split_9741;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    out_$i291 := $M.36;
    goto corral_source_split_9740;

  $bb269:
    assume out_$i290 == 1;
    goto corral_source_split_9739;

  $bb265:
    assume out_$i288 == 1;
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i282, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb254:
    assume out_$i283 == 1;
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i282, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb265, $bb266;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i282, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_9713:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1478} out_$i282 := __VERIFIER_nondet_int();
    call {:si_unique_call 1479} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i282);
    call {:si_unique_call 1480} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i282);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb251:
    assume out_$i281 == 1;
    goto corral_source_split_9713;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$i281 := $ne.i32(out_$i280, 0);
    goto corral_source_split_9228;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    out_$i280 := $M.36;
    goto corral_source_split_9227;

  $bb22:
    assume out_$i10 == 1;
    goto corral_source_split_9226;

  $bb21:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := $slt.i32(out_$i0, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb279:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9765;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} out_vslice_dummy_var_412 := mxl111sf_ant_hunt(out_$p307);
    goto corral_source_split_9764;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    out_$p307 := $M.69;
    goto corral_source_split_9763;

  $bb278:
    assume out_$i306 == 1;
    goto corral_source_split_9762;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    out_$i306 := $eq.i32(out_$i305, 2);
    goto corral_source_split_9760;

  $bb277:
    assume {:verifier.code 0} true;
    out_$i305 := $M.36;
    goto corral_source_split_9759;

  $bb276:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9757;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} out_vslice_dummy_var_411 := mxl111sf_ant_hunt(out_$p303);
    goto corral_source_split_9756;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    out_$p303 := $M.69;
    goto corral_source_split_9755;

  $bb275:
    assume out_$i302 == 1;
    goto corral_source_split_9754;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 1);
    goto corral_source_split_9733;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    out_$i301 := $M.36;
    goto corral_source_split_9732;

  $bb267:
    assume out_$i289 == 1;
    goto corral_source_split_9731;

  $bb266:
    assume !(out_$i288 == 1);
    assume {:verifier.code 0} true;
    out_$i289 := $slt.i32(out_$i282, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb285:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} out_vslice_dummy_var_414 := mxl1x1sf_top_master_ctrl(out_$p316, out_$i317);
    goto corral_source_split_9779;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    out_$i317 := $M.70;
    goto corral_source_split_9778;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    out_$p316 := $M.66;
    goto corral_source_split_9777;

  $bb284:
    assume out_$i315 == 1;
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    out_$i315 := $eq.i32(out_$i314, 2);
    goto corral_source_split_9774;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i314 := $M.36;
    goto corral_source_split_9773;

  $bb282:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9771;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} out_vslice_dummy_var_413 := mxl1x1sf_top_master_ctrl(out_$p311, out_$i312);
    goto corral_source_split_9770;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    out_$i312 := $M.70;
    goto corral_source_split_9769;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    out_$p311 := $M.66;
    goto corral_source_split_9768;

  $bb281:
    assume out_$i310 == 1;
    goto corral_source_split_9767;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    out_$i310 := $eq.i32(out_$i309, 1);
    goto corral_source_split_9737;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    out_$i309 := $M.36;
    goto corral_source_split_9736;

  $bb268:
    assume !(out_$i289 == 1);
    goto corral_source_split_9735;

  $bb291:
    assume !(out_$i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1494} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} out_vslice_dummy_var_416 := mxl111sf_ctrl_program_regs(out_$p326, out_$p327);
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    out_$p327 := $M.71;
    goto corral_source_split_9793;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    out_$p326 := $M.66;
    goto corral_source_split_9792;

  $bb290:
    assume out_$i325 == 1;
    goto corral_source_split_9791;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    out_$i325 := $eq.i32(out_$i324, 2);
    goto corral_source_split_9789;

  $bb289:
    assume {:verifier.code 0} true;
    out_$i324 := $M.36;
    goto corral_source_split_9788;

  $bb288:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1492} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9786;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} out_vslice_dummy_var_415 := mxl111sf_ctrl_program_regs(out_$p321, out_$p322);
    goto corral_source_split_9785;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    out_$p322 := $M.71;
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$p321 := $M.66;
    goto corral_source_split_9783;

  $bb287:
    assume out_$i320 == 1;
    goto corral_source_split_9782;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 1);
    goto corral_source_split_9725;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    out_$i319 := $M.36;
    goto corral_source_split_9724;

  $bb263:
    assume out_$i287 == 1;
    goto corral_source_split_9723;

  $bb256:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i282, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb255:
    assume !(out_$i283 == 1);
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i282, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb256, $bb257;

  $bb294:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1496} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9804;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} out_vslice_dummy_var_417 := mxl111sf_read_reg(out_$p331, out_$i334, out_$p335);
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    out_$p335 := $M.73;
    goto corral_source_split_9802;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    out_$i334 := $trunc.i32.i8(out_$i333);
    goto corral_source_split_9801;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    out_$i333 := $zext.i8.i32(out_$i332);
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    out_$i332 := $M.72;
    goto corral_source_split_9799;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    out_$p331 := $M.66;
    goto corral_source_split_9798;

  $bb293:
    assume out_$i330 == 1;
    goto corral_source_split_9797;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 2);
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    out_$i329 := $M.36;
    goto corral_source_split_9728;

  $bb264:
    assume !(out_$i287 == 1);
    goto corral_source_split_9727;

  $bb297:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $M.41 := out_$i341;
    call {:si_unique_call 1499} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i341);
    goto corral_source_split_9811;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$i341 := $sub.i32(out_$i340, 1);
    goto corral_source_split_9810;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    out_$i340 := $M.41;
    goto corral_source_split_9809;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1498} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_9808;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} out_vslice_dummy_var_418 := ldv_mxl_tuner_config_release_9();
    goto corral_source_split_9807;

  $bb296:
    assume out_$i338 == 1;
    goto corral_source_split_9806;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 2);
    goto corral_source_split_9717;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    out_$i337 := $M.36;
    goto corral_source_split_9716;

  $bb258:
    assume out_$i285 == 1;
    goto corral_source_split_9715;

  $bb257:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i282, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb300:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $M.41 := out_$i346;
    call {:si_unique_call 1502} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i346);
    goto corral_source_split_9818;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    out_$i346 := $add.i32(out_$i345, 1);
    goto corral_source_split_9817;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    out_$i345 := $M.41;
    goto corral_source_split_9816;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $M.36 := 2;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(2);
    goto corral_source_split_9815;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_vslice_dummy_var_419 := ldv_mxl_tuner_config_probe_9();
    goto corral_source_split_9814;

  $bb299:
    assume out_$i343 == 1;
    goto corral_source_split_9813;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 1);
    goto corral_source_split_9721;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    out_$i342 := $M.36;
    goto corral_source_split_9720;

  $bb260:
    assume out_$i286 == 1;
    goto corral_source_split_9719;

  $bb259:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $eq.i32(out_$i282, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb261:
    assume {:verifier.code 0} true;
    assume !(out_$i286 == 1);
    goto $bb262;

  $bb270:
    assume {:verifier.code 0} true;
    assume !(out_$i290 == 1);
    goto $bb262;

  $bb305:
    assume !(out_$i348 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb376:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb348:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb325:
    assume !(out_$i359 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb327:
    assume !(out_$i363 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9858;

  $bb326:
    assume out_$i363 == 1;
    goto corral_source_split_9857;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    out_$i363 := $eq.i32(out_$i362, 0);
    goto corral_source_split_9855;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    out_$i362 := $M.75;
    goto corral_source_split_9854;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $M.75 := out_$i361;
    call {:si_unique_call 1507} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i361);
    goto corral_source_split_9853;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_$i361 := mxl111sf_init(out_$p360);
    goto corral_source_split_9852;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    out_$p360 := $M.74;
    goto corral_source_split_9851;

  $bb324:
    assume out_$i359 == 1;
    goto corral_source_split_9850;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i359 := $eq.i32(out_$i358, 2);
    goto corral_source_split_9848;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    out_$i358 := $M.37;
    goto corral_source_split_9847;

  $bb322:
    assume out_$i357 == 1;
    goto corral_source_split_9846;

  $bb318:
    assume out_$i355 == 1;
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i349, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb307:
    assume out_$i350 == 1;
    assume {:verifier.code 0} true;
    out_$i355 := $slt.i32(out_$i349, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb306:
    assume {:verifier.code 0} true;
    out_$i350 := $slt.i32(out_$i349, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb307, $bb308;

  corral_source_split_9820:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1503} out_$i349 := __VERIFIER_nondet_int();
    call {:si_unique_call 1504} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i349);
    call {:si_unique_call 1505} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i349);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb304:
    assume out_$i348 == 1;
    goto corral_source_split_9820;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i348 := $ne.i32(out_$i347, 0);
    goto corral_source_split_9232;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$i347 := $M.37;
    goto corral_source_split_9231;

  $bb23:
    assume !(out_$i10 == 1);
    goto corral_source_split_9230;

  $bb338:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    goto $bb339;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1514} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9879;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} out_vslice_dummy_var_422 := mxl111sf_attach_tuner(out_$p374);
    goto corral_source_split_9878;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    out_$p374 := $M.76;
    goto corral_source_split_9877;

  $bb337:
    assume out_$i373 == 1;
    goto corral_source_split_9876;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 2);
    goto corral_source_split_9874;

  $bb336:
    assume {:verifier.code 0} true;
    out_$i372 := $M.37;
    goto corral_source_split_9873;

  $bb335:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    goto $bb336;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1512} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9871;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} out_vslice_dummy_var_421 := mxl111sf_attach_tuner(out_$p370);
    goto corral_source_split_9870;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    out_$p370 := $M.76;
    goto corral_source_split_9869;

  $bb334:
    assume out_$i369 == 1;
    goto corral_source_split_9868;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 3);
    goto corral_source_split_9866;

  $bb333:
    assume {:verifier.code 0} true;
    out_$i368 := $M.37;
    goto corral_source_split_9865;

  $bb332:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    goto $bb333;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9863;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} out_vslice_dummy_var_420 := mxl111sf_attach_tuner(out_$p366);
    goto corral_source_split_9862;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    out_$p366 := $M.76;
    goto corral_source_split_9861;

  $bb331:
    assume out_$i365 == 1;
    goto corral_source_split_9860;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb331, $bb332;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_9840;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    out_$i364 := $M.37;
    goto corral_source_split_9839;

  $bb320:
    assume out_$i356 == 1;
    goto corral_source_split_9838;

  $bb319:
    assume !(out_$i355 == 1);
    assume {:verifier.code 0} true;
    out_$i356 := $slt.i32(out_$i349, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb347:
    assume !(out_$i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    goto $bb348;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9903;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} out_vslice_dummy_var_425 := mxl111sf_streaming_ctrl_mercury_mh(out_$p388, out_$i389);
    goto corral_source_split_9902;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    out_$i389 := $M.78;
    goto corral_source_split_9901;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    out_$p388 := $M.77;
    goto corral_source_split_9900;

  $bb346:
    assume out_$i387 == 1;
    goto corral_source_split_9899;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    out_$i387 := $eq.i32(out_$i386, 2);
    goto corral_source_split_9897;

  $bb345:
    assume {:verifier.code 0} true;
    out_$i386 := $M.37;
    goto corral_source_split_9896;

  $bb344:
    assume !(out_$i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    goto $bb345;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9894;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_vslice_dummy_var_424 := mxl111sf_streaming_ctrl_mercury_mh(out_$p383, out_$i384);
    goto corral_source_split_9893;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    out_$i384 := $M.78;
    goto corral_source_split_9892;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    out_$p383 := $M.77;
    goto corral_source_split_9891;

  $bb343:
    assume out_$i382 == 1;
    goto corral_source_split_9890;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb343, $bb344;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    out_$i382 := $eq.i32(out_$i381, 3);
    goto corral_source_split_9888;

  $bb342:
    assume {:verifier.code 0} true;
    out_$i381 := $M.37;
    goto corral_source_split_9887;

  $bb341:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    goto $bb342;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9885;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_vslice_dummy_var_423 := mxl111sf_streaming_ctrl_mercury_mh(out_$p378, out_$i379);
    goto corral_source_split_9884;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    out_$i379 := $M.78;
    goto corral_source_split_9883;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    out_$p378 := $M.77;
    goto corral_source_split_9882;

  $bb340:
    assume out_$i377 == 1;
    goto corral_source_split_9881;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb340, $bb341;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 1);
    goto corral_source_split_9844;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    out_$i376 := $M.37;
    goto corral_source_split_9843;

  $bb321:
    assume !(out_$i356 == 1);
    goto corral_source_split_9842;

  $bb356:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9924;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} out_vslice_dummy_var_428 := mxl111sf_frontend_attach_mercury_mh(out_$p401);
    goto corral_source_split_9923;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    out_$p401 := $M.76;
    goto corral_source_split_9922;

  $bb355:
    assume out_$i400 == 1;
    goto corral_source_split_9921;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 2);
    goto corral_source_split_9919;

  $bb354:
    assume {:verifier.code 0} true;
    out_$i399 := $M.37;
    goto corral_source_split_9918;

  $bb353:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    goto $bb354;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9916;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_vslice_dummy_var_427 := mxl111sf_frontend_attach_mercury_mh(out_$p397);
    goto corral_source_split_9915;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    out_$p397 := $M.76;
    goto corral_source_split_9914;

  $bb352:
    assume out_$i396 == 1;
    goto corral_source_split_9913;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb352, $bb353;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 3);
    goto corral_source_split_9911;

  $bb351:
    assume {:verifier.code 0} true;
    out_$i395 := $M.37;
    goto corral_source_split_9910;

  $bb350:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    goto $bb351;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9908;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_vslice_dummy_var_426 := mxl111sf_frontend_attach_mercury_mh(out_$p393);
    goto corral_source_split_9907;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    out_$p393 := $M.76;
    goto corral_source_split_9906;

  $bb349:
    assume out_$i392 == 1;
    goto corral_source_split_9905;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb349, $bb350;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 1);
    goto corral_source_split_9832;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    out_$i391 := $M.37;
    goto corral_source_split_9831;

  $bb316:
    assume out_$i354 == 1;
    goto corral_source_split_9830;

  $bb309:
    assume out_$i351 == 1;
    assume {:verifier.code 0} true;
    out_$i354 := $slt.i32(out_$i349, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb308:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    out_$i351 := $slt.i32(out_$i349, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb309, $bb310;

  $bb365:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb366;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_vslice_dummy_var_431 := mxl111sf_get_stream_config_mercury_mh(out_$p417, out_$p418, out_$p419);
    goto corral_source_split_9950;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    out_$p419 := $M.80;
    goto corral_source_split_9949;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    out_$p418 := $M.79;
    goto corral_source_split_9948;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    out_$p417 := $M.77;
    goto corral_source_split_9947;

  $bb364:
    assume out_$i416 == 1;
    goto corral_source_split_9946;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb364, $bb365;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    out_$i416 := $eq.i32(out_$i415, 2);
    goto corral_source_split_9944;

  $bb363:
    assume {:verifier.code 0} true;
    out_$i415 := $M.37;
    goto corral_source_split_9943;

  $bb362:
    assume !(out_$i410 == 1);
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    goto $bb363;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $M.37 := 3;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9941;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} out_vslice_dummy_var_430 := mxl111sf_get_stream_config_mercury_mh(out_$p411, out_$p412, out_$p413);
    goto corral_source_split_9940;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    out_$p413 := $M.80;
    goto corral_source_split_9939;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    out_$p412 := $M.79;
    goto corral_source_split_9938;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    out_$p411 := $M.77;
    goto corral_source_split_9937;

  $bb361:
    assume out_$i410 == 1;
    goto corral_source_split_9936;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    out_$i410 := $eq.i32(out_$i409, 3);
    goto corral_source_split_9934;

  $bb360:
    assume {:verifier.code 0} true;
    out_$i409 := $M.37;
    goto corral_source_split_9933;

  $bb359:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    goto $bb360;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9931;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} out_vslice_dummy_var_429 := mxl111sf_get_stream_config_mercury_mh(out_$p405, out_$p406, out_$p407);
    goto corral_source_split_9930;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    out_$p407 := $M.80;
    goto corral_source_split_9929;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    out_$p406 := $M.79;
    goto corral_source_split_9928;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    out_$p405 := $M.77;
    goto corral_source_split_9927;

  $bb358:
    assume out_$i404 == 1;
    goto corral_source_split_9926;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 1);
    goto corral_source_split_9836;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    out_$i403 := $M.37;
    goto corral_source_split_9835;

  $bb317:
    assume !(out_$i354 == 1);
    goto corral_source_split_9834;

  $bb368:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    goto $bb369;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $M.41 := out_$i425;
    call {:si_unique_call 1535} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i425);
    goto corral_source_split_9958;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    out_$i425 := $add.i32(out_$i424, 1);
    goto corral_source_split_9957;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    out_$i424 := $M.41;
    goto corral_source_split_9956;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $M.37 := 2;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9955;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} out_vslice_dummy_var_432 := ldv_mxl111sf_props_mercury_mh_setup_2();
    goto corral_source_split_9954;

  $bb367:
    assume out_$i422 == 1;
    goto corral_source_split_9953;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 1);
    goto corral_source_split_9824;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    out_$i421 := $M.37;
    goto corral_source_split_9823;

  $bb311:
    assume out_$i352 == 1;
    goto corral_source_split_9822;

  $bb310:
    assume !(out_$i351 == 1);
    assume {:verifier.code 0} true;
    out_$i352 := $slt.i32(out_$i349, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb374:
    assume !(out_$i432 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    goto $bb375;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $M.41 := out_$i435;
    call {:si_unique_call 1541} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i435);
    goto corral_source_split_9975;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    out_$i435 := $sub.i32(out_$i434, 1);
    goto corral_source_split_9974;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    out_$i434 := $M.41;
    goto corral_source_split_9973;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9972;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} out_vslice_dummy_var_434 := ldv_mxl111sf_props_mercury_mh_release_2();
    goto corral_source_split_9971;

  $bb373:
    assume out_$i432 == 1;
    goto corral_source_split_9970;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb373, $bb374;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    out_$i432 := $eq.i32(out_$i431, 2);
    goto corral_source_split_9968;

  $bb372:
    assume {:verifier.code 0} true;
    out_$i431 := $M.37;
    goto corral_source_split_9967;

  $bb371:
    assume !(out_$i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    goto $bb372;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $M.41 := out_$i430;
    call {:si_unique_call 1538} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i430);
    goto corral_source_split_9965;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    out_$i430 := $sub.i32(out_$i429, 1);
    goto corral_source_split_9964;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    out_$i429 := $M.41;
    goto corral_source_split_9963;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1537} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9962;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} out_vslice_dummy_var_433 := ldv_mxl111sf_props_mercury_mh_release_2();
    goto corral_source_split_9961;

  $bb370:
    assume out_$i427 == 1;
    goto corral_source_split_9960;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    out_$i427 := $eq.i32(out_$i426, 3);
    goto corral_source_split_9828;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    out_$i426 := $M.37;
    goto corral_source_split_9827;

  $bb313:
    assume out_$i353 == 1;
    goto corral_source_split_9826;

  $bb312:
    assume !(out_$i352 == 1);
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i349, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb313, $bb314;

  $bb315:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb314:
    assume {:verifier.code 0} true;
    assume !(out_$i353 == 1);
    goto $bb315;

  $bb323:
    assume {:verifier.code 0} true;
    assume !(out_$i357 == 1);
    goto $bb315;

  $bb379:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb391:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb389:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    goto $bb390;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9992;

  SeqInstr_24:
    goto corral_source_split_9991;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_435 := mxl111sf_i2c_xfer(out_$p444, out_$p445, out_$i446);
    goto SeqInstr_23;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    out_$i446 := $M.83;
    goto corral_source_split_9990;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    out_$p445 := $M.82;
    goto corral_source_split_9989;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    out_$p444 := $M.81;
    goto corral_source_split_9988;

  $bb388:
    assume out_$i443 == 1;
    goto corral_source_split_9987;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb388, $bb389;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    out_$i443 := $eq.i32(out_$i442, 1);
    goto corral_source_split_9985;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    out_$i442 := $M.38;
    goto corral_source_split_9984;

  $bb386:
    assume out_$i441 == 1;
    goto corral_source_split_9983;

  $bb381:
    assume out_$i439 == 1;
    assume {:verifier.code 0} true;
    out_$i441 := $eq.i32(out_$i438, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb386, $bb387;

  $bb380:
    assume {:verifier.code 0} true;
    out_$i439 := $slt.i32(out_$i438, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_9977:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1542} out_$i438 := __VERIFIER_nondet_int();
    call {:si_unique_call 1543} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i438);
    call {:si_unique_call 1544} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i438);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb378:
    assume out_$i437 == 1;
    goto corral_source_split_9977;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$i437 := $ne.i32(out_$i436, 0);
    goto corral_source_split_9212;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    out_$i436 := $M.38;
    goto corral_source_split_9211;

  $bb14:
    assume out_$i6 == 1;
    goto corral_source_split_9210;

  $bb5:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := $slt.i32(out_$i0, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb4:
    assume !(out_$i1 == 1);
    assume {:verifier.code 0} true;
    out_$i2 := $slt.i32(out_$i0, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb393:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    goto $bb394;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_9997;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_436 := mxl111sf_i2c_func(out_$p450);
    goto corral_source_split_9996;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    out_$p450 := $M.81;
    goto corral_source_split_9995;

  $bb392:
    assume out_$i449 == 1;
    goto corral_source_split_9994;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb392, $bb393;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 1);
    goto corral_source_split_9981;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    out_$i448 := $M.38;
    goto corral_source_split_9980;

  $bb383:
    assume out_$i440 == 1;
    goto corral_source_split_9979;

  $bb382:
    assume !(out_$i439 == 1);
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i438, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb383, $bb384;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb384:
    assume {:verifier.code 0} true;
    assume !(out_$i440 == 1);
    goto $bb385;

  $bb387:
    assume {:verifier.code 0} true;
    assume !(out_$i441 == 1);
    goto $bb385;

  $bb398:
    assume !(out_$i453 == 1);
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb443:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb431:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb414:
    assume !(out_$i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb416:
    assume !(out_$i467 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    goto $bb417;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.41 := out_$i469;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i469);
    goto corral_source_split_10033;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    out_$i469 := $add.i32(out_$i468, 1);
    goto corral_source_split_10032;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$i468 := $M.41;
    goto corral_source_split_10031;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10030;

  $bb415:
    assume out_$i467 == 1;
    goto corral_source_split_10029;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb415, $bb416;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    out_$i467 := $eq.i32(out_$i466, 0);
    goto corral_source_split_10027;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    out_$i466 := $M.86;
    goto corral_source_split_10026;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $M.86 := out_$i465;
    call {:si_unique_call 1553} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i465);
    goto corral_source_split_10025;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} out_$i465 := dvb_usbv2_probe(out_$p463, out_$p464);
    goto corral_source_split_10024;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    out_$p464 := $M.85;
    goto corral_source_split_10023;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    out_$p463 := $M.84;
    goto corral_source_split_10022;

  $bb413:
    assume out_$i462 == 1;
    goto corral_source_split_10021;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb413, $bb414;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    out_$i462 := $eq.i32(out_$i461, 1);
    goto corral_source_split_10019;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    out_$i461 := $M.39;
    goto corral_source_split_10018;

  $bb411:
    assume out_$i460 == 1;
    goto corral_source_split_10017;

  $bb409:
    assume out_$i459 == 1;
    assume {:verifier.code 0} true;
    out_$i460 := $eq.i32(out_$i454, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb400:
    assume out_$i455 == 1;
    assume {:verifier.code 0} true;
    out_$i459 := $slt.i32(out_$i454, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb409, $bb410;

  $bb399:
    assume {:verifier.code 0} true;
    out_$i455 := $slt.i32(out_$i454, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb400, $bb401;

  corral_source_split_9999:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} out_$i454 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i454);
    call {:si_unique_call 1551} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i454);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb397:
    assume out_$i453 == 1;
    goto corral_source_split_9999;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb397, $bb398;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    out_$i453 := $ne.i32(out_$i452, 0);
    goto corral_source_split_9216;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    out_$i452 := $M.39;
    goto corral_source_split_9215;

  $bb16:
    assume out_$i7 == 1;
    goto corral_source_split_9214;

  $bb15:
    assume !(out_$i6 == 1);
    assume {:verifier.code 0} true;
    out_$i7 := $slt.i32(out_$i0, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb428:
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.41 := out_$i483;
    call {:si_unique_call 1561} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i483);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i483 := $sub.i32(out_$i482, 1);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$i482 := $M.41;
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1560} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} dvb_usbv2_disconnect(out_$p481);
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    out_$p481 := $M.84;
    goto corral_source_split_10055;

  $bb429:
    assume out_$i480 == 1;
    goto corral_source_split_10054;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    out_$i480 := $eq.i32(out_$i479, 0);
    goto corral_source_split_10052;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    out_$i479 := $M.87;
    goto corral_source_split_10051;

  $bb426:
    assume out_$i478 == 1;
    goto corral_source_split_10050;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$i478 := $eq.i32(out_$i477, 2);
    goto corral_source_split_10048;

  $bb425:
    assume {:verifier.code 0} true;
    out_$i477 := $M.39;
    goto corral_source_split_10047;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $M.41 := out_$i476;
    call {:si_unique_call 1558} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i476);
    goto corral_source_split_10045;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    out_$i476 := $sub.i32(out_$i475, 1);
    goto corral_source_split_10044;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    out_$i475 := $M.41;
    goto corral_source_split_10043;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10042;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} dvb_usbv2_disconnect(out_$p474);
    goto corral_source_split_10041;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    out_$p474 := $M.84;
    goto corral_source_split_10040;

  $bb423:
    assume out_$i473 == 1;
    goto corral_source_split_10039;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i472, 0);
    goto corral_source_split_10037;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    out_$i472 := $M.87;
    goto corral_source_split_10036;

  $bb420:
    assume out_$i471 == 1;
    goto corral_source_split_10035;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    out_$i471 := $eq.i32(out_$i470, 3);
    goto corral_source_split_10015;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    out_$i470 := $M.39;
    goto corral_source_split_10014;

  $bb410:
    assume !(out_$i459 == 1);
    goto corral_source_split_10013;

  $bb421:
    assume {:verifier.code 0} true;
    assume !(out_$i471 == 1);
    goto $bb422;

  $bb424:
    assume {:verifier.code 0} true;
    assume !(out_$i473 == 1);
    goto $bb422;

  $bb427:
    assume {:verifier.code 0} true;
    assume !(out_$i478 == 1);
    goto $bb428;

  $bb430:
    assume {:verifier.code 0} true;
    assume !(out_$i480 == 1);
    goto $bb428;

  $bb433:
    assume !(out_$i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb436:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb435:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    goto $bb436;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 1564} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_10071;

  $bb434:
    assume out_$i490 == 1;
    goto corral_source_split_10070;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb434, $bb435;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i489, 0);
    goto corral_source_split_10068;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    out_$i489 := $M.89;
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $M.89 := out_$i488;
    call {:si_unique_call 1563} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i488);
    goto corral_source_split_10066;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_$i488 := dvb_usbv2_suspend(out_$p486, out_$i487);
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    out_$i487 := $M.88;
    goto corral_source_split_10064;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$p486 := $M.84;
    goto corral_source_split_10063;

  $bb432:
    assume out_$i485 == 1;
    goto corral_source_split_10062;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$i485 := $eq.i32(out_$i484, 2);
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    out_$i484 := $M.39;
    goto corral_source_split_10002;

  $bb402:
    assume out_$i456 == 1;
    goto corral_source_split_10001;

  $bb401:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    out_$i456 := $slt.i32(out_$i454, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb439:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb441:
    assume !(out_$i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    goto $bb442;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10081;

  $bb440:
    assume out_$i496 == 1;
    goto corral_source_split_10080;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb440, $bb441;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    out_$i496 := $eq.i32(out_$i495, 0);
    goto corral_source_split_10078;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$i495 := $M.90;
    goto corral_source_split_10077;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.90 := out_$i494;
    call {:si_unique_call 1566} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i494);
    goto corral_source_split_10076;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} out_$i494 := dvb_usbv2_resume(out_$p493);
    goto corral_source_split_10075;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    out_$p493 := $M.84;
    goto corral_source_split_10074;

  $bb438:
    assume out_$i492 == 1;
    goto corral_source_split_10073;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 3);
    goto corral_source_split_10007;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    out_$i491 := $M.39;
    goto corral_source_split_10006;

  $bb404:
    assume out_$i457 == 1;
    goto corral_source_split_10005;

  $bb403:
    assume !(out_$i456 == 1);
    assume {:verifier.code 0} true;
    out_$i457 := $slt.i32(out_$i454, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb404, $bb405;

  $bb445:
    assume !(out_$i498 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb448:
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb447:
    assume !(out_$i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    goto $bb448;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 1570} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_10090;

  $bb446:
    assume out_$i501 == 1;
    goto corral_source_split_10089;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb446, $bb447;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    out_$i501 := $eq.i32(out_$i500, 0);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    out_$i500 := $M.91;
    goto corral_source_split_10086;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $M.91 := out_$i499;
    call {:si_unique_call 1569} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i499);
    goto corral_source_split_10085;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_$i499 := ldv_mxl111sf_usb_driver_reset_resume_1();
    goto corral_source_split_10084;

  $bb444:
    assume out_$i498 == 1;
    goto corral_source_split_10083;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    out_$i498 := $eq.i32(out_$i497, 3);
    goto corral_source_split_10011;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$i497 := $M.39;
    goto corral_source_split_10010;

  $bb406:
    assume out_$i458 == 1;
    goto corral_source_split_10009;

  $bb405:
    assume !(out_$i457 == 1);
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i454, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb406, $bb407;

  $bb408:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb407:
    assume {:verifier.code 0} true;
    assume !(out_$i458 == 1);
    goto $bb408;

  $bb412:
    assume {:verifier.code 0} true;
    assume !(out_$i460 == 1);
    goto $bb408;

  $bb453:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb523:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb496:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb487:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb473:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb475:
    assume !(out_$i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    goto $bb476;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10130;

  $bb474:
    assume out_$i518 == 1;
    goto corral_source_split_10129;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb474, $bb475;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    out_$i518 := $eq.i32(out_$i517, 0);
    goto corral_source_split_10127;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    out_$i517 := $M.93;
    goto corral_source_split_10126;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $M.93 := out_$i516;
    call {:si_unique_call 1575} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i516);
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_$i516 := mxl111sf_init(out_$p515);
    goto corral_source_split_10124;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    out_$p515 := $M.92;
    goto corral_source_split_10123;

  $bb472:
    assume out_$i514 == 1;
    goto corral_source_split_10122;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb472, $bb473;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i513, 2);
    goto corral_source_split_10120;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    out_$i513 := $M.40;
    goto corral_source_split_10119;

  $bb470:
    assume out_$i512 == 1;
    goto corral_source_split_10118;

  $bb466:
    assume out_$i510 == 1;
    assume {:verifier.code 0} true;
    out_$i512 := $eq.i32(out_$i504, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb470, $bb471;

  $bb455:
    assume out_$i505 == 1;
    assume {:verifier.code 0} true;
    out_$i510 := $slt.i32(out_$i504, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb466, $bb467;

  $bb454:
    assume {:verifier.code 0} true;
    out_$i505 := $slt.i32(out_$i504, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb455, $bb456;

  corral_source_split_10092:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} out_$i504 := __VERIFIER_nondet_int();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i504);
    call {:si_unique_call 1573} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i504);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb452:
    assume out_$i503 == 1;
    goto corral_source_split_10092;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb452, $bb453;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i503 := $ne.i32(out_$i502, 0);
    goto corral_source_split_9220;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    out_$i502 := $M.40;
    goto corral_source_split_9219;

  $bb17:
    assume !(out_$i7 == 1);
    goto corral_source_split_9218;

  $bb486:
    assume !(out_$i528 == 1);
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    goto $bb487;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1582} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10151;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_vslice_dummy_var_439 := mxl111sf_attach_tuner(out_$p529);
    goto corral_source_split_10150;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    out_$p529 := $M.94;
    goto corral_source_split_10149;

  $bb485:
    assume out_$i528 == 1;
    goto corral_source_split_10148;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb485, $bb486;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    out_$i528 := $eq.i32(out_$i527, 2);
    goto corral_source_split_10146;

  $bb484:
    assume {:verifier.code 0} true;
    out_$i527 := $M.40;
    goto corral_source_split_10145;

  $bb483:
    assume !(out_$i524 == 1);
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    goto $bb484;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1580} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10143;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} out_vslice_dummy_var_438 := mxl111sf_attach_tuner(out_$p525);
    goto corral_source_split_10142;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    out_$p525 := $M.94;
    goto corral_source_split_10141;

  $bb482:
    assume out_$i524 == 1;
    goto corral_source_split_10140;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb482, $bb483;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    out_$i524 := $eq.i32(out_$i523, 3);
    goto corral_source_split_10138;

  $bb481:
    assume {:verifier.code 0} true;
    out_$i523 := $M.40;
    goto corral_source_split_10137;

  $bb480:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    goto $bb481;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1578} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10135;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1577} out_vslice_dummy_var_437 := mxl111sf_attach_tuner(out_$p521);
    goto corral_source_split_10134;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    out_$p521 := $M.94;
    goto corral_source_split_10133;

  $bb479:
    assume out_$i520 == 1;
    goto corral_source_split_10132;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb479, $bb480;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 1);
    goto corral_source_split_10112;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    out_$i519 := $M.40;
    goto corral_source_split_10111;

  $bb468:
    assume out_$i511 == 1;
    goto corral_source_split_10110;

  $bb467:
    assume !(out_$i510 == 1);
    assume {:verifier.code 0} true;
    out_$i511 := $slt.i32(out_$i504, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb495:
    assume !(out_$i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb496;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10175;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} out_vslice_dummy_var_442 := mxl111sf_streaming_ctrl_atsc_mh(out_$p543, out_$i544);
    goto corral_source_split_10174;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    out_$i544 := $M.96;
    goto corral_source_split_10173;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    out_$p543 := $M.95;
    goto corral_source_split_10172;

  $bb494:
    assume out_$i542 == 1;
    goto corral_source_split_10171;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb494, $bb495;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    out_$i542 := $eq.i32(out_$i541, 2);
    goto corral_source_split_10169;

  $bb493:
    assume {:verifier.code 0} true;
    out_$i541 := $M.40;
    goto corral_source_split_10168;

  $bb492:
    assume !(out_$i537 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    goto $bb493;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10166;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} out_vslice_dummy_var_441 := mxl111sf_streaming_ctrl_atsc_mh(out_$p538, out_$i539);
    goto corral_source_split_10165;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    out_$i539 := $M.96;
    goto corral_source_split_10164;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    out_$p538 := $M.95;
    goto corral_source_split_10163;

  $bb491:
    assume out_$i537 == 1;
    goto corral_source_split_10162;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb491, $bb492;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    out_$i537 := $eq.i32(out_$i536, 3);
    goto corral_source_split_10160;

  $bb490:
    assume {:verifier.code 0} true;
    out_$i536 := $M.40;
    goto corral_source_split_10159;

  $bb489:
    assume !(out_$i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    goto $bb490;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1584} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10157;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} out_vslice_dummy_var_440 := mxl111sf_streaming_ctrl_atsc_mh(out_$p533, out_$i534);
    goto corral_source_split_10156;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    out_$i534 := $M.96;
    goto corral_source_split_10155;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    out_$p533 := $M.95;
    goto corral_source_split_10154;

  $bb488:
    assume out_$i532 == 1;
    goto corral_source_split_10153;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb488, $bb489;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i532 := $eq.i32(out_$i531, 1);
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$i531 := $M.40;
    goto corral_source_split_10115;

  $bb469:
    assume !(out_$i511 == 1);
    goto corral_source_split_10114;

  $bb504:
    assume !(out_$i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_10196:
    assume {:verifier.code 0} true;
    goto $bb505;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10196;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_vslice_dummy_var_445 := mxl111sf_frontend_attach_atsc_mh(out_$p556);
    goto corral_source_split_10195;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    out_$p556 := $M.94;
    goto corral_source_split_10194;

  $bb503:
    assume out_$i555 == 1;
    goto corral_source_split_10193;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb503, $bb504;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    out_$i555 := $eq.i32(out_$i554, 2);
    goto corral_source_split_10191;

  $bb502:
    assume {:verifier.code 0} true;
    out_$i554 := $M.40;
    goto corral_source_split_10190;

  $bb501:
    assume !(out_$i551 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    goto $bb502;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10188;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} out_vslice_dummy_var_444 := mxl111sf_frontend_attach_atsc_mh(out_$p552);
    goto corral_source_split_10187;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    out_$p552 := $M.94;
    goto corral_source_split_10186;

  $bb500:
    assume out_$i551 == 1;
    goto corral_source_split_10185;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb500, $bb501;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    out_$i551 := $eq.i32(out_$i550, 3);
    goto corral_source_split_10183;

  $bb499:
    assume {:verifier.code 0} true;
    out_$i550 := $M.40;
    goto corral_source_split_10182;

  $bb498:
    assume !(out_$i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    goto $bb499;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10180;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} out_vslice_dummy_var_443 := mxl111sf_frontend_attach_atsc_mh(out_$p548);
    goto corral_source_split_10179;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    out_$p548 := $M.94;
    goto corral_source_split_10178;

  $bb497:
    assume out_$i547 == 1;
    goto corral_source_split_10177;

  corral_source_split_10104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb497, $bb498;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    out_$i547 := $eq.i32(out_$i546, 1);
    goto corral_source_split_10104;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    out_$i546 := $M.40;
    goto corral_source_split_10103;

  $bb464:
    assume out_$i509 == 1;
    goto corral_source_split_10102;

  $bb457:
    assume out_$i506 == 1;
    assume {:verifier.code 0} true;
    out_$i509 := $slt.i32(out_$i504, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb464, $bb465;

  $bb456:
    assume !(out_$i505 == 1);
    assume {:verifier.code 0} true;
    out_$i506 := $slt.i32(out_$i504, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb457, $bb458;

  $bb513:
    assume !(out_$i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    goto $bb514;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10223;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} out_vslice_dummy_var_448 := mxl111sf_get_stream_config_atsc_mh(out_$p572, out_$p573, out_$p574);
    goto corral_source_split_10222;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    out_$p574 := $M.98;
    goto corral_source_split_10221;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    out_$p573 := $M.97;
    goto corral_source_split_10220;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    out_$p572 := $M.95;
    goto corral_source_split_10219;

  $bb512:
    assume out_$i571 == 1;
    goto corral_source_split_10218;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb512, $bb513;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    out_$i571 := $eq.i32(out_$i570, 2);
    goto corral_source_split_10216;

  $bb511:
    assume {:verifier.code 0} true;
    out_$i570 := $M.40;
    goto corral_source_split_10215;

  $bb510:
    assume !(out_$i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_10213:
    assume {:verifier.code 0} true;
    goto $bb511;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $M.40 := 3;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_10213;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} out_vslice_dummy_var_447 := mxl111sf_get_stream_config_atsc_mh(out_$p566, out_$p567, out_$p568);
    goto corral_source_split_10212;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    out_$p568 := $M.98;
    goto corral_source_split_10211;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    out_$p567 := $M.97;
    goto corral_source_split_10210;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    out_$p566 := $M.95;
    goto corral_source_split_10209;

  $bb509:
    assume out_$i565 == 1;
    goto corral_source_split_10208;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb509, $bb510;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    out_$i565 := $eq.i32(out_$i564, 3);
    goto corral_source_split_10206;

  $bb508:
    assume {:verifier.code 0} true;
    out_$i564 := $M.40;
    goto corral_source_split_10205;

  $bb507:
    assume !(out_$i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    goto $bb508;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10203;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_vslice_dummy_var_446 := mxl111sf_get_stream_config_atsc_mh(out_$p560, out_$p561, out_$p562);
    goto corral_source_split_10202;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    out_$p562 := $M.98;
    goto corral_source_split_10201;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    out_$p561 := $M.97;
    goto corral_source_split_10200;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    out_$p560 := $M.95;
    goto corral_source_split_10199;

  $bb506:
    assume out_$i559 == 1;
    goto corral_source_split_10198;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb506, $bb507;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    out_$i559 := $eq.i32(out_$i558, 1);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    out_$i558 := $M.40;
    goto corral_source_split_10107;

  $bb465:
    assume !(out_$i509 == 1);
    goto corral_source_split_10106;

  $bb516:
    assume !(out_$i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    goto $bb517;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $M.41 := out_$i580;
    call {:si_unique_call 1603} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i580);
    goto corral_source_split_10230;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    out_$i580 := $add.i32(out_$i579, 1);
    goto corral_source_split_10229;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    out_$i579 := $M.41;
    goto corral_source_split_10228;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $M.40 := 2;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_10227;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} out_vslice_dummy_var_449 := ldv_mxl111sf_props_atsc_mh_setup_4();
    goto corral_source_split_10226;

  $bb515:
    assume out_$i577 == 1;
    goto corral_source_split_10225;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb515, $bb516;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i577 := $eq.i32(out_$i576, 1);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$i576 := $M.40;
    goto corral_source_split_10095;

  $bb459:
    assume out_$i507 == 1;
    goto corral_source_split_10094;

  $bb458:
    assume !(out_$i506 == 1);
    assume {:verifier.code 0} true;
    out_$i507 := $slt.i32(out_$i504, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb522:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    goto $bb523;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    $M.41 := out_$i590;
    call {:si_unique_call 1609} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i590);
    goto corral_source_split_10247;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    out_$i590 := $sub.i32(out_$i589, 1);
    goto corral_source_split_10246;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    out_$i589 := $M.41;
    goto corral_source_split_10245;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10244;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} out_vslice_dummy_var_451 := ldv_mxl111sf_props_atsc_mh_release_4();
    goto corral_source_split_10243;

  $bb521:
    assume out_$i587 == 1;
    goto corral_source_split_10242;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb521, $bb522;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 2);
    goto corral_source_split_10240;

  $bb520:
    assume {:verifier.code 0} true;
    out_$i586 := $M.40;
    goto corral_source_split_10239;

  $bb519:
    assume !(out_$i582 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb520;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.41 := out_$i585;
    call {:si_unique_call 1606} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i585);
    goto corral_source_split_10237;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    out_$i585 := $sub.i32(out_$i584, 1);
    goto corral_source_split_10236;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    out_$i584 := $M.41;
    goto corral_source_split_10235;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1605} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10234;

  corral_source_split_10232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} out_vslice_dummy_var_450 := ldv_mxl111sf_props_atsc_mh_release_4();
    goto corral_source_split_10233;

  $bb518:
    assume out_$i582 == 1;
    goto corral_source_split_10232;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb518, $bb519;

  corral_source_split_10099:
    assume {:verifier.code 0} true;
    out_$i582 := $eq.i32(out_$i581, 3);
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    out_$i581 := $M.40;
    goto corral_source_split_10099;

  $bb461:
    assume out_$i508 == 1;
    goto corral_source_split_10098;

  $bb460:
    assume !(out_$i507 == 1);
    assume {:verifier.code 0} true;
    out_$i508 := $eq.i32(out_$i504, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb461, $bb462;

  $bb463:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb462:
    assume {:verifier.code 0} true;
    assume !(out_$i508 == 1);
    goto $bb463;

  $bb471:
    assume {:verifier.code 0} true;
    assume !(out_$i512 == 1);
    goto $bb463;

  $bb527:
    assume !(out_$i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb543:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb552:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb537:
    assume {:verifier.code 0} true;
    assume !(out_$i598 == 1);
    goto $bb538;

  $bb540:
    assume {:verifier.code 0} true;
    assume !(out_$i600 == 1);
    goto $bb538;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i600 := $eq.i32(out_$i599, 0);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$i599 := $M.41;
    goto corral_source_split_10260;

  $bb536:
    assume out_$i598 == 1;
    goto corral_source_split_10259;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb536, $bb537;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    out_$i598 := $eq.i32(out_$i597, 2);
    goto corral_source_split_10257;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    out_$i597 := $M.42;
    goto corral_source_split_10256;

  $bb534:
    assume out_$i596 == 1;
    goto corral_source_split_10255;

  $bb529:
    assume out_$i594 == 1;
    assume {:verifier.code 0} true;
    out_$i596 := $eq.i32(out_$i593, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb528:
    assume {:verifier.code 0} true;
    out_$i594 := $slt.i32(out_$i593, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb529, $bb530;

  corral_source_split_10249:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1610} out_$i593 := __VERIFIER_nondet_int();
    call {:si_unique_call 1611} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i593);
    call {:si_unique_call 1612} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i593);
    assume {:verifier.code 0} true;
    goto $bb528;

  $bb526:
    assume out_$i592 == 1;
    goto corral_source_split_10249;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb526, $bb527;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    out_$i592 := $ne.i32(out_$i591, 0);
    goto corral_source_split_9200;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$i591 := $M.42;
    goto corral_source_split_9199;

  $bb7:
    assume out_$i3 == 1;
    goto corral_source_split_9198;

  $bb6:
    assume !(out_$i2 == 1);
    assume {:verifier.code 0} true;
    out_$i3 := $slt.i32(out_$i0, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb545:
    assume !(out_$i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb550:
    assume !(out_$i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_10291;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    $M.34 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10290;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $M.35 := 1;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_10289;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.36 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_9"} boogie_si_record_i32(1);
    goto corral_source_split_10288;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $M.37 := 1;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10287;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_8"} boogie_si_record_i32(1);
    goto corral_source_split_10286;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_10285;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10284;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10283;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    $M.42 := 2;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10282;

  $bb549:
    assume out_$i607 == 1;
    goto corral_source_split_10281;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    out_$i607 := $eq.i32(out_$i606, 0);
    goto corral_source_split_10279;

  $bb548:
    assume {:verifier.code 0} true;
    out_$i606 := $M.99;
    goto corral_source_split_10278;

  $bb547:
    assume !(out_$i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb547;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$i605 := $ne.i32(out_$i604, 0);
    goto corral_source_split_10273;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    out_$i604 := $M.99;
    goto corral_source_split_10272;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $M.99 := out_$i603;
    call {:si_unique_call 1617} {:cexpr "ldv_retval_9"} boogie_si_record_i32(out_$i603);
    goto corral_source_split_10271;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_$i603 := mxl111sf_usb_driver_init();
    goto corral_source_split_10270;

  $bb544:
    assume out_$i602 == 1;
    goto corral_source_split_10269;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb544, $bb545;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    out_$i602 := $eq.i32(out_$i601, 1);
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$i601 := $M.42;
    goto corral_source_split_10252;

  $bb531:
    assume out_$i595 == 1;
    goto corral_source_split_10251;

  $bb530:
    assume !(out_$i594 == 1);
    assume {:verifier.code 0} true;
    out_$i595 := $eq.i32(out_$i593, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb532:
    assume {:verifier.code 0} true;
    assume !(out_$i595 == 1);
    goto $bb533;

  $bb535:
    assume {:verifier.code 0} true;
    assume !(out_$i596 == 1);
    goto $bb533;

  $bb556:
    assume !(out_$i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb572:
    assume !(out_$i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    goto $bb573;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10324;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_vslice_dummy_var_452 := mxl111sf_write_reg(out_$p619, out_$i622, out_$i625);
    goto corral_source_split_10323;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    out_$i625 := $trunc.i32.i8(out_$i624);
    goto corral_source_split_10322;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    out_$i624 := $zext.i8.i32(out_$i623);
    goto corral_source_split_10321;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    out_$i623 := $M.102;
    goto corral_source_split_10320;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    out_$i622 := $trunc.i32.i8(out_$i621);
    goto corral_source_split_10319;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    out_$i621 := $zext.i8.i32(out_$i620);
    goto corral_source_split_10318;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i620 := $M.101;
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$p619 := $M.100;
    goto corral_source_split_10316;

  $bb571:
    assume out_$i618 == 1;
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb571, $bb572;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i618 := $eq.i32(out_$i617, 2);
    goto corral_source_split_10313;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    out_$i617 := $M.43;
    goto corral_source_split_10312;

  $bb569:
    assume out_$i616 == 1;
    goto corral_source_split_10311;

  $bb567:
    assume out_$i615 == 1;
    assume {:verifier.code 0} true;
    out_$i616 := $eq.i32(out_$i610, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569, $bb570;

  $bb558:
    assume out_$i611 == 1;
    assume {:verifier.code 0} true;
    out_$i615 := $slt.i32(out_$i610, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb567, $bb568;

  $bb557:
    assume {:verifier.code 0} true;
    out_$i611 := $slt.i32(out_$i610, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  corral_source_split_10293:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1629} out_$i610 := __VERIFIER_nondet_int();
    call {:si_unique_call 1630} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i610);
    call {:si_unique_call 1631} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i610);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb555:
    assume out_$i609 == 1;
    goto corral_source_split_10293;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    out_$i609 := $ne.i32(out_$i608, 0);
    goto corral_source_split_9204;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    out_$i608 := $M.43;
    goto corral_source_split_9203;

  $bb9:
    assume out_$i4 == 1;
    goto corral_source_split_9202;

  $bb8:
    assume !(out_$i3 == 1);
    assume {:verifier.code 0} true;
    out_$i4 := $slt.i32(out_$i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb579:
    assume !(out_$i633 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    goto $bb580;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10339;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} out_vslice_dummy_var_454 := mxl111sf_ctrl_program_regs(out_$p634, out_$p635);
    goto corral_source_split_10338;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    out_$p635 := $M.103;
    goto corral_source_split_10337;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    out_$p634 := $M.100;
    goto corral_source_split_10336;

  $bb578:
    assume out_$i633 == 1;
    goto corral_source_split_10335;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    out_$i633 := $eq.i32(out_$i632, 2);
    goto corral_source_split_10333;

  $bb577:
    assume {:verifier.code 0} true;
    out_$i632 := $M.43;
    goto corral_source_split_10332;

  $bb576:
    assume !(out_$i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10330;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} out_vslice_dummy_var_453 := mxl111sf_ctrl_program_regs(out_$p629, out_$p630);
    goto corral_source_split_10329;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    out_$p630 := $M.103;
    goto corral_source_split_10328;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    out_$p629 := $M.100;
    goto corral_source_split_10327;

  $bb575:
    assume out_$i628 == 1;
    goto corral_source_split_10326;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    out_$i628 := $eq.i32(out_$i627, 1);
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$i627 := $M.43;
    goto corral_source_split_10308;

  $bb568:
    assume !(out_$i615 == 1);
    goto corral_source_split_10307;

  $bb582:
    assume !(out_$i638 == 1);
    assume {:verifier.code 0} true;
    goto $bb583;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    goto $bb583;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10348;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} out_vslice_dummy_var_455 := mxl111sf_read_reg(out_$p639, out_$i642, out_$p643);
    goto corral_source_split_10347;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    out_$p643 := $M.105;
    goto corral_source_split_10346;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    out_$i642 := $trunc.i32.i8(out_$i641);
    goto corral_source_split_10345;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    out_$i641 := $zext.i8.i32(out_$i640);
    goto corral_source_split_10344;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    out_$i640 := $M.104;
    goto corral_source_split_10343;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    out_$p639 := $M.100;
    goto corral_source_split_10342;

  $bb581:
    assume out_$i638 == 1;
    goto corral_source_split_10341;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb581, $bb582;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    out_$i638 := $eq.i32(out_$i637, 2);
    goto corral_source_split_10297;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    out_$i637 := $M.43;
    goto corral_source_split_10296;

  $bb560:
    assume out_$i612 == 1;
    goto corral_source_split_10295;

  $bb559:
    assume !(out_$i611 == 1);
    assume {:verifier.code 0} true;
    out_$i612 := $slt.i32(out_$i610, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb585:
    assume !(out_$i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb586;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $M.41 := out_$i649;
    call {:si_unique_call 1642} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i649);
    goto corral_source_split_10355;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    out_$i649 := $sub.i32(out_$i648, 1);
    goto corral_source_split_10354;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    out_$i648 := $M.41;
    goto corral_source_split_10353;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(1);
    goto corral_source_split_10352;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} out_vslice_dummy_var_456 := ldv_mxl_demod_config_release_10();
    goto corral_source_split_10351;

  $bb584:
    assume out_$i646 == 1;
    goto corral_source_split_10350;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb584, $bb585;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i646 := $eq.i32(out_$i645, 2);
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    out_$i645 := $M.43;
    goto corral_source_split_10300;

  $bb562:
    assume out_$i613 == 1;
    goto corral_source_split_10299;

  $bb561:
    assume !(out_$i612 == 1);
    assume {:verifier.code 0} true;
    out_$i613 := $slt.i32(out_$i610, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb562, $bb563;

  $bb588:
    assume !(out_$i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    goto $bb589;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $M.41 := out_$i654;
    call {:si_unique_call 1645} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i654);
    goto corral_source_split_10362;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    out_$i654 := $add.i32(out_$i653, 1);
    goto corral_source_split_10361;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    out_$i653 := $M.41;
    goto corral_source_split_10360;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1644} {:cexpr "ldv_state_variable_10"} boogie_si_record_i32(2);
    goto corral_source_split_10359;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1643} out_vslice_dummy_var_457 := ldv_mxl_demod_config_probe_10();
    goto corral_source_split_10358;

  $bb587:
    assume out_$i651 == 1;
    goto corral_source_split_10357;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb587, $bb588;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i651 := $eq.i32(out_$i650, 1);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    out_$i650 := $M.43;
    goto corral_source_split_10304;

  $bb564:
    assume out_$i614 == 1;
    goto corral_source_split_10303;

  $bb563:
    assume !(out_$i613 == 1);
    assume {:verifier.code 0} true;
    out_$i614 := $eq.i32(out_$i610, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb564, $bb565;

  $bb566:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb565:
    assume {:verifier.code 0} true;
    assume !(out_$i614 == 1);
    goto $bb566;

  $bb570:
    assume {:verifier.code 0} true;
    assume !(out_$i616 == 1);
    goto $bb566;

  $bb593:
    assume !(out_$i656 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb664:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb663:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb636:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb627:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb613:
    assume !(out_$i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb616:
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb615:
    assume !(out_$i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb616;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10402;

  $bb614:
    assume out_$i671 == 1;
    goto corral_source_split_10401;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb614, $bb615;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    out_$i671 := $eq.i32(out_$i670, 0);
    goto corral_source_split_10399;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    out_$i670 := $M.107;
    goto corral_source_split_10398;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $M.107 := out_$i669;
    call {:si_unique_call 1650} {:cexpr "ldv_retval_10"} boogie_si_record_i32(out_$i669);
    goto corral_source_split_10397;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1649} out_$i669 := mxl111sf_init(out_$p668);
    goto corral_source_split_10396;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    out_$p668 := $M.106;
    goto corral_source_split_10395;

  $bb612:
    assume out_$i667 == 1;
    goto corral_source_split_10394;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb612, $bb613;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    out_$i667 := $eq.i32(out_$i666, 2);
    goto corral_source_split_10392;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    out_$i666 := $M.44;
    goto corral_source_split_10391;

  $bb610:
    assume out_$i665 == 1;
    goto corral_source_split_10390;

  $bb606:
    assume out_$i663 == 1;
    assume {:verifier.code 0} true;
    out_$i665 := $eq.i32(out_$i657, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb610, $bb611;

  $bb595:
    assume out_$i658 == 1;
    assume {:verifier.code 0} true;
    out_$i663 := $slt.i32(out_$i657, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb606, $bb607;

  $bb594:
    assume {:verifier.code 0} true;
    out_$i658 := $slt.i32(out_$i657, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb595, $bb596;

  corral_source_split_10364:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1646} out_$i657 := __VERIFIER_nondet_int();
    call {:si_unique_call 1647} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i657);
    call {:si_unique_call 1648} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i657);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb592:
    assume out_$i656 == 1;
    goto corral_source_split_10364;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$i656 := $ne.i32(out_$i655, 0);
    goto corral_source_split_9208;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    out_$i655 := $M.44;
    goto corral_source_split_9207;

  $bb11:
    assume out_$i5 == 1;
    goto corral_source_split_9206;

  $bb10:
    assume !(out_$i4 == 1);
    assume {:verifier.code 0} true;
    out_$i5 := $eq.i32(out_$i0, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb626:
    assume !(out_$i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb627;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    goto $bb627;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10423;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} out_vslice_dummy_var_460 := mxl111sf_attach_tuner(out_$p682);
    goto corral_source_split_10422;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    out_$p682 := $M.108;
    goto corral_source_split_10421;

  $bb625:
    assume out_$i681 == 1;
    goto corral_source_split_10420;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    out_$i681 := $eq.i32(out_$i680, 2);
    goto corral_source_split_10418;

  $bb624:
    assume {:verifier.code 0} true;
    out_$i680 := $M.44;
    goto corral_source_split_10417;

  $bb623:
    assume !(out_$i677 == 1);
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    goto $bb624;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10415;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} out_vslice_dummy_var_459 := mxl111sf_attach_tuner(out_$p678);
    goto corral_source_split_10414;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    out_$p678 := $M.108;
    goto corral_source_split_10413;

  $bb622:
    assume out_$i677 == 1;
    goto corral_source_split_10412;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb622, $bb623;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    out_$i677 := $eq.i32(out_$i676, 3);
    goto corral_source_split_10410;

  $bb621:
    assume {:verifier.code 0} true;
    out_$i676 := $M.44;
    goto corral_source_split_10409;

  $bb620:
    assume !(out_$i673 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    goto $bb621;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10407;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} out_vslice_dummy_var_458 := mxl111sf_attach_tuner(out_$p674);
    goto corral_source_split_10406;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    out_$p674 := $M.108;
    goto corral_source_split_10405;

  $bb619:
    assume out_$i673 == 1;
    goto corral_source_split_10404;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    out_$i673 := $eq.i32(out_$i672, 1);
    goto corral_source_split_10384;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    out_$i672 := $M.44;
    goto corral_source_split_10383;

  $bb608:
    assume out_$i664 == 1;
    goto corral_source_split_10382;

  $bb607:
    assume !(out_$i663 == 1);
    assume {:verifier.code 0} true;
    out_$i664 := $slt.i32(out_$i657, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb608, $bb609;

  $bb635:
    assume !(out_$i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_10447:
    assume {:verifier.code 0} true;
    goto $bb636;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10447;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_vslice_dummy_var_463 := mxl111sf_ep5_streaming_ctrl(out_$p696, out_$i697);
    goto corral_source_split_10446;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    out_$i697 := $M.110;
    goto corral_source_split_10445;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    out_$p696 := $M.109;
    goto corral_source_split_10444;

  $bb634:
    assume out_$i695 == 1;
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb634, $bb635;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    out_$i695 := $eq.i32(out_$i694, 2);
    goto corral_source_split_10441;

  $bb633:
    assume {:verifier.code 0} true;
    out_$i694 := $M.44;
    goto corral_source_split_10440;

  $bb632:
    assume !(out_$i690 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb633;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10438;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} out_vslice_dummy_var_462 := mxl111sf_ep5_streaming_ctrl(out_$p691, out_$i692);
    goto corral_source_split_10437;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    out_$i692 := $M.110;
    goto corral_source_split_10436;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    out_$p691 := $M.109;
    goto corral_source_split_10435;

  $bb631:
    assume out_$i690 == 1;
    goto corral_source_split_10434;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    out_$i690 := $eq.i32(out_$i689, 3);
    goto corral_source_split_10432;

  $bb630:
    assume {:verifier.code 0} true;
    out_$i689 := $M.44;
    goto corral_source_split_10431;

  $bb629:
    assume !(out_$i685 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb630;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10429;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} out_vslice_dummy_var_461 := mxl111sf_ep5_streaming_ctrl(out_$p686, out_$i687);
    goto corral_source_split_10428;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    out_$i687 := $M.110;
    goto corral_source_split_10427;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    out_$p686 := $M.109;
    goto corral_source_split_10426;

  $bb628:
    assume out_$i685 == 1;
    goto corral_source_split_10425;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb628, $bb629;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    out_$i685 := $eq.i32(out_$i684, 1);
    goto corral_source_split_10388;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    out_$i684 := $M.44;
    goto corral_source_split_10387;

  $bb609:
    assume !(out_$i664 == 1);
    goto corral_source_split_10386;

  $bb644:
    assume !(out_$i708 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10468;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} out_vslice_dummy_var_466 := mxl111sf_frontend_attach_mh(out_$p709);
    goto corral_source_split_10467;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    out_$p709 := $M.108;
    goto corral_source_split_10466;

  $bb643:
    assume out_$i708 == 1;
    goto corral_source_split_10465;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    out_$i708 := $eq.i32(out_$i707, 2);
    goto corral_source_split_10463;

  $bb642:
    assume {:verifier.code 0} true;
    out_$i707 := $M.44;
    goto corral_source_split_10462;

  $bb641:
    assume !(out_$i704 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10460;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} out_vslice_dummy_var_465 := mxl111sf_frontend_attach_mh(out_$p705);
    goto corral_source_split_10459;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    out_$p705 := $M.108;
    goto corral_source_split_10458;

  $bb640:
    assume out_$i704 == 1;
    goto corral_source_split_10457;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$i704 := $eq.i32(out_$i703, 3);
    goto corral_source_split_10455;

  $bb639:
    assume {:verifier.code 0} true;
    out_$i703 := $M.44;
    goto corral_source_split_10454;

  $bb638:
    assume !(out_$i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10452;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} out_vslice_dummy_var_464 := mxl111sf_frontend_attach_mh(out_$p701);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    out_$p701 := $M.108;
    goto corral_source_split_10450;

  $bb637:
    assume out_$i700 == 1;
    goto corral_source_split_10449;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    out_$i700 := $eq.i32(out_$i699, 1);
    goto corral_source_split_10376;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    out_$i699 := $M.44;
    goto corral_source_split_10375;

  $bb604:
    assume out_$i662 == 1;
    goto corral_source_split_10374;

  $bb597:
    assume out_$i659 == 1;
    assume {:verifier.code 0} true;
    out_$i662 := $slt.i32(out_$i657, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb604, $bb605;

  $bb596:
    assume !(out_$i658 == 1);
    assume {:verifier.code 0} true;
    out_$i659 := $slt.i32(out_$i657, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb597, $bb598;

  $bb653:
    assume !(out_$i724 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    goto $bb654;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10495;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_469 := mxl111sf_get_stream_config_mh(out_$p725, out_$p726, out_$p727);
    goto corral_source_split_10494;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    out_$p727 := $M.112;
    goto corral_source_split_10493;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    out_$p726 := $M.111;
    goto corral_source_split_10492;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    out_$p725 := $M.109;
    goto corral_source_split_10491;

  $bb652:
    assume out_$i724 == 1;
    goto corral_source_split_10490;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb652, $bb653;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    out_$i724 := $eq.i32(out_$i723, 2);
    goto corral_source_split_10488;

  $bb651:
    assume {:verifier.code 0} true;
    out_$i723 := $M.44;
    goto corral_source_split_10487;

  $bb650:
    assume !(out_$i718 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    goto $bb651;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $M.44 := 3;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_10485;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} out_vslice_dummy_var_468 := mxl111sf_get_stream_config_mh(out_$p719, out_$p720, out_$p721);
    goto corral_source_split_10484;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    out_$p721 := $M.112;
    goto corral_source_split_10483;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    out_$p720 := $M.111;
    goto corral_source_split_10482;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    out_$p719 := $M.109;
    goto corral_source_split_10481;

  $bb649:
    assume out_$i718 == 1;
    goto corral_source_split_10480;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb649, $bb650;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    out_$i718 := $eq.i32(out_$i717, 3);
    goto corral_source_split_10478;

  $bb648:
    assume {:verifier.code 0} true;
    out_$i717 := $M.44;
    goto corral_source_split_10477;

  $bb647:
    assume !(out_$i712 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10475;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_vslice_dummy_var_467 := mxl111sf_get_stream_config_mh(out_$p713, out_$p714, out_$p715);
    goto corral_source_split_10474;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    out_$p715 := $M.112;
    goto corral_source_split_10473;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    out_$p714 := $M.111;
    goto corral_source_split_10472;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    out_$p713 := $M.109;
    goto corral_source_split_10471;

  $bb646:
    assume out_$i712 == 1;
    goto corral_source_split_10470;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    out_$i712 := $eq.i32(out_$i711, 1);
    goto corral_source_split_10380;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    out_$i711 := $M.44;
    goto corral_source_split_10379;

  $bb605:
    assume !(out_$i662 == 1);
    goto corral_source_split_10378;

  $bb656:
    assume !(out_$i730 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    goto $bb657;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $M.41 := out_$i733;
    call {:si_unique_call 1678} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i733);
    goto corral_source_split_10502;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    out_$i733 := $add.i32(out_$i732, 1);
    goto corral_source_split_10501;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    out_$i732 := $M.41;
    goto corral_source_split_10500;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.44 := 2;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_10499;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_470 := ldv_mxl111sf_props_mh_setup_5();
    goto corral_source_split_10498;

  $bb655:
    assume out_$i730 == 1;
    goto corral_source_split_10497;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb655, $bb656;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    out_$i730 := $eq.i32(out_$i729, 1);
    goto corral_source_split_10368;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    out_$i729 := $M.44;
    goto corral_source_split_10367;

  $bb599:
    assume out_$i660 == 1;
    goto corral_source_split_10366;

  $bb598:
    assume !(out_$i659 == 1);
    assume {:verifier.code 0} true;
    out_$i660 := $slt.i32(out_$i657, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb599, $bb600;

  $bb662:
    assume !(out_$i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    goto $bb663;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.41 := out_$i743;
    call {:si_unique_call 1684} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i743);
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    out_$i743 := $sub.i32(out_$i742, 1);
    goto corral_source_split_10518;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    out_$i742 := $M.41;
    goto corral_source_split_10517;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10516;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_472 := ldv_mxl111sf_props_mh_release_5();
    goto corral_source_split_10515;

  $bb661:
    assume out_$i740 == 1;
    goto corral_source_split_10514;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb661, $bb662;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    out_$i740 := $eq.i32(out_$i739, 2);
    goto corral_source_split_10512;

  $bb660:
    assume {:verifier.code 0} true;
    out_$i739 := $M.44;
    goto corral_source_split_10511;

  $bb659:
    assume !(out_$i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb660;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    goto $bb660;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    $M.41 := out_$i738;
    call {:si_unique_call 1681} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i738);
    goto corral_source_split_10509;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    out_$i738 := $sub.i32(out_$i737, 1);
    goto corral_source_split_10508;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    out_$i737 := $M.41;
    goto corral_source_split_10507;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $M.44 := 1;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_10506;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} out_vslice_dummy_var_471 := ldv_mxl111sf_props_mh_release_5();
    goto corral_source_split_10505;

  $bb658:
    assume out_$i735 == 1;
    goto corral_source_split_10504;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb658, $bb659;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    out_$i735 := $eq.i32(out_$i734, 3);
    goto corral_source_split_10372;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    out_$i734 := $M.44;
    goto corral_source_split_10371;

  $bb601:
    assume out_$i661 == 1;
    goto corral_source_split_10370;

  $bb600:
    assume !(out_$i660 == 1);
    assume {:verifier.code 0} true;
    out_$i661 := $eq.i32(out_$i657, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb603:
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb602:
    assume {:verifier.code 0} true;
    assume !(out_$i661 == 1);
    goto $bb603;

  $bb611:
    assume {:verifier.code 0} true;
    assume !(out_$i665 == 1);
    goto $bb603;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb12:
    assume {:verifier.code 0} true;
    assume !(out_$i5 == 1);
    goto $bb13;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i12 == 1);
    goto $bb13;

  $bb102_dummy:
    call {:si_unique_call 1} out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$p54, out_$i55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181, out_$i182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$i253, out_$i254, out_$p255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$p406, out_$p407, out_$i409, out_$i410, out_$p411, out_$p412, out_$p413, out_$i415, out_$i416, out_$p417, out_$p418, out_$p419, out_$i421, out_$i422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i429, out_$i430, out_$i431, out_$i432, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$i539, out_$i541, out_$i542, out_$p543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i554, out_$i555, out_$p556, out_$i558, out_$i559, out_$p560, out_$p561, out_$p562, out_$i564, out_$i565, out_$p566, out_$p567, out_$p568, out_$i570, out_$i571, out_$p572, out_$p573, out_$p574, out_$i576, out_$i577, out_$i579, out_$i580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i627, out_$i628, out_$p629, out_$p630, out_$i632, out_$i633, out_$p634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$i662, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$i669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i676, out_$i677, out_$p678, out_$i680, out_$i681, out_$p682, out_$i684, out_$i685, out_$p686, out_$i687, out_$i689, out_$i690, out_$p691, out_$i692, out_$i694, out_$i695, out_$p696, out_$i697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$p714, out_$p715, out_$i717, out_$i718, out_$p719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$p727, out_$i729, out_$i730, out_$i732, out_$i733, out_$i734, out_$i735, out_$i737, out_$i738, out_$i739, out_$i740, out_$i742, out_$i743, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376, out_vslice_dummy_var_377, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400, out_vslice_dummy_var_401, out_vslice_dummy_var_402, out_vslice_dummy_var_403, out_vslice_dummy_var_404, out_vslice_dummy_var_405, out_vslice_dummy_var_406, out_vslice_dummy_var_407, out_vslice_dummy_var_408, out_vslice_dummy_var_409, out_vslice_dummy_var_410, out_vslice_dummy_var_411, out_vslice_dummy_var_412, out_vslice_dummy_var_413, out_vslice_dummy_var_414, out_vslice_dummy_var_415, out_vslice_dummy_var_416, out_vslice_dummy_var_417, out_vslice_dummy_var_418, out_vslice_dummy_var_419, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472 := main_loop_$bb1(out_$i0, out_$i1, out_$i2, out_$i3, out_$i4, out_$i5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$i34, out_$i35, out_$p36, out_$i38, out_$i39, out_$p40, out_$i42, out_$i43, out_$p44, out_$i45, out_$i47, out_$i48, out_$p49, out_$i50, out_$i52, out_$i53, out_$p54, out_$i55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$p71, out_$p72, out_$p73, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i81, out_$i82, out_$p83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i90, out_$i91, out_$i92, out_$i93, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$p115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i134, out_$i136, out_$i137, out_$p138, out_$i139, out_$i141, out_$i142, out_$p143, out_$i144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$p161, out_$p162, out_$i164, out_$i165, out_$p166, out_$p167, out_$p168, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$i176, out_$i177, out_$i179, out_$i180, out_$i181, out_$i182, out_$i184, out_$i185, out_$i186, out_$i187, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$p204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i209, out_$p210, out_$i212, out_$i213, out_$p214, out_$i216, out_$i217, out_$p218, out_$i220, out_$i221, out_$p222, out_$i223, out_$i225, out_$i226, out_$p227, out_$i228, out_$i230, out_$i231, out_$p232, out_$i233, out_$i235, out_$i236, out_$p237, out_$i239, out_$i240, out_$p241, out_$i243, out_$i244, out_$p245, out_$i247, out_$i248, out_$p249, out_$p250, out_$p251, out_$i253, out_$i254, out_$p255, out_$p256, out_$p257, out_$i259, out_$i260, out_$p261, out_$p262, out_$p263, out_$i265, out_$i266, out_$i268, out_$i269, out_$i270, out_$i271, out_$i273, out_$i274, out_$i275, out_$i276, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$i292, out_$p293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i301, out_$i302, out_$p303, out_$i305, out_$i306, out_$p307, out_$i309, out_$i310, out_$p311, out_$i312, out_$i314, out_$i315, out_$p316, out_$i317, out_$i319, out_$i320, out_$p321, out_$p322, out_$i324, out_$i325, out_$p326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i332, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$i340, out_$i341, out_$i342, out_$i343, out_$i345, out_$i346, out_$i347, out_$i348, out_$i349, out_$i350, out_$i351, out_$i352, out_$i353, out_$i354, out_$i355, out_$i356, out_$i357, out_$i358, out_$i359, out_$p360, out_$i361, out_$i362, out_$i363, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i379, out_$i381, out_$i382, out_$p383, out_$i384, out_$i386, out_$i387, out_$p388, out_$i389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$p406, out_$p407, out_$i409, out_$i410, out_$p411, out_$p412, out_$p413, out_$i415, out_$i416, out_$p417, out_$p418, out_$p419, out_$i421, out_$i422, out_$i424, out_$i425, out_$i426, out_$i427, out_$i429, out_$i430, out_$i431, out_$i432, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$p444, out_$p445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$p463, out_$p464, out_$i465, out_$i466, out_$i467, out_$i468, out_$i469, out_$i470, out_$i471, out_$i472, out_$i473, out_$p474, out_$i475, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$p481, out_$i482, out_$i483, out_$i484, out_$i485, out_$p486, out_$i487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$p493, out_$i494, out_$i495, out_$i496, out_$i497, out_$i498, out_$i499, out_$i500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$i512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$p521, out_$i523, out_$i524, out_$p525, out_$i527, out_$i528, out_$p529, out_$i531, out_$i532, out_$p533, out_$i534, out_$i536, out_$i537, out_$p538, out_$i539, out_$i541, out_$i542, out_$p543, out_$i544, out_$i546, out_$i547, out_$p548, out_$i550, out_$i551, out_$p552, out_$i554, out_$i555, out_$p556, out_$i558, out_$i559, out_$p560, out_$p561, out_$p562, out_$i564, out_$i565, out_$p566, out_$p567, out_$p568, out_$i570, out_$i571, out_$p572, out_$p573, out_$p574, out_$i576, out_$i577, out_$i579, out_$i580, out_$i581, out_$i582, out_$i584, out_$i585, out_$i586, out_$i587, out_$i589, out_$i590, out_$i591, out_$i592, out_$i593, out_$i594, out_$i595, out_$i596, out_$i597, out_$i598, out_$i599, out_$i600, out_$i601, out_$i602, out_$i603, out_$i604, out_$i605, out_$i606, out_$i607, out_$i608, out_$i609, out_$i610, out_$i611, out_$i612, out_$i613, out_$i614, out_$i615, out_$i616, out_$i617, out_$i618, out_$p619, out_$i620, out_$i621, out_$i622, out_$i623, out_$i624, out_$i625, out_$i627, out_$i628, out_$p629, out_$p630, out_$i632, out_$i633, out_$p634, out_$p635, out_$i637, out_$i638, out_$p639, out_$i640, out_$i641, out_$i642, out_$p643, out_$i645, out_$i646, out_$i648, out_$i649, out_$i650, out_$i651, out_$i653, out_$i654, out_$i655, out_$i656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$i662, out_$i663, out_$i664, out_$i665, out_$i666, out_$i667, out_$p668, out_$i669, out_$i670, out_$i671, out_$i672, out_$i673, out_$p674, out_$i676, out_$i677, out_$p678, out_$i680, out_$i681, out_$p682, out_$i684, out_$i685, out_$p686, out_$i687, out_$i689, out_$i690, out_$p691, out_$i692, out_$i694, out_$i695, out_$p696, out_$i697, out_$i699, out_$i700, out_$p701, out_$i703, out_$i704, out_$p705, out_$i707, out_$i708, out_$p709, out_$i711, out_$i712, out_$p713, out_$p714, out_$p715, out_$i717, out_$i718, out_$p719, out_$p720, out_$p721, out_$i723, out_$i724, out_$p725, out_$p726, out_$p727, out_$i729, out_$i730, out_$i732, out_$i733, out_$i734, out_$i735, out_$i737, out_$i738, out_$i739, out_$i740, out_$i742, out_$i743, out_vslice_dummy_var_365, out_vslice_dummy_var_366, out_vslice_dummy_var_367, out_vslice_dummy_var_368, out_vslice_dummy_var_369, out_vslice_dummy_var_370, out_vslice_dummy_var_371, out_vslice_dummy_var_372, out_vslice_dummy_var_373, out_vslice_dummy_var_374, out_vslice_dummy_var_375, out_vslice_dummy_var_376, out_vslice_dummy_var_377, out_vslice_dummy_var_378, out_vslice_dummy_var_379, out_vslice_dummy_var_380, out_vslice_dummy_var_381, out_vslice_dummy_var_382, out_vslice_dummy_var_383, out_vslice_dummy_var_384, out_vslice_dummy_var_385, out_vslice_dummy_var_386, out_vslice_dummy_var_387, out_vslice_dummy_var_388, out_vslice_dummy_var_389, out_vslice_dummy_var_390, out_vslice_dummy_var_391, out_vslice_dummy_var_392, out_vslice_dummy_var_393, out_vslice_dummy_var_394, out_vslice_dummy_var_395, out_vslice_dummy_var_396, out_vslice_dummy_var_397, out_vslice_dummy_var_398, out_vslice_dummy_var_399, out_vslice_dummy_var_400, out_vslice_dummy_var_401, out_vslice_dummy_var_402, out_vslice_dummy_var_403, out_vslice_dummy_var_404, out_vslice_dummy_var_405, out_vslice_dummy_var_406, out_vslice_dummy_var_407, out_vslice_dummy_var_408, out_vslice_dummy_var_409, out_vslice_dummy_var_410, out_vslice_dummy_var_411, out_vslice_dummy_var_412, out_vslice_dummy_var_413, out_vslice_dummy_var_414, out_vslice_dummy_var_415, out_vslice_dummy_var_416, out_vslice_dummy_var_417, out_vslice_dummy_var_418, out_vslice_dummy_var_419, out_vslice_dummy_var_420, out_vslice_dummy_var_421, out_vslice_dummy_var_422, out_vslice_dummy_var_423, out_vslice_dummy_var_424, out_vslice_dummy_var_425, out_vslice_dummy_var_426, out_vslice_dummy_var_427, out_vslice_dummy_var_428, out_vslice_dummy_var_429, out_vslice_dummy_var_430, out_vslice_dummy_var_431, out_vslice_dummy_var_432, out_vslice_dummy_var_433, out_vslice_dummy_var_434, out_vslice_dummy_var_435, out_vslice_dummy_var_436, out_vslice_dummy_var_437, out_vslice_dummy_var_438, out_vslice_dummy_var_439, out_vslice_dummy_var_440, out_vslice_dummy_var_441, out_vslice_dummy_var_442, out_vslice_dummy_var_443, out_vslice_dummy_var_444, out_vslice_dummy_var_445, out_vslice_dummy_var_446, out_vslice_dummy_var_447, out_vslice_dummy_var_448, out_vslice_dummy_var_449, out_vslice_dummy_var_450, out_vslice_dummy_var_451, out_vslice_dummy_var_452, out_vslice_dummy_var_453, out_vslice_dummy_var_454, out_vslice_dummy_var_455, out_vslice_dummy_var_456, out_vslice_dummy_var_457, out_vslice_dummy_var_458, out_vslice_dummy_var_459, out_vslice_dummy_var_460, out_vslice_dummy_var_461, out_vslice_dummy_var_462, out_vslice_dummy_var_463, out_vslice_dummy_var_464, out_vslice_dummy_var_465, out_vslice_dummy_var_466, out_vslice_dummy_var_467, out_vslice_dummy_var_468, out_vslice_dummy_var_469, out_vslice_dummy_var_470, out_vslice_dummy_var_471, out_vslice_dummy_var_472);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$i0: i32, in_$i1: i1, in_$i2: i1, in_$i3: i1, in_$i4: i1, in_$i5: i1, in_$i6: i1, in_$i7: i1, in_$i8: i1, in_$i9: i1, in_$i10: i1, in_$i11: i1, in_$i12: i1, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i1, in_$i24: i32, in_$i25: i1, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1, in_$i30: i32, in_$i31: i1, in_$p32: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$i38: i32, in_$i39: i1, in_$p40: ref, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$i45: i32, in_$i47: i32, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$i52: i32, in_$i53: i1, in_$p54: ref, in_$i55: i32, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i69: i32, in_$i70: i1, in_$p71: ref, in_$p72: ref, in_$p73: ref, in_$i75: i32, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i81: i32, in_$i82: i1, in_$p83: ref, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$i90: i32, in_$i91: i32, in_$i92: i32, in_$i93: i1, in_$i95: i32, in_$i96: i32, in_$i97: i32, in_$i98: i1, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i1, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i134: i32, in_$i136: i32, in_$i137: i1, in_$p138: ref, in_$i139: i32, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$p161: ref, in_$p162: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$p167: ref, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$i176: i32, in_$i177: i1, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i1, in_$i184: i32, in_$i185: i32, in_$i186: i32, in_$i187: i1, in_$i189: i32, in_$i190: i32, in_$i191: i32, in_$i192: i1, in_$i193: i32, in_$i194: i1, in_$i195: i1, in_$i196: i1, in_$i197: i1, in_$i198: i1, in_$i199: i1, in_$i200: i1, in_$i201: i1, in_$i202: i32, in_$i203: i1, in_$p204: ref, in_$i205: i32, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$p210: ref, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i216: i32, in_$i217: i1, in_$p218: ref, in_$i220: i32, in_$i221: i1, in_$p222: ref, in_$i223: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i233: i32, in_$i235: i32, in_$i236: i1, in_$p237: ref, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i243: i32, in_$i244: i1, in_$p245: ref, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$p250: ref, in_$p251: ref, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$p262: ref, in_$p263: ref, in_$i265: i32, in_$i266: i1, in_$i268: i32, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_$i273: i32, in_$i274: i32, in_$i275: i32, in_$i276: i1, in_$i278: i32, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$i282: i32, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i1, in_$i291: i32, in_$i292: i1, in_$p293: ref, in_$i294: i8, in_$i295: i32, in_$i296: i8, in_$i297: i8, in_$i298: i32, in_$i299: i8, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$i305: i32, in_$i306: i1, in_$p307: ref, in_$i309: i32, in_$i310: i1, in_$p311: ref, in_$i312: i32, in_$i314: i32, in_$i315: i1, in_$p316: ref, in_$i317: i32, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$p322: ref, in_$i324: i32, in_$i325: i1, in_$p326: ref, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i332: i8, in_$i333: i32, in_$i334: i8, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$i340: i32, in_$i341: i32, in_$i342: i32, in_$i343: i1, in_$i345: i32, in_$i346: i32, in_$i347: i32, in_$i348: i1, in_$i349: i32, in_$i350: i1, in_$i351: i1, in_$i352: i1, in_$i353: i1, in_$i354: i1, in_$i355: i1, in_$i356: i1, in_$i357: i1, in_$i358: i32, in_$i359: i1, in_$p360: ref, in_$i361: i32, in_$i362: i32, in_$i363: i1, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i379: i32, in_$i381: i32, in_$i382: i1, in_$p383: ref, in_$i384: i32, in_$i386: i32, in_$i387: i1, in_$p388: ref, in_$i389: i32, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$p406: ref, in_$p407: ref, in_$i409: i32, in_$i410: i1, in_$p411: ref, in_$p412: ref, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$p418: ref, in_$p419: ref, in_$i421: i32, in_$i422: i1, in_$i424: i32, in_$i425: i32, in_$i426: i32, in_$i427: i1, in_$i429: i32, in_$i430: i32, in_$i431: i32, in_$i432: i1, in_$i434: i32, in_$i435: i32, in_$i436: i32, in_$i437: i1, in_$i438: i32, in_$i439: i1, in_$i440: i1, in_$i441: i1, in_$i442: i32, in_$i443: i1, in_$p444: ref, in_$p445: ref, in_$i446: i32, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i452: i32, in_$i453: i1, in_$i454: i32, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i1, in_$i460: i1, in_$i461: i32, in_$i462: i1, in_$p463: ref, in_$p464: ref, in_$i465: i32, in_$i466: i32, in_$i467: i1, in_$i468: i32, in_$i469: i32, in_$i470: i32, in_$i471: i1, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i475: i32, in_$i476: i32, in_$i477: i32, in_$i478: i1, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i482: i32, in_$i483: i32, in_$i484: i32, in_$i485: i1, in_$p486: ref, in_$i487: i32, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i494: i32, in_$i495: i32, in_$i496: i1, in_$i497: i32, in_$i498: i1, in_$i499: i32, in_$i500: i32, in_$i501: i1, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i1, in_$i506: i1, in_$i507: i1, in_$i508: i1, in_$i509: i1, in_$i510: i1, in_$i511: i1, in_$i512: i1, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i32, in_$i518: i1, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i523: i32, in_$i524: i1, in_$p525: ref, in_$i527: i32, in_$i528: i1, in_$p529: ref, in_$i531: i32, in_$i532: i1, in_$p533: ref, in_$i534: i32, in_$i536: i32, in_$i537: i1, in_$p538: ref, in_$i539: i32, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i544: i32, in_$i546: i32, in_$i547: i1, in_$p548: ref, in_$i550: i32, in_$i551: i1, in_$p552: ref, in_$i554: i32, in_$i555: i1, in_$p556: ref, in_$i558: i32, in_$i559: i1, in_$p560: ref, in_$p561: ref, in_$p562: ref, in_$i564: i32, in_$i565: i1, in_$p566: ref, in_$p567: ref, in_$p568: ref, in_$i570: i32, in_$i571: i1, in_$p572: ref, in_$p573: ref, in_$p574: ref, in_$i576: i32, in_$i577: i1, in_$i579: i32, in_$i580: i32, in_$i581: i32, in_$i582: i1, in_$i584: i32, in_$i585: i32, in_$i586: i32, in_$i587: i1, in_$i589: i32, in_$i590: i32, in_$i591: i32, in_$i592: i1, in_$i593: i32, in_$i594: i1, in_$i595: i1, in_$i596: i1, in_$i597: i32, in_$i598: i1, in_$i599: i32, in_$i600: i1, in_$i601: i32, in_$i602: i1, in_$i603: i32, in_$i604: i32, in_$i605: i1, in_$i606: i32, in_$i607: i1, in_$i608: i32, in_$i609: i1, in_$i610: i32, in_$i611: i1, in_$i612: i1, in_$i613: i1, in_$i614: i1, in_$i615: i1, in_$i616: i1, in_$i617: i32, in_$i618: i1, in_$p619: ref, in_$i620: i8, in_$i621: i32, in_$i622: i8, in_$i623: i8, in_$i624: i32, in_$i625: i8, in_$i627: i32, in_$i628: i1, in_$p629: ref, in_$p630: ref, in_$i632: i32, in_$i633: i1, in_$p634: ref, in_$p635: ref, in_$i637: i32, in_$i638: i1, in_$p639: ref, in_$i640: i8, in_$i641: i32, in_$i642: i8, in_$p643: ref, in_$i645: i32, in_$i646: i1, in_$i648: i32, in_$i649: i32, in_$i650: i32, in_$i651: i1, in_$i653: i32, in_$i654: i32, in_$i655: i32, in_$i656: i1, in_$i657: i32, in_$i658: i1, in_$i659: i1, in_$i660: i1, in_$i661: i1, in_$i662: i1, in_$i663: i1, in_$i664: i1, in_$i665: i1, in_$i666: i32, in_$i667: i1, in_$p668: ref, in_$i669: i32, in_$i670: i32, in_$i671: i1, in_$i672: i32, in_$i673: i1, in_$p674: ref, in_$i676: i32, in_$i677: i1, in_$p678: ref, in_$i680: i32, in_$i681: i1, in_$p682: ref, in_$i684: i32, in_$i685: i1, in_$p686: ref, in_$i687: i32, in_$i689: i32, in_$i690: i1, in_$p691: ref, in_$i692: i32, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$i697: i32, in_$i699: i32, in_$i700: i1, in_$p701: ref, in_$i703: i32, in_$i704: i1, in_$p705: ref, in_$i707: i32, in_$i708: i1, in_$p709: ref, in_$i711: i32, in_$i712: i1, in_$p713: ref, in_$p714: ref, in_$p715: ref, in_$i717: i32, in_$i718: i1, in_$p719: ref, in_$p720: ref, in_$p721: ref, in_$i723: i32, in_$i724: i1, in_$p725: ref, in_$p726: ref, in_$p727: ref, in_$i729: i32, in_$i730: i1, in_$i732: i32, in_$i733: i32, in_$i734: i32, in_$i735: i1, in_$i737: i32, in_$i738: i32, in_$i739: i32, in_$i740: i1, in_$i742: i32, in_$i743: i32, in_vslice_dummy_var_365: i32, in_vslice_dummy_var_366: i32, in_vslice_dummy_var_367: i32, in_vslice_dummy_var_368: i32, in_vslice_dummy_var_369: i32, in_vslice_dummy_var_370: i32, in_vslice_dummy_var_371: i32, in_vslice_dummy_var_372: i32, in_vslice_dummy_var_373: i32, in_vslice_dummy_var_374: i32, in_vslice_dummy_var_375: i32, in_vslice_dummy_var_376: i32, in_vslice_dummy_var_377: i32, in_vslice_dummy_var_378: i32, in_vslice_dummy_var_379: i32, in_vslice_dummy_var_380: i32, in_vslice_dummy_var_381: i32, in_vslice_dummy_var_382: i32, in_vslice_dummy_var_383: i32, in_vslice_dummy_var_384: i32, in_vslice_dummy_var_385: i32, in_vslice_dummy_var_386: i32, in_vslice_dummy_var_387: i32, in_vslice_dummy_var_388: i32, in_vslice_dummy_var_389: i32, in_vslice_dummy_var_390: i32, in_vslice_dummy_var_391: i32, in_vslice_dummy_var_392: i32, in_vslice_dummy_var_393: i32, in_vslice_dummy_var_394: i32, in_vslice_dummy_var_395: i32, in_vslice_dummy_var_396: i32, in_vslice_dummy_var_397: i32, in_vslice_dummy_var_398: i32, in_vslice_dummy_var_399: i32, in_vslice_dummy_var_400: i32, in_vslice_dummy_var_401: i32, in_vslice_dummy_var_402: i32, in_vslice_dummy_var_403: i32, in_vslice_dummy_var_404: i32, in_vslice_dummy_var_405: i32, in_vslice_dummy_var_406: i32, in_vslice_dummy_var_407: i32, in_vslice_dummy_var_408: i32, in_vslice_dummy_var_409: i32, in_vslice_dummy_var_410: i32, in_vslice_dummy_var_411: i32, in_vslice_dummy_var_412: i32, in_vslice_dummy_var_413: i32, in_vslice_dummy_var_414: i32, in_vslice_dummy_var_415: i32, in_vslice_dummy_var_416: i32, in_vslice_dummy_var_417: i32, in_vslice_dummy_var_418: i32, in_vslice_dummy_var_419: i32, in_vslice_dummy_var_420: i32, in_vslice_dummy_var_421: i32, in_vslice_dummy_var_422: i32, in_vslice_dummy_var_423: i32, in_vslice_dummy_var_424: i32, in_vslice_dummy_var_425: i32, in_vslice_dummy_var_426: i32, in_vslice_dummy_var_427: i32, in_vslice_dummy_var_428: i32, in_vslice_dummy_var_429: i32, in_vslice_dummy_var_430: i32, in_vslice_dummy_var_431: i32, in_vslice_dummy_var_432: i32, in_vslice_dummy_var_433: i32, in_vslice_dummy_var_434: i32, in_vslice_dummy_var_435: i32, in_vslice_dummy_var_436: i32, in_vslice_dummy_var_437: i32, in_vslice_dummy_var_438: i32, in_vslice_dummy_var_439: i32, in_vslice_dummy_var_440: i32, in_vslice_dummy_var_441: i32, in_vslice_dummy_var_442: i32, in_vslice_dummy_var_443: i32, in_vslice_dummy_var_444: i32, in_vslice_dummy_var_445: i32, in_vslice_dummy_var_446: i32, in_vslice_dummy_var_447: i32, in_vslice_dummy_var_448: i32, in_vslice_dummy_var_449: i32, in_vslice_dummy_var_450: i32, in_vslice_dummy_var_451: i32, in_vslice_dummy_var_452: i32, in_vslice_dummy_var_453: i32, in_vslice_dummy_var_454: i32, in_vslice_dummy_var_455: i32, in_vslice_dummy_var_456: i32, in_vslice_dummy_var_457: i32, in_vslice_dummy_var_458: i32, in_vslice_dummy_var_459: i32, in_vslice_dummy_var_460: i32, in_vslice_dummy_var_461: i32, in_vslice_dummy_var_462: i32, in_vslice_dummy_var_463: i32, in_vslice_dummy_var_464: i32, in_vslice_dummy_var_465: i32, in_vslice_dummy_var_466: i32, in_vslice_dummy_var_467: i32, in_vslice_dummy_var_468: i32, in_vslice_dummy_var_469: i32, in_vslice_dummy_var_470: i32, in_vslice_dummy_var_471: i32, in_vslice_dummy_var_472: i32) returns (out_$i0: i32, out_$i1: i1, out_$i2: i1, out_$i3: i1, out_$i4: i1, out_$i5: i1, out_$i6: i1, out_$i7: i1, out_$i8: i1, out_$i9: i1, out_$i10: i1, out_$i11: i1, out_$i12: i1, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i1, out_$i24: i32, out_$i25: i1, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1, out_$i30: i32, out_$i31: i1, out_$p32: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$i38: i32, out_$i39: i1, out_$p40: ref, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$i45: i32, out_$i47: i32, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$i52: i32, out_$i53: i1, out_$p54: ref, out_$i55: i32, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i69: i32, out_$i70: i1, out_$p71: ref, out_$p72: ref, out_$p73: ref, out_$i75: i32, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i81: i32, out_$i82: i1, out_$p83: ref, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$i90: i32, out_$i91: i32, out_$i92: i32, out_$i93: i1, out_$i95: i32, out_$i96: i32, out_$i97: i32, out_$i98: i1, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i1, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i134: i32, out_$i136: i32, out_$i137: i1, out_$p138: ref, out_$i139: i32, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$p161: ref, out_$p162: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$p167: ref, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$i176: i32, out_$i177: i1, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i1, out_$i184: i32, out_$i185: i32, out_$i186: i32, out_$i187: i1, out_$i189: i32, out_$i190: i32, out_$i191: i32, out_$i192: i1, out_$i193: i32, out_$i194: i1, out_$i195: i1, out_$i196: i1, out_$i197: i1, out_$i198: i1, out_$i199: i1, out_$i200: i1, out_$i201: i1, out_$i202: i32, out_$i203: i1, out_$p204: ref, out_$i205: i32, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$p210: ref, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i216: i32, out_$i217: i1, out_$p218: ref, out_$i220: i32, out_$i221: i1, out_$p222: ref, out_$i223: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i233: i32, out_$i235: i32, out_$i236: i1, out_$p237: ref, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i243: i32, out_$i244: i1, out_$p245: ref, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$p250: ref, out_$p251: ref, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$p262: ref, out_$p263: ref, out_$i265: i32, out_$i266: i1, out_$i268: i32, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_$i273: i32, out_$i274: i32, out_$i275: i32, out_$i276: i1, out_$i278: i32, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$i282: i32, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i1, out_$i291: i32, out_$i292: i1, out_$p293: ref, out_$i294: i8, out_$i295: i32, out_$i296: i8, out_$i297: i8, out_$i298: i32, out_$i299: i8, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$i305: i32, out_$i306: i1, out_$p307: ref, out_$i309: i32, out_$i310: i1, out_$p311: ref, out_$i312: i32, out_$i314: i32, out_$i315: i1, out_$p316: ref, out_$i317: i32, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$p322: ref, out_$i324: i32, out_$i325: i1, out_$p326: ref, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i332: i8, out_$i333: i32, out_$i334: i8, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$i340: i32, out_$i341: i32, out_$i342: i32, out_$i343: i1, out_$i345: i32, out_$i346: i32, out_$i347: i32, out_$i348: i1, out_$i349: i32, out_$i350: i1, out_$i351: i1, out_$i352: i1, out_$i353: i1, out_$i354: i1, out_$i355: i1, out_$i356: i1, out_$i357: i1, out_$i358: i32, out_$i359: i1, out_$p360: ref, out_$i361: i32, out_$i362: i32, out_$i363: i1, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i379: i32, out_$i381: i32, out_$i382: i1, out_$p383: ref, out_$i384: i32, out_$i386: i32, out_$i387: i1, out_$p388: ref, out_$i389: i32, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$p406: ref, out_$p407: ref, out_$i409: i32, out_$i410: i1, out_$p411: ref, out_$p412: ref, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$p418: ref, out_$p419: ref, out_$i421: i32, out_$i422: i1, out_$i424: i32, out_$i425: i32, out_$i426: i32, out_$i427: i1, out_$i429: i32, out_$i430: i32, out_$i431: i32, out_$i432: i1, out_$i434: i32, out_$i435: i32, out_$i436: i32, out_$i437: i1, out_$i438: i32, out_$i439: i1, out_$i440: i1, out_$i441: i1, out_$i442: i32, out_$i443: i1, out_$p444: ref, out_$p445: ref, out_$i446: i32, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i452: i32, out_$i453: i1, out_$i454: i32, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i1, out_$i460: i1, out_$i461: i32, out_$i462: i1, out_$p463: ref, out_$p464: ref, out_$i465: i32, out_$i466: i32, out_$i467: i1, out_$i468: i32, out_$i469: i32, out_$i470: i32, out_$i471: i1, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i475: i32, out_$i476: i32, out_$i477: i32, out_$i478: i1, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i482: i32, out_$i483: i32, out_$i484: i32, out_$i485: i1, out_$p486: ref, out_$i487: i32, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i494: i32, out_$i495: i32, out_$i496: i1, out_$i497: i32, out_$i498: i1, out_$i499: i32, out_$i500: i32, out_$i501: i1, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i1, out_$i506: i1, out_$i507: i1, out_$i508: i1, out_$i509: i1, out_$i510: i1, out_$i511: i1, out_$i512: i1, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i32, out_$i518: i1, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i523: i32, out_$i524: i1, out_$p525: ref, out_$i527: i32, out_$i528: i1, out_$p529: ref, out_$i531: i32, out_$i532: i1, out_$p533: ref, out_$i534: i32, out_$i536: i32, out_$i537: i1, out_$p538: ref, out_$i539: i32, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i544: i32, out_$i546: i32, out_$i547: i1, out_$p548: ref, out_$i550: i32, out_$i551: i1, out_$p552: ref, out_$i554: i32, out_$i555: i1, out_$p556: ref, out_$i558: i32, out_$i559: i1, out_$p560: ref, out_$p561: ref, out_$p562: ref, out_$i564: i32, out_$i565: i1, out_$p566: ref, out_$p567: ref, out_$p568: ref, out_$i570: i32, out_$i571: i1, out_$p572: ref, out_$p573: ref, out_$p574: ref, out_$i576: i32, out_$i577: i1, out_$i579: i32, out_$i580: i32, out_$i581: i32, out_$i582: i1, out_$i584: i32, out_$i585: i32, out_$i586: i32, out_$i587: i1, out_$i589: i32, out_$i590: i32, out_$i591: i32, out_$i592: i1, out_$i593: i32, out_$i594: i1, out_$i595: i1, out_$i596: i1, out_$i597: i32, out_$i598: i1, out_$i599: i32, out_$i600: i1, out_$i601: i32, out_$i602: i1, out_$i603: i32, out_$i604: i32, out_$i605: i1, out_$i606: i32, out_$i607: i1, out_$i608: i32, out_$i609: i1, out_$i610: i32, out_$i611: i1, out_$i612: i1, out_$i613: i1, out_$i614: i1, out_$i615: i1, out_$i616: i1, out_$i617: i32, out_$i618: i1, out_$p619: ref, out_$i620: i8, out_$i621: i32, out_$i622: i8, out_$i623: i8, out_$i624: i32, out_$i625: i8, out_$i627: i32, out_$i628: i1, out_$p629: ref, out_$p630: ref, out_$i632: i32, out_$i633: i1, out_$p634: ref, out_$p635: ref, out_$i637: i32, out_$i638: i1, out_$p639: ref, out_$i640: i8, out_$i641: i32, out_$i642: i8, out_$p643: ref, out_$i645: i32, out_$i646: i1, out_$i648: i32, out_$i649: i32, out_$i650: i32, out_$i651: i1, out_$i653: i32, out_$i654: i32, out_$i655: i32, out_$i656: i1, out_$i657: i32, out_$i658: i1, out_$i659: i1, out_$i660: i1, out_$i661: i1, out_$i662: i1, out_$i663: i1, out_$i664: i1, out_$i665: i1, out_$i666: i32, out_$i667: i1, out_$p668: ref, out_$i669: i32, out_$i670: i32, out_$i671: i1, out_$i672: i32, out_$i673: i1, out_$p674: ref, out_$i676: i32, out_$i677: i1, out_$p678: ref, out_$i680: i32, out_$i681: i1, out_$p682: ref, out_$i684: i32, out_$i685: i1, out_$p686: ref, out_$i687: i32, out_$i689: i32, out_$i690: i1, out_$p691: ref, out_$i692: i32, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$i697: i32, out_$i699: i32, out_$i700: i1, out_$p701: ref, out_$i703: i32, out_$i704: i1, out_$p705: ref, out_$i707: i32, out_$i708: i1, out_$p709: ref, out_$i711: i32, out_$i712: i1, out_$p713: ref, out_$p714: ref, out_$p715: ref, out_$i717: i32, out_$i718: i1, out_$p719: ref, out_$p720: ref, out_$p721: ref, out_$i723: i32, out_$i724: i1, out_$p725: ref, out_$p726: ref, out_$p727: ref, out_$i729: i32, out_$i730: i1, out_$i732: i32, out_$i733: i32, out_$i734: i32, out_$i735: i1, out_$i737: i32, out_$i738: i32, out_$i739: i32, out_$i740: i1, out_$i742: i32, out_$i743: i32, out_vslice_dummy_var_365: i32, out_vslice_dummy_var_366: i32, out_vslice_dummy_var_367: i32, out_vslice_dummy_var_368: i32, out_vslice_dummy_var_369: i32, out_vslice_dummy_var_370: i32, out_vslice_dummy_var_371: i32, out_vslice_dummy_var_372: i32, out_vslice_dummy_var_373: i32, out_vslice_dummy_var_374: i32, out_vslice_dummy_var_375: i32, out_vslice_dummy_var_376: i32, out_vslice_dummy_var_377: i32, out_vslice_dummy_var_378: i32, out_vslice_dummy_var_379: i32, out_vslice_dummy_var_380: i32, out_vslice_dummy_var_381: i32, out_vslice_dummy_var_382: i32, out_vslice_dummy_var_383: i32, out_vslice_dummy_var_384: i32, out_vslice_dummy_var_385: i32, out_vslice_dummy_var_386: i32, out_vslice_dummy_var_387: i32, out_vslice_dummy_var_388: i32, out_vslice_dummy_var_389: i32, out_vslice_dummy_var_390: i32, out_vslice_dummy_var_391: i32, out_vslice_dummy_var_392: i32, out_vslice_dummy_var_393: i32, out_vslice_dummy_var_394: i32, out_vslice_dummy_var_395: i32, out_vslice_dummy_var_396: i32, out_vslice_dummy_var_397: i32, out_vslice_dummy_var_398: i32, out_vslice_dummy_var_399: i32, out_vslice_dummy_var_400: i32, out_vslice_dummy_var_401: i32, out_vslice_dummy_var_402: i32, out_vslice_dummy_var_403: i32, out_vslice_dummy_var_404: i32, out_vslice_dummy_var_405: i32, out_vslice_dummy_var_406: i32, out_vslice_dummy_var_407: i32, out_vslice_dummy_var_408: i32, out_vslice_dummy_var_409: i32, out_vslice_dummy_var_410: i32, out_vslice_dummy_var_411: i32, out_vslice_dummy_var_412: i32, out_vslice_dummy_var_413: i32, out_vslice_dummy_var_414: i32, out_vslice_dummy_var_415: i32, out_vslice_dummy_var_416: i32, out_vslice_dummy_var_417: i32, out_vslice_dummy_var_418: i32, out_vslice_dummy_var_419: i32, out_vslice_dummy_var_420: i32, out_vslice_dummy_var_421: i32, out_vslice_dummy_var_422: i32, out_vslice_dummy_var_423: i32, out_vslice_dummy_var_424: i32, out_vslice_dummy_var_425: i32, out_vslice_dummy_var_426: i32, out_vslice_dummy_var_427: i32, out_vslice_dummy_var_428: i32, out_vslice_dummy_var_429: i32, out_vslice_dummy_var_430: i32, out_vslice_dummy_var_431: i32, out_vslice_dummy_var_432: i32, out_vslice_dummy_var_433: i32, out_vslice_dummy_var_434: i32, out_vslice_dummy_var_435: i32, out_vslice_dummy_var_436: i32, out_vslice_dummy_var_437: i32, out_vslice_dummy_var_438: i32, out_vslice_dummy_var_439: i32, out_vslice_dummy_var_440: i32, out_vslice_dummy_var_441: i32, out_vslice_dummy_var_442: i32, out_vslice_dummy_var_443: i32, out_vslice_dummy_var_444: i32, out_vslice_dummy_var_445: i32, out_vslice_dummy_var_446: i32, out_vslice_dummy_var_447: i32, out_vslice_dummy_var_448: i32, out_vslice_dummy_var_449: i32, out_vslice_dummy_var_450: i32, out_vslice_dummy_var_451: i32, out_vslice_dummy_var_452: i32, out_vslice_dummy_var_453: i32, out_vslice_dummy_var_454: i32, out_vslice_dummy_var_455: i32, out_vslice_dummy_var_456: i32, out_vslice_dummy_var_457: i32, out_vslice_dummy_var_458: i32, out_vslice_dummy_var_459: i32, out_vslice_dummy_var_460: i32, out_vslice_dummy_var_461: i32, out_vslice_dummy_var_462: i32, out_vslice_dummy_var_463: i32, out_vslice_dummy_var_464: i32, out_vslice_dummy_var_465: i32, out_vslice_dummy_var_466: i32, out_vslice_dummy_var_467: i32, out_vslice_dummy_var_468: i32, out_vslice_dummy_var_469: i32, out_vslice_dummy_var_470: i32, out_vslice_dummy_var_471: i32, out_vslice_dummy_var_472: i32);
  modifies $M.33, $M.46, $M.14, $M.15, $M.0, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $CurrAddr, $M.11, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.41, $M.34, $M.53, $M.35, $M.60, $M.36, $M.37, $M.75, $M.38, $M.29, $M.31, $M.30, assertsPassed, $M.39, $M.86, $M.89, $M.12, $M.90, $M.91, $M.40, $M.93, $M.43, $M.44, $M.42, $M.99, $M.87, $M.107;


